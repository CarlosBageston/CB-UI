import * as wl from "react";
import W, { createContext as _i, useRef as H, useLayoutEffect as kt, useEffect as ve, useId as Sl, useContext as ae, useInsertionEffect as Lh, useMemo as X, useCallback as ne, Children as jC, isValidElement as $C, useState as V, Fragment as Oh, createElement as Vh, forwardRef as nr, Component as Gh, useImperativeHandle as yl, memo as ot, Suspense as KC } from "react";
import { IonCard as Hh, IonCardHeader as YC, IonCardTitle as qC, IonCardSubtitle as XC, IonCardContent as Bh, IonFooter as Nh, IonText as ZC, IonModal as Wh, IonHeader as QC, IonToolbar as JC, IonButtons as ev, IonButton as Pn, IonTitle as tv, IonContent as iv, IonInput as zh, IonGrid as sv, IonNote as ao, IonSpinner as Ao, IonSelect as _h, IonSelectOption as fa, IonTextarea as ov, IonToggle as nv, IonRadioGroup as rv, IonRadio as av, IonCheckbox as lv, IonFab as Uh, IonFabButton as ma, IonSegment as cv, IonSegmentButton as dv, IonLabel as En, IonAccordionGroup as uv, IonAccordion as hv, IonItem as Ca, IonDatetime as Yc, IonSearchbar as gv, IonList as pv } from "@ionic/react";
import fv, { createPortal as jh } from "react-dom";
function bl(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
var zo = { exports: {} }, Bs = {};
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var qc;
function mv() {
  if (qc) return Bs;
  qc = 1;
  var e = Symbol.for("react.transitional.element"), t = Symbol.for("react.fragment");
  function i(s, o, n) {
    var r = null;
    if (n !== void 0 && (r = "" + n), o.key !== void 0 && (r = "" + o.key), "key" in o) {
      n = {};
      for (var a in o)
        a !== "key" && (n[a] = o[a]);
    } else n = o;
    return o = n.ref, {
      $$typeof: e,
      type: s,
      key: r,
      ref: o !== void 0 ? o : null,
      props: n
    };
  }
  return Bs.Fragment = t, Bs.jsx = i, Bs.jsxs = i, Bs;
}
var Ns = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Xc;
function Cv() {
  return Xc || (Xc = 1, process.env.NODE_ENV !== "production" && (function() {
    function e(b) {
      if (b == null) return null;
      if (typeof b == "function")
        return b.$$typeof === P ? null : b.displayName || b.name || null;
      if (typeof b == "string") return b;
      switch (b) {
        case f:
          return "Fragment";
        case C:
          return "Profiler";
        case m:
          return "StrictMode";
        case S:
          return "Suspense";
        case x:
          return "SuspenseList";
        case k:
          return "Activity";
      }
      if (typeof b == "object")
        switch (typeof b.tag == "number" && console.error(
          "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
        ), b.$$typeof) {
          case p:
            return "Portal";
          case w:
            return (b.displayName || "Context") + ".Provider";
          case v:
            return (b._context.displayName || "Context") + ".Consumer";
          case y:
            var L = b.render;
            return b = b.displayName, b || (b = L.displayName || L.name || "", b = b !== "" ? "ForwardRef(" + b + ")" : "ForwardRef"), b;
          case D:
            return L = b.displayName || null, L !== null ? L : e(b.type) || "Memo";
          case M:
            L = b._payload, b = b._init;
            try {
              return e(b(L));
            } catch {
            }
        }
      return null;
    }
    function t(b) {
      return "" + b;
    }
    function i(b) {
      try {
        t(b);
        var L = !1;
      } catch {
        L = !0;
      }
      if (L) {
        L = console;
        var U = L.error, K = typeof Symbol == "function" && Symbol.toStringTag && b[Symbol.toStringTag] || b.constructor.name || "Object";
        return U.call(
          L,
          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
          K
        ), t(b);
      }
    }
    function s(b) {
      if (b === f) return "<>";
      if (typeof b == "object" && b !== null && b.$$typeof === M)
        return "<...>";
      try {
        var L = e(b);
        return L ? "<" + L + ">" : "<...>";
      } catch {
        return "<...>";
      }
    }
    function o() {
      var b = F.A;
      return b === null ? null : b.getOwner();
    }
    function n() {
      return Error("react-stack-top-frame");
    }
    function r(b) {
      if (N.call(b, "key")) {
        var L = Object.getOwnPropertyDescriptor(b, "key").get;
        if (L && L.isReactWarning) return !1;
      }
      return b.key !== void 0;
    }
    function a(b, L) {
      function U() {
        A || (A = !0, console.error(
          "%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)",
          L
        ));
      }
      U.isReactWarning = !0, Object.defineProperty(b, "key", {
        get: U,
        configurable: !0
      });
    }
    function l() {
      var b = e(this.type);
      return O[b] || (O[b] = !0, console.error(
        "Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."
      )), b = this.props.ref, b !== void 0 ? b : null;
    }
    function c(b, L, U, K, Q, ie, Pe, Ie) {
      return U = ie.ref, b = {
        $$typeof: g,
        type: b,
        key: L,
        props: ie,
        _owner: Q
      }, (U !== void 0 ? U : null) !== null ? Object.defineProperty(b, "ref", {
        enumerable: !1,
        get: l
      }) : Object.defineProperty(b, "ref", { enumerable: !1, value: null }), b._store = {}, Object.defineProperty(b._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: 0
      }), Object.defineProperty(b, "_debugInfo", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: null
      }), Object.defineProperty(b, "_debugStack", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: Pe
      }), Object.defineProperty(b, "_debugTask", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: Ie
      }), Object.freeze && (Object.freeze(b.props), Object.freeze(b)), b;
    }
    function d(b, L, U, K, Q, ie, Pe, Ie) {
      var le = L.children;
      if (le !== void 0)
        if (K)
          if (j(le)) {
            for (K = 0; K < le.length; K++)
              u(le[K]);
            Object.freeze && Object.freeze(le);
          } else
            console.error(
              "React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead."
            );
        else u(le);
      if (N.call(L, "key")) {
        le = e(b);
        var se = Object.keys(L).filter(function(ce) {
          return ce !== "key";
        });
        K = 0 < se.length ? "{key: someKey, " + se.join(": ..., ") + ": ...}" : "{key: someKey}", _[le + K] || (se = 0 < se.length ? "{" + se.join(": ..., ") + ": ...}" : "{}", console.error(
          `A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`,
          K,
          le,
          se,
          le
        ), _[le + K] = !0);
      }
      if (le = null, U !== void 0 && (i(U), le = "" + U), r(L) && (i(L.key), le = "" + L.key), "key" in L) {
        U = {};
        for (var ge in L)
          ge !== "key" && (U[ge] = L[ge]);
      } else U = L;
      return le && a(
        U,
        typeof b == "function" ? b.displayName || b.name || "Unknown" : b
      ), c(
        b,
        le,
        ie,
        Q,
        o(),
        U,
        Pe,
        Ie
      );
    }
    function u(b) {
      typeof b == "object" && b !== null && b.$$typeof === g && b._store && (b._store.validated = 1);
    }
    var h = W, g = Symbol.for("react.transitional.element"), p = Symbol.for("react.portal"), f = Symbol.for("react.fragment"), m = Symbol.for("react.strict_mode"), C = Symbol.for("react.profiler"), v = Symbol.for("react.consumer"), w = Symbol.for("react.context"), y = Symbol.for("react.forward_ref"), S = Symbol.for("react.suspense"), x = Symbol.for("react.suspense_list"), D = Symbol.for("react.memo"), M = Symbol.for("react.lazy"), k = Symbol.for("react.activity"), P = Symbol.for("react.client.reference"), F = h.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, N = Object.prototype.hasOwnProperty, j = Array.isArray, z = console.createTask ? console.createTask : function() {
      return null;
    };
    h = {
      react_stack_bottom_frame: function(b) {
        return b();
      }
    };
    var A, O = {}, G = h.react_stack_bottom_frame.bind(
      h,
      n
    )(), I = z(s(n)), _ = {};
    Ns.Fragment = f, Ns.jsx = function(b, L, U, K, Q) {
      var ie = 1e4 > F.recentlyCreatedOwnerStacks++;
      return d(
        b,
        L,
        U,
        !1,
        K,
        Q,
        ie ? Error("react-stack-top-frame") : G,
        ie ? z(s(b)) : I
      );
    }, Ns.jsxs = function(b, L, U, K, Q) {
      var ie = 1e4 > F.recentlyCreatedOwnerStacks++;
      return d(
        b,
        L,
        U,
        !0,
        K,
        Q,
        ie ? Error("react-stack-top-frame") : G,
        ie ? z(s(b)) : I
      );
    };
  })()), Ns;
}
var Zc;
function vv() {
  return Zc || (Zc = 1, process.env.NODE_ENV === "production" ? zo.exports = mv() : zo.exports = Cv()), zo.exports;
}
var R = vv();
function $h(e) {
  var t, i, s = "";
  if (typeof e == "string" || typeof e == "number") s += e;
  else if (typeof e == "object") if (Array.isArray(e)) {
    var o = e.length;
    for (t = 0; t < o; t++) e[t] && (i = $h(e[t])) && (s && (s += " "), s += i);
  } else for (i in e) e[i] && (s && (s += " "), s += i);
  return s;
}
function ri() {
  for (var e, t, i = 0, s = "", o = arguments.length; i < o; i++) (e = arguments[i]) && (t = $h(e)) && (s && (s += " "), s += t);
  return s;
}
const Rl = _i({});
function xl(e) {
  const t = H(null);
  return t.current === null && (t.current = e()), t.current;
}
const Fl = typeof window < "u", Kh = Fl ? kt : ve, rr = /* @__PURE__ */ _i(null);
function Pl(e, t) {
  e.indexOf(t) === -1 && e.push(t);
}
function El(e, t) {
  const i = e.indexOf(t);
  i > -1 && e.splice(i, 1);
}
const Kt = (e, t, i) => i > t ? t : i < e ? e : i;
function va(e, t) {
  return t ? `${e}. For more information and steps for solving, visit https://motion.dev/troubleshooting/${t}` : e;
}
let Ms = () => {
}, Yt = () => {
};
process.env.NODE_ENV !== "production" && (Ms = (e, t, i) => {
  !e && typeof console < "u" && console.warn(va(t, i));
}, Yt = (e, t, i) => {
  if (!e)
    throw new Error(va(t, i));
});
const qt = {}, Yh = (e) => /^-?(?:\d+(?:\.\d+)?|\.\d+)$/u.test(e);
function qh(e) {
  return typeof e == "object" && e !== null;
}
const Xh = (e) => /^0[^.\s]+$/u.test(e);
// @__NO_SIDE_EFFECTS__
function Dl(e) {
  let t;
  return () => (t === void 0 && (t = e()), t);
}
const wt = /* @__NO_SIDE_EFFECTS__ */ (e) => e, wv = (e, t) => (i) => t(e(i)), Io = (...e) => e.reduce(wv), lo = /* @__NO_SIDE_EFFECTS__ */ (e, t, i) => {
  const s = t - e;
  return s === 0 ? 1 : (i - e) / s;
};
class Tl {
  constructor() {
    this.subscriptions = [];
  }
  add(t) {
    return Pl(this.subscriptions, t), () => El(this.subscriptions, t);
  }
  notify(t, i, s) {
    const o = this.subscriptions.length;
    if (o)
      if (o === 1)
        this.subscriptions[0](t, i, s);
      else
        for (let n = 0; n < o; n++) {
          const r = this.subscriptions[n];
          r && r(t, i, s);
        }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
}
const xt = /* @__NO_SIDE_EFFECTS__ */ (e) => e * 1e3, Lt = /* @__NO_SIDE_EFFECTS__ */ (e) => e / 1e3;
function Zh(e, t) {
  return t ? e * (1e3 / t) : 0;
}
const Qc = /* @__PURE__ */ new Set();
function Ml(e, t, i) {
  e || Qc.has(t) || (console.warn(va(t, i)), Qc.add(t));
}
const Qh = (e, t, i) => (((1 - 3 * i + 3 * t) * e + (3 * i - 6 * t)) * e + 3 * t) * e, Sv = 1e-7, yv = 12;
function bv(e, t, i, s, o) {
  let n, r, a = 0;
  do
    r = t + (i - t) / 2, n = Qh(r, s, o) - e, n > 0 ? i = r : t = r;
  while (Math.abs(n) > Sv && ++a < yv);
  return r;
}
function ko(e, t, i, s) {
  if (e === t && i === s)
    return wt;
  const o = (n) => bv(n, 0, 1, e, i);
  return (n) => n === 0 || n === 1 ? n : Qh(o(n), t, s);
}
const Jh = (e) => (t) => t <= 0.5 ? e(2 * t) / 2 : (2 - e(2 * (1 - t))) / 2, eg = (e) => (t) => 1 - e(1 - t), tg = /* @__PURE__ */ ko(0.33, 1.53, 0.69, 0.99), Al = /* @__PURE__ */ eg(tg), ig = /* @__PURE__ */ Jh(Al), sg = (e) => (e *= 2) < 1 ? 0.5 * Al(e) : 0.5 * (2 - Math.pow(2, -10 * (e - 1))), Il = (e) => 1 - Math.sin(Math.acos(e)), og = eg(Il), ng = Jh(Il), Rv = /* @__PURE__ */ ko(0.42, 0, 1, 1), xv = /* @__PURE__ */ ko(0, 0, 0.58, 1), rg = /* @__PURE__ */ ko(0.42, 0, 0.58, 1), Fv = (e) => Array.isArray(e) && typeof e[0] != "number", ag = (e) => Array.isArray(e) && typeof e[0] == "number", Jc = {
  linear: wt,
  easeIn: Rv,
  easeInOut: rg,
  easeOut: xv,
  circIn: Il,
  circInOut: ng,
  circOut: og,
  backIn: Al,
  backInOut: ig,
  backOut: tg,
  anticipate: sg
}, Pv = (e) => typeof e == "string", ed = (e) => {
  if (ag(e)) {
    Yt(e.length === 4, "Cubic bezier arrays must contain four numerical values.", "cubic-bezier-length");
    const [t, i, s, o] = e;
    return ko(t, i, s, o);
  } else if (Pv(e))
    return Yt(Jc[e] !== void 0, `Invalid easing type '${e}'`, "invalid-easing-type"), Jc[e];
  return e;
}, _o = [
  "setup",
  // Compute
  "read",
  // Read
  "resolveKeyframes",
  // Write/Read/Write/Read
  "preUpdate",
  // Compute
  "update",
  // Compute
  "preRender",
  // Compute
  "render",
  // Write
  "postRender"
  // Compute
];
function Ev(e, t) {
  let i = /* @__PURE__ */ new Set(), s = /* @__PURE__ */ new Set(), o = !1, n = !1;
  const r = /* @__PURE__ */ new WeakSet();
  let a = {
    delta: 0,
    timestamp: 0,
    isProcessing: !1
  };
  function l(d) {
    r.has(d) && (c.schedule(d), e()), d(a);
  }
  const c = {
    /**
     * Schedule a process to run on the next frame.
     */
    schedule: (d, u = !1, h = !1) => {
      const p = h && o ? i : s;
      return u && r.add(d), p.has(d) || p.add(d), d;
    },
    /**
     * Cancel the provided callback from running on the next frame.
     */
    cancel: (d) => {
      s.delete(d), r.delete(d);
    },
    /**
     * Execute all schedule callbacks.
     */
    process: (d) => {
      if (a = d, o) {
        n = !0;
        return;
      }
      o = !0, [i, s] = [s, i], i.forEach(l), i.clear(), o = !1, n && (n = !1, c.process(d));
    }
  };
  return c;
}
const Dv = 40;
function lg(e, t) {
  let i = !1, s = !0;
  const o = {
    delta: 0,
    timestamp: 0,
    isProcessing: !1
  }, n = () => i = !0, r = _o.reduce((w, y) => (w[y] = Ev(n), w), {}), { setup: a, read: l, resolveKeyframes: c, preUpdate: d, update: u, preRender: h, render: g, postRender: p } = r, f = () => {
    const w = qt.useManualTiming ? o.timestamp : performance.now();
    i = !1, qt.useManualTiming || (o.delta = s ? 1e3 / 60 : Math.max(Math.min(w - o.timestamp, Dv), 1)), o.timestamp = w, o.isProcessing = !0, a.process(o), l.process(o), c.process(o), d.process(o), u.process(o), h.process(o), g.process(o), p.process(o), o.isProcessing = !1, i && t && (s = !1, e(f));
  }, m = () => {
    i = !0, s = !0, o.isProcessing || e(f);
  };
  return { schedule: _o.reduce((w, y) => {
    const S = r[y];
    return w[y] = (x, D = !1, M = !1) => (i || m(), S.schedule(x, D, M)), w;
  }, {}), cancel: (w) => {
    for (let y = 0; y < _o.length; y++)
      r[_o[y]].cancel(w);
  }, state: o, steps: r };
}
const { schedule: Se, cancel: ci, state: Ne, steps: br } = /* @__PURE__ */ lg(typeof requestAnimationFrame < "u" ? requestAnimationFrame : wt, !0);
let rn;
function Tv() {
  rn = void 0;
}
const it = {
  now: () => (rn === void 0 && it.set(Ne.isProcessing || qt.useManualTiming ? Ne.timestamp : performance.now()), rn),
  set: (e) => {
    rn = e, queueMicrotask(Tv);
  }
}, cg = (e) => (t) => typeof t == "string" && t.startsWith(e), kl = /* @__PURE__ */ cg("--"), Mv = /* @__PURE__ */ cg("var(--"), Ll = (e) => Mv(e) ? Av.test(e.split("/*")[0].trim()) : !1, Av = /var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu, As = {
  test: (e) => typeof e == "number",
  parse: parseFloat,
  transform: (e) => e
}, co = {
  ...As,
  transform: (e) => Kt(0, 1, e)
}, Uo = {
  ...As,
  default: 1
}, Xs = (e) => Math.round(e * 1e5) / 1e5, Ol = /-?(?:\d+(?:\.\d+)?|\.\d+)/gu;
function Iv(e) {
  return e == null;
}
const kv = /^(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))$/iu, Vl = (e, t) => (i) => !!(typeof i == "string" && kv.test(i) && i.startsWith(e) || t && !Iv(i) && Object.prototype.hasOwnProperty.call(i, t)), dg = (e, t, i) => (s) => {
  if (typeof s != "string")
    return s;
  const [o, n, r, a] = s.match(Ol);
  return {
    [e]: parseFloat(o),
    [t]: parseFloat(n),
    [i]: parseFloat(r),
    alpha: a !== void 0 ? parseFloat(a) : 1
  };
}, Lv = (e) => Kt(0, 255, e), Rr = {
  ...As,
  transform: (e) => Math.round(Lv(e))
}, bi = {
  test: /* @__PURE__ */ Vl("rgb", "red"),
  parse: /* @__PURE__ */ dg("red", "green", "blue"),
  transform: ({ red: e, green: t, blue: i, alpha: s = 1 }) => "rgba(" + Rr.transform(e) + ", " + Rr.transform(t) + ", " + Rr.transform(i) + ", " + Xs(co.transform(s)) + ")"
};
function Ov(e) {
  let t = "", i = "", s = "", o = "";
  return e.length > 5 ? (t = e.substring(1, 3), i = e.substring(3, 5), s = e.substring(5, 7), o = e.substring(7, 9)) : (t = e.substring(1, 2), i = e.substring(2, 3), s = e.substring(3, 4), o = e.substring(4, 5), t += t, i += i, s += s, o += o), {
    red: parseInt(t, 16),
    green: parseInt(i, 16),
    blue: parseInt(s, 16),
    alpha: o ? parseInt(o, 16) / 255 : 1
  };
}
const wa = {
  test: /* @__PURE__ */ Vl("#"),
  parse: Ov,
  transform: bi.transform
}, Lo = /* @__NO_SIDE_EFFECTS__ */ (e) => ({
  test: (t) => typeof t == "string" && t.endsWith(e) && t.split(" ").length === 1,
  parse: parseFloat,
  transform: (t) => `${t}${e}`
}), si = /* @__PURE__ */ Lo("deg"), Ot = /* @__PURE__ */ Lo("%"), te = /* @__PURE__ */ Lo("px"), Vv = /* @__PURE__ */ Lo("vh"), Gv = /* @__PURE__ */ Lo("vw"), td = {
  ...Ot,
  parse: (e) => Ot.parse(e) / 100,
  transform: (e) => Ot.transform(e * 100)
}, is = {
  test: /* @__PURE__ */ Vl("hsl", "hue"),
  parse: /* @__PURE__ */ dg("hue", "saturation", "lightness"),
  transform: ({ hue: e, saturation: t, lightness: i, alpha: s = 1 }) => "hsla(" + Math.round(e) + ", " + Ot.transform(Xs(t)) + ", " + Ot.transform(Xs(i)) + ", " + Xs(co.transform(s)) + ")"
}, Le = {
  test: (e) => bi.test(e) || wa.test(e) || is.test(e),
  parse: (e) => bi.test(e) ? bi.parse(e) : is.test(e) ? is.parse(e) : wa.parse(e),
  transform: (e) => typeof e == "string" ? e : e.hasOwnProperty("red") ? bi.transform(e) : is.transform(e),
  getAnimatableNone: (e) => {
    const t = Le.parse(e);
    return t.alpha = 0, Le.transform(t);
  }
}, Hv = /(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))/giu;
function Bv(e) {
  return isNaN(e) && typeof e == "string" && (e.match(Ol)?.length || 0) + (e.match(Hv)?.length || 0) > 0;
}
const ug = "number", hg = "color", Nv = "var", Wv = "var(", id = "${}", zv = /var\s*\(\s*--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)|#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\)|-?(?:\d+(?:\.\d+)?|\.\d+)/giu;
function uo(e) {
  const t = e.toString(), i = [], s = {
    color: [],
    number: [],
    var: []
  }, o = [];
  let n = 0;
  const a = t.replace(zv, (l) => (Le.test(l) ? (s.color.push(n), o.push(hg), i.push(Le.parse(l))) : l.startsWith(Wv) ? (s.var.push(n), o.push(Nv), i.push(l)) : (s.number.push(n), o.push(ug), i.push(parseFloat(l))), ++n, id)).split(id);
  return { values: i, split: a, indexes: s, types: o };
}
function gg(e) {
  return uo(e).values;
}
function pg(e) {
  const { split: t, types: i } = uo(e), s = t.length;
  return (o) => {
    let n = "";
    for (let r = 0; r < s; r++)
      if (n += t[r], o[r] !== void 0) {
        const a = i[r];
        a === ug ? n += Xs(o[r]) : a === hg ? n += Le.transform(o[r]) : n += o[r];
      }
    return n;
  };
}
const _v = (e) => typeof e == "number" ? 0 : Le.test(e) ? Le.getAnimatableNone(e) : e;
function Uv(e) {
  const t = gg(e);
  return pg(e)(t.map(_v));
}
const di = {
  test: Bv,
  parse: gg,
  createTransformer: pg,
  getAnimatableNone: Uv
};
function xr(e, t, i) {
  return i < 0 && (i += 1), i > 1 && (i -= 1), i < 1 / 6 ? e + (t - e) * 6 * i : i < 1 / 2 ? t : i < 2 / 3 ? e + (t - e) * (2 / 3 - i) * 6 : e;
}
function jv({ hue: e, saturation: t, lightness: i, alpha: s }) {
  e /= 360, t /= 100, i /= 100;
  let o = 0, n = 0, r = 0;
  if (!t)
    o = n = r = i;
  else {
    const a = i < 0.5 ? i * (1 + t) : i + t - i * t, l = 2 * i - a;
    o = xr(l, a, e + 1 / 3), n = xr(l, a, e), r = xr(l, a, e - 1 / 3);
  }
  return {
    red: Math.round(o * 255),
    green: Math.round(n * 255),
    blue: Math.round(r * 255),
    alpha: s
  };
}
function Dn(e, t) {
  return (i) => i > 0 ? t : e;
}
const xe = (e, t, i) => e + (t - e) * i, Fr = (e, t, i) => {
  const s = e * e, o = i * (t * t - s) + s;
  return o < 0 ? 0 : Math.sqrt(o);
}, $v = [wa, bi, is], Kv = (e) => $v.find((t) => t.test(e));
function sd(e) {
  const t = Kv(e);
  if (Ms(!!t, `'${e}' is not an animatable color. Use the equivalent color code instead.`, "color-not-animatable"), !t)
    return !1;
  let i = t.parse(e);
  return t === is && (i = jv(i)), i;
}
const od = (e, t) => {
  const i = sd(e), s = sd(t);
  if (!i || !s)
    return Dn(e, t);
  const o = { ...i };
  return (n) => (o.red = Fr(i.red, s.red, n), o.green = Fr(i.green, s.green, n), o.blue = Fr(i.blue, s.blue, n), o.alpha = xe(i.alpha, s.alpha, n), bi.transform(o));
}, Sa = /* @__PURE__ */ new Set(["none", "hidden"]);
function Yv(e, t) {
  return Sa.has(e) ? (i) => i <= 0 ? e : t : (i) => i >= 1 ? t : e;
}
function qv(e, t) {
  return (i) => xe(e, t, i);
}
function Gl(e) {
  return typeof e == "number" ? qv : typeof e == "string" ? Ll(e) ? Dn : Le.test(e) ? od : Qv : Array.isArray(e) ? fg : typeof e == "object" ? Le.test(e) ? od : Xv : Dn;
}
function fg(e, t) {
  const i = [...e], s = i.length, o = e.map((n, r) => Gl(n)(n, t[r]));
  return (n) => {
    for (let r = 0; r < s; r++)
      i[r] = o[r](n);
    return i;
  };
}
function Xv(e, t) {
  const i = { ...e, ...t }, s = {};
  for (const o in i)
    e[o] !== void 0 && t[o] !== void 0 && (s[o] = Gl(e[o])(e[o], t[o]));
  return (o) => {
    for (const n in s)
      i[n] = s[n](o);
    return i;
  };
}
function Zv(e, t) {
  const i = [], s = { color: 0, var: 0, number: 0 };
  for (let o = 0; o < t.values.length; o++) {
    const n = t.types[o], r = e.indexes[n][s[n]], a = e.values[r] ?? 0;
    i[o] = a, s[n]++;
  }
  return i;
}
const Qv = (e, t) => {
  const i = di.createTransformer(t), s = uo(e), o = uo(t);
  return s.indexes.var.length === o.indexes.var.length && s.indexes.color.length === o.indexes.color.length && s.indexes.number.length >= o.indexes.number.length ? Sa.has(e) && !o.values.length || Sa.has(t) && !s.values.length ? Yv(e, t) : Io(fg(Zv(s, o), o.values), i) : (Ms(!0, `Complex values '${e}' and '${t}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`, "complex-values-different"), Dn(e, t));
};
function mg(e, t, i) {
  return typeof e == "number" && typeof t == "number" && typeof i == "number" ? xe(e, t, i) : Gl(e)(e, t);
}
const Jv = (e) => {
  const t = ({ timestamp: i }) => e(i);
  return {
    start: (i = !0) => Se.update(t, i),
    stop: () => ci(t),
    /**
     * If we're processing this frame we can use the
     * framelocked timestamp to keep things in sync.
     */
    now: () => Ne.isProcessing ? Ne.timestamp : it.now()
  };
}, Cg = (e, t, i = 10) => {
  let s = "";
  const o = Math.max(Math.round(t / i), 2);
  for (let n = 0; n < o; n++)
    s += Math.round(e(n / (o - 1)) * 1e4) / 1e4 + ", ";
  return `linear(${s.substring(0, s.length - 2)})`;
}, Tn = 2e4;
function Hl(e) {
  let t = 0;
  const i = 50;
  let s = e.next(t);
  for (; !s.done && t < Tn; )
    t += i, s = e.next(t);
  return t >= Tn ? 1 / 0 : t;
}
function ew(e, t = 100, i) {
  const s = i({ ...e, keyframes: [0, t] }), o = Math.min(Hl(s), Tn);
  return {
    type: "keyframes",
    ease: (n) => s.next(o * n).value / t,
    duration: /* @__PURE__ */ Lt(o)
  };
}
const tw = 5;
function vg(e, t, i) {
  const s = Math.max(t - tw, 0);
  return Zh(i - e(s), t - s);
}
const be = {
  // Default spring physics
  stiffness: 100,
  damping: 10,
  mass: 1,
  velocity: 0,
  // Default duration/bounce-based options
  duration: 800,
  // in ms
  bounce: 0.3,
  visualDuration: 0.3,
  // in seconds
  // Rest thresholds
  restSpeed: {
    granular: 0.01,
    default: 2
  },
  restDelta: {
    granular: 5e-3,
    default: 0.5
  },
  // Limits
  minDuration: 0.01,
  // in seconds
  maxDuration: 10,
  // in seconds
  minDamping: 0.05,
  maxDamping: 1
}, Pr = 1e-3;
function iw({ duration: e = be.duration, bounce: t = be.bounce, velocity: i = be.velocity, mass: s = be.mass }) {
  let o, n;
  Ms(e <= /* @__PURE__ */ xt(be.maxDuration), "Spring duration must be 10 seconds or less", "spring-duration-limit");
  let r = 1 - t;
  r = Kt(be.minDamping, be.maxDamping, r), e = Kt(be.minDuration, be.maxDuration, /* @__PURE__ */ Lt(e)), r < 1 ? (o = (c) => {
    const d = c * r, u = d * e, h = d - i, g = ya(c, r), p = Math.exp(-u);
    return Pr - h / g * p;
  }, n = (c) => {
    const u = c * r * e, h = u * i + i, g = Math.pow(r, 2) * Math.pow(c, 2) * e, p = Math.exp(-u), f = ya(Math.pow(c, 2), r);
    return (-o(c) + Pr > 0 ? -1 : 1) * ((h - g) * p) / f;
  }) : (o = (c) => {
    const d = Math.exp(-c * e), u = (c - i) * e + 1;
    return -Pr + d * u;
  }, n = (c) => {
    const d = Math.exp(-c * e), u = (i - c) * (e * e);
    return d * u;
  });
  const a = 5 / e, l = ow(o, n, a);
  if (e = /* @__PURE__ */ xt(e), isNaN(l))
    return {
      stiffness: be.stiffness,
      damping: be.damping,
      duration: e
    };
  {
    const c = Math.pow(l, 2) * s;
    return {
      stiffness: c,
      damping: r * 2 * Math.sqrt(s * c),
      duration: e
    };
  }
}
const sw = 12;
function ow(e, t, i) {
  let s = i;
  for (let o = 1; o < sw; o++)
    s = s - e(s) / t(s);
  return s;
}
function ya(e, t) {
  return e * Math.sqrt(1 - t * t);
}
const nw = ["duration", "bounce"], rw = ["stiffness", "damping", "mass"];
function nd(e, t) {
  return t.some((i) => e[i] !== void 0);
}
function aw(e) {
  let t = {
    velocity: be.velocity,
    stiffness: be.stiffness,
    damping: be.damping,
    mass: be.mass,
    isResolvedFromDuration: !1,
    ...e
  };
  if (!nd(e, rw) && nd(e, nw))
    if (e.visualDuration) {
      const i = e.visualDuration, s = 2 * Math.PI / (i * 1.2), o = s * s, n = 2 * Kt(0.05, 1, 1 - (e.bounce || 0)) * Math.sqrt(o);
      t = {
        ...t,
        mass: be.mass,
        stiffness: o,
        damping: n
      };
    } else {
      const i = iw(e);
      t = {
        ...t,
        ...i,
        mass: be.mass
      }, t.isResolvedFromDuration = !0;
    }
  return t;
}
function Mn(e = be.visualDuration, t = be.bounce) {
  const i = typeof e != "object" ? {
    visualDuration: e,
    keyframes: [0, 1],
    bounce: t
  } : e;
  let { restSpeed: s, restDelta: o } = i;
  const n = i.keyframes[0], r = i.keyframes[i.keyframes.length - 1], a = { done: !1, value: n }, { stiffness: l, damping: c, mass: d, duration: u, velocity: h, isResolvedFromDuration: g } = aw({
    ...i,
    velocity: -/* @__PURE__ */ Lt(i.velocity || 0)
  }), p = h || 0, f = c / (2 * Math.sqrt(l * d)), m = r - n, C = /* @__PURE__ */ Lt(Math.sqrt(l / d)), v = Math.abs(m) < 5;
  s || (s = v ? be.restSpeed.granular : be.restSpeed.default), o || (o = v ? be.restDelta.granular : be.restDelta.default);
  let w;
  if (f < 1) {
    const S = ya(C, f);
    w = (x) => {
      const D = Math.exp(-f * C * x);
      return r - D * ((p + f * C * m) / S * Math.sin(S * x) + m * Math.cos(S * x));
    };
  } else if (f === 1)
    w = (S) => r - Math.exp(-C * S) * (m + (p + C * m) * S);
  else {
    const S = C * Math.sqrt(f * f - 1);
    w = (x) => {
      const D = Math.exp(-f * C * x), M = Math.min(S * x, 300);
      return r - D * ((p + f * C * m) * Math.sinh(M) + S * m * Math.cosh(M)) / S;
    };
  }
  const y = {
    calculatedDuration: g && u || null,
    next: (S) => {
      const x = w(S);
      if (g)
        a.done = S >= u;
      else {
        let D = S === 0 ? p : 0;
        f < 1 && (D = S === 0 ? /* @__PURE__ */ xt(p) : vg(w, S, x));
        const M = Math.abs(D) <= s, k = Math.abs(r - x) <= o;
        a.done = M && k;
      }
      return a.value = a.done ? r : x, a;
    },
    toString: () => {
      const S = Math.min(Hl(y), Tn), x = Cg((D) => y.next(S * D).value, S, 30);
      return S + "ms " + x;
    },
    toTransition: () => {
    }
  };
  return y;
}
Mn.applyToOptions = (e) => {
  const t = ew(e, 100, Mn);
  return e.ease = t.ease, e.duration = /* @__PURE__ */ xt(t.duration), e.type = "keyframes", e;
};
function ba({ keyframes: e, velocity: t = 0, power: i = 0.8, timeConstant: s = 325, bounceDamping: o = 10, bounceStiffness: n = 500, modifyTarget: r, min: a, max: l, restDelta: c = 0.5, restSpeed: d }) {
  const u = e[0], h = {
    done: !1,
    value: u
  }, g = (M) => a !== void 0 && M < a || l !== void 0 && M > l, p = (M) => a === void 0 ? l : l === void 0 || Math.abs(a - M) < Math.abs(l - M) ? a : l;
  let f = i * t;
  const m = u + f, C = r === void 0 ? m : r(m);
  C !== m && (f = C - u);
  const v = (M) => -f * Math.exp(-M / s), w = (M) => C + v(M), y = (M) => {
    const k = v(M), P = w(M);
    h.done = Math.abs(k) <= c, h.value = h.done ? C : P;
  };
  let S, x;
  const D = (M) => {
    g(h.value) && (S = M, x = Mn({
      keyframes: [h.value, p(h.value)],
      velocity: vg(w, M, h.value),
      // TODO: This should be passing * 1000
      damping: o,
      stiffness: n,
      restDelta: c,
      restSpeed: d
    }));
  };
  return D(0), {
    calculatedDuration: null,
    next: (M) => {
      let k = !1;
      return !x && S === void 0 && (k = !0, y(M), D(M)), S !== void 0 && M >= S ? x.next(M - S) : (!k && y(M), h);
    }
  };
}
function lw(e, t, i) {
  const s = [], o = i || qt.mix || mg, n = e.length - 1;
  for (let r = 0; r < n; r++) {
    let a = o(e[r], e[r + 1]);
    if (t) {
      const l = Array.isArray(t) ? t[r] || wt : t;
      a = Io(l, a);
    }
    s.push(a);
  }
  return s;
}
function cw(e, t, { clamp: i = !0, ease: s, mixer: o } = {}) {
  const n = e.length;
  if (Yt(n === t.length, "Both input and output ranges must be the same length", "range-length"), n === 1)
    return () => t[0];
  if (n === 2 && t[0] === t[1])
    return () => t[1];
  const r = e[0] === e[1];
  e[0] > e[n - 1] && (e = [...e].reverse(), t = [...t].reverse());
  const a = lw(t, s, o), l = a.length, c = (d) => {
    if (r && d < e[0])
      return t[0];
    let u = 0;
    if (l > 1)
      for (; u < e.length - 2 && !(d < e[u + 1]); u++)
        ;
    const h = /* @__PURE__ */ lo(e[u], e[u + 1], d);
    return a[u](h);
  };
  return i ? (d) => c(Kt(e[0], e[n - 1], d)) : c;
}
function dw(e, t) {
  const i = e[e.length - 1];
  for (let s = 1; s <= t; s++) {
    const o = /* @__PURE__ */ lo(0, t, s);
    e.push(xe(i, 1, o));
  }
}
function uw(e) {
  const t = [0];
  return dw(t, e.length - 1), t;
}
function hw(e, t) {
  return e.map((i) => i * t);
}
function gw(e, t) {
  return e.map(() => t || rg).splice(0, e.length - 1);
}
function ss({ duration: e = 300, keyframes: t, times: i, ease: s = "easeInOut" }) {
  const o = Fv(s) ? s.map(ed) : ed(s), n = {
    done: !1,
    value: t[0]
  }, r = hw(
    // Only use the provided offsets if they're the correct length
    // TODO Maybe we should warn here if there's a length mismatch
    i && i.length === t.length ? i : uw(t),
    e
  ), a = cw(r, t, {
    ease: Array.isArray(o) ? o : gw(t, o)
  });
  return {
    calculatedDuration: e,
    next: (l) => (n.value = a(l), n.done = l >= e, n)
  };
}
const pw = (e) => e !== null;
function Bl(e, { repeat: t, repeatType: i = "loop" }, s, o = 1) {
  const n = e.filter(pw), a = o < 0 || t && i !== "loop" && t % 2 === 1 ? 0 : n.length - 1;
  return !a || s === void 0 ? n[a] : s;
}
const fw = {
  decay: ba,
  inertia: ba,
  tween: ss,
  keyframes: ss,
  spring: Mn
};
function wg(e) {
  typeof e.type == "string" && (e.type = fw[e.type]);
}
class Nl {
  constructor() {
    this.updateFinished();
  }
  get finished() {
    return this._finished;
  }
  updateFinished() {
    this._finished = new Promise((t) => {
      this.resolve = t;
    });
  }
  notifyFinished() {
    this.resolve();
  }
  /**
   * Allows the animation to be awaited.
   *
   * @deprecated Use `finished` instead.
   */
  then(t, i) {
    return this.finished.then(t, i);
  }
}
const mw = (e) => e / 100;
class Wl extends Nl {
  constructor(t) {
    super(), this.state = "idle", this.startTime = null, this.isStopped = !1, this.currentTime = 0, this.holdTime = null, this.playbackSpeed = 1, this.stop = () => {
      const { motionValue: i } = this.options;
      i && i.updatedAt !== it.now() && this.tick(it.now()), this.isStopped = !0, this.state !== "idle" && (this.teardown(), this.options.onStop?.());
    }, this.options = t, this.initAnimation(), this.play(), t.autoplay === !1 && this.pause();
  }
  initAnimation() {
    const { options: t } = this;
    wg(t);
    const { type: i = ss, repeat: s = 0, repeatDelay: o = 0, repeatType: n, velocity: r = 0 } = t;
    let { keyframes: a } = t;
    const l = i || ss;
    process.env.NODE_ENV !== "production" && l !== ss && Yt(a.length <= 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${a}`, "spring-two-frames"), l !== ss && typeof a[0] != "number" && (this.mixKeyframes = Io(mw, mg(a[0], a[1])), a = [0, 100]);
    const c = l({ ...t, keyframes: a });
    n === "mirror" && (this.mirroredGenerator = l({
      ...t,
      keyframes: [...a].reverse(),
      velocity: -r
    })), c.calculatedDuration === null && (c.calculatedDuration = Hl(c));
    const { calculatedDuration: d } = c;
    this.calculatedDuration = d, this.resolvedDuration = d + o, this.totalDuration = this.resolvedDuration * (s + 1) - o, this.generator = c;
  }
  updateTime(t) {
    const i = Math.round(t - this.startTime) * this.playbackSpeed;
    this.holdTime !== null ? this.currentTime = this.holdTime : this.currentTime = i;
  }
  tick(t, i = !1) {
    const { generator: s, totalDuration: o, mixKeyframes: n, mirroredGenerator: r, resolvedDuration: a, calculatedDuration: l } = this;
    if (this.startTime === null)
      return s.next(0);
    const { delay: c = 0, keyframes: d, repeat: u, repeatType: h, repeatDelay: g, type: p, onUpdate: f, finalKeyframe: m } = this.options;
    this.speed > 0 ? this.startTime = Math.min(this.startTime, t) : this.speed < 0 && (this.startTime = Math.min(t - o / this.speed, this.startTime)), i ? this.currentTime = t : this.updateTime(t);
    const C = this.currentTime - c * (this.playbackSpeed >= 0 ? 1 : -1), v = this.playbackSpeed >= 0 ? C < 0 : C > o;
    this.currentTime = Math.max(C, 0), this.state === "finished" && this.holdTime === null && (this.currentTime = o);
    let w = this.currentTime, y = s;
    if (u) {
      const M = Math.min(this.currentTime, o) / a;
      let k = Math.floor(M), P = M % 1;
      !P && M >= 1 && (P = 1), P === 1 && k--, k = Math.min(k, u + 1), !!(k % 2) && (h === "reverse" ? (P = 1 - P, g && (P -= g / a)) : h === "mirror" && (y = r)), w = Kt(0, 1, P) * a;
    }
    const S = v ? { done: !1, value: d[0] } : y.next(w);
    n && (S.value = n(S.value));
    let { done: x } = S;
    !v && l !== null && (x = this.playbackSpeed >= 0 ? this.currentTime >= o : this.currentTime <= 0);
    const D = this.holdTime === null && (this.state === "finished" || this.state === "running" && x);
    return D && p !== ba && (S.value = Bl(d, this.options, m, this.speed)), f && f(S.value), D && this.finish(), S;
  }
  /**
   * Allows the returned animation to be awaited or promise-chained. Currently
   * resolves when the animation finishes at all but in a future update could/should
   * reject if its cancels.
   */
  then(t, i) {
    return this.finished.then(t, i);
  }
  get duration() {
    return /* @__PURE__ */ Lt(this.calculatedDuration);
  }
  get time() {
    return /* @__PURE__ */ Lt(this.currentTime);
  }
  set time(t) {
    t = /* @__PURE__ */ xt(t), this.currentTime = t, this.startTime === null || this.holdTime !== null || this.playbackSpeed === 0 ? this.holdTime = t : this.driver && (this.startTime = this.driver.now() - t / this.playbackSpeed), this.driver?.start(!1);
  }
  get speed() {
    return this.playbackSpeed;
  }
  set speed(t) {
    this.updateTime(it.now());
    const i = this.playbackSpeed !== t;
    this.playbackSpeed = t, i && (this.time = /* @__PURE__ */ Lt(this.currentTime));
  }
  play() {
    if (this.isStopped)
      return;
    const { driver: t = Jv, startTime: i } = this.options;
    this.driver || (this.driver = t((o) => this.tick(o))), this.options.onPlay?.();
    const s = this.driver.now();
    this.state === "finished" ? (this.updateFinished(), this.startTime = s) : this.holdTime !== null ? this.startTime = s - this.holdTime : this.startTime || (this.startTime = i ?? s), this.state === "finished" && this.speed < 0 && (this.startTime += this.calculatedDuration), this.holdTime = null, this.state = "running", this.driver.start();
  }
  pause() {
    this.state = "paused", this.updateTime(it.now()), this.holdTime = this.currentTime;
  }
  complete() {
    this.state !== "running" && this.play(), this.state = "finished", this.holdTime = null;
  }
  finish() {
    this.notifyFinished(), this.teardown(), this.state = "finished", this.options.onComplete?.();
  }
  cancel() {
    this.holdTime = null, this.startTime = 0, this.tick(0), this.teardown(), this.options.onCancel?.();
  }
  teardown() {
    this.state = "idle", this.stopDriver(), this.startTime = this.holdTime = null;
  }
  stopDriver() {
    this.driver && (this.driver.stop(), this.driver = void 0);
  }
  sample(t) {
    return this.startTime = 0, this.tick(t, !0);
  }
  attachTimeline(t) {
    return this.options.allowFlatten && (this.options.type = "keyframes", this.options.ease = "linear", this.initAnimation()), this.driver?.stop(), t.observe(this);
  }
}
function Cw(e) {
  for (let t = 1; t < e.length; t++)
    e[t] ?? (e[t] = e[t - 1]);
}
const Ri = (e) => e * 180 / Math.PI, Ra = (e) => {
  const t = Ri(Math.atan2(e[1], e[0]));
  return xa(t);
}, vw = {
  x: 4,
  y: 5,
  translateX: 4,
  translateY: 5,
  scaleX: 0,
  scaleY: 3,
  scale: (e) => (Math.abs(e[0]) + Math.abs(e[3])) / 2,
  rotate: Ra,
  rotateZ: Ra,
  skewX: (e) => Ri(Math.atan(e[1])),
  skewY: (e) => Ri(Math.atan(e[2])),
  skew: (e) => (Math.abs(e[1]) + Math.abs(e[2])) / 2
}, xa = (e) => (e = e % 360, e < 0 && (e += 360), e), rd = Ra, ad = (e) => Math.sqrt(e[0] * e[0] + e[1] * e[1]), ld = (e) => Math.sqrt(e[4] * e[4] + e[5] * e[5]), ww = {
  x: 12,
  y: 13,
  z: 14,
  translateX: 12,
  translateY: 13,
  translateZ: 14,
  scaleX: ad,
  scaleY: ld,
  scale: (e) => (ad(e) + ld(e)) / 2,
  rotateX: (e) => xa(Ri(Math.atan2(e[6], e[5]))),
  rotateY: (e) => xa(Ri(Math.atan2(-e[2], e[0]))),
  rotateZ: rd,
  rotate: rd,
  skewX: (e) => Ri(Math.atan(e[4])),
  skewY: (e) => Ri(Math.atan(e[1])),
  skew: (e) => (Math.abs(e[1]) + Math.abs(e[4])) / 2
};
function Fa(e) {
  return e.includes("scale") ? 1 : 0;
}
function Pa(e, t) {
  if (!e || e === "none")
    return Fa(t);
  const i = e.match(/^matrix3d\(([-\d.e\s,]+)\)$/u);
  let s, o;
  if (i)
    s = ww, o = i;
  else {
    const a = e.match(/^matrix\(([-\d.e\s,]+)\)$/u);
    s = vw, o = a;
  }
  if (!o)
    return Fa(t);
  const n = s[t], r = o[1].split(",").map(yw);
  return typeof n == "function" ? n(r) : r[n];
}
const Sw = (e, t) => {
  const { transform: i = "none" } = getComputedStyle(e);
  return Pa(i, t);
};
function yw(e) {
  return parseFloat(e.trim());
}
const Is = [
  "transformPerspective",
  "x",
  "y",
  "z",
  "translateX",
  "translateY",
  "translateZ",
  "scale",
  "scaleX",
  "scaleY",
  "rotate",
  "rotateX",
  "rotateY",
  "rotateZ",
  "skew",
  "skewX",
  "skewY"
], ks = new Set(Is), cd = (e) => e === As || e === te, bw = /* @__PURE__ */ new Set(["x", "y", "z"]), Rw = Is.filter((e) => !bw.has(e));
function xw(e) {
  const t = [];
  return Rw.forEach((i) => {
    const s = e.getValue(i);
    s !== void 0 && (t.push([i, s.get()]), s.set(i.startsWith("scale") ? 1 : 0));
  }), t;
}
const Pi = {
  // Dimensions
  width: ({ x: e }, { paddingLeft: t = "0", paddingRight: i = "0" }) => e.max - e.min - parseFloat(t) - parseFloat(i),
  height: ({ y: e }, { paddingTop: t = "0", paddingBottom: i = "0" }) => e.max - e.min - parseFloat(t) - parseFloat(i),
  top: (e, { top: t }) => parseFloat(t),
  left: (e, { left: t }) => parseFloat(t),
  bottom: ({ y: e }, { top: t }) => parseFloat(t) + (e.max - e.min),
  right: ({ x: e }, { left: t }) => parseFloat(t) + (e.max - e.min),
  // Transform
  x: (e, { transform: t }) => Pa(t, "x"),
  y: (e, { transform: t }) => Pa(t, "y")
};
Pi.translateX = Pi.x;
Pi.translateY = Pi.y;
const Ei = /* @__PURE__ */ new Set();
let Ea = !1, Da = !1, Ta = !1;
function Sg() {
  if (Da) {
    const e = Array.from(Ei).filter((s) => s.needsMeasurement), t = new Set(e.map((s) => s.element)), i = /* @__PURE__ */ new Map();
    t.forEach((s) => {
      const o = xw(s);
      o.length && (i.set(s, o), s.render());
    }), e.forEach((s) => s.measureInitialState()), t.forEach((s) => {
      s.render();
      const o = i.get(s);
      o && o.forEach(([n, r]) => {
        s.getValue(n)?.set(r);
      });
    }), e.forEach((s) => s.measureEndState()), e.forEach((s) => {
      s.suspendedScrollY !== void 0 && window.scrollTo(0, s.suspendedScrollY);
    });
  }
  Da = !1, Ea = !1, Ei.forEach((e) => e.complete(Ta)), Ei.clear();
}
function yg() {
  Ei.forEach((e) => {
    e.readKeyframes(), e.needsMeasurement && (Da = !0);
  });
}
function Fw() {
  Ta = !0, yg(), Sg(), Ta = !1;
}
class zl {
  constructor(t, i, s, o, n, r = !1) {
    this.state = "pending", this.isAsync = !1, this.needsMeasurement = !1, this.unresolvedKeyframes = [...t], this.onComplete = i, this.name = s, this.motionValue = o, this.element = n, this.isAsync = r;
  }
  scheduleResolve() {
    this.state = "scheduled", this.isAsync ? (Ei.add(this), Ea || (Ea = !0, Se.read(yg), Se.resolveKeyframes(Sg))) : (this.readKeyframes(), this.complete());
  }
  readKeyframes() {
    const { unresolvedKeyframes: t, name: i, element: s, motionValue: o } = this;
    if (t[0] === null) {
      const n = o?.get(), r = t[t.length - 1];
      if (n !== void 0)
        t[0] = n;
      else if (s && i) {
        const a = s.readValue(i, r);
        a != null && (t[0] = a);
      }
      t[0] === void 0 && (t[0] = r), o && n === void 0 && o.set(t[0]);
    }
    Cw(t);
  }
  setFinalKeyframe() {
  }
  measureInitialState() {
  }
  renderEndStyles() {
  }
  measureEndState() {
  }
  complete(t = !1) {
    this.state = "complete", this.onComplete(this.unresolvedKeyframes, this.finalKeyframe, t), Ei.delete(this);
  }
  cancel() {
    this.state === "scheduled" && (Ei.delete(this), this.state = "pending");
  }
  resume() {
    this.state === "pending" && this.scheduleResolve();
  }
}
const Pw = (e) => e.startsWith("--");
function Ew(e, t, i) {
  Pw(t) ? e.style.setProperty(t, i) : e.style[t] = i;
}
const Dw = /* @__PURE__ */ Dl(() => window.ScrollTimeline !== void 0), Tw = {};
function Mw(e, t) {
  const i = /* @__PURE__ */ Dl(e);
  return () => Tw[t] ?? i();
}
const bg = /* @__PURE__ */ Mw(() => {
  try {
    document.createElement("div").animate({ opacity: 0 }, { easing: "linear(0, 1)" });
  } catch {
    return !1;
  }
  return !0;
}, "linearEasing"), $s = ([e, t, i, s]) => `cubic-bezier(${e}, ${t}, ${i}, ${s})`, dd = {
  linear: "linear",
  ease: "ease",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out",
  circIn: /* @__PURE__ */ $s([0, 0.65, 0.55, 1]),
  circOut: /* @__PURE__ */ $s([0.55, 0, 1, 0.45]),
  backIn: /* @__PURE__ */ $s([0.31, 0.01, 0.66, -0.59]),
  backOut: /* @__PURE__ */ $s([0.33, 1.53, 0.69, 0.99])
};
function Rg(e, t) {
  if (e)
    return typeof e == "function" ? bg() ? Cg(e, t) : "ease-out" : ag(e) ? $s(e) : Array.isArray(e) ? e.map((i) => Rg(i, t) || dd.easeOut) : dd[e];
}
function Aw(e, t, i, { delay: s = 0, duration: o = 300, repeat: n = 0, repeatType: r = "loop", ease: a = "easeOut", times: l } = {}, c = void 0) {
  const d = {
    [t]: i
  };
  l && (d.offset = l);
  const u = Rg(a, o);
  Array.isArray(u) && (d.easing = u);
  const h = {
    delay: s,
    duration: o,
    easing: Array.isArray(u) ? "linear" : u,
    fill: "both",
    iterations: n + 1,
    direction: r === "reverse" ? "alternate" : "normal"
  };
  return c && (h.pseudoElement = c), e.animate(d, h);
}
function xg(e) {
  return typeof e == "function" && "applyToOptions" in e;
}
function Iw({ type: e, ...t }) {
  return xg(e) && bg() ? e.applyToOptions(t) : (t.duration ?? (t.duration = 300), t.ease ?? (t.ease = "easeOut"), t);
}
class kw extends Nl {
  constructor(t) {
    if (super(), this.finishedTime = null, this.isStopped = !1, !t)
      return;
    const { element: i, name: s, keyframes: o, pseudoElement: n, allowFlatten: r = !1, finalKeyframe: a, onComplete: l } = t;
    this.isPseudoElement = !!n, this.allowFlatten = r, this.options = t, Yt(typeof t.type != "string", `Mini animate() doesn't support "type" as a string.`, "mini-spring");
    const c = Iw(t);
    this.animation = Aw(i, s, o, c, n), c.autoplay === !1 && this.animation.pause(), this.animation.onfinish = () => {
      if (this.finishedTime = this.time, !n) {
        const d = Bl(o, this.options, a, this.speed);
        this.updateMotionValue ? this.updateMotionValue(d) : Ew(i, s, d), this.animation.cancel();
      }
      l?.(), this.notifyFinished();
    };
  }
  play() {
    this.isStopped || (this.animation.play(), this.state === "finished" && this.updateFinished());
  }
  pause() {
    this.animation.pause();
  }
  complete() {
    this.animation.finish?.();
  }
  cancel() {
    try {
      this.animation.cancel();
    } catch {
    }
  }
  stop() {
    if (this.isStopped)
      return;
    this.isStopped = !0;
    const { state: t } = this;
    t === "idle" || t === "finished" || (this.updateMotionValue ? this.updateMotionValue() : this.commitStyles(), this.isPseudoElement || this.cancel());
  }
  /**
   * WAAPI doesn't natively have any interruption capabilities.
   *
   * In this method, we commit styles back to the DOM before cancelling
   * the animation.
   *
   * This is designed to be overridden by NativeAnimationExtended, which
   * will create a renderless JS animation and sample it twice to calculate
   * its current value, "previous" value, and therefore allow
   * Motion to also correctly calculate velocity for any subsequent animation
   * while deferring the commit until the next animation frame.
   */
  commitStyles() {
    this.isPseudoElement || this.animation.commitStyles?.();
  }
  get duration() {
    const t = this.animation.effect?.getComputedTiming?.().duration || 0;
    return /* @__PURE__ */ Lt(Number(t));
  }
  get time() {
    return /* @__PURE__ */ Lt(Number(this.animation.currentTime) || 0);
  }
  set time(t) {
    this.finishedTime = null, this.animation.currentTime = /* @__PURE__ */ xt(t);
  }
  /**
   * The playback speed of the animation.
   * 1 = normal speed, 2 = double speed, 0.5 = half speed.
   */
  get speed() {
    return this.animation.playbackRate;
  }
  set speed(t) {
    t < 0 && (this.finishedTime = null), this.animation.playbackRate = t;
  }
  get state() {
    return this.finishedTime !== null ? "finished" : this.animation.playState;
  }
  get startTime() {
    return Number(this.animation.startTime);
  }
  set startTime(t) {
    this.animation.startTime = t;
  }
  /**
   * Attaches a timeline to the animation, for instance the `ScrollTimeline`.
   */
  attachTimeline({ timeline: t, observe: i }) {
    return this.allowFlatten && this.animation.effect?.updateTiming({ easing: "linear" }), this.animation.onfinish = null, t && Dw() ? (this.animation.timeline = t, wt) : i(this);
  }
}
const Fg = {
  anticipate: sg,
  backInOut: ig,
  circInOut: ng
};
function Lw(e) {
  return e in Fg;
}
function Ow(e) {
  typeof e.ease == "string" && Lw(e.ease) && (e.ease = Fg[e.ease]);
}
const ud = 10;
class Vw extends kw {
  constructor(t) {
    Ow(t), wg(t), super(t), t.startTime && (this.startTime = t.startTime), this.options = t;
  }
  /**
   * WAAPI doesn't natively have any interruption capabilities.
   *
   * Rather than read commited styles back out of the DOM, we can
   * create a renderless JS animation and sample it twice to calculate
   * its current value, "previous" value, and therefore allow
   * Motion to calculate velocity for any subsequent animation.
   */
  updateMotionValue(t) {
    const { motionValue: i, onUpdate: s, onComplete: o, element: n, ...r } = this.options;
    if (!i)
      return;
    if (t !== void 0) {
      i.set(t);
      return;
    }
    const a = new Wl({
      ...r,
      autoplay: !1
    }), l = /* @__PURE__ */ xt(this.finishedTime ?? this.time);
    i.setWithVelocity(a.sample(l - ud).value, a.sample(l).value, ud), a.stop();
  }
}
const hd = (e, t) => t === "zIndex" ? !1 : !!(typeof e == "number" || Array.isArray(e) || typeof e == "string" && // It's animatable if we have a string
(di.test(e) || e === "0") && // And it contains numbers and/or colors
!e.startsWith("url("));
function Gw(e) {
  const t = e[0];
  if (e.length === 1)
    return !0;
  for (let i = 0; i < e.length; i++)
    if (e[i] !== t)
      return !0;
}
function Hw(e, t, i, s) {
  const o = e[0];
  if (o === null)
    return !1;
  if (t === "display" || t === "visibility")
    return !0;
  const n = e[e.length - 1], r = hd(o, t), a = hd(n, t);
  return Ms(r === a, `You are trying to animate ${t} from "${o}" to "${n}". "${r ? n : o}" is not an animatable value.`, "value-not-animatable"), !r || !a ? !1 : Gw(e) || (i === "spring" || xg(i)) && s;
}
function Ma(e) {
  e.duration = 0, e.type;
}
const Bw = /* @__PURE__ */ new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform"
  // TODO: Could be re-enabled now we have support for linear() easing
  // "background-color"
]), Nw = /* @__PURE__ */ Dl(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
function Ww(e) {
  const { motionValue: t, name: i, repeatDelay: s, repeatType: o, damping: n, type: r } = e;
  if (!(t?.owner?.current instanceof HTMLElement))
    return !1;
  const { onUpdate: l, transformTemplate: c } = t.owner.getProps();
  return Nw() && i && Bw.has(i) && (i !== "transform" || !c) && /**
   * If we're outputting values to onUpdate then we can't use WAAPI as there's
   * no way to read the value from WAAPI every frame.
   */
  !l && !s && o !== "mirror" && n !== 0 && r !== "inertia";
}
const zw = 40;
class _w extends Nl {
  constructor({ autoplay: t = !0, delay: i = 0, type: s = "keyframes", repeat: o = 0, repeatDelay: n = 0, repeatType: r = "loop", keyframes: a, name: l, motionValue: c, element: d, ...u }) {
    super(), this.stop = () => {
      this._animation && (this._animation.stop(), this.stopTimeline?.()), this.keyframeResolver?.cancel();
    }, this.createdAt = it.now();
    const h = {
      autoplay: t,
      delay: i,
      type: s,
      repeat: o,
      repeatDelay: n,
      repeatType: r,
      name: l,
      motionValue: c,
      element: d,
      ...u
    }, g = d?.KeyframeResolver || zl;
    this.keyframeResolver = new g(a, (p, f, m) => this.onKeyframesResolved(p, f, h, !m), l, c, d), this.keyframeResolver?.scheduleResolve();
  }
  onKeyframesResolved(t, i, s, o) {
    this.keyframeResolver = void 0;
    const { name: n, type: r, velocity: a, delay: l, isHandoff: c, onUpdate: d } = s;
    this.resolvedAt = it.now(), Hw(t, n, r, a) || ((qt.instantAnimations || !l) && d?.(Bl(t, s, i)), t[0] = t[t.length - 1], Ma(s), s.repeat = 0);
    const h = {
      startTime: o ? this.resolvedAt ? this.resolvedAt - this.createdAt > zw ? this.resolvedAt : this.createdAt : this.createdAt : void 0,
      finalKeyframe: i,
      ...s,
      keyframes: t
    }, g = !c && Ww(h) ? new Vw({
      ...h,
      element: h.motionValue.owner.current
    }) : new Wl(h);
    g.finished.then(() => this.notifyFinished()).catch(wt), this.pendingTimeline && (this.stopTimeline = g.attachTimeline(this.pendingTimeline), this.pendingTimeline = void 0), this._animation = g;
  }
  get finished() {
    return this._animation ? this.animation.finished : this._finished;
  }
  then(t, i) {
    return this.finished.finally(t).then(() => {
    });
  }
  get animation() {
    return this._animation || (this.keyframeResolver?.resume(), Fw()), this._animation;
  }
  get duration() {
    return this.animation.duration;
  }
  get time() {
    return this.animation.time;
  }
  set time(t) {
    this.animation.time = t;
  }
  get speed() {
    return this.animation.speed;
  }
  get state() {
    return this.animation.state;
  }
  set speed(t) {
    this.animation.speed = t;
  }
  get startTime() {
    return this.animation.startTime;
  }
  attachTimeline(t) {
    return this._animation ? this.stopTimeline = this.animation.attachTimeline(t) : this.pendingTimeline = t, () => this.stop();
  }
  play() {
    this.animation.play();
  }
  pause() {
    this.animation.pause();
  }
  complete() {
    this.animation.complete();
  }
  cancel() {
    this._animation && this.animation.cancel(), this.keyframeResolver?.cancel();
  }
}
const Uw = (
  // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words
  /^var\(--(?:([\w-]+)|([\w-]+), ?([a-zA-Z\d ()%#.,-]+))\)/u
);
function jw(e) {
  const t = Uw.exec(e);
  if (!t)
    return [,];
  const [, i, s, o] = t;
  return [`--${i ?? s}`, o];
}
const $w = 4;
function Pg(e, t, i = 1) {
  Yt(i <= $w, `Max CSS variable fallback depth detected in property "${e}". This may indicate a circular fallback dependency.`, "max-css-var-depth");
  const [s, o] = jw(e);
  if (!s)
    return;
  const n = window.getComputedStyle(t).getPropertyValue(s);
  if (n) {
    const r = n.trim();
    return Yh(r) ? parseFloat(r) : r;
  }
  return Ll(o) ? Pg(o, t, i + 1) : o;
}
function _l(e, t) {
  return e?.[t] ?? e?.default ?? e;
}
const Eg = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  ...Is
]), Kw = {
  test: (e) => e === "auto",
  parse: (e) => e
}, Dg = (e) => (t) => t.test(e), Tg = [As, te, Ot, si, Gv, Vv, Kw], gd = (e) => Tg.find(Dg(e));
function Yw(e) {
  return typeof e == "number" ? e === 0 : e !== null ? e === "none" || e === "0" || Xh(e) : !0;
}
const qw = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function Xw(e) {
  const [t, i] = e.slice(0, -1).split("(");
  if (t === "drop-shadow")
    return e;
  const [s] = i.match(Ol) || [];
  if (!s)
    return e;
  const o = i.replace(s, "");
  let n = qw.has(t) ? 1 : 0;
  return s !== i && (n *= 100), t + "(" + n + o + ")";
}
const Zw = /\b([a-z-]*)\(.*?\)/gu, Aa = {
  ...di,
  getAnimatableNone: (e) => {
    const t = e.match(Zw);
    return t ? t.map(Xw).join(" ") : e;
  }
}, pd = {
  ...As,
  transform: Math.round
}, Qw = {
  rotate: si,
  rotateX: si,
  rotateY: si,
  rotateZ: si,
  scale: Uo,
  scaleX: Uo,
  scaleY: Uo,
  scaleZ: Uo,
  skew: si,
  skewX: si,
  skewY: si,
  distance: te,
  translateX: te,
  translateY: te,
  translateZ: te,
  x: te,
  y: te,
  z: te,
  perspective: te,
  transformPerspective: te,
  opacity: co,
  originX: td,
  originY: td,
  originZ: te
}, Ul = {
  // Border props
  borderWidth: te,
  borderTopWidth: te,
  borderRightWidth: te,
  borderBottomWidth: te,
  borderLeftWidth: te,
  borderRadius: te,
  radius: te,
  borderTopLeftRadius: te,
  borderTopRightRadius: te,
  borderBottomRightRadius: te,
  borderBottomLeftRadius: te,
  // Positioning props
  width: te,
  maxWidth: te,
  height: te,
  maxHeight: te,
  top: te,
  right: te,
  bottom: te,
  left: te,
  // Spacing props
  padding: te,
  paddingTop: te,
  paddingRight: te,
  paddingBottom: te,
  paddingLeft: te,
  margin: te,
  marginTop: te,
  marginRight: te,
  marginBottom: te,
  marginLeft: te,
  // Misc
  backgroundPositionX: te,
  backgroundPositionY: te,
  ...Qw,
  zIndex: pd,
  // SVG
  fillOpacity: co,
  strokeOpacity: co,
  numOctaves: pd
}, Jw = {
  ...Ul,
  // Color props
  color: Le,
  backgroundColor: Le,
  outlineColor: Le,
  fill: Le,
  stroke: Le,
  // Border props
  borderColor: Le,
  borderTopColor: Le,
  borderRightColor: Le,
  borderBottomColor: Le,
  borderLeftColor: Le,
  filter: Aa,
  WebkitFilter: Aa
}, Mg = (e) => Jw[e];
function Ag(e, t) {
  let i = Mg(e);
  return i !== Aa && (i = di), i.getAnimatableNone ? i.getAnimatableNone(t) : void 0;
}
const eS = /* @__PURE__ */ new Set(["auto", "none", "0"]);
function tS(e, t, i) {
  let s = 0, o;
  for (; s < e.length && !o; ) {
    const n = e[s];
    typeof n == "string" && !eS.has(n) && uo(n).values.length && (o = e[s]), s++;
  }
  if (o && i)
    for (const n of t)
      e[n] = Ag(i, o);
}
class iS extends zl {
  constructor(t, i, s, o, n) {
    super(t, i, s, o, n, !0);
  }
  readKeyframes() {
    const { unresolvedKeyframes: t, element: i, name: s } = this;
    if (!i || !i.current)
      return;
    super.readKeyframes();
    for (let l = 0; l < t.length; l++) {
      let c = t[l];
      if (typeof c == "string" && (c = c.trim(), Ll(c))) {
        const d = Pg(c, i.current);
        d !== void 0 && (t[l] = d), l === t.length - 1 && (this.finalKeyframe = c);
      }
    }
    if (this.resolveNoneKeyframes(), !Eg.has(s) || t.length !== 2)
      return;
    const [o, n] = t, r = gd(o), a = gd(n);
    if (r !== a)
      if (cd(r) && cd(a))
        for (let l = 0; l < t.length; l++) {
          const c = t[l];
          typeof c == "string" && (t[l] = parseFloat(c));
        }
      else Pi[s] && (this.needsMeasurement = !0);
  }
  resolveNoneKeyframes() {
    const { unresolvedKeyframes: t, name: i } = this, s = [];
    for (let o = 0; o < t.length; o++)
      (t[o] === null || Yw(t[o])) && s.push(o);
    s.length && tS(t, s, i);
  }
  measureInitialState() {
    const { element: t, unresolvedKeyframes: i, name: s } = this;
    if (!t || !t.current)
      return;
    s === "height" && (this.suspendedScrollY = window.pageYOffset), this.measuredOrigin = Pi[s](t.measureViewportBox(), window.getComputedStyle(t.current)), i[0] = this.measuredOrigin;
    const o = i[i.length - 1];
    o !== void 0 && t.getValue(s, o).jump(o, !1);
  }
  measureEndState() {
    const { element: t, name: i, unresolvedKeyframes: s } = this;
    if (!t || !t.current)
      return;
    const o = t.getValue(i);
    o && o.jump(this.measuredOrigin, !1);
    const n = s.length - 1, r = s[n];
    s[n] = Pi[i](t.measureViewportBox(), window.getComputedStyle(t.current)), r !== null && this.finalKeyframe === void 0 && (this.finalKeyframe = r), this.removedTransforms?.length && this.removedTransforms.forEach(([a, l]) => {
      t.getValue(a).set(l);
    }), this.resolveNoneKeyframes();
  }
}
function sS(e, t, i) {
  if (e instanceof EventTarget)
    return [e];
  if (typeof e == "string") {
    let s = document;
    const o = i?.[e] ?? s.querySelectorAll(e);
    return o ? Array.from(o) : [];
  }
  return Array.from(e);
}
const Ig = (e, t) => t && typeof e == "number" ? t.transform(e) : e;
function kg(e) {
  return qh(e) && "offsetHeight" in e;
}
const fd = 30, oS = (e) => !isNaN(parseFloat(e));
class nS {
  /**
   * @param init - The initiating value
   * @param config - Optional configuration options
   *
   * -  `transformer`: A function to transform incoming values with.
   */
  constructor(t, i = {}) {
    this.canTrackVelocity = null, this.events = {}, this.updateAndNotify = (s) => {
      const o = it.now();
      if (this.updatedAt !== o && this.setPrevFrameValue(), this.prev = this.current, this.setCurrent(s), this.current !== this.prev && (this.events.change?.notify(this.current), this.dependents))
        for (const n of this.dependents)
          n.dirty();
    }, this.hasAnimated = !1, this.setCurrent(t), this.owner = i.owner;
  }
  setCurrent(t) {
    this.current = t, this.updatedAt = it.now(), this.canTrackVelocity === null && t !== void 0 && (this.canTrackVelocity = oS(this.current));
  }
  setPrevFrameValue(t = this.current) {
    this.prevFrameValue = t, this.prevUpdatedAt = this.updatedAt;
  }
  /**
   * Adds a function that will be notified when the `MotionValue` is updated.
   *
   * It returns a function that, when called, will cancel the subscription.
   *
   * When calling `onChange` inside a React component, it should be wrapped with the
   * `useEffect` hook. As it returns an unsubscribe function, this should be returned
   * from the `useEffect` function to ensure you don't add duplicate subscribers..
   *
   * ```jsx
   * export const MyComponent = () => {
   *   const x = useMotionValue(0)
   *   const y = useMotionValue(0)
   *   const opacity = useMotionValue(1)
   *
   *   useEffect(() => {
   *     function updateOpacity() {
   *       const maxXY = Math.max(x.get(), y.get())
   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
   *       opacity.set(newOpacity)
   *     }
   *
   *     const unsubscribeX = x.on("change", updateOpacity)
   *     const unsubscribeY = y.on("change", updateOpacity)
   *
   *     return () => {
   *       unsubscribeX()
   *       unsubscribeY()
   *     }
   *   }, [])
   *
   *   return <motion.div style={{ x }} />
   * }
   * ```
   *
   * @param subscriber - A function that receives the latest value.
   * @returns A function that, when called, will cancel this subscription.
   *
   * @deprecated
   */
  onChange(t) {
    return process.env.NODE_ENV !== "production" && Ml(!1, 'value.onChange(callback) is deprecated. Switch to value.on("change", callback).'), this.on("change", t);
  }
  on(t, i) {
    this.events[t] || (this.events[t] = new Tl());
    const s = this.events[t].add(i);
    return t === "change" ? () => {
      s(), Se.read(() => {
        this.events.change.getSize() || this.stop();
      });
    } : s;
  }
  clearListeners() {
    for (const t in this.events)
      this.events[t].clear();
  }
  /**
   * Attaches a passive effect to the `MotionValue`.
   */
  attach(t, i) {
    this.passiveEffect = t, this.stopPassiveEffect = i;
  }
  /**
   * Sets the state of the `MotionValue`.
   *
   * @remarks
   *
   * ```jsx
   * const x = useMotionValue(0)
   * x.set(10)
   * ```
   *
   * @param latest - Latest value to set.
   * @param render - Whether to notify render subscribers. Defaults to `true`
   *
   * @public
   */
  set(t) {
    this.passiveEffect ? this.passiveEffect(t, this.updateAndNotify) : this.updateAndNotify(t);
  }
  setWithVelocity(t, i, s) {
    this.set(i), this.prev = void 0, this.prevFrameValue = t, this.prevUpdatedAt = this.updatedAt - s;
  }
  /**
   * Set the state of the `MotionValue`, stopping any active animations,
   * effects, and resets velocity to `0`.
   */
  jump(t, i = !0) {
    this.updateAndNotify(t), this.prev = t, this.prevUpdatedAt = this.prevFrameValue = void 0, i && this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();
  }
  dirty() {
    this.events.change?.notify(this.current);
  }
  addDependent(t) {
    this.dependents || (this.dependents = /* @__PURE__ */ new Set()), this.dependents.add(t);
  }
  removeDependent(t) {
    this.dependents && this.dependents.delete(t);
  }
  /**
   * Returns the latest state of `MotionValue`
   *
   * @returns - The latest state of `MotionValue`
   *
   * @public
   */
  get() {
    return this.current;
  }
  /**
   * @public
   */
  getPrevious() {
    return this.prev;
  }
  /**
   * Returns the latest velocity of `MotionValue`
   *
   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
   *
   * @public
   */
  getVelocity() {
    const t = it.now();
    if (!this.canTrackVelocity || this.prevFrameValue === void 0 || t - this.updatedAt > fd)
      return 0;
    const i = Math.min(this.updatedAt - this.prevUpdatedAt, fd);
    return Zh(parseFloat(this.current) - parseFloat(this.prevFrameValue), i);
  }
  /**
   * Registers a new animation to control this `MotionValue`. Only one
   * animation can drive a `MotionValue` at one time.
   *
   * ```jsx
   * value.start()
   * ```
   *
   * @param animation - A function that starts the provided animation
   */
  start(t) {
    return this.stop(), new Promise((i) => {
      this.hasAnimated = !0, this.animation = t(i), this.events.animationStart && this.events.animationStart.notify();
    }).then(() => {
      this.events.animationComplete && this.events.animationComplete.notify(), this.clearAnimation();
    });
  }
  /**
   * Stop the currently active animation.
   *
   * @public
   */
  stop() {
    this.animation && (this.animation.stop(), this.events.animationCancel && this.events.animationCancel.notify()), this.clearAnimation();
  }
  /**
   * Returns `true` if this value is currently animating.
   *
   * @public
   */
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  /**
   * Destroy and clean up subscribers to this `MotionValue`.
   *
   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
   * created a `MotionValue` via the `motionValue` function.
   *
   * @public
   */
  destroy() {
    this.dependents?.clear(), this.events.destroy?.notify(), this.clearListeners(), this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();
  }
}
function ys(e, t) {
  return new nS(e, t);
}
const { schedule: jl } = /* @__PURE__ */ lg(queueMicrotask, !1), Rt = {
  x: !1,
  y: !1
};
function Lg() {
  return Rt.x || Rt.y;
}
function rS(e) {
  return e === "x" || e === "y" ? Rt[e] ? null : (Rt[e] = !0, () => {
    Rt[e] = !1;
  }) : Rt.x || Rt.y ? null : (Rt.x = Rt.y = !0, () => {
    Rt.x = Rt.y = !1;
  });
}
function Og(e, t) {
  const i = sS(e), s = new AbortController(), o = {
    passive: !0,
    ...t,
    signal: s.signal
  };
  return [i, o, () => s.abort()];
}
function md(e) {
  return !(e.pointerType === "touch" || Lg());
}
function aS(e, t, i = {}) {
  const [s, o, n] = Og(e, i), r = (a) => {
    if (!md(a))
      return;
    const { target: l } = a, c = t(l, a);
    if (typeof c != "function" || !l)
      return;
    const d = (u) => {
      md(u) && (c(u), l.removeEventListener("pointerleave", d));
    };
    l.addEventListener("pointerleave", d, o);
  };
  return s.forEach((a) => {
    a.addEventListener("pointerenter", r, o);
  }), n;
}
const Vg = (e, t) => t ? e === t ? !0 : Vg(e, t.parentElement) : !1, $l = (e) => e.pointerType === "mouse" ? typeof e.button != "number" || e.button <= 0 : e.isPrimary !== !1, lS = /* @__PURE__ */ new Set([
  "BUTTON",
  "INPUT",
  "SELECT",
  "TEXTAREA",
  "A"
]);
function cS(e) {
  return lS.has(e.tagName) || e.tabIndex !== -1;
}
const an = /* @__PURE__ */ new WeakSet();
function Cd(e) {
  return (t) => {
    t.key === "Enter" && e(t);
  };
}
function Er(e, t) {
  e.dispatchEvent(new PointerEvent("pointer" + t, { isPrimary: !0, bubbles: !0 }));
}
const dS = (e, t) => {
  const i = e.currentTarget;
  if (!i)
    return;
  const s = Cd(() => {
    if (an.has(i))
      return;
    Er(i, "down");
    const o = Cd(() => {
      Er(i, "up");
    }), n = () => Er(i, "cancel");
    i.addEventListener("keyup", o, t), i.addEventListener("blur", n, t);
  });
  i.addEventListener("keydown", s, t), i.addEventListener("blur", () => i.removeEventListener("keydown", s), t);
};
function vd(e) {
  return $l(e) && !Lg();
}
function uS(e, t, i = {}) {
  const [s, o, n] = Og(e, i), r = (a) => {
    const l = a.currentTarget;
    if (!vd(a))
      return;
    an.add(l);
    const c = t(l, a), d = (g, p) => {
      window.removeEventListener("pointerup", u), window.removeEventListener("pointercancel", h), an.has(l) && an.delete(l), vd(g) && typeof c == "function" && c(g, { success: p });
    }, u = (g) => {
      d(g, l === window || l === document || i.useGlobalTarget || Vg(l, g.target));
    }, h = (g) => {
      d(g, !1);
    };
    window.addEventListener("pointerup", u, o), window.addEventListener("pointercancel", h, o);
  };
  return s.forEach((a) => {
    (i.useGlobalTarget ? window : a).addEventListener("pointerdown", r, o), kg(a) && (a.addEventListener("focus", (c) => dS(c, o)), !cS(a) && !a.hasAttribute("tabindex") && (a.tabIndex = 0));
  }), n;
}
function Gg(e) {
  return qh(e) && "ownerSVGElement" in e;
}
function hS(e) {
  return Gg(e) && e.tagName === "svg";
}
const Ye = (e) => !!(e && e.getVelocity), gS = [...Tg, Le, di], pS = (e) => gS.find(Dg(e)), Kl = _i({
  transformPagePoint: (e) => e,
  isStatic: !1,
  reducedMotion: "never"
});
class fS extends wl.Component {
  getSnapshotBeforeUpdate(t) {
    const i = this.props.childRef.current;
    if (i && t.isPresent && !this.props.isPresent) {
      const s = i.offsetParent, o = kg(s) && s.offsetWidth || 0, n = this.props.sizeRef.current;
      n.height = i.offsetHeight || 0, n.width = i.offsetWidth || 0, n.top = i.offsetTop, n.left = i.offsetLeft, n.right = o - n.width - n.left;
    }
    return null;
  }
  /**
   * Required with getSnapshotBeforeUpdate to stop React complaining.
   */
  componentDidUpdate() {
  }
  render() {
    return this.props.children;
  }
}
function mS({ children: e, isPresent: t, anchorX: i, root: s }) {
  const o = Sl(), n = H(null), r = H({
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    right: 0
  }), { nonce: a } = ae(Kl);
  return Lh(() => {
    const { width: l, height: c, top: d, left: u, right: h } = r.current;
    if (t || !n.current || !l || !c)
      return;
    const g = i === "left" ? `left: ${u}` : `right: ${h}`;
    n.current.dataset.motionPopId = o;
    const p = document.createElement("style");
    a && (p.nonce = a);
    const f = s ?? document.head;
    return f.appendChild(p), p.sheet && p.sheet.insertRule(`
          [data-motion-pop-id="${o}"] {
            position: absolute !important;
            width: ${l}px !important;
            height: ${c}px !important;
            ${g}px !important;
            top: ${d}px !important;
          }
        `), () => {
      f.contains(p) && f.removeChild(p);
    };
  }, [t]), R.jsx(fS, { isPresent: t, childRef: n, sizeRef: r, children: wl.cloneElement(e, { ref: n }) });
}
const CS = ({ children: e, initial: t, isPresent: i, onExitComplete: s, custom: o, presenceAffectsLayout: n, mode: r, anchorX: a, root: l }) => {
  const c = xl(vS), d = Sl();
  let u = !0, h = X(() => (u = !1, {
    id: d,
    initial: t,
    isPresent: i,
    custom: o,
    onExitComplete: (g) => {
      c.set(g, !0);
      for (const p of c.values())
        if (!p)
          return;
      s && s();
    },
    register: (g) => (c.set(g, !1), () => c.delete(g))
  }), [i, c, s]);
  return n && u && (h = { ...h }), X(() => {
    c.forEach((g, p) => c.set(p, !1));
  }, [i]), wl.useEffect(() => {
    !i && !c.size && s && s();
  }, [i]), r === "popLayout" && (e = R.jsx(mS, { isPresent: i, anchorX: a, root: l, children: e })), R.jsx(rr.Provider, { value: h, children: e });
};
function vS() {
  return /* @__PURE__ */ new Map();
}
function Hg(e = !0) {
  const t = ae(rr);
  if (t === null)
    return [!0, null];
  const { isPresent: i, onExitComplete: s, register: o } = t, n = Sl();
  ve(() => {
    if (e)
      return o(n);
  }, [e]);
  const r = ne(() => e && s && s(n), [n, s, e]);
  return !i && s ? [!1, r] : [!0];
}
const jo = (e) => e.key || "";
function wd(e) {
  const t = [];
  return jC.forEach(e, (i) => {
    $C(i) && t.push(i);
  }), t;
}
const ho = ({ children: e, custom: t, initial: i = !0, onExitComplete: s, presenceAffectsLayout: o = !0, mode: n = "sync", propagate: r = !1, anchorX: a = "left", root: l }) => {
  const [c, d] = Hg(r), u = X(() => wd(e), [e]), h = r && !c ? [] : u.map(jo), g = H(!0), p = H(u), f = xl(() => /* @__PURE__ */ new Map()), [m, C] = V(u), [v, w] = V(u);
  Kh(() => {
    g.current = !1, p.current = u;
    for (let x = 0; x < v.length; x++) {
      const D = jo(v[x]);
      h.includes(D) ? f.delete(D) : f.get(D) !== !0 && f.set(D, !1);
    }
  }, [v, h.length, h.join("-")]);
  const y = [];
  if (u !== m) {
    let x = [...u];
    for (let D = 0; D < v.length; D++) {
      const M = v[D], k = jo(M);
      h.includes(k) || (x.splice(D, 0, M), y.push(M));
    }
    return n === "wait" && y.length && (x = y), w(wd(x)), C(u), null;
  }
  process.env.NODE_ENV !== "production" && n === "wait" && v.length > 1 && console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
  const { forceRender: S } = ae(Rl);
  return R.jsx(R.Fragment, { children: v.map((x) => {
    const D = jo(x), M = r && !c ? !1 : u === v || h.includes(D), k = () => {
      if (f.has(D))
        f.set(D, !0);
      else
        return;
      let P = !0;
      f.forEach((F) => {
        F || (P = !1);
      }), P && (S?.(), w(p.current), r && d?.(), s && s());
    };
    return R.jsx(CS, { isPresent: M, initial: !g.current || i ? void 0 : !1, custom: t, presenceAffectsLayout: o, mode: n, root: l, onExitComplete: M ? void 0 : k, anchorX: a, children: x }, D);
  }) });
}, Bg = _i({ strict: !1 }), Sd = {
  animation: [
    "animate",
    "variants",
    "whileHover",
    "whileTap",
    "exit",
    "whileInView",
    "whileFocus",
    "whileDrag"
  ],
  exit: ["exit"],
  drag: ["drag", "dragControls"],
  focus: ["whileFocus"],
  hover: ["whileHover", "onHoverStart", "onHoverEnd"],
  tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
  pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
  inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
  layout: ["layout", "layoutId"]
}, bs = {};
for (const e in Sd)
  bs[e] = {
    isEnabled: (t) => Sd[e].some((i) => !!t[i])
  };
function wS(e) {
  for (const t in e)
    bs[t] = {
      ...bs[t],
      ...e[t]
    };
}
const SS = /* @__PURE__ */ new Set([
  "animate",
  "exit",
  "variants",
  "initial",
  "style",
  "values",
  "variants",
  "transition",
  "transformTemplate",
  "custom",
  "inherit",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "_dragX",
  "_dragY",
  "onHoverStart",
  "onHoverEnd",
  "onViewportEnter",
  "onViewportLeave",
  "globalTapTarget",
  "ignoreStrict",
  "viewport"
]);
function An(e) {
  return e.startsWith("while") || e.startsWith("drag") && e !== "draggable" || e.startsWith("layout") || e.startsWith("onTap") || e.startsWith("onPan") || e.startsWith("onLayout") || SS.has(e);
}
let Ng = (e) => !An(e);
function yS(e) {
  typeof e == "function" && (Ng = (t) => t.startsWith("on") ? !An(t) : e(t));
}
try {
  yS(require("@emotion/is-prop-valid").default);
} catch {
}
function bS(e, t, i) {
  const s = {};
  for (const o in e)
    o === "values" && typeof e.values == "object" || (Ng(o) || i === !0 && An(o) || !t && !An(o) || // If trying to use native HTML drag events, forward drag listeners
    e.draggable && o.startsWith("onDrag")) && (s[o] = e[o]);
  return s;
}
const ar = /* @__PURE__ */ _i({});
function lr(e) {
  return e !== null && typeof e == "object" && typeof e.start == "function";
}
function go(e) {
  return typeof e == "string" || Array.isArray(e);
}
const Yl = [
  "animate",
  "whileInView",
  "whileFocus",
  "whileHover",
  "whileTap",
  "whileDrag",
  "exit"
], ql = ["initial", ...Yl];
function cr(e) {
  return lr(e.animate) || ql.some((t) => go(e[t]));
}
function Wg(e) {
  return !!(cr(e) || e.variants);
}
function RS(e, t) {
  if (cr(e)) {
    const { initial: i, animate: s } = e;
    return {
      initial: i === !1 || go(i) ? i : void 0,
      animate: go(s) ? s : void 0
    };
  }
  return e.inherit !== !1 ? t : {};
}
function xS(e) {
  const { initial: t, animate: i } = RS(e, ae(ar));
  return X(() => ({ initial: t, animate: i }), [yd(t), yd(i)]);
}
function yd(e) {
  return Array.isArray(e) ? e.join(" ") : e;
}
const po = {};
function FS(e) {
  for (const t in e)
    po[t] = e[t], kl(t) && (po[t].isCSSVariable = !0);
}
function zg(e, { layout: t, layoutId: i }) {
  return ks.has(e) || e.startsWith("origin") || (t || i !== void 0) && (!!po[e] || e === "opacity");
}
const PS = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
}, ES = Is.length;
function DS(e, t, i) {
  let s = "", o = !0;
  for (let n = 0; n < ES; n++) {
    const r = Is[n], a = e[r];
    if (a === void 0)
      continue;
    let l = !0;
    if (typeof a == "number" ? l = a === (r.startsWith("scale") ? 1 : 0) : l = parseFloat(a) === 0, !l || i) {
      const c = Ig(a, Ul[r]);
      if (!l) {
        o = !1;
        const d = PS[r] || r;
        s += `${d}(${c}) `;
      }
      i && (t[r] = c);
    }
  }
  return s = s.trim(), i ? s = i(t, o ? "" : s) : o && (s = "none"), s;
}
function Xl(e, t, i) {
  const { style: s, vars: o, transformOrigin: n } = e;
  let r = !1, a = !1;
  for (const l in t) {
    const c = t[l];
    if (ks.has(l)) {
      r = !0;
      continue;
    } else if (kl(l)) {
      o[l] = c;
      continue;
    } else {
      const d = Ig(c, Ul[l]);
      l.startsWith("origin") ? (a = !0, n[l] = d) : s[l] = d;
    }
  }
  if (t.transform || (r || i ? s.transform = DS(t, e.transform, i) : s.transform && (s.transform = "none")), a) {
    const { originX: l = "50%", originY: c = "50%", originZ: d = 0 } = n;
    s.transformOrigin = `${l} ${c} ${d}`;
  }
}
const Zl = () => ({
  style: {},
  transform: {},
  transformOrigin: {},
  vars: {}
});
function _g(e, t, i) {
  for (const s in t)
    !Ye(t[s]) && !zg(s, i) && (e[s] = t[s]);
}
function TS({ transformTemplate: e }, t) {
  return X(() => {
    const i = Zl();
    return Xl(i, t, e), Object.assign({}, i.vars, i.style);
  }, [t]);
}
function MS(e, t) {
  const i = e.style || {}, s = {};
  return _g(s, i, e), Object.assign(s, TS(e, t)), s;
}
function AS(e, t) {
  const i = {}, s = MS(e, t);
  return e.drag && e.dragListener !== !1 && (i.draggable = !1, s.userSelect = s.WebkitUserSelect = s.WebkitTouchCallout = "none", s.touchAction = e.drag === !0 ? "none" : `pan-${e.drag === "x" ? "y" : "x"}`), e.tabIndex === void 0 && (e.onTap || e.onTapStart || e.whileTap) && (i.tabIndex = 0), i.style = s, i;
}
const IS = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
}, kS = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function LS(e, t, i = 1, s = 0, o = !0) {
  e.pathLength = 1;
  const n = o ? IS : kS;
  e[n.offset] = te.transform(-s);
  const r = te.transform(t), a = te.transform(i);
  e[n.array] = `${r} ${a}`;
}
function Ug(e, {
  attrX: t,
  attrY: i,
  attrScale: s,
  pathLength: o,
  pathSpacing: n = 1,
  pathOffset: r = 0,
  // This is object creation, which we try to avoid per-frame.
  ...a
}, l, c, d) {
  if (Xl(e, a, c), l) {
    e.style.viewBox && (e.attrs.viewBox = e.style.viewBox);
    return;
  }
  e.attrs = e.style, e.style = {};
  const { attrs: u, style: h } = e;
  u.transform && (h.transform = u.transform, delete u.transform), (h.transform || u.transformOrigin) && (h.transformOrigin = u.transformOrigin ?? "50% 50%", delete u.transformOrigin), h.transform && (h.transformBox = d?.transformBox ?? "fill-box", delete u.transformBox), t !== void 0 && (u.x = t), i !== void 0 && (u.y = i), s !== void 0 && (u.scale = s), o !== void 0 && LS(u, o, n, r, !1);
}
const jg = () => ({
  ...Zl(),
  attrs: {}
}), $g = (e) => typeof e == "string" && e.toLowerCase() === "svg";
function OS(e, t, i, s) {
  const o = X(() => {
    const n = jg();
    return Ug(n, t, $g(s), e.transformTemplate, e.style), {
      ...n.attrs,
      style: { ...n.style }
    };
  }, [t]);
  if (e.style) {
    const n = {};
    _g(n, e.style, e), o.style = { ...n, ...o.style };
  }
  return o;
}
const VS = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "switch",
  "symbol",
  "svg",
  "text",
  "tspan",
  "use",
  "view"
];
function Ql(e) {
  return (
    /**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */
    typeof e != "string" || /**
     * If it contains a dash, the element is a custom HTML webcomponent.
     */
    e.includes("-") ? !1 : (
      /**
       * If it's in our list of lowercase SVG tags, it's an SVG component
       */
      !!(VS.indexOf(e) > -1 || /**
       * If it contains a capital letter, it's an SVG component
       */
      /[A-Z]/u.test(e))
    )
  );
}
function GS(e, t, i, { latestValues: s }, o, n = !1) {
  const a = (Ql(e) ? OS : AS)(t, s, o, e), l = bS(t, typeof e == "string", n), c = e !== Oh ? { ...l, ...a, ref: i } : {}, { children: d } = t, u = X(() => Ye(d) ? d.get() : d, [d]);
  return Vh(e, {
    ...c,
    children: u
  });
}
function bd(e) {
  const t = [{}, {}];
  return e?.values.forEach((i, s) => {
    t[0][s] = i.get(), t[1][s] = i.getVelocity();
  }), t;
}
function Jl(e, t, i, s) {
  if (typeof t == "function") {
    const [o, n] = bd(s);
    t = t(i !== void 0 ? i : e.custom, o, n);
  }
  if (typeof t == "string" && (t = e.variants && e.variants[t]), typeof t == "function") {
    const [o, n] = bd(s);
    t = t(i !== void 0 ? i : e.custom, o, n);
  }
  return t;
}
function ln(e) {
  return Ye(e) ? e.get() : e;
}
function HS({ scrapeMotionValuesFromProps: e, createRenderState: t }, i, s, o) {
  return {
    latestValues: BS(i, s, o, e),
    renderState: t()
  };
}
function BS(e, t, i, s) {
  const o = {}, n = s(e, {});
  for (const h in n)
    o[h] = ln(n[h]);
  let { initial: r, animate: a } = e;
  const l = cr(e), c = Wg(e);
  t && c && !l && e.inherit !== !1 && (r === void 0 && (r = t.initial), a === void 0 && (a = t.animate));
  let d = i ? i.initial === !1 : !1;
  d = d || r === !1;
  const u = d ? a : r;
  if (u && typeof u != "boolean" && !lr(u)) {
    const h = Array.isArray(u) ? u : [u];
    for (let g = 0; g < h.length; g++) {
      const p = Jl(e, h[g]);
      if (p) {
        const { transitionEnd: f, transition: m, ...C } = p;
        for (const v in C) {
          let w = C[v];
          if (Array.isArray(w)) {
            const y = d ? w.length - 1 : 0;
            w = w[y];
          }
          w !== null && (o[v] = w);
        }
        for (const v in f)
          o[v] = f[v];
      }
    }
  }
  return o;
}
const Kg = (e) => (t, i) => {
  const s = ae(ar), o = ae(rr), n = () => HS(e, t, s, o);
  return i ? n() : xl(n);
};
function ec(e, t, i) {
  const { style: s } = e, o = {};
  for (const n in s)
    (Ye(s[n]) || t.style && Ye(t.style[n]) || zg(n, e) || i?.getValue(n)?.liveStyle !== void 0) && (o[n] = s[n]);
  return o;
}
const NS = /* @__PURE__ */ Kg({
  scrapeMotionValuesFromProps: ec,
  createRenderState: Zl
});
function Yg(e, t, i) {
  const s = ec(e, t, i);
  for (const o in e)
    if (Ye(e[o]) || Ye(t[o])) {
      const n = Is.indexOf(o) !== -1 ? "attr" + o.charAt(0).toUpperCase() + o.substring(1) : o;
      s[n] = e[o];
    }
  return s;
}
const WS = /* @__PURE__ */ Kg({
  scrapeMotionValuesFromProps: Yg,
  createRenderState: jg
}), zS = Symbol.for("motionComponentSymbol");
function os(e) {
  return e && typeof e == "object" && Object.prototype.hasOwnProperty.call(e, "current");
}
function _S(e, t, i) {
  return ne(
    (s) => {
      s && e.onMount && e.onMount(s), t && (s ? t.mount(s) : t.unmount()), i && (typeof i == "function" ? i(s) : os(i) && (i.current = s));
    },
    /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */
    [t]
  );
}
const tc = (e) => e.replace(/([a-z])([A-Z])/gu, "$1-$2").toLowerCase(), US = "framerAppearId", qg = "data-" + tc(US), Xg = _i({});
function jS(e, t, i, s, o) {
  const { visualElement: n } = ae(ar), r = ae(Bg), a = ae(rr), l = ae(Kl).reducedMotion, c = H(null);
  s = s || r.renderer, !c.current && s && (c.current = s(e, {
    visualState: t,
    parent: n,
    props: i,
    presenceContext: a,
    blockInitialAnimation: a ? a.initial === !1 : !1,
    reducedMotionConfig: l
  }));
  const d = c.current, u = ae(Xg);
  d && !d.projection && o && (d.type === "html" || d.type === "svg") && $S(c.current, i, o, u);
  const h = H(!1);
  Lh(() => {
    d && h.current && d.update(i, a);
  });
  const g = i[qg], p = H(!!g && !window.MotionHandoffIsComplete?.(g) && window.MotionHasOptimisedAnimation?.(g));
  return Kh(() => {
    d && (h.current = !0, window.MotionIsMounted = !0, d.updateFeatures(), d.scheduleRenderMicrotask(), p.current && d.animationState && d.animationState.animateChanges());
  }), ve(() => {
    d && (!p.current && d.animationState && d.animationState.animateChanges(), p.current && (queueMicrotask(() => {
      window.MotionHandoffMarkAsComplete?.(g);
    }), p.current = !1), d.enteringChildren = void 0);
  }), d;
}
function $S(e, t, i, s) {
  const { layoutId: o, layout: n, drag: r, dragConstraints: a, layoutScroll: l, layoutRoot: c, layoutCrossfade: d } = t;
  e.projection = new i(e.latestValues, t["data-framer-portal-id"] ? void 0 : Zg(e.parent)), e.projection.setOptions({
    layoutId: o,
    layout: n,
    alwaysMeasureLayout: !!r || a && os(a),
    visualElement: e,
    /**
     * TODO: Update options in an effect. This could be tricky as it'll be too late
     * to update by the time layout animations run.
     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
     * ensuring it gets called if there's no potential layout animations.
     *
     */
    animationType: typeof n == "string" ? n : "both",
    initialPromotionConfig: s,
    crossfade: d,
    layoutScroll: l,
    layoutRoot: c
  });
}
function Zg(e) {
  if (e)
    return e.options.allowProjection !== !1 ? e.projection : Zg(e.parent);
}
function Dr(e, { forwardMotionProps: t = !1 } = {}, i, s) {
  i && wS(i);
  const o = Ql(e) ? WS : NS;
  function n(a, l) {
    let c;
    const d = {
      ...ae(Kl),
      ...a,
      layoutId: KS(a)
    }, { isStatic: u } = d, h = xS(a), g = o(a, u);
    if (!u && Fl) {
      YS(d, i);
      const p = qS(d);
      c = p.MeasureLayout, h.visualElement = jS(e, g, d, s, p.ProjectionNode);
    }
    return R.jsxs(ar.Provider, { value: h, children: [c && h.visualElement ? R.jsx(c, { visualElement: h.visualElement, ...d }) : null, GS(e, a, _S(g, h.visualElement, l), g, u, t)] });
  }
  n.displayName = `motion.${typeof e == "string" ? e : `create(${e.displayName ?? e.name ?? ""})`}`;
  const r = nr(n);
  return r[zS] = e, r;
}
function KS({ layoutId: e }) {
  const t = ae(Rl).id;
  return t && e !== void 0 ? t + "-" + e : e;
}
function YS(e, t) {
  const i = ae(Bg).strict;
  if (process.env.NODE_ENV !== "production" && t && i) {
    const s = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
    e.ignoreStrict ? Ms(!1, s, "lazy-strict-mode") : Yt(!1, s, "lazy-strict-mode");
  }
}
function qS(e) {
  const { drag: t, layout: i } = bs;
  if (!t && !i)
    return {};
  const s = { ...t, ...i };
  return {
    MeasureLayout: t?.isEnabled(e) || i?.isEnabled(e) ? s.MeasureLayout : void 0,
    ProjectionNode: s.ProjectionNode
  };
}
function XS(e, t) {
  if (typeof Proxy > "u")
    return Dr;
  const i = /* @__PURE__ */ new Map(), s = (n, r) => Dr(n, r, e, t), o = (n, r) => (process.env.NODE_ENV !== "production" && Ml(!1, "motion() is deprecated. Use motion.create() instead."), s(n, r));
  return new Proxy(o, {
    /**
     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
     * The prop name is passed through as `key` and we can use that to generate a `motion`
     * DOM component with that name.
     */
    get: (n, r) => r === "create" ? s : (i.has(r) || i.set(r, Dr(r, void 0, e, t)), i.get(r))
  });
}
function Qg({ top: e, left: t, right: i, bottom: s }) {
  return {
    x: { min: t, max: i },
    y: { min: e, max: s }
  };
}
function ZS({ x: e, y: t }) {
  return { top: t.min, right: e.max, bottom: t.max, left: e.min };
}
function QS(e, t) {
  if (!t)
    return e;
  const i = t({ x: e.left, y: e.top }), s = t({ x: e.right, y: e.bottom });
  return {
    top: i.y,
    left: i.x,
    bottom: s.y,
    right: s.x
  };
}
function Tr(e) {
  return e === void 0 || e === 1;
}
function Ia({ scale: e, scaleX: t, scaleY: i }) {
  return !Tr(e) || !Tr(t) || !Tr(i);
}
function vi(e) {
  return Ia(e) || Jg(e) || e.z || e.rotate || e.rotateX || e.rotateY || e.skewX || e.skewY;
}
function Jg(e) {
  return Rd(e.x) || Rd(e.y);
}
function Rd(e) {
  return e && e !== "0%";
}
function In(e, t, i) {
  const s = e - i, o = t * s;
  return i + o;
}
function xd(e, t, i, s, o) {
  return o !== void 0 && (e = In(e, o, s)), In(e, i, s) + t;
}
function ka(e, t = 0, i = 1, s, o) {
  e.min = xd(e.min, t, i, s, o), e.max = xd(e.max, t, i, s, o);
}
function ep(e, { x: t, y: i }) {
  ka(e.x, t.translate, t.scale, t.originPoint), ka(e.y, i.translate, i.scale, i.originPoint);
}
const Fd = 0.999999999999, Pd = 1.0000000000001;
function JS(e, t, i, s = !1) {
  const o = i.length;
  if (!o)
    return;
  t.x = t.y = 1;
  let n, r;
  for (let a = 0; a < o; a++) {
    n = i[a], r = n.projectionDelta;
    const { visualElement: l } = n.options;
    l && l.props.style && l.props.style.display === "contents" || (s && n.options.layoutScroll && n.scroll && n !== n.root && rs(e, {
      x: -n.scroll.offset.x,
      y: -n.scroll.offset.y
    }), r && (t.x *= r.x.scale, t.y *= r.y.scale, ep(e, r)), s && vi(n.latestValues) && rs(e, n.latestValues));
  }
  t.x < Pd && t.x > Fd && (t.x = 1), t.y < Pd && t.y > Fd && (t.y = 1);
}
function ns(e, t) {
  e.min = e.min + t, e.max = e.max + t;
}
function Ed(e, t, i, s, o = 0.5) {
  const n = xe(e.min, e.max, o);
  ka(e, t, i, n, s);
}
function rs(e, t) {
  Ed(e.x, t.x, t.scaleX, t.scale, t.originX), Ed(e.y, t.y, t.scaleY, t.scale, t.originY);
}
function tp(e, t) {
  return Qg(QS(e.getBoundingClientRect(), t));
}
function ey(e, t, i) {
  const s = tp(e, i), { scroll: o } = t;
  return o && (ns(s.x, o.offset.x), ns(s.y, o.offset.y)), s;
}
const Dd = () => ({
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0
}), as = () => ({
  x: Dd(),
  y: Dd()
}), Td = () => ({ min: 0, max: 0 }), Ee = () => ({
  x: Td(),
  y: Td()
}), La = { current: null }, ip = { current: !1 };
function ty() {
  if (ip.current = !0, !!Fl)
    if (window.matchMedia) {
      const e = window.matchMedia("(prefers-reduced-motion)"), t = () => La.current = e.matches;
      e.addEventListener("change", t), t();
    } else
      La.current = !1;
}
const iy = /* @__PURE__ */ new WeakMap();
function sy(e, t, i) {
  for (const s in t) {
    const o = t[s], n = i[s];
    if (Ye(o))
      e.addValue(s, o);
    else if (Ye(n))
      e.addValue(s, ys(o, { owner: e }));
    else if (n !== o)
      if (e.hasValue(s)) {
        const r = e.getValue(s);
        r.liveStyle === !0 ? r.jump(o) : r.hasAnimated || r.set(o);
      } else {
        const r = e.getStaticValue(s);
        e.addValue(s, ys(r !== void 0 ? r : o, { owner: e }));
      }
  }
  for (const s in i)
    t[s] === void 0 && e.removeValue(s);
  return t;
}
const Md = [
  "AnimationStart",
  "AnimationComplete",
  "Update",
  "BeforeLayoutMeasure",
  "LayoutMeasure",
  "LayoutAnimationStart",
  "LayoutAnimationComplete"
];
class oy {
  /**
   * This method takes React props and returns found MotionValues. For example, HTML
   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
   *
   * This isn't an abstract method as it needs calling in the constructor, but it is
   * intended to be one.
   */
  scrapeMotionValuesFromProps(t, i, s) {
    return {};
  }
  constructor({ parent: t, props: i, presenceContext: s, reducedMotionConfig: o, blockInitialAnimation: n, visualState: r }, a = {}) {
    this.current = null, this.children = /* @__PURE__ */ new Set(), this.isVariantNode = !1, this.isControllingVariants = !1, this.shouldReduceMotion = null, this.values = /* @__PURE__ */ new Map(), this.KeyframeResolver = zl, this.features = {}, this.valueSubscriptions = /* @__PURE__ */ new Map(), this.prevMotionValues = {}, this.events = {}, this.propEventSubscriptions = {}, this.notifyUpdate = () => this.notify("Update", this.latestValues), this.render = () => {
      this.current && (this.triggerBuild(), this.renderInstance(this.current, this.renderState, this.props.style, this.projection));
    }, this.renderScheduledAt = 0, this.scheduleRender = () => {
      const h = it.now();
      this.renderScheduledAt < h && (this.renderScheduledAt = h, Se.render(this.render, !1, !0));
    };
    const { latestValues: l, renderState: c } = r;
    this.latestValues = l, this.baseTarget = { ...l }, this.initialValues = i.initial ? { ...l } : {}, this.renderState = c, this.parent = t, this.props = i, this.presenceContext = s, this.depth = t ? t.depth + 1 : 0, this.reducedMotionConfig = o, this.options = a, this.blockInitialAnimation = !!n, this.isControllingVariants = cr(i), this.isVariantNode = Wg(i), this.isVariantNode && (this.variantChildren = /* @__PURE__ */ new Set()), this.manuallyAnimateOnMount = !!(t && t.current);
    const { willChange: d, ...u } = this.scrapeMotionValuesFromProps(i, {}, this);
    for (const h in u) {
      const g = u[h];
      l[h] !== void 0 && Ye(g) && g.set(l[h]);
    }
  }
  mount(t) {
    this.current = t, iy.set(t, this), this.projection && !this.projection.instance && this.projection.mount(t), this.parent && this.isVariantNode && !this.isControllingVariants && (this.removeFromVariantTree = this.parent.addVariantChild(this)), this.values.forEach((i, s) => this.bindToMotionValue(s, i)), ip.current || ty(), this.shouldReduceMotion = this.reducedMotionConfig === "never" ? !1 : this.reducedMotionConfig === "always" ? !0 : La.current, process.env.NODE_ENV !== "production" && Ml(this.shouldReduceMotion !== !0, "You have Reduced Motion enabled on your device. Animations may not appear as expected.", "reduced-motion-disabled"), this.parent?.addChild(this), this.update(this.props, this.presenceContext);
  }
  unmount() {
    this.projection && this.projection.unmount(), ci(this.notifyUpdate), ci(this.render), this.valueSubscriptions.forEach((t) => t()), this.valueSubscriptions.clear(), this.removeFromVariantTree && this.removeFromVariantTree(), this.parent?.removeChild(this);
    for (const t in this.events)
      this.events[t].clear();
    for (const t in this.features) {
      const i = this.features[t];
      i && (i.unmount(), i.isMounted = !1);
    }
    this.current = null;
  }
  addChild(t) {
    this.children.add(t), this.enteringChildren ?? (this.enteringChildren = /* @__PURE__ */ new Set()), this.enteringChildren.add(t);
  }
  removeChild(t) {
    this.children.delete(t), this.enteringChildren && this.enteringChildren.delete(t);
  }
  bindToMotionValue(t, i) {
    this.valueSubscriptions.has(t) && this.valueSubscriptions.get(t)();
    const s = ks.has(t);
    s && this.onBindTransform && this.onBindTransform();
    const o = i.on("change", (r) => {
      this.latestValues[t] = r, this.props.onUpdate && Se.preRender(this.notifyUpdate), s && this.projection && (this.projection.isTransformDirty = !0), this.scheduleRender();
    });
    let n;
    window.MotionCheckAppearSync && (n = window.MotionCheckAppearSync(this, t, i)), this.valueSubscriptions.set(t, () => {
      o(), n && n(), i.owner && i.stop();
    });
  }
  sortNodePosition(t) {
    return !this.current || !this.sortInstanceNodePosition || this.type !== t.type ? 0 : this.sortInstanceNodePosition(this.current, t.current);
  }
  updateFeatures() {
    let t = "animation";
    for (t in bs) {
      const i = bs[t];
      if (!i)
        continue;
      const { isEnabled: s, Feature: o } = i;
      if (!this.features[t] && o && s(this.props) && (this.features[t] = new o(this)), this.features[t]) {
        const n = this.features[t];
        n.isMounted ? n.update() : (n.mount(), n.isMounted = !0);
      }
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.props);
  }
  /**
   * Measure the current viewport box with or without transforms.
   * Only measures axis-aligned boxes, rotate and skew must be manually
   * removed with a re-render to work.
   */
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : Ee();
  }
  getStaticValue(t) {
    return this.latestValues[t];
  }
  setStaticValue(t, i) {
    this.latestValues[t] = i;
  }
  /**
   * Update the provided props. Ensure any newly-added motion values are
   * added to our map, old ones removed, and listeners updated.
   */
  update(t, i) {
    (t.transformTemplate || this.props.transformTemplate) && this.scheduleRender(), this.prevProps = this.props, this.props = t, this.prevPresenceContext = this.presenceContext, this.presenceContext = i;
    for (let s = 0; s < Md.length; s++) {
      const o = Md[s];
      this.propEventSubscriptions[o] && (this.propEventSubscriptions[o](), delete this.propEventSubscriptions[o]);
      const n = "on" + o, r = t[n];
      r && (this.propEventSubscriptions[o] = this.on(o, r));
    }
    this.prevMotionValues = sy(this, this.scrapeMotionValuesFromProps(t, this.prevProps, this), this.prevMotionValues), this.handleChildMotionValue && this.handleChildMotionValue();
  }
  getProps() {
    return this.props;
  }
  /**
   * Returns the variant definition with a given name.
   */
  getVariant(t) {
    return this.props.variants ? this.props.variants[t] : void 0;
  }
  /**
   * Returns the defined default transition on this component.
   */
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  /**
   * Add a child visual element to our set of children.
   */
  addVariantChild(t) {
    const i = this.getClosestVariantNode();
    if (i)
      return i.variantChildren && i.variantChildren.add(t), () => i.variantChildren.delete(t);
  }
  /**
   * Add a motion value and bind it to this visual element.
   */
  addValue(t, i) {
    const s = this.values.get(t);
    i !== s && (s && this.removeValue(t), this.bindToMotionValue(t, i), this.values.set(t, i), this.latestValues[t] = i.get());
  }
  /**
   * Remove a motion value and unbind any active subscriptions.
   */
  removeValue(t) {
    this.values.delete(t);
    const i = this.valueSubscriptions.get(t);
    i && (i(), this.valueSubscriptions.delete(t)), delete this.latestValues[t], this.removeValueFromRenderState(t, this.renderState);
  }
  /**
   * Check whether we have a motion value for this key
   */
  hasValue(t) {
    return this.values.has(t);
  }
  getValue(t, i) {
    if (this.props.values && this.props.values[t])
      return this.props.values[t];
    let s = this.values.get(t);
    return s === void 0 && i !== void 0 && (s = ys(i === null ? void 0 : i, { owner: this }), this.addValue(t, s)), s;
  }
  /**
   * If we're trying to animate to a previously unencountered value,
   * we need to check for it in our state and as a last resort read it
   * directly from the instance (which might have performance implications).
   */
  readValue(t, i) {
    let s = this.latestValues[t] !== void 0 || !this.current ? this.latestValues[t] : this.getBaseTargetFromProps(this.props, t) ?? this.readValueFromInstance(this.current, t, this.options);
    return s != null && (typeof s == "string" && (Yh(s) || Xh(s)) ? s = parseFloat(s) : !pS(s) && di.test(i) && (s = Ag(t, i)), this.setBaseTarget(t, Ye(s) ? s.get() : s)), Ye(s) ? s.get() : s;
  }
  /**
   * Set the base target to later animate back to. This is currently
   * only hydrated on creation and when we first read a value.
   */
  setBaseTarget(t, i) {
    this.baseTarget[t] = i;
  }
  /**
   * Find the base target for a value thats been removed from all animation
   * props.
   */
  getBaseTarget(t) {
    const { initial: i } = this.props;
    let s;
    if (typeof i == "string" || typeof i == "object") {
      const n = Jl(this.props, i, this.presenceContext?.custom);
      n && (s = n[t]);
    }
    if (i && s !== void 0)
      return s;
    const o = this.getBaseTargetFromProps(this.props, t);
    return o !== void 0 && !Ye(o) ? o : this.initialValues[t] !== void 0 && s === void 0 ? void 0 : this.baseTarget[t];
  }
  on(t, i) {
    return this.events[t] || (this.events[t] = new Tl()), this.events[t].add(i);
  }
  notify(t, ...i) {
    this.events[t] && this.events[t].notify(...i);
  }
  scheduleRenderMicrotask() {
    jl.render(this.render);
  }
}
class sp extends oy {
  constructor() {
    super(...arguments), this.KeyframeResolver = iS;
  }
  sortInstanceNodePosition(t, i) {
    return t.compareDocumentPosition(i) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(t, i) {
    return t.style ? t.style[i] : void 0;
  }
  removeValueFromRenderState(t, { vars: i, style: s }) {
    delete i[t], delete s[t];
  }
  handleChildMotionValue() {
    this.childSubscription && (this.childSubscription(), delete this.childSubscription);
    const { children: t } = this.props;
    Ye(t) && (this.childSubscription = t.on("change", (i) => {
      this.current && (this.current.textContent = `${i}`);
    }));
  }
}
function op(e, { style: t, vars: i }, s, o) {
  const n = e.style;
  let r;
  for (r in t)
    n[r] = t[r];
  o?.applyProjectionStyles(n, s);
  for (r in i)
    n.setProperty(r, i[r]);
}
function ny(e) {
  return window.getComputedStyle(e);
}
class ry extends sp {
  constructor() {
    super(...arguments), this.type = "html", this.renderInstance = op;
  }
  readValueFromInstance(t, i) {
    if (ks.has(i))
      return this.projection?.isProjecting ? Fa(i) : Sw(t, i);
    {
      const s = ny(t), o = (kl(i) ? s.getPropertyValue(i) : s[i]) || 0;
      return typeof o == "string" ? o.trim() : o;
    }
  }
  measureInstanceViewportBox(t, { transformPagePoint: i }) {
    return tp(t, i);
  }
  build(t, i, s) {
    Xl(t, i, s.transformTemplate);
  }
  scrapeMotionValuesFromProps(t, i, s) {
    return ec(t, i, s);
  }
}
const np = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength",
  "startOffset",
  "textLength",
  "lengthAdjust"
]);
function ay(e, t, i, s) {
  op(e, t, void 0, s);
  for (const o in t.attrs)
    e.setAttribute(np.has(o) ? o : tc(o), t.attrs[o]);
}
class ly extends sp {
  constructor() {
    super(...arguments), this.type = "svg", this.isSVGTag = !1, this.measureInstanceViewportBox = Ee;
  }
  getBaseTargetFromProps(t, i) {
    return t[i];
  }
  readValueFromInstance(t, i) {
    if (ks.has(i)) {
      const s = Mg(i);
      return s && s.default || 0;
    }
    return i = np.has(i) ? i : tc(i), t.getAttribute(i);
  }
  scrapeMotionValuesFromProps(t, i, s) {
    return Yg(t, i, s);
  }
  build(t, i, s) {
    Ug(t, i, this.isSVGTag, s.transformTemplate, s.style);
  }
  renderInstance(t, i, s, o) {
    ay(t, i, s, o);
  }
  mount(t) {
    this.isSVGTag = $g(t.tagName), super.mount(t);
  }
}
const cy = (e, t) => Ql(e) ? new ly(t) : new ry(t, {
  allowProjection: e !== Oh
});
function cs(e, t, i) {
  const s = e.getProps();
  return Jl(s, t, i !== void 0 ? i : s.custom, e);
}
const Oa = (e) => Array.isArray(e);
function dy(e, t, i) {
  e.hasValue(t) ? e.getValue(t).set(i) : e.addValue(t, ys(i));
}
function uy(e) {
  return Oa(e) ? e[e.length - 1] || 0 : e;
}
function hy(e, t) {
  const i = cs(e, t);
  let { transitionEnd: s = {}, transition: o = {}, ...n } = i || {};
  n = { ...n, ...s };
  for (const r in n) {
    const a = uy(n[r]);
    dy(e, r, a);
  }
}
function gy(e) {
  return !!(Ye(e) && e.add);
}
function Va(e, t) {
  const i = e.getValue("willChange");
  if (gy(i))
    return i.add(t);
  if (!i && qt.WillChange) {
    const s = new qt.WillChange("auto");
    e.addValue("willChange", s), s.add(t);
  }
}
function rp(e) {
  return e.props[qg];
}
const py = (e) => e !== null;
function fy(e, { repeat: t, repeatType: i = "loop" }, s) {
  const o = e.filter(py), n = t && i !== "loop" && t % 2 === 1 ? 0 : o.length - 1;
  return o[n];
}
const my = {
  type: "spring",
  stiffness: 500,
  damping: 25,
  restSpeed: 10
}, Cy = (e) => ({
  type: "spring",
  stiffness: 550,
  damping: e === 0 ? 2 * Math.sqrt(550) : 30,
  restSpeed: 10
}), vy = {
  type: "keyframes",
  duration: 0.8
}, wy = {
  type: "keyframes",
  ease: [0.25, 0.1, 0.35, 1],
  duration: 0.3
}, Sy = (e, { keyframes: t }) => t.length > 2 ? vy : ks.has(e) ? e.startsWith("scale") ? Cy(t[1]) : my : wy;
function yy({ when: e, delay: t, delayChildren: i, staggerChildren: s, staggerDirection: o, repeat: n, repeatType: r, repeatDelay: a, from: l, elapsed: c, ...d }) {
  return !!Object.keys(d).length;
}
const ic = (e, t, i, s = {}, o, n) => (r) => {
  const a = _l(s, e) || {}, l = a.delay || s.delay || 0;
  let { elapsed: c = 0 } = s;
  c = c - /* @__PURE__ */ xt(l);
  const d = {
    keyframes: Array.isArray(i) ? i : [null, i],
    ease: "easeOut",
    velocity: t.getVelocity(),
    ...a,
    delay: -c,
    onUpdate: (h) => {
      t.set(h), a.onUpdate && a.onUpdate(h);
    },
    onComplete: () => {
      r(), a.onComplete && a.onComplete();
    },
    name: e,
    motionValue: t,
    element: n ? void 0 : o
  };
  yy(a) || Object.assign(d, Sy(e, d)), d.duration && (d.duration = /* @__PURE__ */ xt(d.duration)), d.repeatDelay && (d.repeatDelay = /* @__PURE__ */ xt(d.repeatDelay)), d.from !== void 0 && (d.keyframes[0] = d.from);
  let u = !1;
  if ((d.type === !1 || d.duration === 0 && !d.repeatDelay) && (Ma(d), d.delay === 0 && (u = !0)), (qt.instantAnimations || qt.skipAnimations) && (u = !0, Ma(d), d.delay = 0), d.allowFlatten = !a.type && !a.ease, u && !n && t.get() !== void 0) {
    const h = fy(d.keyframes, a);
    if (h !== void 0) {
      Se.update(() => {
        d.onUpdate(h), d.onComplete();
      });
      return;
    }
  }
  return a.isSync ? new Wl(d) : new _w(d);
};
function by({ protectedKeys: e, needsAnimating: t }, i) {
  const s = e.hasOwnProperty(i) && t[i] !== !0;
  return t[i] = !1, s;
}
function ap(e, t, { delay: i = 0, transitionOverride: s, type: o } = {}) {
  let { transition: n = e.getDefaultTransition(), transitionEnd: r, ...a } = t;
  s && (n = s);
  const l = [], c = o && e.animationState && e.animationState.getState()[o];
  for (const d in a) {
    const u = e.getValue(d, e.latestValues[d] ?? null), h = a[d];
    if (h === void 0 || c && by(c, d))
      continue;
    const g = {
      delay: i,
      ..._l(n || {}, d)
    }, p = u.get();
    if (p !== void 0 && !u.isAnimating && !Array.isArray(h) && h === p && !g.velocity)
      continue;
    let f = !1;
    if (window.MotionHandoffAnimation) {
      const C = rp(e);
      if (C) {
        const v = window.MotionHandoffAnimation(C, d, Se);
        v !== null && (g.startTime = v, f = !0);
      }
    }
    Va(e, d), u.start(ic(d, u, h, e.shouldReduceMotion && Eg.has(d) ? { type: !1 } : g, e, f));
    const m = u.animation;
    m && l.push(m);
  }
  return r && Promise.all(l).then(() => {
    Se.update(() => {
      r && hy(e, r);
    });
  }), l;
}
function lp(e, t, i, s = 0, o = 1) {
  const n = Array.from(e).sort((c, d) => c.sortNodePosition(d)).indexOf(t), r = e.size, a = (r - 1) * s;
  return typeof i == "function" ? i(n, r) : o === 1 ? n * s : a - n * s;
}
function Ga(e, t, i = {}) {
  const s = cs(e, t, i.type === "exit" ? e.presenceContext?.custom : void 0);
  let { transition: o = e.getDefaultTransition() || {} } = s || {};
  i.transitionOverride && (o = i.transitionOverride);
  const n = s ? () => Promise.all(ap(e, s, i)) : () => Promise.resolve(), r = e.variantChildren && e.variantChildren.size ? (l = 0) => {
    const { delayChildren: c = 0, staggerChildren: d, staggerDirection: u } = o;
    return Ry(e, t, l, c, d, u, i);
  } : () => Promise.resolve(), { when: a } = o;
  if (a) {
    const [l, c] = a === "beforeChildren" ? [n, r] : [r, n];
    return l().then(() => c());
  } else
    return Promise.all([n(), r(i.delay)]);
}
function Ry(e, t, i = 0, s = 0, o = 0, n = 1, r) {
  const a = [];
  for (const l of e.variantChildren)
    l.notify("AnimationStart", t), a.push(Ga(l, t, {
      ...r,
      delay: i + (typeof s == "function" ? 0 : s) + lp(e.variantChildren, l, s, o, n)
    }).then(() => l.notify("AnimationComplete", t)));
  return Promise.all(a);
}
function xy(e, t, i = {}) {
  e.notify("AnimationStart", t);
  let s;
  if (Array.isArray(t)) {
    const o = t.map((n) => Ga(e, n, i));
    s = Promise.all(o);
  } else if (typeof t == "string")
    s = Ga(e, t, i);
  else {
    const o = typeof t == "function" ? cs(e, t, i.custom) : t;
    s = Promise.all(ap(e, o, i));
  }
  return s.then(() => {
    e.notify("AnimationComplete", t);
  });
}
function cp(e, t) {
  if (!Array.isArray(t))
    return !1;
  const i = t.length;
  if (i !== e.length)
    return !1;
  for (let s = 0; s < i; s++)
    if (t[s] !== e[s])
      return !1;
  return !0;
}
const Fy = ql.length;
function dp(e) {
  if (!e)
    return;
  if (!e.isControllingVariants) {
    const i = e.parent ? dp(e.parent) || {} : {};
    return e.props.initial !== void 0 && (i.initial = e.props.initial), i;
  }
  const t = {};
  for (let i = 0; i < Fy; i++) {
    const s = ql[i], o = e.props[s];
    (go(o) || o === !1) && (t[s] = o);
  }
  return t;
}
const Py = [...Yl].reverse(), Ey = Yl.length;
function Dy(e) {
  return (t) => Promise.all(t.map(({ animation: i, options: s }) => xy(e, i, s)));
}
function Ty(e) {
  let t = Dy(e), i = Ad(), s = !0;
  const o = (l) => (c, d) => {
    const u = cs(e, d, l === "exit" ? e.presenceContext?.custom : void 0);
    if (u) {
      const { transition: h, transitionEnd: g, ...p } = u;
      c = { ...c, ...p, ...g };
    }
    return c;
  };
  function n(l) {
    t = l(e);
  }
  function r(l) {
    const { props: c } = e, d = dp(e.parent) || {}, u = [], h = /* @__PURE__ */ new Set();
    let g = {}, p = 1 / 0;
    for (let m = 0; m < Ey; m++) {
      const C = Py[m], v = i[C], w = c[C] !== void 0 ? c[C] : d[C], y = go(w), S = C === l ? v.isActive : null;
      S === !1 && (p = m);
      let x = w === d[C] && w !== c[C] && y;
      if (x && s && e.manuallyAnimateOnMount && (x = !1), v.protectedKeys = { ...g }, // If it isn't active and hasn't *just* been set as inactive
      !v.isActive && S === null || // If we didn't and don't have any defined prop for this animation type
      !w && !v.prevProp || // Or if the prop doesn't define an animation
      lr(w) || typeof w == "boolean")
        continue;
      const D = My(v.prevProp, w);
      let M = D || // If we're making this variant active, we want to always make it active
      C === l && v.isActive && !x && y || // If we removed a higher-priority variant (i is in reverse order)
      m > p && y, k = !1;
      const P = Array.isArray(w) ? w : [w];
      let F = P.reduce(o(C), {});
      S === !1 && (F = {});
      const { prevResolvedValues: N = {} } = v, j = {
        ...N,
        ...F
      }, z = (G) => {
        M = !0, h.has(G) && (k = !0, h.delete(G)), v.needsAnimating[G] = !0;
        const I = e.getValue(G);
        I && (I.liveStyle = !1);
      };
      for (const G in j) {
        const I = F[G], _ = N[G];
        if (g.hasOwnProperty(G))
          continue;
        let b = !1;
        Oa(I) && Oa(_) ? b = !cp(I, _) : b = I !== _, b ? I != null ? z(G) : h.add(G) : I !== void 0 && h.has(G) ? z(G) : v.protectedKeys[G] = !0;
      }
      v.prevProp = w, v.prevResolvedValues = F, v.isActive && (g = { ...g, ...F }), s && e.blockInitialAnimation && (M = !1);
      const A = x && D;
      M && (!A || k) && u.push(...P.map((G) => {
        const I = { type: C };
        if (typeof G == "string" && s && !A && e.manuallyAnimateOnMount && e.parent) {
          const { parent: _ } = e, b = cs(_, G);
          if (_.enteringChildren && b) {
            const { delayChildren: L } = b.transition || {};
            I.delay = lp(_.enteringChildren, e, L);
          }
        }
        return {
          animation: G,
          options: I
        };
      }));
    }
    if (h.size) {
      const m = {};
      if (typeof c.initial != "boolean") {
        const C = cs(e, Array.isArray(c.initial) ? c.initial[0] : c.initial);
        C && C.transition && (m.transition = C.transition);
      }
      h.forEach((C) => {
        const v = e.getBaseTarget(C), w = e.getValue(C);
        w && (w.liveStyle = !0), m[C] = v ?? null;
      }), u.push({ animation: m });
    }
    let f = !!u.length;
    return s && (c.initial === !1 || c.initial === c.animate) && !e.manuallyAnimateOnMount && (f = !1), s = !1, f ? t(u) : Promise.resolve();
  }
  function a(l, c) {
    if (i[l].isActive === c)
      return Promise.resolve();
    e.variantChildren?.forEach((u) => u.animationState?.setActive(l, c)), i[l].isActive = c;
    const d = r(l);
    for (const u in i)
      i[u].protectedKeys = {};
    return d;
  }
  return {
    animateChanges: r,
    setActive: a,
    setAnimateFunction: n,
    getState: () => i,
    reset: () => {
      i = Ad(), s = !0;
    }
  };
}
function My(e, t) {
  return typeof t == "string" ? t !== e : Array.isArray(t) ? !cp(t, e) : !1;
}
function Ci(e = !1) {
  return {
    isActive: e,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function Ad() {
  return {
    animate: Ci(!0),
    whileInView: Ci(),
    whileHover: Ci(),
    whileTap: Ci(),
    whileDrag: Ci(),
    whileFocus: Ci(),
    exit: Ci()
  };
}
class pi {
  constructor(t) {
    this.isMounted = !1, this.node = t;
  }
  update() {
  }
}
class Ay extends pi {
  /**
   * We dynamically generate the AnimationState manager as it contains a reference
   * to the underlying animation library. We only want to load that if we load this,
   * so people can optionally code split it out using the `m` component.
   */
  constructor(t) {
    super(t), t.animationState || (t.animationState = Ty(t));
  }
  updateAnimationControlsSubscription() {
    const { animate: t } = this.node.getProps();
    lr(t) && (this.unmountControls = t.subscribe(this.node));
  }
  /**
   * Subscribe any provided AnimationControls to the component's VisualElement
   */
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate: t } = this.node.getProps(), { animate: i } = this.node.prevProps || {};
    t !== i && this.updateAnimationControlsSubscription();
  }
  unmount() {
    this.node.animationState.reset(), this.unmountControls?.();
  }
}
let Iy = 0;
class ky extends pi {
  constructor() {
    super(...arguments), this.id = Iy++;
  }
  update() {
    if (!this.node.presenceContext)
      return;
    const { isPresent: t, onExitComplete: i } = this.node.presenceContext, { isPresent: s } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || t === s)
      return;
    const o = this.node.animationState.setActive("exit", !t);
    i && !t && o.then(() => {
      i(this.id);
    });
  }
  mount() {
    const { register: t, onExitComplete: i } = this.node.presenceContext || {};
    i && i(this.id), t && (this.unmount = t(this.id));
  }
  unmount() {
  }
}
const Ly = {
  animation: {
    Feature: Ay
  },
  exit: {
    Feature: ky
  }
};
function fo(e, t, i, s = { passive: !0 }) {
  return e.addEventListener(t, i, s), () => e.removeEventListener(t, i);
}
function Oo(e) {
  return {
    point: {
      x: e.pageX,
      y: e.pageY
    }
  };
}
const Oy = (e) => (t) => $l(t) && e(t, Oo(t));
function Zs(e, t, i, s) {
  return fo(e, t, Oy(i), s);
}
const up = 1e-4, Vy = 1 - up, Gy = 1 + up, hp = 0.01, Hy = 0 - hp, By = 0 + hp;
function Ze(e) {
  return e.max - e.min;
}
function Ny(e, t, i) {
  return Math.abs(e - t) <= i;
}
function Id(e, t, i, s = 0.5) {
  e.origin = s, e.originPoint = xe(t.min, t.max, e.origin), e.scale = Ze(i) / Ze(t), e.translate = xe(i.min, i.max, e.origin) - e.originPoint, (e.scale >= Vy && e.scale <= Gy || isNaN(e.scale)) && (e.scale = 1), (e.translate >= Hy && e.translate <= By || isNaN(e.translate)) && (e.translate = 0);
}
function Qs(e, t, i, s) {
  Id(e.x, t.x, i.x, s ? s.originX : void 0), Id(e.y, t.y, i.y, s ? s.originY : void 0);
}
function kd(e, t, i) {
  e.min = i.min + t.min, e.max = e.min + Ze(t);
}
function Wy(e, t, i) {
  kd(e.x, t.x, i.x), kd(e.y, t.y, i.y);
}
function Ld(e, t, i) {
  e.min = t.min - i.min, e.max = e.min + Ze(t);
}
function Js(e, t, i) {
  Ld(e.x, t.x, i.x), Ld(e.y, t.y, i.y);
}
function ht(e) {
  return [e("x"), e("y")];
}
const gp = ({ current: e }) => e ? e.ownerDocument.defaultView : null, Od = (e, t) => Math.abs(e - t);
function zy(e, t) {
  const i = Od(e.x, t.x), s = Od(e.y, t.y);
  return Math.sqrt(i ** 2 + s ** 2);
}
class pp {
  constructor(t, i, { transformPagePoint: s, contextWindow: o = window, dragSnapToOrigin: n = !1, distanceThreshold: r = 3 } = {}) {
    if (this.startEvent = null, this.lastMoveEvent = null, this.lastMoveEventInfo = null, this.handlers = {}, this.contextWindow = window, this.updatePoint = () => {
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const h = Ar(this.lastMoveEventInfo, this.history), g = this.startEvent !== null, p = zy(h.offset, { x: 0, y: 0 }) >= this.distanceThreshold;
      if (!g && !p)
        return;
      const { point: f } = h, { timestamp: m } = Ne;
      this.history.push({ ...f, timestamp: m });
      const { onStart: C, onMove: v } = this.handlers;
      g || (C && C(this.lastMoveEvent, h), this.startEvent = this.lastMoveEvent), v && v(this.lastMoveEvent, h);
    }, this.handlePointerMove = (h, g) => {
      this.lastMoveEvent = h, this.lastMoveEventInfo = Mr(g, this.transformPagePoint), Se.update(this.updatePoint, !0);
    }, this.handlePointerUp = (h, g) => {
      this.end();
      const { onEnd: p, onSessionEnd: f, resumeAnimation: m } = this.handlers;
      if (this.dragSnapToOrigin && m && m(), !(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const C = Ar(h.type === "pointercancel" ? this.lastMoveEventInfo : Mr(g, this.transformPagePoint), this.history);
      this.startEvent && p && p(h, C), f && f(h, C);
    }, !$l(t))
      return;
    this.dragSnapToOrigin = n, this.handlers = i, this.transformPagePoint = s, this.distanceThreshold = r, this.contextWindow = o || window;
    const a = Oo(t), l = Mr(a, this.transformPagePoint), { point: c } = l, { timestamp: d } = Ne;
    this.history = [{ ...c, timestamp: d }];
    const { onSessionStart: u } = i;
    u && u(t, Ar(l, this.history)), this.removeListeners = Io(Zs(this.contextWindow, "pointermove", this.handlePointerMove), Zs(this.contextWindow, "pointerup", this.handlePointerUp), Zs(this.contextWindow, "pointercancel", this.handlePointerUp));
  }
  updateHandlers(t) {
    this.handlers = t;
  }
  end() {
    this.removeListeners && this.removeListeners(), ci(this.updatePoint);
  }
}
function Mr(e, t) {
  return t ? { point: t(e.point) } : e;
}
function Vd(e, t) {
  return { x: e.x - t.x, y: e.y - t.y };
}
function Ar({ point: e }, t) {
  return {
    point: e,
    delta: Vd(e, fp(t)),
    offset: Vd(e, _y(t)),
    velocity: Uy(t, 0.1)
  };
}
function _y(e) {
  return e[0];
}
function fp(e) {
  return e[e.length - 1];
}
function Uy(e, t) {
  if (e.length < 2)
    return { x: 0, y: 0 };
  let i = e.length - 1, s = null;
  const o = fp(e);
  for (; i >= 0 && (s = e[i], !(o.timestamp - s.timestamp > /* @__PURE__ */ xt(t))); )
    i--;
  if (!s)
    return { x: 0, y: 0 };
  const n = /* @__PURE__ */ Lt(o.timestamp - s.timestamp);
  if (n === 0)
    return { x: 0, y: 0 };
  const r = {
    x: (o.x - s.x) / n,
    y: (o.y - s.y) / n
  };
  return r.x === 1 / 0 && (r.x = 0), r.y === 1 / 0 && (r.y = 0), r;
}
function jy(e, { min: t, max: i }, s) {
  return t !== void 0 && e < t ? e = s ? xe(t, e, s.min) : Math.max(e, t) : i !== void 0 && e > i && (e = s ? xe(i, e, s.max) : Math.min(e, i)), e;
}
function Gd(e, t, i) {
  return {
    min: t !== void 0 ? e.min + t : void 0,
    max: i !== void 0 ? e.max + i - (e.max - e.min) : void 0
  };
}
function $y(e, { top: t, left: i, bottom: s, right: o }) {
  return {
    x: Gd(e.x, i, o),
    y: Gd(e.y, t, s)
  };
}
function Hd(e, t) {
  let i = t.min - e.min, s = t.max - e.max;
  return t.max - t.min < e.max - e.min && ([i, s] = [s, i]), { min: i, max: s };
}
function Ky(e, t) {
  return {
    x: Hd(e.x, t.x),
    y: Hd(e.y, t.y)
  };
}
function Yy(e, t) {
  let i = 0.5;
  const s = Ze(e), o = Ze(t);
  return o > s ? i = /* @__PURE__ */ lo(t.min, t.max - s, e.min) : s > o && (i = /* @__PURE__ */ lo(e.min, e.max - o, t.min)), Kt(0, 1, i);
}
function qy(e, t) {
  const i = {};
  return t.min !== void 0 && (i.min = t.min - e.min), t.max !== void 0 && (i.max = t.max - e.min), i;
}
const Ha = 0.35;
function Xy(e = Ha) {
  return e === !1 ? e = 0 : e === !0 && (e = Ha), {
    x: Bd(e, "left", "right"),
    y: Bd(e, "top", "bottom")
  };
}
function Bd(e, t, i) {
  return {
    min: Nd(e, t),
    max: Nd(e, i)
  };
}
function Nd(e, t) {
  return typeof e == "number" ? e : e[t] || 0;
}
const Zy = /* @__PURE__ */ new WeakMap();
class Qy {
  constructor(t) {
    this.openDragLock = null, this.isDragging = !1, this.currentDirection = null, this.originPoint = { x: 0, y: 0 }, this.constraints = !1, this.hasMutatedConstraints = !1, this.elastic = Ee(), this.latestPointerEvent = null, this.latestPanInfo = null, this.visualElement = t;
  }
  start(t, { snapToCursor: i = !1, distanceThreshold: s } = {}) {
    const { presenceContext: o } = this.visualElement;
    if (o && o.isPresent === !1)
      return;
    const n = (u) => {
      const { dragSnapToOrigin: h } = this.getProps();
      h ? this.pauseAnimation() : this.stopAnimation(), i && this.snapToCursor(Oo(u).point);
    }, r = (u, h) => {
      const { drag: g, dragPropagation: p, onDragStart: f } = this.getProps();
      if (g && !p && (this.openDragLock && this.openDragLock(), this.openDragLock = rS(g), !this.openDragLock))
        return;
      this.latestPointerEvent = u, this.latestPanInfo = h, this.isDragging = !0, this.currentDirection = null, this.resolveConstraints(), this.visualElement.projection && (this.visualElement.projection.isAnimationBlocked = !0, this.visualElement.projection.target = void 0), ht((C) => {
        let v = this.getAxisMotionValue(C).get() || 0;
        if (Ot.test(v)) {
          const { projection: w } = this.visualElement;
          if (w && w.layout) {
            const y = w.layout.layoutBox[C];
            y && (v = Ze(y) * (parseFloat(v) / 100));
          }
        }
        this.originPoint[C] = v;
      }), f && Se.postRender(() => f(u, h)), Va(this.visualElement, "transform");
      const { animationState: m } = this.visualElement;
      m && m.setActive("whileDrag", !0);
    }, a = (u, h) => {
      this.latestPointerEvent = u, this.latestPanInfo = h;
      const { dragPropagation: g, dragDirectionLock: p, onDirectionLock: f, onDrag: m } = this.getProps();
      if (!g && !this.openDragLock)
        return;
      const { offset: C } = h;
      if (p && this.currentDirection === null) {
        this.currentDirection = Jy(C), this.currentDirection !== null && f && f(this.currentDirection);
        return;
      }
      this.updateAxis("x", h.point, C), this.updateAxis("y", h.point, C), this.visualElement.render(), m && m(u, h);
    }, l = (u, h) => {
      this.latestPointerEvent = u, this.latestPanInfo = h, this.stop(u, h), this.latestPointerEvent = null, this.latestPanInfo = null;
    }, c = () => ht((u) => this.getAnimationState(u) === "paused" && this.getAxisMotionValue(u).animation?.play()), { dragSnapToOrigin: d } = this.getProps();
    this.panSession = new pp(t, {
      onSessionStart: n,
      onStart: r,
      onMove: a,
      onSessionEnd: l,
      resumeAnimation: c
    }, {
      transformPagePoint: this.visualElement.getTransformPagePoint(),
      dragSnapToOrigin: d,
      distanceThreshold: s,
      contextWindow: gp(this.visualElement)
    });
  }
  /**
   * @internal
   */
  stop(t, i) {
    const s = t || this.latestPointerEvent, o = i || this.latestPanInfo, n = this.isDragging;
    if (this.cancel(), !n || !o || !s)
      return;
    const { velocity: r } = o;
    this.startAnimation(r);
    const { onDragEnd: a } = this.getProps();
    a && Se.postRender(() => a(s, o));
  }
  /**
   * @internal
   */
  cancel() {
    this.isDragging = !1;
    const { projection: t, animationState: i } = this.visualElement;
    t && (t.isAnimationBlocked = !1), this.panSession && this.panSession.end(), this.panSession = void 0;
    const { dragPropagation: s } = this.getProps();
    !s && this.openDragLock && (this.openDragLock(), this.openDragLock = null), i && i.setActive("whileDrag", !1);
  }
  updateAxis(t, i, s) {
    const { drag: o } = this.getProps();
    if (!s || !$o(t, o, this.currentDirection))
      return;
    const n = this.getAxisMotionValue(t);
    let r = this.originPoint[t] + s[t];
    this.constraints && this.constraints[t] && (r = jy(r, this.constraints[t], this.elastic[t])), n.set(r);
  }
  resolveConstraints() {
    const { dragConstraints: t, dragElastic: i } = this.getProps(), s = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(!1) : this.visualElement.projection?.layout, o = this.constraints;
    t && os(t) ? this.constraints || (this.constraints = this.resolveRefConstraints()) : t && s ? this.constraints = $y(s.layoutBox, t) : this.constraints = !1, this.elastic = Xy(i), o !== this.constraints && s && this.constraints && !this.hasMutatedConstraints && ht((n) => {
      this.constraints !== !1 && this.getAxisMotionValue(n) && (this.constraints[n] = qy(s.layoutBox[n], this.constraints[n]));
    });
  }
  resolveRefConstraints() {
    const { dragConstraints: t, onMeasureDragConstraints: i } = this.getProps();
    if (!t || !os(t))
      return !1;
    const s = t.current;
    Yt(s !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.", "drag-constraints-ref");
    const { projection: o } = this.visualElement;
    if (!o || !o.layout)
      return !1;
    const n = ey(s, o.root, this.visualElement.getTransformPagePoint());
    let r = Ky(o.layout.layoutBox, n);
    if (i) {
      const a = i(ZS(r));
      this.hasMutatedConstraints = !!a, a && (r = Qg(a));
    }
    return r;
  }
  startAnimation(t) {
    const { drag: i, dragMomentum: s, dragElastic: o, dragTransition: n, dragSnapToOrigin: r, onDragTransitionEnd: a } = this.getProps(), l = this.constraints || {}, c = ht((d) => {
      if (!$o(d, i, this.currentDirection))
        return;
      let u = l && l[d] || {};
      r && (u = { min: 0, max: 0 });
      const h = o ? 200 : 1e6, g = o ? 40 : 1e7, p = {
        type: "inertia",
        velocity: s ? t[d] : 0,
        bounceStiffness: h,
        bounceDamping: g,
        timeConstant: 750,
        restDelta: 1,
        restSpeed: 10,
        ...n,
        ...u
      };
      return this.startAxisValueAnimation(d, p);
    });
    return Promise.all(c).then(a);
  }
  startAxisValueAnimation(t, i) {
    const s = this.getAxisMotionValue(t);
    return Va(this.visualElement, t), s.start(ic(t, s, 0, i, this.visualElement, !1));
  }
  stopAnimation() {
    ht((t) => this.getAxisMotionValue(t).stop());
  }
  pauseAnimation() {
    ht((t) => this.getAxisMotionValue(t).animation?.pause());
  }
  getAnimationState(t) {
    return this.getAxisMotionValue(t).animation?.state;
  }
  /**
   * Drag works differently depending on which props are provided.
   *
   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
   * - Otherwise, we apply the delta to the x/y motion values.
   */
  getAxisMotionValue(t) {
    const i = `_drag${t.toUpperCase()}`, s = this.visualElement.getProps(), o = s[i];
    return o || this.visualElement.getValue(t, (s.initial ? s.initial[t] : void 0) || 0);
  }
  snapToCursor(t) {
    ht((i) => {
      const { drag: s } = this.getProps();
      if (!$o(i, s, this.currentDirection))
        return;
      const { projection: o } = this.visualElement, n = this.getAxisMotionValue(i);
      if (o && o.layout) {
        const { min: r, max: a } = o.layout.layoutBox[i];
        n.set(t[i] - xe(r, a, 0.5));
      }
    });
  }
  /**
   * When the viewport resizes we want to check if the measured constraints
   * have changed and, if so, reposition the element within those new constraints
   * relative to where it was before the resize.
   */
  scalePositionWithinConstraints() {
    if (!this.visualElement.current)
      return;
    const { drag: t, dragConstraints: i } = this.getProps(), { projection: s } = this.visualElement;
    if (!os(i) || !s || !this.constraints)
      return;
    this.stopAnimation();
    const o = { x: 0, y: 0 };
    ht((r) => {
      const a = this.getAxisMotionValue(r);
      if (a && this.constraints !== !1) {
        const l = a.get();
        o[r] = Yy({ min: l, max: l }, this.constraints[r]);
      }
    });
    const { transformTemplate: n } = this.visualElement.getProps();
    this.visualElement.current.style.transform = n ? n({}, "") : "none", s.root && s.root.updateScroll(), s.updateLayout(), this.resolveConstraints(), ht((r) => {
      if (!$o(r, t, null))
        return;
      const a = this.getAxisMotionValue(r), { min: l, max: c } = this.constraints[r];
      a.set(xe(l, c, o[r]));
    });
  }
  addListeners() {
    if (!this.visualElement.current)
      return;
    Zy.set(this.visualElement, this);
    const t = this.visualElement.current, i = Zs(t, "pointerdown", (l) => {
      const { drag: c, dragListener: d = !0 } = this.getProps();
      c && d && this.start(l);
    }), s = () => {
      const { dragConstraints: l } = this.getProps();
      os(l) && l.current && (this.constraints = this.resolveRefConstraints());
    }, { projection: o } = this.visualElement, n = o.addEventListener("measure", s);
    o && !o.layout && (o.root && o.root.updateScroll(), o.updateLayout()), Se.read(s);
    const r = fo(window, "resize", () => this.scalePositionWithinConstraints()), a = o.addEventListener("didUpdate", (({ delta: l, hasLayoutChanged: c }) => {
      this.isDragging && c && (ht((d) => {
        const u = this.getAxisMotionValue(d);
        u && (this.originPoint[d] += l[d].translate, u.set(u.get() + l[d].translate));
      }), this.visualElement.render());
    }));
    return () => {
      r(), i(), n(), a && a();
    };
  }
  getProps() {
    const t = this.visualElement.getProps(), { drag: i = !1, dragDirectionLock: s = !1, dragPropagation: o = !1, dragConstraints: n = !1, dragElastic: r = Ha, dragMomentum: a = !0 } = t;
    return {
      ...t,
      drag: i,
      dragDirectionLock: s,
      dragPropagation: o,
      dragConstraints: n,
      dragElastic: r,
      dragMomentum: a
    };
  }
}
function $o(e, t, i) {
  return (t === !0 || t === e) && (i === null || i === e);
}
function Jy(e, t = 10) {
  let i = null;
  return Math.abs(e.y) > t ? i = "y" : Math.abs(e.x) > t && (i = "x"), i;
}
class eb extends pi {
  constructor(t) {
    super(t), this.removeGroupControls = wt, this.removeListeners = wt, this.controls = new Qy(t);
  }
  mount() {
    const { dragControls: t } = this.node.getProps();
    t && (this.removeGroupControls = t.subscribe(this.controls)), this.removeListeners = this.controls.addListeners() || wt;
  }
  unmount() {
    this.removeGroupControls(), this.removeListeners();
  }
}
const Wd = (e) => (t, i) => {
  e && Se.postRender(() => e(t, i));
};
class tb extends pi {
  constructor() {
    super(...arguments), this.removePointerDownListener = wt;
  }
  onPointerDown(t) {
    this.session = new pp(t, this.createPanHandlers(), {
      transformPagePoint: this.node.getTransformPagePoint(),
      contextWindow: gp(this.node)
    });
  }
  createPanHandlers() {
    const { onPanSessionStart: t, onPanStart: i, onPan: s, onPanEnd: o } = this.node.getProps();
    return {
      onSessionStart: Wd(t),
      onStart: Wd(i),
      onMove: s,
      onEnd: (n, r) => {
        delete this.session, o && Se.postRender(() => o(n, r));
      }
    };
  }
  mount() {
    this.removePointerDownListener = Zs(this.node.current, "pointerdown", (t) => this.onPointerDown(t));
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers());
  }
  unmount() {
    this.removePointerDownListener(), this.session && this.session.end();
  }
}
const cn = {
  /**
   * Global flag as to whether the tree has animated since the last time
   * we resized the window
   */
  hasAnimatedSinceResize: !0,
  /**
   * We set this to true once, on the first update. Any nodes added to the tree beyond that
   * update will be given a `data-projection-id` attribute.
   */
  hasEverUpdated: !1
};
function zd(e, t) {
  return t.max === t.min ? 0 : e / (t.max - t.min) * 100;
}
const Ws = {
  correct: (e, t) => {
    if (!t.target)
      return e;
    if (typeof e == "string")
      if (te.test(e))
        e = parseFloat(e);
      else
        return e;
    const i = zd(e, t.target.x), s = zd(e, t.target.y);
    return `${i}% ${s}%`;
  }
}, ib = {
  correct: (e, { treeScale: t, projectionDelta: i }) => {
    const s = e, o = di.parse(e);
    if (o.length > 5)
      return s;
    const n = di.createTransformer(e), r = typeof o[0] != "number" ? 1 : 0, a = i.x.scale * t.x, l = i.y.scale * t.y;
    o[0 + r] /= a, o[1 + r] /= l;
    const c = xe(a, l, 0.5);
    return typeof o[2 + r] == "number" && (o[2 + r] /= c), typeof o[3 + r] == "number" && (o[3 + r] /= c), n(o);
  }
};
let Ir = !1;
class sb extends Gh {
  /**
   * This only mounts projection nodes for components that
   * need measuring, we might want to do it for all components
   * in order to incorporate transforms
   */
  componentDidMount() {
    const { visualElement: t, layoutGroup: i, switchLayoutGroup: s, layoutId: o } = this.props, { projection: n } = t;
    FS(ob), n && (i.group && i.group.add(n), s && s.register && o && s.register(n), Ir && n.root.didUpdate(), n.addEventListener("animationComplete", () => {
      this.safeToRemove();
    }), n.setOptions({
      ...n.options,
      onExitComplete: () => this.safeToRemove()
    })), cn.hasEverUpdated = !0;
  }
  getSnapshotBeforeUpdate(t) {
    const { layoutDependency: i, visualElement: s, drag: o, isPresent: n } = this.props, { projection: r } = s;
    return r && (r.isPresent = n, Ir = !0, o || t.layoutDependency !== i || i === void 0 || t.isPresent !== n ? r.willUpdate() : this.safeToRemove(), t.isPresent !== n && (n ? r.promote() : r.relegate() || Se.postRender(() => {
      const a = r.getStack();
      (!a || !a.members.length) && this.safeToRemove();
    }))), null;
  }
  componentDidUpdate() {
    const { projection: t } = this.props.visualElement;
    t && (t.root.didUpdate(), jl.postRender(() => {
      !t.currentAnimation && t.isLead() && this.safeToRemove();
    }));
  }
  componentWillUnmount() {
    const { visualElement: t, layoutGroup: i, switchLayoutGroup: s } = this.props, { projection: o } = t;
    Ir = !0, o && (o.scheduleCheckAfterUnmount(), i && i.group && i.group.remove(o), s && s.deregister && s.deregister(o));
  }
  safeToRemove() {
    const { safeToRemove: t } = this.props;
    t && t();
  }
  render() {
    return null;
  }
}
function mp(e) {
  const [t, i] = Hg(), s = ae(Rl);
  return R.jsx(sb, { ...e, layoutGroup: s, switchLayoutGroup: ae(Xg), isPresent: t, safeToRemove: i });
}
const ob = {
  borderRadius: {
    ...Ws,
    applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ]
  },
  borderTopLeftRadius: Ws,
  borderTopRightRadius: Ws,
  borderBottomLeftRadius: Ws,
  borderBottomRightRadius: Ws,
  boxShadow: ib
};
function nb(e, t, i) {
  const s = Ye(e) ? e : ys(e);
  return s.start(ic("", s, t, i)), s.animation;
}
const rb = (e, t) => e.depth - t.depth;
class ab {
  constructor() {
    this.children = [], this.isDirty = !1;
  }
  add(t) {
    Pl(this.children, t), this.isDirty = !0;
  }
  remove(t) {
    El(this.children, t), this.isDirty = !0;
  }
  forEach(t) {
    this.isDirty && this.children.sort(rb), this.isDirty = !1, this.children.forEach(t);
  }
}
function lb(e, t) {
  const i = it.now(), s = ({ timestamp: o }) => {
    const n = o - i;
    n >= t && (ci(s), e(n - t));
  };
  return Se.setup(s, !0), () => ci(s);
}
const Cp = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"], cb = Cp.length, _d = (e) => typeof e == "string" ? parseFloat(e) : e, Ud = (e) => typeof e == "number" || te.test(e);
function db(e, t, i, s, o, n) {
  o ? (e.opacity = xe(0, i.opacity ?? 1, ub(s)), e.opacityExit = xe(t.opacity ?? 1, 0, hb(s))) : n && (e.opacity = xe(t.opacity ?? 1, i.opacity ?? 1, s));
  for (let r = 0; r < cb; r++) {
    const a = `border${Cp[r]}Radius`;
    let l = jd(t, a), c = jd(i, a);
    if (l === void 0 && c === void 0)
      continue;
    l || (l = 0), c || (c = 0), l === 0 || c === 0 || Ud(l) === Ud(c) ? (e[a] = Math.max(xe(_d(l), _d(c), s), 0), (Ot.test(c) || Ot.test(l)) && (e[a] += "%")) : e[a] = c;
  }
  (t.rotate || i.rotate) && (e.rotate = xe(t.rotate || 0, i.rotate || 0, s));
}
function jd(e, t) {
  return e[t] !== void 0 ? e[t] : e.borderRadius;
}
const ub = /* @__PURE__ */ vp(0, 0.5, og), hb = /* @__PURE__ */ vp(0.5, 0.95, wt);
function vp(e, t, i) {
  return (s) => s < e ? 0 : s > t ? 1 : i(/* @__PURE__ */ lo(e, t, s));
}
function $d(e, t) {
  e.min = t.min, e.max = t.max;
}
function ut(e, t) {
  $d(e.x, t.x), $d(e.y, t.y);
}
function Kd(e, t) {
  e.translate = t.translate, e.scale = t.scale, e.originPoint = t.originPoint, e.origin = t.origin;
}
function Yd(e, t, i, s, o) {
  return e -= t, e = In(e, 1 / i, s), o !== void 0 && (e = In(e, 1 / o, s)), e;
}
function gb(e, t = 0, i = 1, s = 0.5, o, n = e, r = e) {
  if (Ot.test(t) && (t = parseFloat(t), t = xe(r.min, r.max, t / 100) - r.min), typeof t != "number")
    return;
  let a = xe(n.min, n.max, s);
  e === n && (a -= t), e.min = Yd(e.min, t, i, a, o), e.max = Yd(e.max, t, i, a, o);
}
function qd(e, t, [i, s, o], n, r) {
  gb(e, t[i], t[s], t[o], t.scale, n, r);
}
const pb = ["x", "scaleX", "originX"], fb = ["y", "scaleY", "originY"];
function Xd(e, t, i, s) {
  qd(e.x, t, pb, i ? i.x : void 0, s ? s.x : void 0), qd(e.y, t, fb, i ? i.y : void 0, s ? s.y : void 0);
}
function Zd(e) {
  return e.translate === 0 && e.scale === 1;
}
function wp(e) {
  return Zd(e.x) && Zd(e.y);
}
function Qd(e, t) {
  return e.min === t.min && e.max === t.max;
}
function mb(e, t) {
  return Qd(e.x, t.x) && Qd(e.y, t.y);
}
function Jd(e, t) {
  return Math.round(e.min) === Math.round(t.min) && Math.round(e.max) === Math.round(t.max);
}
function Sp(e, t) {
  return Jd(e.x, t.x) && Jd(e.y, t.y);
}
function eu(e) {
  return Ze(e.x) / Ze(e.y);
}
function tu(e, t) {
  return e.translate === t.translate && e.scale === t.scale && e.originPoint === t.originPoint;
}
class Cb {
  constructor() {
    this.members = [];
  }
  add(t) {
    Pl(this.members, t), t.scheduleRender();
  }
  remove(t) {
    if (El(this.members, t), t === this.prevLead && (this.prevLead = void 0), t === this.lead) {
      const i = this.members[this.members.length - 1];
      i && this.promote(i);
    }
  }
  relegate(t) {
    const i = this.members.findIndex((o) => t === o);
    if (i === 0)
      return !1;
    let s;
    for (let o = i; o >= 0; o--) {
      const n = this.members[o];
      if (n.isPresent !== !1) {
        s = n;
        break;
      }
    }
    return s ? (this.promote(s), !0) : !1;
  }
  promote(t, i) {
    const s = this.lead;
    if (t !== s && (this.prevLead = s, this.lead = t, t.show(), s)) {
      s.instance && s.scheduleRender(), t.scheduleRender(), t.resumeFrom = s, i && (t.resumeFrom.preserveOpacity = !0), s.snapshot && (t.snapshot = s.snapshot, t.snapshot.latestValues = s.animationValues || s.latestValues), t.root && t.root.isUpdating && (t.isLayoutDirty = !0);
      const { crossfade: o } = t.options;
      o === !1 && s.hide();
    }
  }
  exitAnimationComplete() {
    this.members.forEach((t) => {
      const { options: i, resumingFrom: s } = t;
      i.onExitComplete && i.onExitComplete(), s && s.options.onExitComplete && s.options.onExitComplete();
    });
  }
  scheduleRender() {
    this.members.forEach((t) => {
      t.instance && t.scheduleRender(!1);
    });
  }
  /**
   * Clear any leads that have been removed this render to prevent them from being
   * used in future animations and to prevent memory leaks
   */
  removeLeadSnapshot() {
    this.lead && this.lead.snapshot && (this.lead.snapshot = void 0);
  }
}
function vb(e, t, i) {
  let s = "";
  const o = e.x.translate / t.x, n = e.y.translate / t.y, r = i?.z || 0;
  if ((o || n || r) && (s = `translate3d(${o}px, ${n}px, ${r}px) `), (t.x !== 1 || t.y !== 1) && (s += `scale(${1 / t.x}, ${1 / t.y}) `), i) {
    const { transformPerspective: c, rotate: d, rotateX: u, rotateY: h, skewX: g, skewY: p } = i;
    c && (s = `perspective(${c}px) ${s}`), d && (s += `rotate(${d}deg) `), u && (s += `rotateX(${u}deg) `), h && (s += `rotateY(${h}deg) `), g && (s += `skewX(${g}deg) `), p && (s += `skewY(${p}deg) `);
  }
  const a = e.x.scale * t.x, l = e.y.scale * t.y;
  return (a !== 1 || l !== 1) && (s += `scale(${a}, ${l})`), s || "none";
}
const kr = ["", "X", "Y", "Z"], wb = 1e3;
let Sb = 0;
function Lr(e, t, i, s) {
  const { latestValues: o } = t;
  o[e] && (i[e] = o[e], t.setStaticValue(e, 0), s && (s[e] = 0));
}
function yp(e) {
  if (e.hasCheckedOptimisedAppear = !0, e.root === e)
    return;
  const { visualElement: t } = e.options;
  if (!t)
    return;
  const i = rp(t);
  if (window.MotionHasOptimisedAnimation(i, "transform")) {
    const { layout: o, layoutId: n } = e.options;
    window.MotionCancelOptimisedAnimation(i, "transform", Se, !(o || n));
  }
  const { parent: s } = e;
  s && !s.hasCheckedOptimisedAppear && yp(s);
}
function bp({ attachResizeListener: e, defaultParent: t, measureScroll: i, checkIsScrollRoot: s, resetTransform: o }) {
  return class {
    constructor(r = {}, a = t?.()) {
      this.id = Sb++, this.animationId = 0, this.animationCommitId = 0, this.children = /* @__PURE__ */ new Set(), this.options = {}, this.isTreeAnimating = !1, this.isAnimationBlocked = !1, this.isLayoutDirty = !1, this.isProjectionDirty = !1, this.isSharedProjectionDirty = !1, this.isTransformDirty = !1, this.updateManuallyBlocked = !1, this.updateBlockedByResize = !1, this.isUpdating = !1, this.isSVG = !1, this.needsReset = !1, this.shouldResetTransform = !1, this.hasCheckedOptimisedAppear = !1, this.treeScale = { x: 1, y: 1 }, this.eventHandlers = /* @__PURE__ */ new Map(), this.hasTreeAnimated = !1, this.updateScheduled = !1, this.scheduleUpdate = () => this.update(), this.projectionUpdateScheduled = !1, this.checkUpdateFailed = () => {
        this.isUpdating && (this.isUpdating = !1, this.clearAllSnapshots());
      }, this.updateProjection = () => {
        this.projectionUpdateScheduled = !1, this.nodes.forEach(Rb), this.nodes.forEach(Eb), this.nodes.forEach(Db), this.nodes.forEach(xb);
      }, this.resolvedRelativeTargetAt = 0, this.hasProjected = !1, this.isVisible = !0, this.animationProgress = 0, this.sharedNodes = /* @__PURE__ */ new Map(), this.latestValues = r, this.root = a ? a.root || a : this, this.path = a ? [...a.path, a] : [], this.parent = a, this.depth = a ? a.depth + 1 : 0;
      for (let l = 0; l < this.path.length; l++)
        this.path[l].shouldResetTransform = !0;
      this.root === this && (this.nodes = new ab());
    }
    addEventListener(r, a) {
      return this.eventHandlers.has(r) || this.eventHandlers.set(r, new Tl()), this.eventHandlers.get(r).add(a);
    }
    notifyListeners(r, ...a) {
      const l = this.eventHandlers.get(r);
      l && l.notify(...a);
    }
    hasListeners(r) {
      return this.eventHandlers.has(r);
    }
    /**
     * Lifecycles
     */
    mount(r) {
      if (this.instance)
        return;
      this.isSVG = Gg(r) && !hS(r), this.instance = r;
      const { layoutId: a, layout: l, visualElement: c } = this.options;
      if (c && !c.current && c.mount(r), this.root.nodes.add(this), this.parent && this.parent.children.add(this), this.root.hasTreeAnimated && (l || a) && (this.isLayoutDirty = !0), e) {
        let d, u = 0;
        const h = () => this.root.updateBlockedByResize = !1;
        Se.read(() => {
          u = window.innerWidth;
        }), e(r, () => {
          const g = window.innerWidth;
          g !== u && (u = g, this.root.updateBlockedByResize = !0, d && d(), d = lb(h, 250), cn.hasAnimatedSinceResize && (cn.hasAnimatedSinceResize = !1, this.nodes.forEach(ou)));
        });
      }
      a && this.root.registerSharedNode(a, this), this.options.animate !== !1 && c && (a || l) && this.addEventListener("didUpdate", ({ delta: d, hasLayoutChanged: u, hasRelativeLayoutChanged: h, layout: g }) => {
        if (this.isTreeAnimationBlocked()) {
          this.target = void 0, this.relativeTarget = void 0;
          return;
        }
        const p = this.options.transition || c.getDefaultTransition() || kb, { onLayoutAnimationStart: f, onLayoutAnimationComplete: m } = c.getProps(), C = !this.targetLayout || !Sp(this.targetLayout, g), v = !u && h;
        if (this.options.layoutRoot || this.resumeFrom || v || u && (C || !this.currentAnimation)) {
          this.resumeFrom && (this.resumingFrom = this.resumeFrom, this.resumingFrom.resumingFrom = void 0);
          const w = {
            ..._l(p, "layout"),
            onPlay: f,
            onComplete: m
          };
          (c.shouldReduceMotion || this.options.layoutRoot) && (w.delay = 0, w.type = !1), this.startAnimation(w), this.setAnimationOrigin(d, v);
        } else
          u || ou(this), this.isLead() && this.options.onExitComplete && this.options.onExitComplete();
        this.targetLayout = g;
      });
    }
    unmount() {
      this.options.layoutId && this.willUpdate(), this.root.nodes.remove(this);
      const r = this.getStack();
      r && r.remove(this), this.parent && this.parent.children.delete(this), this.instance = void 0, this.eventHandlers.clear(), ci(this.updateProjection);
    }
    // only on the root
    blockUpdate() {
      this.updateManuallyBlocked = !0;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = !1;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || !1;
    }
    // Note: currently only running on root node
    startUpdate() {
      this.isUpdateBlocked() || (this.isUpdating = !0, this.nodes && this.nodes.forEach(Tb), this.animationId++);
    }
    getTransformTemplate() {
      const { visualElement: r } = this.options;
      return r && r.getProps().transformTemplate;
    }
    willUpdate(r = !0) {
      if (this.root.hasTreeAnimated = !0, this.root.isUpdateBlocked()) {
        this.options.onExitComplete && this.options.onExitComplete();
        return;
      }
      if (window.MotionCancelOptimisedAnimation && !this.hasCheckedOptimisedAppear && yp(this), !this.root.isUpdating && this.root.startUpdate(), this.isLayoutDirty)
        return;
      this.isLayoutDirty = !0;
      for (let d = 0; d < this.path.length; d++) {
        const u = this.path[d];
        u.shouldResetTransform = !0, u.updateScroll("snapshot"), u.options.layoutRoot && u.willUpdate(!1);
      }
      const { layoutId: a, layout: l } = this.options;
      if (a === void 0 && !l)
        return;
      const c = this.getTransformTemplate();
      this.prevTransformTemplateValue = c ? c(this.latestValues, "") : void 0, this.updateSnapshot(), r && this.notifyListeners("willUpdate");
    }
    update() {
      if (this.updateScheduled = !1, this.isUpdateBlocked()) {
        this.unblockUpdate(), this.clearAllSnapshots(), this.nodes.forEach(iu);
        return;
      }
      if (this.animationId <= this.animationCommitId) {
        this.nodes.forEach(su);
        return;
      }
      this.animationCommitId = this.animationId, this.isUpdating ? (this.isUpdating = !1, this.nodes.forEach(Pb), this.nodes.forEach(yb), this.nodes.forEach(bb)) : this.nodes.forEach(su), this.clearAllSnapshots();
      const a = it.now();
      Ne.delta = Kt(0, 1e3 / 60, a - Ne.timestamp), Ne.timestamp = a, Ne.isProcessing = !0, br.update.process(Ne), br.preRender.process(Ne), br.render.process(Ne), Ne.isProcessing = !1;
    }
    didUpdate() {
      this.updateScheduled || (this.updateScheduled = !0, jl.read(this.scheduleUpdate));
    }
    clearAllSnapshots() {
      this.nodes.forEach(Fb), this.sharedNodes.forEach(Mb);
    }
    scheduleUpdateProjection() {
      this.projectionUpdateScheduled || (this.projectionUpdateScheduled = !0, Se.preRender(this.updateProjection, !1, !0));
    }
    scheduleCheckAfterUnmount() {
      Se.postRender(() => {
        this.isLayoutDirty ? this.root.didUpdate() : this.root.checkUpdateFailed();
      });
    }
    /**
     * Update measurements
     */
    updateSnapshot() {
      this.snapshot || !this.instance || (this.snapshot = this.measure(), this.snapshot && !Ze(this.snapshot.measuredBox.x) && !Ze(this.snapshot.measuredBox.y) && (this.snapshot = void 0));
    }
    updateLayout() {
      if (!this.instance || (this.updateScroll(), !(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty))
        return;
      if (this.resumeFrom && !this.resumeFrom.instance)
        for (let l = 0; l < this.path.length; l++)
          this.path[l].updateScroll();
      const r = this.layout;
      this.layout = this.measure(!1), this.layoutCorrected = Ee(), this.isLayoutDirty = !1, this.projectionDelta = void 0, this.notifyListeners("measure", this.layout.layoutBox);
      const { visualElement: a } = this.options;
      a && a.notify("LayoutMeasure", this.layout.layoutBox, r ? r.layoutBox : void 0);
    }
    updateScroll(r = "measure") {
      let a = !!(this.options.layoutScroll && this.instance);
      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === r && (a = !1), a && this.instance) {
        const l = s(this.instance);
        this.scroll = {
          animationId: this.root.animationId,
          phase: r,
          isRoot: l,
          offset: i(this.instance),
          wasRoot: this.scroll ? this.scroll.isRoot : l
        };
      }
    }
    resetTransform() {
      if (!o)
        return;
      const r = this.isLayoutDirty || this.shouldResetTransform || this.options.alwaysMeasureLayout, a = this.projectionDelta && !wp(this.projectionDelta), l = this.getTransformTemplate(), c = l ? l(this.latestValues, "") : void 0, d = c !== this.prevTransformTemplateValue;
      r && this.instance && (a || vi(this.latestValues) || d) && (o(this.instance, c), this.shouldResetTransform = !1, this.scheduleRender());
    }
    measure(r = !0) {
      const a = this.measurePageBox();
      let l = this.removeElementScroll(a);
      return r && (l = this.removeTransform(l)), Lb(l), {
        animationId: this.root.animationId,
        measuredBox: a,
        layoutBox: l,
        latestValues: {},
        source: this.id
      };
    }
    measurePageBox() {
      const { visualElement: r } = this.options;
      if (!r)
        return Ee();
      const a = r.measureViewportBox();
      if (!(this.scroll?.wasRoot || this.path.some(Ob))) {
        const { scroll: c } = this.root;
        c && (ns(a.x, c.offset.x), ns(a.y, c.offset.y));
      }
      return a;
    }
    removeElementScroll(r) {
      const a = Ee();
      if (ut(a, r), this.scroll?.wasRoot)
        return a;
      for (let l = 0; l < this.path.length; l++) {
        const c = this.path[l], { scroll: d, options: u } = c;
        c !== this.root && d && u.layoutScroll && (d.wasRoot && ut(a, r), ns(a.x, d.offset.x), ns(a.y, d.offset.y));
      }
      return a;
    }
    applyTransform(r, a = !1) {
      const l = Ee();
      ut(l, r);
      for (let c = 0; c < this.path.length; c++) {
        const d = this.path[c];
        !a && d.options.layoutScroll && d.scroll && d !== d.root && rs(l, {
          x: -d.scroll.offset.x,
          y: -d.scroll.offset.y
        }), vi(d.latestValues) && rs(l, d.latestValues);
      }
      return vi(this.latestValues) && rs(l, this.latestValues), l;
    }
    removeTransform(r) {
      const a = Ee();
      ut(a, r);
      for (let l = 0; l < this.path.length; l++) {
        const c = this.path[l];
        if (!c.instance || !vi(c.latestValues))
          continue;
        Ia(c.latestValues) && c.updateSnapshot();
        const d = Ee(), u = c.measurePageBox();
        ut(d, u), Xd(a, c.latestValues, c.snapshot ? c.snapshot.layoutBox : void 0, d);
      }
      return vi(this.latestValues) && Xd(a, this.latestValues), a;
    }
    setTargetDelta(r) {
      this.targetDelta = r, this.root.scheduleUpdateProjection(), this.isProjectionDirty = !0;
    }
    setOptions(r) {
      this.options = {
        ...this.options,
        ...r,
        crossfade: r.crossfade !== void 0 ? r.crossfade : !0
      };
    }
    clearMeasurements() {
      this.scroll = void 0, this.layout = void 0, this.snapshot = void 0, this.prevTransformTemplateValue = void 0, this.targetDelta = void 0, this.target = void 0, this.isLayoutDirty = !1;
    }
    forceRelativeParentToResolveTarget() {
      this.relativeParent && this.relativeParent.resolvedRelativeTargetAt !== Ne.timestamp && this.relativeParent.resolveTargetDelta(!0);
    }
    resolveTargetDelta(r = !1) {
      const a = this.getLead();
      this.isProjectionDirty || (this.isProjectionDirty = a.isProjectionDirty), this.isTransformDirty || (this.isTransformDirty = a.isTransformDirty), this.isSharedProjectionDirty || (this.isSharedProjectionDirty = a.isSharedProjectionDirty);
      const l = !!this.resumingFrom || this !== a;
      if (!(r || l && this.isSharedProjectionDirty || this.isProjectionDirty || this.parent?.isProjectionDirty || this.attemptToResolveRelativeTarget || this.root.updateBlockedByResize))
        return;
      const { layout: d, layoutId: u } = this.options;
      if (!(!this.layout || !(d || u))) {
        if (this.resolvedRelativeTargetAt = Ne.timestamp, !this.targetDelta && !this.relativeTarget) {
          const h = this.getClosestProjectingParent();
          h && h.layout && this.animationProgress !== 1 ? (this.relativeParent = h, this.forceRelativeParentToResolveTarget(), this.relativeTarget = Ee(), this.relativeTargetOrigin = Ee(), Js(this.relativeTargetOrigin, this.layout.layoutBox, h.layout.layoutBox), ut(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;
        }
        if (!(!this.relativeTarget && !this.targetDelta) && (this.target || (this.target = Ee(), this.targetWithTransforms = Ee()), this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target ? (this.forceRelativeParentToResolveTarget(), Wy(this.target, this.relativeTarget, this.relativeParent.target)) : this.targetDelta ? (this.resumingFrom ? this.target = this.applyTransform(this.layout.layoutBox) : ut(this.target, this.layout.layoutBox), ep(this.target, this.targetDelta)) : ut(this.target, this.layout.layoutBox), this.attemptToResolveRelativeTarget)) {
          this.attemptToResolveRelativeTarget = !1;
          const h = this.getClosestProjectingParent();
          h && !!h.resumingFrom == !!this.resumingFrom && !h.options.layoutScroll && h.target && this.animationProgress !== 1 ? (this.relativeParent = h, this.forceRelativeParentToResolveTarget(), this.relativeTarget = Ee(), this.relativeTargetOrigin = Ee(), Js(this.relativeTargetOrigin, this.target, h.target), ut(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;
        }
      }
    }
    getClosestProjectingParent() {
      if (!(!this.parent || Ia(this.parent.latestValues) || Jg(this.parent.latestValues)))
        return this.parent.isProjecting() ? this.parent : this.parent.getClosestProjectingParent();
    }
    isProjecting() {
      return !!((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
    }
    calcProjection() {
      const r = this.getLead(), a = !!this.resumingFrom || this !== r;
      let l = !0;
      if ((this.isProjectionDirty || this.parent?.isProjectionDirty) && (l = !1), a && (this.isSharedProjectionDirty || this.isTransformDirty) && (l = !1), this.resolvedRelativeTargetAt === Ne.timestamp && (l = !1), l)
        return;
      const { layout: c, layoutId: d } = this.options;
      if (this.isTreeAnimating = !!(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation), this.isTreeAnimating || (this.targetDelta = this.relativeTarget = void 0), !this.layout || !(c || d))
        return;
      ut(this.layoutCorrected, this.layout.layoutBox);
      const u = this.treeScale.x, h = this.treeScale.y;
      JS(this.layoutCorrected, this.treeScale, this.path, a), r.layout && !r.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1) && (r.target = r.layout.layoutBox, r.targetWithTransforms = Ee());
      const { target: g } = r;
      if (!g) {
        this.prevProjectionDelta && (this.createProjectionDeltas(), this.scheduleRender());
        return;
      }
      !this.projectionDelta || !this.prevProjectionDelta ? this.createProjectionDeltas() : (Kd(this.prevProjectionDelta.x, this.projectionDelta.x), Kd(this.prevProjectionDelta.y, this.projectionDelta.y)), Qs(this.projectionDelta, this.layoutCorrected, g, this.latestValues), (this.treeScale.x !== u || this.treeScale.y !== h || !tu(this.projectionDelta.x, this.prevProjectionDelta.x) || !tu(this.projectionDelta.y, this.prevProjectionDelta.y)) && (this.hasProjected = !0, this.scheduleRender(), this.notifyListeners("projectionUpdate", g));
    }
    hide() {
      this.isVisible = !1;
    }
    show() {
      this.isVisible = !0;
    }
    scheduleRender(r = !0) {
      if (this.options.visualElement?.scheduleRender(), r) {
        const a = this.getStack();
        a && a.scheduleRender();
      }
      this.resumingFrom && !this.resumingFrom.instance && (this.resumingFrom = void 0);
    }
    createProjectionDeltas() {
      this.prevProjectionDelta = as(), this.projectionDelta = as(), this.projectionDeltaWithTransform = as();
    }
    setAnimationOrigin(r, a = !1) {
      const l = this.snapshot, c = l ? l.latestValues : {}, d = { ...this.latestValues }, u = as();
      (!this.relativeParent || !this.relativeParent.options.layoutRoot) && (this.relativeTarget = this.relativeTargetOrigin = void 0), this.attemptToResolveRelativeTarget = !a;
      const h = Ee(), g = l ? l.source : void 0, p = this.layout ? this.layout.source : void 0, f = g !== p, m = this.getStack(), C = !m || m.members.length <= 1, v = !!(f && !C && this.options.crossfade === !0 && !this.path.some(Ib));
      this.animationProgress = 0;
      let w;
      this.mixTargetDelta = (y) => {
        const S = y / 1e3;
        nu(u.x, r.x, S), nu(u.y, r.y, S), this.setTargetDelta(u), this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout && (Js(h, this.layout.layoutBox, this.relativeParent.layout.layoutBox), Ab(this.relativeTarget, this.relativeTargetOrigin, h, S), w && mb(this.relativeTarget, w) && (this.isProjectionDirty = !1), w || (w = Ee()), ut(w, this.relativeTarget)), f && (this.animationValues = d, db(d, c, this.latestValues, S, v, C)), this.root.scheduleUpdateProjection(), this.scheduleRender(), this.animationProgress = S;
      }, this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
    }
    startAnimation(r) {
      this.notifyListeners("animationStart"), this.currentAnimation?.stop(), this.resumingFrom?.currentAnimation?.stop(), this.pendingAnimation && (ci(this.pendingAnimation), this.pendingAnimation = void 0), this.pendingAnimation = Se.update(() => {
        cn.hasAnimatedSinceResize = !0, this.motionValue || (this.motionValue = ys(0)), this.currentAnimation = nb(this.motionValue, [0, 1e3], {
          ...r,
          velocity: 0,
          isSync: !0,
          onUpdate: (a) => {
            this.mixTargetDelta(a), r.onUpdate && r.onUpdate(a);
          },
          onStop: () => {
          },
          onComplete: () => {
            r.onComplete && r.onComplete(), this.completeAnimation();
          }
        }), this.resumingFrom && (this.resumingFrom.currentAnimation = this.currentAnimation), this.pendingAnimation = void 0;
      });
    }
    completeAnimation() {
      this.resumingFrom && (this.resumingFrom.currentAnimation = void 0, this.resumingFrom.preserveOpacity = void 0);
      const r = this.getStack();
      r && r.exitAnimationComplete(), this.resumingFrom = this.currentAnimation = this.animationValues = void 0, this.notifyListeners("animationComplete");
    }
    finishAnimation() {
      this.currentAnimation && (this.mixTargetDelta && this.mixTargetDelta(wb), this.currentAnimation.stop()), this.completeAnimation();
    }
    applyTransformsToTarget() {
      const r = this.getLead();
      let { targetWithTransforms: a, target: l, layout: c, latestValues: d } = r;
      if (!(!a || !l || !c)) {
        if (this !== r && this.layout && c && Rp(this.options.animationType, this.layout.layoutBox, c.layoutBox)) {
          l = this.target || Ee();
          const u = Ze(this.layout.layoutBox.x);
          l.x.min = r.target.x.min, l.x.max = l.x.min + u;
          const h = Ze(this.layout.layoutBox.y);
          l.y.min = r.target.y.min, l.y.max = l.y.min + h;
        }
        ut(a, l), rs(a, d), Qs(this.projectionDeltaWithTransform, this.layoutCorrected, a, d);
      }
    }
    registerSharedNode(r, a) {
      this.sharedNodes.has(r) || this.sharedNodes.set(r, new Cb()), this.sharedNodes.get(r).add(a);
      const c = a.options.initialPromotionConfig;
      a.promote({
        transition: c ? c.transition : void 0,
        preserveFollowOpacity: c && c.shouldPreserveFollowOpacity ? c.shouldPreserveFollowOpacity(a) : void 0
      });
    }
    isLead() {
      const r = this.getStack();
      return r ? r.lead === this : !0;
    }
    getLead() {
      const { layoutId: r } = this.options;
      return r ? this.getStack()?.lead || this : this;
    }
    getPrevLead() {
      const { layoutId: r } = this.options;
      return r ? this.getStack()?.prevLead : void 0;
    }
    getStack() {
      const { layoutId: r } = this.options;
      if (r)
        return this.root.sharedNodes.get(r);
    }
    promote({ needsReset: r, transition: a, preserveFollowOpacity: l } = {}) {
      const c = this.getStack();
      c && c.promote(this, l), r && (this.projectionDelta = void 0, this.needsReset = !0), a && this.setOptions({ transition: a });
    }
    relegate() {
      const r = this.getStack();
      return r ? r.relegate(this) : !1;
    }
    resetSkewAndRotation() {
      const { visualElement: r } = this.options;
      if (!r)
        return;
      let a = !1;
      const { latestValues: l } = r;
      if ((l.z || l.rotate || l.rotateX || l.rotateY || l.rotateZ || l.skewX || l.skewY) && (a = !0), !a)
        return;
      const c = {};
      l.z && Lr("z", r, c, this.animationValues);
      for (let d = 0; d < kr.length; d++)
        Lr(`rotate${kr[d]}`, r, c, this.animationValues), Lr(`skew${kr[d]}`, r, c, this.animationValues);
      r.render();
      for (const d in c)
        r.setStaticValue(d, c[d]), this.animationValues && (this.animationValues[d] = c[d]);
      r.scheduleRender();
    }
    applyProjectionStyles(r, a) {
      if (!this.instance || this.isSVG)
        return;
      if (!this.isVisible) {
        r.visibility = "hidden";
        return;
      }
      const l = this.getTransformTemplate();
      if (this.needsReset) {
        this.needsReset = !1, r.visibility = "", r.opacity = "", r.pointerEvents = ln(a?.pointerEvents) || "", r.transform = l ? l(this.latestValues, "") : "none";
        return;
      }
      const c = this.getLead();
      if (!this.projectionDelta || !this.layout || !c.target) {
        this.options.layoutId && (r.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1, r.pointerEvents = ln(a?.pointerEvents) || ""), this.hasProjected && !vi(this.latestValues) && (r.transform = l ? l({}, "") : "none", this.hasProjected = !1);
        return;
      }
      r.visibility = "";
      const d = c.animationValues || c.latestValues;
      this.applyTransformsToTarget();
      let u = vb(this.projectionDeltaWithTransform, this.treeScale, d);
      l && (u = l(d, u)), r.transform = u;
      const { x: h, y: g } = this.projectionDelta;
      r.transformOrigin = `${h.origin * 100}% ${g.origin * 100}% 0`, c.animationValues ? r.opacity = c === this ? d.opacity ?? this.latestValues.opacity ?? 1 : this.preserveOpacity ? this.latestValues.opacity : d.opacityExit : r.opacity = c === this ? d.opacity !== void 0 ? d.opacity : "" : d.opacityExit !== void 0 ? d.opacityExit : 0;
      for (const p in po) {
        if (d[p] === void 0)
          continue;
        const { correct: f, applyTo: m, isCSSVariable: C } = po[p], v = u === "none" ? d[p] : f(d[p], c);
        if (m) {
          const w = m.length;
          for (let y = 0; y < w; y++)
            r[m[y]] = v;
        } else
          C ? this.options.visualElement.renderState.vars[p] = v : r[p] = v;
      }
      this.options.layoutId && (r.pointerEvents = c === this ? ln(a?.pointerEvents) || "" : "none");
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = void 0;
    }
    // Only run on root
    resetTree() {
      this.root.nodes.forEach((r) => r.currentAnimation?.stop()), this.root.nodes.forEach(iu), this.root.sharedNodes.clear();
    }
  };
}
function yb(e) {
  e.updateLayout();
}
function bb(e) {
  const t = e.resumeFrom?.snapshot || e.snapshot;
  if (e.isLead() && e.layout && t && e.hasListeners("didUpdate")) {
    const { layoutBox: i, measuredBox: s } = e.layout, { animationType: o } = e.options, n = t.source !== e.layout.source;
    o === "size" ? ht((d) => {
      const u = n ? t.measuredBox[d] : t.layoutBox[d], h = Ze(u);
      u.min = i[d].min, u.max = u.min + h;
    }) : Rp(o, t.layoutBox, i) && ht((d) => {
      const u = n ? t.measuredBox[d] : t.layoutBox[d], h = Ze(i[d]);
      u.max = u.min + h, e.relativeTarget && !e.currentAnimation && (e.isProjectionDirty = !0, e.relativeTarget[d].max = e.relativeTarget[d].min + h);
    });
    const r = as();
    Qs(r, i, t.layoutBox);
    const a = as();
    n ? Qs(a, e.applyTransform(s, !0), t.measuredBox) : Qs(a, i, t.layoutBox);
    const l = !wp(r);
    let c = !1;
    if (!e.resumeFrom) {
      const d = e.getClosestProjectingParent();
      if (d && !d.resumeFrom) {
        const { snapshot: u, layout: h } = d;
        if (u && h) {
          const g = Ee();
          Js(g, t.layoutBox, u.layoutBox);
          const p = Ee();
          Js(p, i, h.layoutBox), Sp(g, p) || (c = !0), d.options.layoutRoot && (e.relativeTarget = p, e.relativeTargetOrigin = g, e.relativeParent = d);
        }
      }
    }
    e.notifyListeners("didUpdate", {
      layout: i,
      snapshot: t,
      delta: a,
      layoutDelta: r,
      hasLayoutChanged: l,
      hasRelativeLayoutChanged: c
    });
  } else if (e.isLead()) {
    const { onExitComplete: i } = e.options;
    i && i();
  }
  e.options.transition = void 0;
}
function Rb(e) {
  e.parent && (e.isProjecting() || (e.isProjectionDirty = e.parent.isProjectionDirty), e.isSharedProjectionDirty || (e.isSharedProjectionDirty = !!(e.isProjectionDirty || e.parent.isProjectionDirty || e.parent.isSharedProjectionDirty)), e.isTransformDirty || (e.isTransformDirty = e.parent.isTransformDirty));
}
function xb(e) {
  e.isProjectionDirty = e.isSharedProjectionDirty = e.isTransformDirty = !1;
}
function Fb(e) {
  e.clearSnapshot();
}
function iu(e) {
  e.clearMeasurements();
}
function su(e) {
  e.isLayoutDirty = !1;
}
function Pb(e) {
  const { visualElement: t } = e.options;
  t && t.getProps().onBeforeLayoutMeasure && t.notify("BeforeLayoutMeasure"), e.resetTransform();
}
function ou(e) {
  e.finishAnimation(), e.targetDelta = e.relativeTarget = e.target = void 0, e.isProjectionDirty = !0;
}
function Eb(e) {
  e.resolveTargetDelta();
}
function Db(e) {
  e.calcProjection();
}
function Tb(e) {
  e.resetSkewAndRotation();
}
function Mb(e) {
  e.removeLeadSnapshot();
}
function nu(e, t, i) {
  e.translate = xe(t.translate, 0, i), e.scale = xe(t.scale, 1, i), e.origin = t.origin, e.originPoint = t.originPoint;
}
function ru(e, t, i, s) {
  e.min = xe(t.min, i.min, s), e.max = xe(t.max, i.max, s);
}
function Ab(e, t, i, s) {
  ru(e.x, t.x, i.x, s), ru(e.y, t.y, i.y, s);
}
function Ib(e) {
  return e.animationValues && e.animationValues.opacityExit !== void 0;
}
const kb = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
}, au = (e) => typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(e), lu = au("applewebkit/") && !au("chrome/") ? Math.round : wt;
function cu(e) {
  e.min = lu(e.min), e.max = lu(e.max);
}
function Lb(e) {
  cu(e.x), cu(e.y);
}
function Rp(e, t, i) {
  return e === "position" || e === "preserve-aspect" && !Ny(eu(t), eu(i), 0.2);
}
function Ob(e) {
  return e !== e.root && e.scroll?.wasRoot;
}
const Vb = bp({
  attachResizeListener: (e, t) => fo(e, "resize", t),
  measureScroll: () => ({
    x: document.documentElement.scrollLeft || document.body.scrollLeft,
    y: document.documentElement.scrollTop || document.body.scrollTop
  }),
  checkIsScrollRoot: () => !0
}), Or = {
  current: void 0
}, xp = bp({
  measureScroll: (e) => ({
    x: e.scrollLeft,
    y: e.scrollTop
  }),
  defaultParent: () => {
    if (!Or.current) {
      const e = new Vb({});
      e.mount(window), e.setOptions({ layoutScroll: !0 }), Or.current = e;
    }
    return Or.current;
  },
  resetTransform: (e, t) => {
    e.style.transform = t !== void 0 ? t : "none";
  },
  checkIsScrollRoot: (e) => window.getComputedStyle(e).position === "fixed"
}), Gb = {
  pan: {
    Feature: tb
  },
  drag: {
    Feature: eb,
    ProjectionNode: xp,
    MeasureLayout: mp
  }
};
function du(e, t, i) {
  const { props: s } = e;
  e.animationState && s.whileHover && e.animationState.setActive("whileHover", i === "Start");
  const o = "onHover" + i, n = s[o];
  n && Se.postRender(() => n(t, Oo(t)));
}
class Hb extends pi {
  mount() {
    const { current: t } = this.node;
    t && (this.unmount = aS(t, (i, s) => (du(this.node, s, "Start"), (o) => du(this.node, o, "End"))));
  }
  unmount() {
  }
}
class Bb extends pi {
  constructor() {
    super(...arguments), this.isActive = !1;
  }
  onFocus() {
    let t = !1;
    try {
      t = this.node.current.matches(":focus-visible");
    } catch {
      t = !0;
    }
    !t || !this.node.animationState || (this.node.animationState.setActive("whileFocus", !0), this.isActive = !0);
  }
  onBlur() {
    !this.isActive || !this.node.animationState || (this.node.animationState.setActive("whileFocus", !1), this.isActive = !1);
  }
  mount() {
    this.unmount = Io(fo(this.node.current, "focus", () => this.onFocus()), fo(this.node.current, "blur", () => this.onBlur()));
  }
  unmount() {
  }
}
function uu(e, t, i) {
  const { props: s } = e;
  if (e.current instanceof HTMLButtonElement && e.current.disabled)
    return;
  e.animationState && s.whileTap && e.animationState.setActive("whileTap", i === "Start");
  const o = "onTap" + (i === "End" ? "" : i), n = s[o];
  n && Se.postRender(() => n(t, Oo(t)));
}
class Nb extends pi {
  mount() {
    const { current: t } = this.node;
    t && (this.unmount = uS(t, (i, s) => (uu(this.node, s, "Start"), (o, { success: n }) => uu(this.node, o, n ? "End" : "Cancel")), { useGlobalTarget: this.node.props.globalTapTarget }));
  }
  unmount() {
  }
}
const Ba = /* @__PURE__ */ new WeakMap(), Vr = /* @__PURE__ */ new WeakMap(), Wb = (e) => {
  const t = Ba.get(e.target);
  t && t(e);
}, zb = (e) => {
  e.forEach(Wb);
};
function _b({ root: e, ...t }) {
  const i = e || document;
  Vr.has(i) || Vr.set(i, {});
  const s = Vr.get(i), o = JSON.stringify(t);
  return s[o] || (s[o] = new IntersectionObserver(zb, { root: e, ...t })), s[o];
}
function Ub(e, t, i) {
  const s = _b(t);
  return Ba.set(e, i), s.observe(e), () => {
    Ba.delete(e), s.unobserve(e);
  };
}
const jb = {
  some: 0,
  all: 1
};
class $b extends pi {
  constructor() {
    super(...arguments), this.hasEnteredView = !1, this.isInView = !1;
  }
  startObserver() {
    this.unmount();
    const { viewport: t = {} } = this.node.getProps(), { root: i, margin: s, amount: o = "some", once: n } = t, r = {
      root: i ? i.current : void 0,
      rootMargin: s,
      threshold: typeof o == "number" ? o : jb[o]
    }, a = (l) => {
      const { isIntersecting: c } = l;
      if (this.isInView === c || (this.isInView = c, n && !c && this.hasEnteredView))
        return;
      c && (this.hasEnteredView = !0), this.node.animationState && this.node.animationState.setActive("whileInView", c);
      const { onViewportEnter: d, onViewportLeave: u } = this.node.getProps(), h = c ? d : u;
      h && h(l);
    };
    return Ub(this.node.current, r, a);
  }
  mount() {
    this.startObserver();
  }
  update() {
    if (typeof IntersectionObserver > "u")
      return;
    const { props: t, prevProps: i } = this.node;
    ["amount", "margin", "root"].some(Kb(t, i)) && this.startObserver();
  }
  unmount() {
  }
}
function Kb({ viewport: e = {} }, { viewport: t = {} } = {}) {
  return (i) => e[i] !== t[i];
}
const Yb = {
  inView: {
    Feature: $b
  },
  tap: {
    Feature: Nb
  },
  focus: {
    Feature: Bb
  },
  hover: {
    Feature: Hb
  }
}, qb = {
  layout: {
    ProjectionNode: xp,
    MeasureLayout: mp
  }
}, Xb = {
  ...Ly,
  ...Yb,
  ...Gb,
  ...qb
}, Te = /* @__PURE__ */ XS(Xb, cy);
var Fp = {
  color: void 0,
  size: void 0,
  className: void 0,
  style: void 0,
  attr: void 0
}, hu = W.createContext && /* @__PURE__ */ W.createContext(Fp), Zb = ["attr", "size", "title"];
function Qb(e, t) {
  if (e == null) return {};
  var i = Jb(e, t), s, o;
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    for (o = 0; o < n.length; o++)
      s = n[o], !(t.indexOf(s) >= 0) && Object.prototype.propertyIsEnumerable.call(e, s) && (i[s] = e[s]);
  }
  return i;
}
function Jb(e, t) {
  if (e == null) return {};
  var i = {};
  for (var s in e)
    if (Object.prototype.hasOwnProperty.call(e, s)) {
      if (t.indexOf(s) >= 0) continue;
      i[s] = e[s];
    }
  return i;
}
function kn() {
  return kn = Object.assign ? Object.assign.bind() : function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var i = arguments[t];
      for (var s in i)
        Object.prototype.hasOwnProperty.call(i, s) && (e[s] = i[s]);
    }
    return e;
  }, kn.apply(this, arguments);
}
function gu(e, t) {
  var i = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(e);
    t && (s = s.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), i.push.apply(i, s);
  }
  return i;
}
function Ln(e) {
  for (var t = 1; t < arguments.length; t++) {
    var i = arguments[t] != null ? arguments[t] : {};
    t % 2 ? gu(Object(i), !0).forEach(function(s) {
      eR(e, s, i[s]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(i)) : gu(Object(i)).forEach(function(s) {
      Object.defineProperty(e, s, Object.getOwnPropertyDescriptor(i, s));
    });
  }
  return e;
}
function eR(e, t, i) {
  return t = tR(t), t in e ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = i, e;
}
function tR(e) {
  var t = iR(e, "string");
  return typeof t == "symbol" ? t : t + "";
}
function iR(e, t) {
  if (typeof e != "object" || !e) return e;
  var i = e[Symbol.toPrimitive];
  if (i !== void 0) {
    var s = i.call(e, t);
    if (typeof s != "object") return s;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Pp(e) {
  return e && e.map((t, i) => /* @__PURE__ */ W.createElement(t.tag, Ln({
    key: i
  }, t.attr), Pp(t.child)));
}
function Ve(e) {
  return (t) => /* @__PURE__ */ W.createElement(sR, kn({
    attr: Ln({}, e.attr)
  }, t), Pp(e.child));
}
function sR(e) {
  var t = (i) => {
    var {
      attr: s,
      size: o,
      title: n
    } = e, r = Qb(e, Zb), a = o || i.size || "1em", l;
    return i.className && (l = i.className), e.className && (l = (l ? l + " " : "") + e.className), /* @__PURE__ */ W.createElement("svg", kn({
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0"
    }, i.attr, s, r, {
      className: l,
      style: Ln(Ln({
        color: e.color || i.color
      }, i.style), e.style),
      height: a,
      width: a,
      xmlns: "http://www.w3.org/2000/svg"
    }), n && /* @__PURE__ */ W.createElement("title", null, n), e.children);
  };
  return hu !== void 0 ? /* @__PURE__ */ W.createElement(hu.Consumer, null, (i) => t(i)) : t(Fp);
}
function Ep(e) {
  return Ve({ attr: { viewBox: "0 0 512 512" }, child: [{ tag: "path", attr: { fill: "none", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "32", d: "M256 112v288m144-144H112" }, child: [] }] })(e);
}
function oR(e) {
  return Ve({ attr: { viewBox: "0 0 512 512" }, child: [{ tag: "path", attr: { fill: "none", strokeLinecap: "square", strokeMiterlimit: "10", strokeWidth: "48", d: "m112 184 144 144 144-144" }, child: [] }] })(e);
}
function Dp(e) {
  return Ve({ attr: { viewBox: "0 0 512 512" }, child: [{ tag: "path", attr: { d: "m289.94 256 95-95A24 24 0 0 0 351 127l-95 95-95-95a24 24 0 0 0-34 34l95 95-95 95a24 24 0 1 0 34 34l95-95 95 95a24 24 0 0 0 34-34z" }, child: [] }] })(e);
}
function nR(e) {
  return Ve({ attr: { viewBox: "0 0 512 512" }, child: [{ tag: "path", attr: { d: "M432 448a15.92 15.92 0 0 1-11.31-4.69l-352-352a16 16 0 0 1 22.62-22.62l352 352A16 16 0 0 1 432 448zM248 315.85l-51.79-51.79a2 2 0 0 0-3.39 1.69 64.11 64.11 0 0 0 53.49 53.49 2 2 0 0 0 1.69-3.39zm16-119.7L315.87 248a2 2 0 0 0 3.4-1.69 64.13 64.13 0 0 0-53.55-53.55 2 2 0 0 0-1.72 3.39z" }, child: [] }, { tag: "path", attr: { d: "M491 273.36a32.2 32.2 0 0 0-.1-34.76c-26.46-40.92-60.79-75.68-99.27-100.53C349 110.55 302 96 255.68 96a226.54 226.54 0 0 0-71.82 11.79 4 4 0 0 0-1.56 6.63l47.24 47.24a4 4 0 0 0 3.82 1.05 96 96 0 0 1 116 116 4 4 0 0 0 1.05 3.81l67.95 68a4 4 0 0 0 5.4.24 343.81 343.81 0 0 0 67.24-77.4zM256 352a96 96 0 0 1-93.3-118.63 4 4 0 0 0-1.05-3.81l-66.84-66.87a4 4 0 0 0-5.41-.23c-24.39 20.81-47 46.13-67.67 75.72a31.92 31.92 0 0 0-.64 35.54c26.41 41.33 60.39 76.14 98.28 100.65C162.06 402 207.92 416 255.68 416a238.22 238.22 0 0 0 72.64-11.55 4 4 0 0 0 1.61-6.64l-47.47-47.46a4 4 0 0 0-3.81-1.05A96 96 0 0 1 256 352z" }, child: [] }] })(e);
}
function rR(e) {
  return Ve({ attr: { viewBox: "0 0 512 512" }, child: [{ tag: "circle", attr: { cx: "256", cy: "256", r: "64" }, child: [] }, { tag: "path", attr: { d: "M490.84 238.6c-26.46-40.92-60.79-75.68-99.27-100.53C349 110.55 302 96 255.66 96c-42.52 0-84.33 12.15-124.27 36.11-40.73 24.43-77.63 60.12-109.68 106.07a31.92 31.92 0 0 0-.64 35.54c26.41 41.33 60.4 76.14 98.28 100.65C162 402 207.9 416 255.66 416c46.71 0 93.81-14.43 136.2-41.72 38.46-24.77 72.72-59.66 99.08-100.92a32.2 32.2 0 0 0-.1-34.76zM256 352a96 96 0 1 1 96-96 96.11 96.11 0 0 1-96 96z" }, child: [] }] })(e);
}
function aR(e) {
  return Ve({ attr: { viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" }, child: [] }, { tag: "path", attr: { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" }, child: [] }] })(e);
}
function lR(e) {
  return Ve({ attr: { viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" }, child: [] }, { tag: "path", attr: { fill: "none", d: "M0 0h24v24H0V0z" }, child: [] }, { tag: "path", attr: { d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12 1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z" }, child: [] }] })(e);
}
function cR(e) {
  return Ve({ attr: { viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" }, child: [] }, { tag: "path", attr: { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z" }, child: [] }] })(e);
}
function dR(e) {
  return Ve({ attr: { viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" }, child: [] }, { tag: "path", attr: { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z" }, child: [] }] })(e);
}
function uR(e) {
  return Ve({ attr: { viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" }, child: [] }, { tag: "path", attr: { d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z" }, child: [] }] })(e);
}
function hR(e) {
  return Ve({ attr: { viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0V0z" }, child: [] }, { tag: "path", attr: { d: "M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5a2 2 0 0 0-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z" }, child: [] }] })(e);
}
function gR(e) {
  return Ve({ attr: { viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0V0z" }, child: [] }, { tag: "path", attr: { d: "M15.41 16.59 10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z" }, child: [] }] })(e);
}
function pR(e) {
  return Ve({ attr: { viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0V0z" }, child: [] }, { tag: "path", attr: { d: "M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z" }, child: [] }] })(e);
}
function fR(e) {
  return Ve({ attr: { viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" }, child: [] }, { tag: "path", attr: { d: "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a.996.996 0 0 0 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" }, child: [] }] })(e);
}
function mR(e) {
  return Ve({ attr: { viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" }, child: [] }, { tag: "path", attr: { d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" }, child: [] }] })(e);
}
const JH = ({
  title: e,
  subtitle: t,
  footer: i,
  children: s,
  className: o,
  elevation: n = "md",
  borderRadius: r = "md",
  hoverEffect: a = !0,
  collapsible: l = !1,
  defaultCollapsed: c = !1,
  headerActions: d,
  headerActionsStyle: u,
  onClickEdit: h,
  onClickDelete: g
}) => {
  const [p, f] = V(c), m = {
    none: "",
    sm: "shadow-sm",
    md: "shadow-md",
    lg: "shadow-lg"
  }[n], C = {
    sm: "rounded-sm",
    md: "rounded-md",
    lg: "rounded-lg",
    xl: "rounded-xl"
  }[r];
  return /* @__PURE__ */ R.jsxs(
    Hh,
    {
      className: ri(
        "transition-all bg-white dark:bg-gray-900",
        m,
        C,
        a && "hover:shadow-xl hover:scale-[1.01] cursor-pointer",
        o
      ),
      children: [
        (e || t || d || l) && /* @__PURE__ */ R.jsxs(YC, { className: "relative pb-2 flex flex-col items-center", children: [
          /* @__PURE__ */ R.jsxs("div", { className: "flex flex-col items-center text-center w-full", children: [
            /* @__PURE__ */ R.jsx("div", { className: "w-full flex justify-end", children: /* @__PURE__ */ R.jsxs(
              "div",
              {
                className: "flex items-start gap-3",
                style: u,
                children: [
                  /* @__PURE__ */ R.jsx(
                    fR,
                    {
                      className: `w-10 h-10 !p-2 rounded-md bg-gray-50 backdrop-blur-sm \r
                                    text-[var(--ion-color-secondary-shade)] dark:text-[var(--ion-color-secondary-tint)] hover:scale-110 transition`,
                      onClick: h
                    }
                  ),
                  /* @__PURE__ */ R.jsx(
                    lR,
                    {
                      onClick: g,
                      className: `w-10 h-10 !p-2 rounded-md bg-gray-50 backdrop-blur-sm \r
                                text-[var(--ion-color-danger)] hover:scale-110 transition`
                    }
                  )
                ]
              }
            ) }),
            e && /* @__PURE__ */ R.jsx(qC, { className: "text-lg font-semibold", children: e }),
            t && /* @__PURE__ */ R.jsx(XC, { className: "text-sm text-gray-500 dark:text-gray-400", children: t })
          ] }),
          /* @__PURE__ */ R.jsx("div", { className: "w-full flex justify-end", children: l && /* @__PURE__ */ R.jsx(
            Te.div,
            {
              initial: !1,
              animate: { rotate: p ? 0 : 180 },
              transition: { duration: 0.3 },
              className: "text-[var(--ion-color-text-primary)] text-xl flex-center leading-none",
              onClick: () => f(!p),
              children: /* @__PURE__ */ R.jsx(oR, { className: "transition-transform" })
            }
          ) })
        ] }),
        !p && s && /* @__PURE__ */ R.jsx(Bh, { className: "text-sm text-gray-700 dark:text-gray-200", children: s }),
        i && /* @__PURE__ */ R.jsx(Nh, { className: "!p-4 border-t border-gray-200 dark:border-gray-700", children: i })
      ]
    }
  );
}, Tp = {
  primary: "var(--ion-color-primary)",
  secondary: "var(--ion-color-secondary)",
  success: "var(--ion-color-success)",
  warning: "var(--ion-color-warning)",
  danger: "var(--ion-color-danger)",
  info: "var(--ion-color-info)",
  neutral: "var(--ion-color-neutral)",
  light: "var(--ion-color-light)",
  dark: "var(--ion-color-dark)"
}, CR = {
  primary: "var(--ion-color-light)",
  // texto claro sobre azul escuro
  secondary: "var(--ion-color-light)",
  // texto claro sobre roxo
  success: "var(--ion-color-light)",
  // texto claro sobre verde
  warning: "var(--ion-color-dark)",
  // texto escuro sobre amarelo
  danger: "var(--ion-color-light)",
  // texto claro sobre vermelho
  info: "var(--ion-color-dark)",
  // texto escuro sobre azul suave
  neutral: "var(--ion-color-dark)",
  // texto escuro sobre cinza médio
  light: "var(--ion-color-dark)",
  // texto escuro sobre claro
  dark: "var(--ion-color-light)"
  // texto claro sobre escuro
};
function Me(e = "primary") {
  const t = Tp[e], i = CR[e];
  return { main: t, contrast: i };
}
const eB = ({ message: e, type: t = "info", duration: i = 3e3, show: s, onClose: o, className: n }) => {
  const { main: r, contrast: a } = Me("success"), { main: l, contrast: c } = Me("danger"), { main: d, contrast: u } = Me("warning"), { main: h, contrast: g } = Me("info"), p = {
    success: { bg: r, color: a, icon: /* @__PURE__ */ R.jsx(aR, { size: 20 }) },
    error: { bg: l, color: c, icon: /* @__PURE__ */ R.jsx(dR, { size: 20 }) },
    warning: { bg: d, color: u, icon: /* @__PURE__ */ R.jsx(uR, { size: 20 }) },
    info: { bg: h, color: g, icon: /* @__PURE__ */ R.jsx(cR, { size: 20 }) }
  }, { bg: f, color: m, icon: C } = p[t];
  return ve(() => {
    if (s && i) {
      const v = setTimeout(() => o?.(), i);
      return () => clearTimeout(v);
    }
  }, [s, i]), /* @__PURE__ */ R.jsx(ho, { children: s && /* @__PURE__ */ R.jsxs(
    Te.div,
    {
      initial: { opacity: 0, y: 50 },
      animate: { opacity: 1, y: 0 },
      exit: { opacity: 0, y: 50 },
      transition: { duration: 0.3 },
      className: `fixed bottom-4 w-[95vw] max-w-[360px] !rounded-lg !p-4 flex items-center shadow-lg z-[9999] ${n}`,
      style: { backgroundColor: f, color: m },
      children: [
        /* @__PURE__ */ R.jsxs("div", { className: "flex items-center gap-2 flex-1", children: [
          C,
          /* @__PURE__ */ R.jsx(ZC, { className: "text-[14px] font-medium", children: e })
        ] }),
        /* @__PURE__ */ R.jsx(
          "button",
          {
            onClick: () => o?.(),
            style: {
              marginLeft: 12,
              padding: 6,
              borderRadius: "50%"
            },
            children: /* @__PURE__ */ R.jsx(mR, { size: 18 })
          }
        )
      ]
    }
  ) });
}, tB = ({
  isOpen: e,
  onDismiss: t,
  title: i,
  subtitle: s,
  children: o,
  footer: n,
  showCloseButton: r = !0,
  className: a,
  headerClassName: l,
  contentClassName: c,
  footerClassName: d
}) => /* @__PURE__ */ R.jsxs(
  Wh,
  {
    isOpen: e,
    onDidDismiss: t,
    className: ri("rounded-lg overflow-hidden modal-height-full", a),
    children: [
      (i || s || r) && /* @__PURE__ */ R.jsx(QC, { className: ri("ion-no-border", l), children: /* @__PURE__ */ R.jsx(JC, { children: /* @__PURE__ */ R.jsxs("div", { className: "flex flex-col items-center text-center w-full", children: [
        /* @__PURE__ */ R.jsx("div", { className: "w-full flex justify-end", children: r && /* @__PURE__ */ R.jsx(ev, { slot: "end", children: /* @__PURE__ */ R.jsx(Pn, { onClick: t, children: /* @__PURE__ */ R.jsx(Dp, { size: 20 }) }) }) }),
        /* @__PURE__ */ R.jsxs("div", { className: "flex flex-col", children: [
          i && /* @__PURE__ */ R.jsx(tv, { className: "text-lg font-semibold", children: i }),
          s && /* @__PURE__ */ R.jsx("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: s })
        ] })
      ] }) }) }),
      /* @__PURE__ */ R.jsx(
        iv,
        {
          style: {
            "--padding-start": "1rem",
            "--padding-end": "1rem",
            "--padding-top": "1rem",
            "--padding-bottom": "1rem"
          },
          className: ri("!p-4 text-gray-700 dark:text-gray-200", c),
          children: o
        }
      ),
      n && /* @__PURE__ */ R.jsx(Nh, { className: ri("border-t border-gray-200 dark:border-gray-700 !p-4", d), children: n })
    ]
  }
), pu = {
  tel: (e) => {
    const t = e.replace(/\D/g, "").slice(0, 11);
    if (!t) return "";
    let i = "(" + t.substring(0, 2) + ") ";
    return i += t.length > 6 ? t.substring(2, 7) + "-" + t.substring(7) : t.substring(2), i;
  },
  cep: (e) => {
    const t = e.replace(/\D/g, "").slice(0, 8);
    return t.length > 5 ? t.substring(0, 5) + "-" + t.substring(5) : t;
  },
  currency: (e) => {
    const t = e.replace(/\D/g, ""), i = parseFloat(t) / 100;
    return isNaN(i) ? "" : Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL",
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(i);
  }
}, iB = ({
  label: e,
  value: t,
  name: i,
  type: s = "text",
  placeholder: o = "",
  className: n = "",
  error: r,
  maxLength: a,
  mask: l,
  disabled: c,
  onChangeValue: d,
  handleBlur: u,
  fill: h = "outline",
  shape: g = "round",
  color: p = "neutral",
  ...f
}) => {
  const [m, C] = V(!1), [v, w] = V(!1), [y, S] = V(!1), { main: x } = Me(p), { main: D } = Me("danger");
  ve(() => w(!!t), [t]);
  function M(P) {
    return P && pu[P] ? {
      onIonInput: (F) => {
        const N = F.target.value;
        d(pu[P](N));
      }
    } : {
      onIonChange: (F) => {
        d(F.detail.value ?? "");
      }
    };
  }
  const k = r ? D : m || v ? x : "var(--ion-color-medium)";
  return /* @__PURE__ */ R.jsxs("div", { className: `relative flex flex-col h-[72px] !pt-2 ${n}`, children: [
    /* @__PURE__ */ R.jsx(
      zh,
      {
        type: s === "password" ? y ? "text" : "password" : s,
        value: t,
        label: e,
        placeholder: o,
        fill: h,
        shape: g === "round" ? "round" : void 0,
        labelPlacement: "stacked",
        maxlength: a,
        disabled: c,
        style: {
          "--border-color": k,
          "--highlight-color-focused": x,
          color: "var(--ion-color-dark)"
        },
        onKeyDown: (P) => {
          l && (/[0-9]|Backspace|Delete|ArrowLeft|ArrowRight/.test(P.key) || P.preventDefault());
        },
        ...M(l),
        onIonBlur: () => {
          C(!1), u && i && u({ target: { name: i, value: t } });
        },
        onIonFocus: () => C(!0),
        ...f
      }
    ),
    s === "password" && /* @__PURE__ */ R.jsx(
      sv,
      {
        className: "absolute top-4 right-4 z-10 cursor-pointer p-1",
        onClick: () => S(!y),
        children: y ? /* @__PURE__ */ R.jsx(rR, { className: "text-2xl text-[var(--ion-color-text)]" }) : /* @__PURE__ */ R.jsx(nR, { className: "text-2xl text-[var(--ion-color-text)]" })
      }
    ),
    r && /* @__PURE__ */ R.jsx(ao, { className: "text-[12px] !pl-6 text-[var(--ion-color-danger)]", children: r })
  ] });
}, Rs = ({
  label: e,
  size: t = "medium",
  variant: i = "solid",
  rounded: s = !1,
  fullWidth: o = !1,
  loading: n = !1,
  loadingText: r,
  disabled: a = !1,
  gradient: l,
  iconStart: c,
  iconEnd: d,
  className: u = "",
  style: h,
  color: g = "primary",
  ...p
}) => {
  const { main: f, contrast: m } = Me(g), C = { ...h };
  switch (i === "solid" ? (C["--background"] = l ?? f, C["--color"] = m, C["--background-focused"] = f, C["--background-activated"] = f, C["--color-focused"] = m, C["--color-hover"] = m, C["--color-activated"] = m) : i === "outline" ? (C["--color"] = f, C["--border-color"] = f, C["--border-color-focused"] = f, C["--border-color-activated"] = f, C["--color-focused"] = f, C["--color-hover"] = f, C["--color-activated"] = f) : i === "clear" && (C["--color"] = f, C["--color-focused"] = f, C["--color-hover"] = f, C["--color-activated"] = f), s && (C["--border-radius"] = "999px"), o && (C.width = "100%"), t) {
    case "small":
      C.height = "32px", C.fontSize = "14px";
      break;
    case "medium":
      C.height = "40px", C.fontSize = "16px";
      break;
    case "large":
      C.height = "48px", C.fontSize = "18px";
      break;
  }
  return /* @__PURE__ */ R.jsx(
    Pn,
    {
      fill: i === "solid" ? "solid" : i === "outline" ? "outline" : "clear",
      disabled: a || n,
      style: C,
      className: u,
      ...p,
      children: n ? /* @__PURE__ */ R.jsxs(R.Fragment, { children: [
        /* @__PURE__ */ R.jsx(Ao, { name: "crescent", slot: "start" }),
        " ",
        r ?? e
      ] }) : /* @__PURE__ */ R.jsxs(R.Fragment, { children: [
        c && !e ? c : null,
        c && e && /* @__PURE__ */ R.jsx("span", { style: { marginRight: 8 }, children: c }),
        e,
        d && /* @__PURE__ */ R.jsx("span", { style: { marginLeft: 8 }, children: d })
      ] })
    }
  );
};
function vR() {
  const [e, t] = V("action-sheet");
  return ve(() => {
    const i = window.matchMedia("(min-width: 768px)"), s = (o) => {
      t(o.matches ? "popover" : "action-sheet");
    };
    return s(i), i.addEventListener("change", s), () => i.removeEventListener("change", s);
  }, []), e;
}
function sB({
  label: e,
  value: t,
  items: i,
  getLabel: s,
  getValue: o,
  onValueChange: n,
  placeholder: r = "Selecione...",
  error: a = !1,
  helperText: l = "",
  disabled: c = !1,
  loading: d = !1,
  color: u = "neutral",
  style: h,
  fill: g = "outline",
  shape: p = "round",
  ...f
}) {
  const m = H(null), C = vR(), { main: v } = Me(u), w = (S) => {
    const x = S.detail.value, D = i.find((M) => o(M) === x);
    D && n(D);
  }, y = {
    ...h,
    "--border-color": a ? Tp.danger : v,
    "--icon-color": v,
    "--color": "var(--ion-color-dark)",
    "--placeholder-color": "var(--ion-color-medium)"
  };
  return /* @__PURE__ */ R.jsxs("div", { className: "relative flex flex-col", style: { minHeight: 72 }, children: [
    e && /* @__PURE__ */ R.jsx("label", { className: "text-xs font-medium !pl-6", children: e }),
    /* @__PURE__ */ R.jsx(
      _h,
      {
        ref: m,
        interface: C,
        placeholder: r,
        value: t,
        disabled: c || d,
        onIonChange: w,
        onClick: (S) => {
          S.persist?.(), f.interfaceOptions = {
            ...f.interfaceOptions,
            event: S.nativeEvent
          };
        },
        interfaceOptions: {
          header: e
        },
        fill: g,
        shape: p,
        mode: "md",
        labelPlacement: "stacked",
        style: y,
        ...f,
        children: i.map((S, x) => /* @__PURE__ */ R.jsx(fa, { value: o(S), children: s(S) }, x))
      }
    ),
    a && l && /* @__PURE__ */ R.jsx(ao, { className: "text-[12px] !pl-6 text-[var(--ion-color-danger)]", children: l })
  ] });
}
const oB = ({ isOpen: e = !1, message: t = "Carregando...", color: i = "primary", type: s = "circular", withBg: o = !0, withText: n = !0 }) => {
  const [r, a] = V(e), [l, c] = V(t), [d, u] = V(i), [h, g] = V(o), [p, f] = V(n), [m, C] = V(s), { main: v, contrast: w } = Me(d);
  return ve(() => {
  }, []), m === "linear" ? /* @__PURE__ */ R.jsx(ho, { children: r && /* @__PURE__ */ R.jsxs(
    Te.div,
    {
      style: {
        position: "fixed",
        top: 0,
        left: 0,
        width: "100%",
        height: 4,
        backgroundColor: "rgba(0,0,0,0.1)",
        zIndex: 99999,
        overflow: "hidden"
      },
      children: [
        /* @__PURE__ */ R.jsx(
          Te.div,
          {
            style: {
              height: "100%",
              width: "50%",
              backgroundColor: v,
              opacity: 1,
              position: "absolute",
              borderRadius: 2
            },
            animate: { x: ["-100%", "200%"] },
            transition: { repeat: 1 / 0, duration: 1.5, ease: "easeInOut" }
          }
        ),
        /* @__PURE__ */ R.jsx(
          Te.div,
          {
            style: {
              height: "100%",
              width: "50%",
              backgroundColor: v,
              opacity: 0.4,
              position: "absolute",
              borderRadius: 2
            },
            animate: { x: ["-100%", "200%"] },
            transition: { repeat: 1 / 0, duration: 1.5, ease: "easeInOut", delay: 0.1 }
          }
        )
      ]
    }
  ) }) : (console.log(), /* @__PURE__ */ R.jsx(ho, { children: r && /* @__PURE__ */ R.jsx(
    Te.div,
    {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      exit: { opacity: 0 },
      transition: { duration: 0.2 },
      style: {
        position: "fixed",
        top: 0,
        left: 0,
        width: "100vw",
        height: "100vh",
        backgroundColor: "rgba(0,0,0,0.3)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: 99999
      },
      children: /* @__PURE__ */ R.jsxs(
        "div",
        {
          style: {
            backgroundColor: h ? v : "transparent",
            color: w,
            padding: "1.5rem 2rem",
            borderRadius: "12px",
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            gap: "1rem",
            minWidth: "180px"
          },
          children: [
            m === "circular" ? /* @__PURE__ */ R.jsx(Ao, { name: "crescent", color: "light" }) : /* @__PURE__ */ R.jsx("div", { style: { display: "flex", gap: "0.5rem" }, children: [...Array(3)].map((y, S) => /* @__PURE__ */ R.jsx(
              Te.div,
              {
                style: {
                  width: "8px",
                  height: "8px",
                  borderRadius: "50%",
                  backgroundColor: w
                },
                animate: { y: ["0%", "-50%", "0%"] },
                transition: {
                  repeat: 1 / 0,
                  duration: 0.6,
                  delay: S * 0.2
                }
              },
              S
            )) }),
            p && /* @__PURE__ */ R.jsx("span", { style: { fontSize: "14px", fontWeight: 500, textAlign: "center" }, children: l })
          ]
        }
      )
    }
  ) }));
}, nB = ({
  content: e,
  children: t,
  color: i = "light",
  placement: s = "top"
}) => {
  const [o, n] = V(!1), { main: r, contrast: a } = Me(i), l = {
    top: { bottom: "100%", left: "50%", transform: "translateX(-50%)", marginBottom: 8 },
    bottom: { top: "100%", left: "50%", transform: "translateX(-50%)", marginTop: 8 },
    left: { right: "100%", top: "50%", transform: "translateY(-50%)", marginRight: 8 },
    right: { left: "100%", top: "50%", transform: "translateY(-50%)", marginLeft: 8 }
  };
  return /* @__PURE__ */ R.jsxs(
    "div",
    {
      className: "relative inline-block",
      onMouseEnter: () => n(!0),
      onMouseLeave: () => n(!1),
      children: [
        t,
        /* @__PURE__ */ R.jsx(ho, { children: o && /* @__PURE__ */ R.jsx(
          Te.div,
          {
            initial: { opacity: 0, scale: 0.8 },
            animate: { opacity: 1, scale: 1 },
            exit: { opacity: 0, scale: 0.8 },
            transition: { duration: 0.2 },
            style: {
              ...l[s],
              position: "absolute",
              backgroundColor: r,
              color: a,
              padding: "0.4rem 0.8rem",
              borderRadius: "8px",
              whiteSpace: "nowrap",
              fontSize: "0.875rem",
              boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
              zIndex: 9999
            },
            children: e
          }
        ) })
      ]
    }
  );
}, rB = ({
  label: e,
  checked: t,
  disabled: i = !1,
  variant: s = "filled",
  onChange: o,
  color: n = "primary"
}) => {
  const { main: r, contrast: a } = Me(n), l = {
    borderColor: t ? r : "#d1d5db",
    backgroundColor: s === "filled" && t ? r : "#ffffff",
    color: t && s === "filled" ? a : t ? r : "inherit"
  };
  return /* @__PURE__ */ R.jsxs(
    "div",
    {
      className: ri(
        "flex items-center gap-2 cursor-pointer select-none",
        i && "cursor-not-allowed opacity-60"
      ),
      onClick: () => !i && o(!t),
      children: [
        /* @__PURE__ */ R.jsx(
          Te.div,
          {
            whileTap: { scale: 0.9 },
            style: l,
            className: "w-5 h-5 rounded-md flex items-center justify-center border-2 transition-all",
            children: t && /* @__PURE__ */ R.jsx(
              Te.svg,
              {
                xmlns: "http://www.w3.org/2000/svg",
                className: "w-3.5 h-3.5",
                fill: "none",
                viewBox: "0 0 24 24",
                stroke: "currentColor",
                strokeWidth: 3,
                initial: { scale: 0 },
                animate: { scale: 1 },
                children: /* @__PURE__ */ R.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M5 13l4 4L19 7" })
              }
            )
          }
        ),
        e && /* @__PURE__ */ R.jsx("label", { className: "text-sm font-medium cursor-pointer", children: e })
      ]
    }
  );
}, aB = ({
  label: e,
  value: t,
  placeholder: i = "",
  rows: s = 4,
  error: o,
  disabled: n = !1,
  color: r = "neutral",
  onChangeValue: a,
  fill: l = "outline",
  shape: c = "round",
  maxLength: d,
  ...u
}) => {
  const { main: h } = Me(r), { main: g } = Me("danger"), [p, f] = V(!1), [m, C] = V(!1);
  ve(() => C(!!t), [t]);
  const v = o ? g : p || m ? h : "var(--ion-color-medium)", w = d ? d - t.length : void 0, y = w !== void 0 && w < 0;
  return /* @__PURE__ */ R.jsxs("div", { className: "relative flex flex-col", style: { minHeight: 72 }, children: [
    e && /* @__PURE__ */ R.jsx("label", { className: "text-xs font-medium !pl-6", children: e }),
    /* @__PURE__ */ R.jsx(
      ov,
      {
        value: t,
        placeholder: i,
        rows: s,
        fill: l,
        shape: c === "round" ? "round" : void 0,
        disabled: n,
        labelPlacement: "stacked",
        maxlength: d,
        style: {
          "--border-color": v,
          "--highlight-color-focused": h,
          color: "var(--ion-color-dark)"
        },
        className: ri(
          "text-sm resize-none focus:outline-none",
          n && "opacity-60 cursor-not-allowed"
        ),
        onIonFocus: () => f(!0),
        onIonBlur: () => f(!1),
        onIonInput: (S) => a(S.detail.value ?? ""),
        ...u
      }
    ),
    /* @__PURE__ */ R.jsxs("div", { className: "flex justify-between mt-1", children: [
      /* @__PURE__ */ R.jsx(ao, { className: "text-[12px] !pl-6 text-[var(--ion-color-danger)]", children: o && /* @__PURE__ */ R.jsx("span", { children: o }) }),
      d && /* @__PURE__ */ R.jsxs(
        ao,
        {
          className: ri(
            "text-[12px] !pr-6",
            y ? "text-[var(--ion-color-danger)]" : "text-gray-500"
          ),
          children: [
            w,
            " caractere",
            w === 1 ? "" : "s",
            " restantes"
          ]
        }
      )
    ] })
  ] });
}, lB = ({
  label: e,
  checked: t,
  disabled: i = !1,
  type: s = "checkbox",
  onChange: o,
  color: n = "primary",
  labelPlacement: r = "start",
  styleDiv: a
}) => {
  const { main: l, contrast: c } = Me(n);
  if (s === "switch")
    return /* @__PURE__ */ R.jsx("div", { className: `w-auto ${a}`, children: /* @__PURE__ */ R.jsx(
      nv,
      {
        checked: t,
        disabled: i,
        color: n,
        labelPlacement: r,
        onIonChange: (d) => o(d.detail.checked),
        style: {
          "--background-checked": l,
          // fundo quando ativo
          "--handle-background-checked": c
          // cor do "pino" quando ativo
        },
        children: e
      }
    ) });
  if (s === "radio")
    return /* @__PURE__ */ R.jsx("div", { className: `w-auto ${a}`, children: /* @__PURE__ */ R.jsx(
      rv,
      {
        value: t ? "selected" : "unselected",
        onIonChange: (d) => o(d.detail.value === "selected"),
        className: "flex items-center gap-2",
        children: /* @__PURE__ */ R.jsx(
          av,
          {
            value: "selected",
            color: n,
            disabled: i,
            labelPlacement: r,
            className: "flex-1",
            style: {
              "--background-checked": l,
              "--border-color": l,
              "--border-color-checked": l,
              "--mark-color": c
              // cor do ponto central
            },
            children: e && /* @__PURE__ */ R.jsx("span", { children: e })
          }
        )
      }
    ) });
  if (s === "checkbox")
    return /* @__PURE__ */ R.jsx("div", { className: `w-auto ${a}`, children: /* @__PURE__ */ R.jsx(
      lv,
      {
        checked: t,
        disabled: i,
        color: n,
        labelPlacement: r,
        onIonChange: (d) => o(d.detail.checked),
        style: {
          "--border-color": l,
          // borda normal
          "--background-checked": l,
          // fundo quando marcado
          "--border-color-checked": l,
          // borda quando marcado
          "--checkmark-color": c
          // cor do check
        },
        children: e && /* @__PURE__ */ R.jsx("span", { className: "ml-2", children: e })
      }
    ) });
};
var Oi = class {
  constructor() {
    this.allSyncListeners = /* @__PURE__ */ new Map(), this.allAsyncListeners = /* @__PURE__ */ new Map(), this.globalSyncListeners = /* @__PURE__ */ new Set(), this.globalAsyncListeners = /* @__PURE__ */ new Set(), this.asyncFunctionsQueue = [], this.scheduled = !1, this.firedEvents = {};
  }
  setFrameworkOverrides(e) {
    this.frameworkOverrides = e;
  }
  getListeners(e, t, i) {
    const s = t ? this.allAsyncListeners : this.allSyncListeners;
    let o = s.get(e);
    return !o && i && (o = /* @__PURE__ */ new Set(), s.set(e, o)), o;
  }
  noRegisteredListenersExist() {
    return this.allSyncListeners.size === 0 && this.allAsyncListeners.size === 0 && this.globalSyncListeners.size === 0 && this.globalAsyncListeners.size === 0;
  }
  addEventListener(e, t, i = !1) {
    this.getListeners(e, i, !0).add(t);
  }
  removeEventListener(e, t, i = !1) {
    const s = this.getListeners(e, i, !1);
    s && (s.delete(t), s.size === 0 && (i ? this.allAsyncListeners : this.allSyncListeners).delete(e));
  }
  addGlobalListener(e, t = !1) {
    this.getGlobalListeners(t).add(e);
  }
  removeGlobalListener(e, t = !1) {
    this.getGlobalListeners(t).delete(e);
  }
  dispatchEvent(e) {
    this.dispatchToListeners(e, !0), this.dispatchToListeners(e, !1), this.firedEvents[e.type] = !0;
  }
  dispatchEventOnce(e) {
    this.firedEvents[e.type] || this.dispatchEvent(e);
  }
  dispatchToListeners(e, t) {
    const i = e.type;
    if (t && "event" in e) {
      const a = e.event;
      a instanceof Event && (e.eventPath = a.composedPath());
    }
    const { frameworkOverrides: s } = this, o = (a) => {
      const l = s ? () => s.wrapIncoming(a) : a;
      t ? this.dispatchAsync(l) : l();
    }, n = this.getListeners(i, t, !1);
    if ((n?.size ?? 0) > 0) {
      const a = new Set(n);
      for (const l of a)
        n?.has(l) && o(() => l(e));
    }
    const r = this.getGlobalListeners(t);
    if (r.size > 0) {
      const a = new Set(r);
      for (const l of a)
        o(() => l(i, e));
    }
  }
  getGlobalListeners(e) {
    return e ? this.globalAsyncListeners : this.globalSyncListeners;
  }
  // this gets called inside the grid's thread, for each event that it
  // wants to set async. the grid then batches the events into one setTimeout()
  // because setTimeout() is an expensive operation. ideally we would have
  // each event in it's own setTimeout(), but we batch for performance.
  dispatchAsync(e) {
    if (this.asyncFunctionsQueue.push(e), !this.scheduled) {
      const t = () => {
        window.setTimeout(this.flushAsyncQueue.bind(this), 0);
      };
      this.frameworkOverrides ? this.frameworkOverrides.wrapIncoming(t) : t(), this.scheduled = !0;
    }
  }
  // this happens in the next VM turn only, and empties the queue of events
  flushAsyncQueue() {
    this.scheduled = !1;
    const e = this.asyncFunctionsQueue.slice();
    this.asyncFunctionsQueue = [], e.forEach((t) => t());
  }
};
function wR(e, t) {
  return t;
}
function Mp(e) {
  return e?.getLocaleTextFunc() ?? wR;
}
function SR(e, t, i, s) {
  const o = t[i];
  return e.getLocaleTextFunc()(
    i,
    typeof o == "function" ? o(s) : o,
    s
  );
}
function Ut(e) {
  return e == null || e === "" ? null : e;
}
function $(e) {
  return e != null && e !== "";
}
function Ce(e) {
  return !$(e);
}
function Na(e) {
  return e != null && typeof e.toString == "function" ? e.toString() : null;
}
function mo(e, t) {
  const i = e ? JSON.stringify(e) : null, s = t ? JSON.stringify(t) : null;
  return i === s;
}
function yR(e, t, i = !1) {
  const s = e == null, o = t == null;
  if (e && e.toNumber && (e = e.toNumber()), t && t.toNumber && (t = t.toNumber()), s && o)
    return 0;
  if (s)
    return -1;
  if (o)
    return 1;
  function n(r, a) {
    return r > a ? 1 : r < a ? -1 : 0;
  }
  if (typeof e != "string" || !i)
    return n(e, t);
  try {
    return e.localeCompare(t);
  } catch {
    return n(e, t);
  }
}
var Ap = /* @__PURE__ */ new Set(["__proto__", "constructor", "prototype"]);
function bR(e, t) {
  if (e != null) {
    if (Array.isArray(e)) {
      for (let i = 0; i < e.length; i++)
        t(i.toString(), e[i]);
      return;
    }
    for (const i of Object.keys(e).filter((s) => !Ap.has(s)))
      t(i, e[i]);
  }
}
function Qe(e, t, i = !0, s = !1) {
  $(t) && bR(t, (o, n) => {
    let r = e[o];
    r !== n && (s && r == null && n != null && typeof n == "object" && n.constructor === Object && (r = {}, e[o] = r), fu(n) && fu(r) && !Array.isArray(r) ? Qe(r, n, i, s) : (i || n !== void 0) && (e[o] = n));
  });
}
function eo(e, t, i) {
  if (!t || !e)
    return;
  if (!i)
    return e[t];
  const s = t.split(".");
  let o = e;
  for (let n = 0; n < s.length; n++) {
    if (o == null)
      return;
    o = o[s[n]];
  }
  return o;
}
function fu(e) {
  return typeof e == "object" && e !== null;
}
var sc = class wi {
  /**
   * @param providedOptions
   * @returns Shallow copy of the provided options with global options merged in.
   */
  static applyGlobalGridOptions(t) {
    if (!wi.gridOptions)
      return { ...t };
    let i = {};
    return Qe(i, wi.gridOptions, !0, !0), wi.mergeStrategy === "deep" ? Qe(i, t, !0, !0) : i = { ...i, ...t }, wi.gridOptions.context && (i.context = wi.gridOptions.context), t.context && (wi.mergeStrategy === "deep" && i.context && Qe(t.context, i.context, !0, !0), i.context = t.context), i;
  }
};
sc.gridOptions = void 0;
sc.mergeStrategy = "shallow";
var Ip = sc;
function RR(e) {
  return Ip.gridOptions?.[e];
}
var kp = {
  suppressContextMenu: !1,
  preventDefaultOnContextMenu: !1,
  allowContextMenuWithControlKey: !1,
  suppressMenuHide: !0,
  enableBrowserTooltips: !1,
  tooltipTrigger: "hover",
  tooltipShowDelay: 2e3,
  tooltipHideDelay: 1e4,
  tooltipMouseTrack: !1,
  tooltipShowMode: "standard",
  tooltipInteraction: !1,
  copyHeadersToClipboard: !1,
  copyGroupHeadersToClipboard: !1,
  clipboardDelimiter: "	",
  suppressCopyRowsToClipboard: !1,
  suppressCopySingleCellRanges: !1,
  suppressLastEmptyLineOnPaste: !1,
  suppressClipboardPaste: !1,
  suppressClipboardApi: !1,
  suppressCutToClipboard: !1,
  maintainColumnOrder: !1,
  enableStrictPivotColumnOrder: !1,
  suppressFieldDotNotation: !1,
  allowDragFromColumnsToolPanel: !1,
  suppressMovableColumns: !1,
  suppressColumnMoveAnimation: !1,
  suppressMoveWhenColumnDragging: !1,
  suppressDragLeaveHidesColumns: !1,
  suppressRowGroupHidesColumns: !1,
  suppressAutoSize: !1,
  autoSizePadding: 20,
  skipHeaderOnAutoSize: !1,
  singleClickEdit: !1,
  suppressClickEdit: !1,
  readOnlyEdit: !1,
  stopEditingWhenCellsLoseFocus: !1,
  enterNavigatesVertically: !1,
  enterNavigatesVerticallyAfterEdit: !1,
  enableCellEditingOnBackspace: !1,
  undoRedoCellEditing: !1,
  undoRedoCellEditingLimit: 10,
  suppressCsvExport: !1,
  suppressExcelExport: !1,
  cacheQuickFilter: !1,
  includeHiddenColumnsInQuickFilter: !1,
  excludeChildrenWhenTreeDataFiltering: !1,
  enableAdvancedFilter: !1,
  includeHiddenColumnsInAdvancedFilter: !1,
  enableCharts: !1,
  masterDetail: !1,
  keepDetailRows: !1,
  keepDetailRowsCount: 10,
  detailRowAutoHeight: !1,
  tabIndex: 0,
  rowBuffer: 10,
  valueCache: !1,
  valueCacheNeverExpires: !1,
  enableCellExpressions: !1,
  suppressTouch: !1,
  suppressFocusAfterRefresh: !1,
  suppressBrowserResizeObserver: !1,
  suppressPropertyNamesCheck: !1,
  suppressChangeDetection: !1,
  debug: !1,
  suppressLoadingOverlay: !1,
  suppressNoRowsOverlay: !1,
  pagination: !1,
  paginationPageSize: 100,
  paginationPageSizeSelector: !0,
  paginationAutoPageSize: !1,
  paginateChildRows: !1,
  suppressPaginationPanel: !1,
  pivotMode: !1,
  pivotPanelShow: "never",
  pivotDefaultExpanded: 0,
  pivotSuppressAutoColumn: !1,
  suppressExpandablePivotGroups: !1,
  functionsReadOnly: !1,
  suppressAggFuncInHeader: !1,
  alwaysAggregateAtRootLevel: !1,
  aggregateOnlyChangedColumns: !1,
  suppressAggFilteredOnly: !1,
  removePivotHeaderRowWhenSingleValueColumn: !1,
  animateRows: !0,
  cellFlashDuration: 500,
  cellFadeDuration: 1e3,
  allowShowChangeAfterFilter: !1,
  domLayout: "normal",
  ensureDomOrder: !1,
  enableRtl: !1,
  suppressColumnVirtualisation: !1,
  suppressMaxRenderedRowRestriction: !1,
  suppressRowVirtualisation: !1,
  rowDragManaged: !1,
  rowDragInsertDelay: 500,
  suppressRowDrag: !1,
  suppressMoveWhenRowDragging: !1,
  rowDragEntireRow: !1,
  rowDragMultiRow: !1,
  embedFullWidthRows: !1,
  groupDisplayType: "singleColumn",
  groupDefaultExpanded: 0,
  groupMaintainOrder: !1,
  groupSelectsChildren: !1,
  groupSuppressBlankHeader: !1,
  groupSelectsFiltered: !1,
  showOpenedGroup: !1,
  groupRemoveSingleChildren: !1,
  groupRemoveLowestSingleChildren: !1,
  groupHideOpenParents: !1,
  groupAllowUnbalanced: !1,
  rowGroupPanelShow: "never",
  suppressMakeColumnVisibleAfterUnGroup: !1,
  treeData: !1,
  rowGroupPanelSuppressSort: !1,
  suppressGroupRowsSticky: !1,
  rowModelType: "clientSide",
  asyncTransactionWaitMillis: 50,
  suppressModelUpdateAfterUpdateTransaction: !1,
  cacheOverflowSize: 1,
  infiniteInitialRowCount: 1,
  serverSideInitialRowCount: 1,
  cacheBlockSize: 100,
  maxBlocksInCache: -1,
  maxConcurrentDatasourceRequests: 2,
  blockLoadDebounceMillis: 0,
  purgeClosedRowNodes: !1,
  serverSideSortAllLevels: !1,
  serverSideOnlyRefreshFilteredGroups: !1,
  serverSidePivotResultFieldSeparator: "_",
  viewportRowModelPageSize: 5,
  viewportRowModelBufferSize: 5,
  alwaysShowHorizontalScroll: !1,
  alwaysShowVerticalScroll: !1,
  debounceVerticalScrollbar: !1,
  suppressHorizontalScroll: !1,
  suppressScrollOnNewData: !1,
  suppressScrollWhenPopupsAreOpen: !1,
  suppressAnimationFrame: !1,
  suppressMiddleClickScrolls: !1,
  suppressPreventDefaultOnMouseWheel: !1,
  rowMultiSelectWithClick: !1,
  suppressRowDeselection: !1,
  suppressRowClickSelection: !1,
  suppressCellFocus: !1,
  suppressHeaderFocus: !1,
  suppressMultiRangeSelection: !1,
  enableCellTextSelection: !1,
  enableRangeSelection: !1,
  enableRangeHandle: !1,
  enableFillHandle: !1,
  fillHandleDirection: "xy",
  suppressClearOnFillReduction: !1,
  accentedSort: !1,
  unSortIcon: !1,
  suppressMultiSort: !1,
  alwaysMultiSort: !1,
  suppressMaintainUnsortedOrder: !1,
  suppressRowHoverHighlight: !1,
  suppressRowTransform: !1,
  columnHoverHighlight: !1,
  deltaSort: !1,
  enableGroupEdit: !1,
  groupLockGroupColumns: 0,
  serverSideEnableClientSideSort: !1,
  suppressServerSideFullWidthLoadingRow: !1,
  pivotMaxGeneratedColumns: -1,
  columnMenu: "new",
  reactiveCustomComponents: !0,
  suppressSetFilterByDefault: !1,
  rowNumbers: !1,
  enableFilterHandlers: !1
};
function Pt(e, t, i) {
  i == null || typeof i == "string" && i == "" ? Lp(e, t) : Et(e, t, i);
}
function Et(e, t, i) {
  e.setAttribute(Op(t), i.toString());
}
function Lp(e, t) {
  e.removeAttribute(Op(t));
}
function Op(e) {
  return `aria-${e}`;
}
function Vi(e, t) {
  t ? e.setAttribute("role", t) : e.removeAttribute("role");
}
function xR(e) {
  let t;
  return e === "asc" ? t = "ascending" : e === "desc" ? t = "descending" : e === "mixed" ? t = "other" : t = "none", t;
}
function FR(e) {
  return e.getAttribute("aria-label");
}
function xs(e, t) {
  Pt(e, "label", t);
}
function Co(e, t) {
  Pt(e, "labelledby", t);
}
function Vp(e, t) {
  Pt(e, "live", t);
}
function PR(e, t) {
  Pt(e, "atomic", t);
}
function ER(e, t) {
  Pt(e, "relevant", t);
}
function DR(e, t) {
  Pt(e, "invalid", t);
}
function TR(e, t) {
  Pt(e, "disabled", t);
}
function Gp(e, t) {
  Pt(e, "hidden", t);
}
function Wa(e, t) {
  Et(e, "expanded", t);
}
function MR(e, t) {
  Et(e, "setsize", t);
}
function AR(e, t) {
  Et(e, "posinset", t);
}
function IR(e, t) {
  Et(e, "rowcount", t);
}
function Hp(e, t) {
  Et(e, "rowindex", t);
}
function kR(e, t) {
  Et(e, "rowspan", t);
}
function LR(e, t) {
  Et(e, "colcount", t);
}
function Bp(e, t) {
  Et(e, "colindex", t);
}
function OR(e, t) {
  Et(e, "colspan", t);
}
function VR(e, t) {
  Et(e, "sort", t);
}
function GR(e) {
  Lp(e, "sort");
}
function za(e, t) {
  Pt(e, "selected", t);
}
function HR(e, t) {
  Pt(e, "controls", t);
}
function BR(e, t) {
  HR(e, t.id), Co(t, e.id);
}
function mu(e, t) {
  Pt(e, "owns", t);
}
function dr(e, t) {
  return t === void 0 ? e("ariaIndeterminate", "indeterminate") : t === !0 ? e("ariaChecked", "checked") : e("ariaUnchecked", "unchecked");
}
var Gr, Hr, Br, Nr, _a, Ua, Wr;
function Ui() {
  return Gr === void 0 && (Gr = /^((?!chrome|android).)*safari/i.test(navigator.userAgent)), Gr;
}
function Np() {
  return Hr === void 0 && (Hr = /(firefox)/i.test(navigator.userAgent)), Hr;
}
function Wp() {
  return Br === void 0 && (Br = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform)), Br;
}
function Di() {
  return Nr === void 0 && (Nr = /iPad|iPhone|iPod/.test(navigator.platform) || navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1), Nr;
}
function ja(e) {
  if (!e)
    return null;
  const t = e.tabIndex, i = e.getAttribute("tabIndex");
  return t === -1 && (i === null || i === "" && !Np()) ? null : t.toString();
}
function NR() {
  if (Wr !== void 0)
    return Wr;
  if (!document.body)
    return -1;
  let e = 1e6;
  const t = Np() ? 6e6 : 1e9, i = document.createElement("div");
  for (document.body.appendChild(i); ; ) {
    const s = e * 2;
    if (i.style.height = s + "px", s > t || i.clientHeight !== s)
      break;
    e = s;
  }
  return document.body.removeChild(i), Wr = e, e;
}
function WR() {
  return Ua == null && zp(), Ua;
}
function zp() {
  const e = document.body, t = document.createElement("div");
  t.style.width = t.style.height = "100px", t.style.opacity = "0", t.style.overflow = "scroll", t.style.msOverflowStyle = "scrollbar", t.style.position = "absolute", e.appendChild(t);
  let i = t.offsetWidth - t.clientWidth;
  i === 0 && t.clientWidth === 0 && (i = null), t.parentNode && t.parentNode.removeChild(t), i != null && (Ua = i, _a = i === 0);
}
function _p() {
  return _a == null && zp(), _a;
}
var zR = "[tabindex], input, select, button, textarea, [href]", Up = "[disabled], .ag-disabled:not(.ag-button), .ag-disabled *";
function oc(e) {
  const t = Element.prototype.matches || Element.prototype.msMatchesSelector, s = t.call(e, "input, select, button, textarea"), o = t.call(e, Up), n = Ht(e);
  return s && !o && n;
}
function Re(e, t, i = {}) {
  const { skipAriaHidden: s } = i;
  e.classList.toggle("ag-hidden", !t), s || Gp(e, !t);
}
function _R(e, t, i = {}) {
  const { skipAriaHidden: s } = i;
  e.classList.toggle("ag-invisible", !t), s || Gp(e, !t);
}
function vo(e, t) {
  const i = "disabled", s = t ? (n) => n.setAttribute(i, "") : (n) => n.removeAttribute(i);
  s(e);
  const o = e.querySelectorAll("input") ?? [];
  for (const n of o)
    s(n);
}
function Ti(e, t, i) {
  let s = 0;
  for (; e; ) {
    if (e.classList.contains(t))
      return !0;
    if (e = e.parentElement, typeof i == "number") {
      if (++s > i)
        break;
    } else if (e === i)
      break;
  }
  return !1;
}
function ji(e) {
  const {
    height: t,
    width: i,
    borderTopWidth: s,
    borderRightWidth: o,
    borderBottomWidth: n,
    borderLeftWidth: r,
    paddingTop: a,
    paddingRight: l,
    paddingBottom: c,
    paddingLeft: d,
    marginTop: u,
    marginRight: h,
    marginBottom: g,
    marginLeft: p,
    boxSizing: f
  } = window.getComputedStyle(e);
  return {
    height: parseFloat(t || "0"),
    width: parseFloat(i || "0"),
    borderTopWidth: parseFloat(s || "0"),
    borderRightWidth: parseFloat(o || "0"),
    borderBottomWidth: parseFloat(n || "0"),
    borderLeftWidth: parseFloat(r || "0"),
    paddingTop: parseFloat(a || "0"),
    paddingRight: parseFloat(l || "0"),
    paddingBottom: parseFloat(c || "0"),
    paddingLeft: parseFloat(d || "0"),
    marginTop: parseFloat(u || "0"),
    marginRight: parseFloat(h || "0"),
    marginBottom: parseFloat(g || "0"),
    marginLeft: parseFloat(p || "0"),
    boxSizing: f
  };
}
function nc(e) {
  const t = ji(e);
  return t.boxSizing === "border-box" ? t.height - t.paddingTop - t.paddingBottom : t.height;
}
function wo(e) {
  const t = ji(e);
  return t.boxSizing === "border-box" ? t.width - t.paddingLeft - t.paddingRight : t.width;
}
function jp(e) {
  const { height: t, marginBottom: i, marginTop: s } = ji(e);
  return Math.floor(t + i + s);
}
function On(e) {
  const { width: t, marginLeft: i, marginRight: s } = ji(e);
  return Math.floor(t + i + s);
}
function $p(e) {
  const t = e.getBoundingClientRect(), { borderTopWidth: i, borderLeftWidth: s, borderRightWidth: o, borderBottomWidth: n } = ji(e);
  return {
    top: t.top + (i || 0),
    left: t.left + (s || 0),
    right: t.right + (o || 0),
    bottom: t.bottom + (n || 0)
  };
}
function Vn(e, t) {
  let i = e.scrollLeft;
  return t && (i = Math.abs(i)), i;
}
function Gn(e, t, i) {
  i && (t *= -1), e.scrollLeft = t;
}
function ct(e) {
  for (; e && e.firstChild; )
    e.removeChild(e.firstChild);
}
function Xt(e) {
  e && e.parentNode && e.parentNode.removeChild(e);
}
function Kp(e) {
  return !!e.offsetParent;
}
function Ht(e) {
  const t = e;
  return t.checkVisibility ? t.checkVisibility({ checkVisibilityCSS: !0 }) : !(!Kp(e) || window.getComputedStyle(e).visibility !== "visible");
}
function rc(e) {
  const t = document.createElement("div");
  return t.innerHTML = (e || "").trim(), t.firstChild;
}
function dn(e) {
  return () => {
    const t = e();
    return t ? Yp(t) || qp(t) : !0;
  };
}
function Yp(e) {
  return e.clientWidth < e.scrollWidth;
}
function qp(e) {
  return e.clientHeight < e.scrollHeight;
}
function Hn(e, t) {
  t === "flex" ? (e.style.removeProperty("width"), e.style.removeProperty("minWidth"), e.style.removeProperty("maxWidth"), e.style.flex = "1 1 auto") : Vt(e, t);
}
function Vt(e, t) {
  t = ac(t), e.style.width = t, e.style.maxWidth = t, e.style.minWidth = t;
}
function to(e, t) {
  t = ac(t), e.style.height = t, e.style.maxHeight = t, e.style.minHeight = t;
}
function ac(e) {
  return typeof e == "number" ? `${e}px` : e;
}
function lc(e) {
  return e instanceof Node || e instanceof HTMLElement;
}
function rt(e, t, i) {
  i == null || i === "" ? e.removeAttribute(t) : e.setAttribute(t, i.toString());
}
function Qt(e, t, i) {
  const o = rf(e).ResizeObserver, n = o ? new o(i) : null;
  return n?.observe(t), () => n?.disconnect();
}
function Jt(e, t) {
  const i = rf(e);
  i.requestAnimationFrame ? i.requestAnimationFrame(t) : i.webkitRequestAnimationFrame ? i.webkitRequestAnimationFrame(t) : i.setTimeout(t, 0);
}
var Xp = "data-ref", zr;
function Cu() {
  return zr ?? (zr = document.createTextNode(" ")), zr.cloneNode();
}
function Ae(e) {
  const { attrs: t, children: i, cls: s, ref: o, role: n, tag: r } = e, a = document.createElement(r);
  if (s && (a.className = s), o && a.setAttribute(Xp, o), n && a.setAttribute("role", n), t)
    for (const l of Object.keys(t))
      a.setAttribute(l, t[l]);
  if (i)
    if (typeof i == "string")
      a.textContent = i;
    else {
      let l = !0;
      for (const c of i)
        c && (typeof c == "string" ? (a.appendChild(document.createTextNode(c)), l = !1) : typeof c == "function" ? a.appendChild(c()) : (l && (a.appendChild(Cu()), l = !1), a.append(Ae(c)), a.appendChild(Cu())));
    }
  return a;
}
var vu = {};
function cc(e, t) {
  vu[t] || (e(), vu[t] = !0);
}
function Gi(e, t, ...i) {
  e.get("debug") && console.log("AG Grid: " + t, ...i);
}
function io(e, ...t) {
  cc(() => console.warn("AG Grid: " + e, ...t), e + t?.join(""));
}
function ds(e, ...t) {
  cc(() => console.error("AG Grid: " + e, ...t), e + t?.join(""));
}
var UR = {
  pending: !1,
  funcs: []
}, jR = {
  pending: !1,
  funcs: []
};
function $a(e, t = "setTimeout", i) {
  const s = t === "raf" ? jR : UR;
  if (s.funcs.push(e), s.pending)
    return;
  s.pending = !0;
  const o = () => {
    const n = s.funcs.slice();
    s.funcs.length = 0, s.pending = !1, n.forEach((r) => r());
  };
  t === "raf" ? Jt(i, o) : window.setTimeout(o, 0);
}
function We(e, t, i) {
  let s;
  return function(...o) {
    const n = this;
    window.clearTimeout(s), s = window.setTimeout(function() {
      e.isAlive() && t.apply(n, o);
    }, i);
  };
}
function wu(e, t) {
  let i = 0;
  return function(...s) {
    const o = this, n = Date.now();
    n - i < t || (i = n, e.apply(o, s));
  };
}
function $R(e, t, i = 100, s) {
  const o = Date.now();
  let n = null, r = !1;
  const a = () => {
    const l = Date.now() - o > i;
    (e() || l) && (t(), r = !0, n != null && (window.clearInterval(n), n = null));
  };
  a(), r || (n = window.setInterval(a, 10));
}
var Zp = "https://www.ag-grid.com", Y = "34.1.2", Su = 2e3, yu = 100, Qp = "_version_", Jp = null, us = `${Zp}/javascript-data-grid`;
function KR(e) {
  Jp = e;
}
function YR(e) {
  us = e;
}
function ef(e, t, i) {
  return Jp?.getConsoleMessage(e, t) ?? [QR(e, t, i)];
}
function dc(e, t, i, s) {
  e(`error #${t}`, ...ef(t, i, s));
}
function qR(e) {
  if (!e)
    return String(e);
  const t = {};
  for (const i of Object.keys(e))
    typeof e[i] != "object" && typeof e[i] != "function" && (t[i] = e[i]);
  return JSON.stringify(t);
}
function XR(e) {
  let t = e;
  return e instanceof Error ? t = e.toString() : typeof e == "object" && (t = qR(e)), t;
}
function Bn(e) {
  return e === void 0 ? "undefined" : e === null ? "null" : e;
}
function Ka(e, t) {
  return `${e}?${t.toString()}`;
}
function ZR(e, t, i) {
  const s = Array.from(t.entries()).sort((n, r) => r[1].length - n[1].length);
  let o = Ka(e, t);
  for (const [n, r] of s) {
    if (n === Qp)
      continue;
    const a = o.length - i;
    if (a <= 0)
      break;
    const l = "...", c = a + l.length, d = r.length - c > yu ? r.slice(0, r.length - c) + l : r.slice(0, yu) + l;
    t.set(n, d), o = Ka(e, t);
  }
  return o;
}
function tf(e, t) {
  const i = new URLSearchParams();
  if (i.append(Qp, Y), t)
    for (const n of Object.keys(t))
      i.append(n, XR(t[n]));
  const s = `${us}/errors/${e}`, o = Ka(s, i);
  return o.length <= Su ? o : ZR(s, i, Su);
}
var QR = (e, t, i) => {
  const s = tf(e, t);
  return `${i ? i + ` 
` : ""}Visit ${s}${i ? "" : ` 
  Alternatively register the ValidationModule to see the full message in the console.`}`;
};
function B(...e) {
  dc(io, e[0], e[1]);
}
function he(...e) {
  dc(ds, e[0], e[1]);
}
function Ks(e, t, i) {
  dc(ds, e, t, i);
}
function JR(e, t) {
  const i = t[0];
  return `error #${i} ` + ef(i, t[1], e).join(" ");
}
function Gt(...e) {
  return JR(void 0, e);
}
function sf(e, t) {
  return e.get("rowModelType") === t;
}
function Oe(e, t) {
  return sf(e, "clientSide");
}
function $i(e, t) {
  return sf(e, "serverSide");
}
function ze(e, t) {
  return e.get("domLayout") === t;
}
function Mi(e) {
  return Wn(e) !== void 0;
}
function of(e) {
  return typeof e.get("getRowHeight") == "function";
}
function ex(e, t) {
  return t ? !e.get("enableStrictPivotColumnOrder") : e.get("maintainColumnOrder");
}
function ui(e, t, i = !1, s) {
  const { gos: o, environment: n } = e;
  if (s == null && (s = n.getDefaultRowHeight()), of(o)) {
    if (i)
      return { height: s, estimated: !0 };
    const l = {
      node: t,
      data: t.data
    }, c = o.getCallback("getRowHeight")(l);
    if (Ya(c))
      return c === 0 && B(23), { height: Math.max(1, c), estimated: !1 };
  }
  if (t.detail && o.get("masterDetail"))
    return tx(o);
  const r = o.get("rowHeight");
  return { height: r && Ya(r) ? r : s, estimated: !1 };
}
function tx(e) {
  if (e.get("detailRowAutoHeight"))
    return { height: 1, estimated: !1 };
  const t = e.get("detailRowHeight");
  return Ya(t) ? { height: t, estimated: !1 } : { height: 300, estimated: !1 };
}
function Ai(e) {
  const { environment: t, gos: i } = e, s = i.get("rowHeight");
  if (!s || Ce(s))
    return t.getDefaultRowHeight();
  const o = t.refreshRowHeightVariable();
  return o !== -1 ? o : (B(24), t.getDefaultRowHeight());
}
function Ya(e) {
  return !isNaN(e) && typeof e == "number" && isFinite(e);
}
function nf(e, t, i) {
  const s = t[e.getDomDataKey()];
  return s ? s[i] : void 0;
}
function Hi(e, t, i, s) {
  const o = e.getDomDataKey();
  let n = t[o];
  Ce(n) && (n = {}, t[o] = n), n[i] = s;
}
function He(e) {
  const { gos: t, eGridDiv: i } = e;
  let s = null;
  const o = t.get("getDocument");
  return o && $(o) ? s = o() : i && (s = i.ownerDocument), s && $(s) ? s : document;
}
function rf(e) {
  return He(e).defaultView || window;
}
function So(e) {
  return e.eGridDiv.getRootNode();
}
function Fe(e) {
  return So(e).activeElement;
}
function uc(e) {
  let t = null, i = null;
  try {
    t = He(e).fullscreenElement;
  } catch {
  } finally {
    t || (t = So(e));
    const s = t.querySelector("body");
    s ? i = s : t instanceof ShadowRoot ? i = t : t instanceof Document ? i = t?.documentElement : i = t;
  }
  return i;
}
function ix(e) {
  return uc(e)?.clientWidth ?? (window.innerWidth || -1);
}
function sx(e) {
  return uc(e)?.clientHeight ?? (window.innerHeight || -1);
}
function ox(e, t, i) {
  const o = e.getBoundingClientRect().height, n = ix(i) - 2, r = sx(i) - 2;
  if (!e.offsetParent)
    return;
  const l = $p(e.offsetParent), { clientY: c, clientX: d } = t;
  let u = c - l.top - o / 2, h = d - l.left - 10;
  const g = He(i), p = g.defaultView || window, f = p.pageYOffset || g.documentElement.scrollTop, m = p.pageXOffset || g.documentElement.scrollLeft;
  n > 0 && h + e.clientWidth > n + m && (h = n + m - e.clientWidth), h < 0 && (h = 0), r > 0 && u + e.clientHeight > r + f && (u = r + f - e.clientHeight), u < 0 && (u = 0), e.style.left = `${h}px`, e.style.top = `${u}px`;
}
function af(e) {
  const t = Fe(e);
  return t === null || t === He(e).body;
}
function hs(e) {
  return e.get("ensureDomOrder") ? !1 : e.get("animateRows");
}
function lf(e) {
  return !(e.get("paginateChildRows") || e.get("groupHideOpenParents") || ze(e, "print"));
}
function Mt(e) {
  return !e.get("autoGroupColumnDef")?.comparator && !e.get("treeData");
}
function qa(e) {
  const t = e.get("groupAggFiltering");
  if (typeof t == "function")
    return e.getCallback("groupAggFiltering");
  if (t === !0)
    return () => !0;
}
function cf(e) {
  return e.get("grandTotalRow");
}
function df(e, t) {
  return t ? !1 : e.get("groupDisplayType") === "groupRows";
}
function uf(e, t, i) {
  return !!t.group && !t.footer && df(e, i);
}
function Fs(e) {
  const t = e.getCallback("getRowId");
  return t === void 0 ? t : (i) => {
    let s = t(i);
    return typeof s != "string" && (cc(() => B(25, { id: s }), "getRowIdString"), s = String(s)), s;
  };
}
function nx(e, t) {
  const i = e.get("groupHideParentOfSingleChild");
  return !!(i === !0 || i === "leafGroupsOnly" && t.leafGroup || e.get("groupRemoveSingleChildren") || e.get("groupRemoveLowestSingleChildren") && t.leafGroup);
}
function rx(e) {
  const t = e.get("maxConcurrentDatasourceRequests");
  return t > 0 ? t : void 0;
}
function gs(e) {
  return e?.checkboxes ?? !0;
}
function un(e) {
  return e?.mode === "multiRow" && (e.headerCheckbox ?? !0);
}
function Nn(e) {
  if (typeof e == "object")
    return e.checkboxLocation ?? "selectionColumn";
}
function _r(e) {
  return e?.hideDisabledCheckboxes ?? !1;
}
function ax(e) {
  return typeof e.get("rowSelection") != "string";
}
function hi(e) {
  const t = e.get("cellSelection");
  return t !== void 0 ? !!t : e.get("enableRangeSelection");
}
function hf(e) {
  const t = e.get("rowSelection") ?? "single";
  if (typeof t == "string") {
    const i = e.get("suppressRowClickSelection"), s = e.get("suppressRowDeselection");
    return i && s ? !1 : i ? "enableDeselection" : s ? "enableSelection" : !0;
  }
  return t.mode === "singleRow" || t.mode === "multiRow" ? t.enableClickSelection ?? !1 : !1;
}
function lx(e) {
  const t = hf(e);
  return t === !0 || t === "enableSelection";
}
function cx(e) {
  const t = hf(e);
  return t === !0 || t === "enableDeselection";
}
function Xa(e) {
  const t = e.get("rowSelection");
  return typeof t == "string" ? e.get("isRowSelectable") : t?.isRowSelectable;
}
function Wn(e) {
  const t = "beanName" in e && e.beanName === "gos" ? e.get("rowSelection") : e.rowSelection;
  if (typeof t == "string")
    switch (t) {
      case "multiple":
        return "multiRow";
      case "single":
        return "singleRow";
      default:
        return;
    }
  switch (t?.mode) {
    case "multiRow":
    case "singleRow":
      return t.mode;
    default:
      return;
  }
}
function zn(e) {
  return Wn(e) === "multiRow";
}
function dx(e) {
  const t = e.get("rowSelection");
  return typeof t == "string" ? e.get("rowMultiSelectWithClick") : t?.enableSelectionWithoutKeys ?? !1;
}
function _n(e) {
  const t = e.get("rowSelection");
  if (typeof t == "string") {
    const i = e.get("groupSelectsChildren"), s = e.get("groupSelectsFiltered");
    return i && s ? "filteredDescendants" : i ? "descendants" : "self";
  }
  return t?.mode === "multiRow" ? t.groupSelects : void 0;
}
function gf(e, t = !0) {
  const i = e.get("rowSelection");
  return typeof i != "object" ? t ? "all" : void 0 : i.mode === "multiRow" ? i.selectAll : "all";
}
function yo(e) {
  const t = _n(e);
  return t === "descendants" || t === "filteredDescendants";
}
function bu(e) {
  const t = e.get("rowSelection");
  return typeof t == "object" && t.masterSelects || "self";
}
function ux(e) {
  return e.isModuleRegistered("SetFilter") && !e.get("suppressSetFilterByDefault");
}
function at(e) {
  return e.get("columnMenu") === "legacy";
}
function hx(e) {
  return !at(e);
}
function gx(e) {
  return !e || e.length < 2 ? e : "on" + e[0].toUpperCase() + e.substring(1);
}
function px(e, t, i) {
  typeof e != "object" && (e = {});
  const s = { ...e };
  return i.forEach((o) => {
    const n = t[o];
    typeof n < "u" && (s[o] = n);
  }), s;
}
function fx(e, t) {
  if (!e)
    return;
  const i = {};
  let s = !1;
  if (Object.keys(e).forEach((r) => {
    i[r] = e[r], s = !0;
  }), !s)
    return;
  const o = {
    type: "gridOptionsChanged",
    options: i
  };
  t.dispatchEvent(o);
  const n = {
    type: "componentStateChanged",
    ...i
  };
  t.dispatchEvent(n);
}
function Z(e, t) {
  return e.addGridCommonParams(t);
}
function pf(e) {
  return e.get("treeData") ? e.get("treeDataParentIdField") ? "treeSelfRef" : e.get("treeDataChildrenField") ? "treeNested" : "treePath" : "group";
}
function hn(e, t) {
  return e[t] ?? e.gridOptions?.[t] ?? RR(t) ?? kp[t];
}
var ff = "__ag_Grid_Stop_Propagation", mx = ["touchstart", "touchend", "touchmove", "touchcancel", "scroll"], Cx = ["wheel"], Ur = {};
function Bi(e) {
  e[ff] = !0;
}
function jt(e) {
  return e[ff] === !0;
}
var mf = /* @__PURE__ */ (() => {
  const e = {
    select: "input",
    change: "input",
    submit: "form",
    reset: "form",
    error: "img",
    load: "img",
    abort: "img"
  };
  return (i) => {
    if (typeof Ur[i] == "boolean")
      return Ur[i];
    const s = document.createElement(e[i] || "div");
    return i = "on" + i, Ur[i] = i in s;
  };
})();
function Cf(e, t, i) {
  let s = t;
  for (; s; ) {
    const o = nf(e, s, i);
    if (o)
      return o;
    s = s.parentElement;
  }
  return null;
}
function vx(e, t) {
  return !t || !e ? !1 : Sx(t).indexOf(e) >= 0;
}
function wx(e) {
  const t = [];
  let i = e.target;
  for (; i; )
    t.push(i), i = i.parentElement;
  return t;
}
function Sx(e) {
  const t = e;
  return t.path ? t.path : t.composedPath ? t.composedPath() : wx(t);
}
function yx(e, t, i, s) {
  const o = vf(i);
  let n;
  o != null && (n = { passive: o }), e && e.addEventListener && e.addEventListener(t, i, s, n);
}
var vf = (e) => {
  const t = mx.includes(e), i = Cx.includes(e);
  if (t)
    return !0;
  if (i)
    return !1;
}, T = class {
  constructor() {
    this.destroyFunctions = [], this.destroyed = !1, this.__v_skip = !0, this.propertyListenerId = 0, this.lastChangeSetIdLookup = {}, this.isAlive = () => !this.destroyed;
  }
  preWireBeans(e) {
    this.beans = e, this.stubContext = e.context, this.eventSvc = e.eventSvc, this.gos = e.gos;
  }
  // this was a test constructor niall built, when active, it prints after 5 seconds all beans/components that are
  // not destroyed. to use, create a new grid, then api.destroy() before 5 seconds. then anything that gets printed
  // points to a bean or component that was not properly disposed of.
  // constructor() {
  //     setTimeout(()=> {
  //         if (this.isAlive()) {
  //             let prototype: any = Object.getPrototypeOf(this);
  //             const constructor: any = prototype.constructor;
  //             const constructorString = constructor.toString();
  //             const beanName = constructorString.substring(9, constructorString.indexOf("("));
  //             console.log('is alive ' + beanName);
  //         }
  //     }, 5000);
  // }
  destroy() {
    const { destroyFunctions: e } = this;
    for (let t = 0; t < e.length; t++)
      e[t]();
    e.length = 0, this.destroyed = !0, this.dispatchLocalEvent({ type: "destroyed" });
  }
  // The typing of AgEventListener<any, any, any> is not ideal, but it's the best we can do at the moment to enable
  // eventSvc to have the best typing at the expense of BeanStub local events
  /** Add a local event listener against this BeanStub */
  addEventListener(e, t, i) {
    this.localEventService || (this.localEventService = new Oi()), this.localEventService.addEventListener(e, t, i);
  }
  /** Remove a local event listener from this BeanStub */
  removeEventListener(e, t, i) {
    this.localEventService?.removeEventListener(e, t, i);
  }
  dispatchLocalEvent(e) {
    this.localEventService?.dispatchEvent(e);
  }
  addManagedElementListeners(e, t) {
    return this._setupListeners(e, t);
  }
  addManagedEventListeners(e) {
    return this._setupListeners(this.eventSvc, e);
  }
  addManagedListeners(e, t) {
    return this._setupListeners(e, t);
  }
  _setupListeners(e, t) {
    const i = [];
    for (const s of Object.keys(t)) {
      const o = t[s];
      o && i.push(this._setupListener(e, s, o));
    }
    return i;
  }
  _setupListener(e, t, i) {
    if (this.destroyed)
      return () => null;
    let s;
    return bx(e) ? (e.__addEventListener(t, i), s = () => (e.__removeEventListener(t, i), null)) : (e instanceof HTMLElement ? yx(this.beans.frameworkOverrides, e, t, i) : e.addEventListener(t, i), s = () => (e.removeEventListener(t, i), null)), this.destroyFunctions.push(s), () => (s(), this.destroyFunctions = this.destroyFunctions.filter((o) => o !== s), null);
  }
  /**
   * Setup a managed property listener for the given GridOption property.
   * However, stores the destroy function in the beanStub so that if this bean
   * is a component the destroy function will be called when the component is destroyed
   * as opposed to being cleaned up only when the GridOptionsService is destroyed.
   */
  setupGridOptionListener(e, t) {
    const { gos: i } = this;
    i.addPropertyEventListener(e, t);
    const s = () => (i.removePropertyEventListener(e, t), null);
    return this.destroyFunctions.push(s), () => (s(), this.destroyFunctions = this.destroyFunctions.filter((o) => o !== s), null);
  }
  /**
   * Setup a managed property listener for the given GridOption property.
   * @param event GridOption property to listen to changes for.
   * @param listener Listener to run when property value changes
   */
  addManagedPropertyListener(e, t) {
    return this.destroyed ? () => null : this.setupGridOptionListener(e, t);
  }
  /**
   * Setup managed property listeners for the given set of GridOption properties.
   * The listener will be run if any of the property changes but will only run once if
   * multiple of the properties change within the same framework lifecycle event.
   * Works on the basis that GridOptionsService updates all properties *before* any property change events are fired.
   * @param events Array of GridOption properties to listen for changes too.
   * @param listener Shared listener to run if any of the properties change
   */
  addManagedPropertyListeners(e, t) {
    if (this.destroyed)
      return;
    const i = e.join("-") + this.propertyListenerId++, s = (o) => {
      if (o.changeSet) {
        if (o.changeSet && o.changeSet.id === this.lastChangeSetIdLookup[i])
          return;
        this.lastChangeSetIdLookup[i] = o.changeSet.id;
      }
      const n = {
        type: "gridPropertyChanged",
        changeSet: o.changeSet,
        source: o.source
      };
      t(n);
    };
    e.forEach((o) => this.setupGridOptionListener(o, s));
  }
  getLocaleTextFunc() {
    return Mp(this.beans.localeSvc);
  }
  addDestroyFunc(e) {
    this.isAlive() ? this.destroyFunctions.push(e) : e();
  }
  /** doesn't throw an error if `bean` is undefined */
  createOptionalManagedBean(e, t) {
    return e ? this.createManagedBean(e, t) : void 0;
  }
  createManagedBean(e, t) {
    const i = this.createBean(e, t);
    return this.addDestroyFunc(this.destroyBean.bind(this, e, t)), i;
  }
  createBean(e, t, i) {
    return (t || this.stubContext).createBean(e, i);
  }
  /**
   * Destroys a bean and returns undefined to support destruction and clean up in a single line.
   * this.dateComp = this.context.destroyBean(this.dateComp);
   */
  destroyBean(e, t) {
    return (t || this.stubContext).destroyBean(e);
  }
  /**
   * Destroys an array of beans and returns an empty array to support destruction and clean up in a single line.
   * this.dateComps = this.context.destroyBeans(this.dateComps);
   */
  destroyBeans(e, t) {
    return (t || this.stubContext).destroyBeans(e);
  }
};
function bx(e) {
  return e.__addEventListener !== void 0;
}
var Rx = /[&<>"']/g, xx = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
function Ls(e) {
  return e?.toString().toString() ?? null;
}
function gn(e) {
  return Ls(e)?.replace(Rx, (t) => xx[t]) ?? null;
}
var Fx = {
  resizable: !0,
  sortable: !0
}, Px = 0;
function wf() {
  return Px++;
}
function gi(e) {
  return e instanceof Ki;
}
var Ki = class extends T {
  constructor(e, t, i, s) {
    super(), this.colDef = e, this.userProvidedColDef = t, this.colId = i, this.primary = s, this.isColumn = !0, this.instanceId = wf(), this.autoHeaderHeight = null, this.moving = !1, this.resizing = !1, this.menuVisible = !1, this.lastLeftPinned = !1, this.firstRightPinned = !1, this.filterActive = !1, this.colEventSvc = new Oi(), this.tooltipEnabled = !1, this.rowGroupActive = !1, this.pivotActive = !1, this.aggregationActive = !1, this.flex = null, this.colIdSanitised = gn(i);
  }
  destroy() {
    super.destroy(), this.beans.rowSpanSvc?.deregister(this);
  }
  getInstanceId() {
    return this.instanceId;
  }
  setState() {
    const {
      colDef: e,
      beans: { sortSvc: t, pinnedCols: i, colFlex: s }
    } = this;
    t?.initCol(this);
    const o = e.hide;
    o !== void 0 ? this.visible = !o : this.visible = !e.initialHide, i?.initCol(this), s?.initCol(this);
  }
  // gets called when user provides an alternative colDef, eg
  setColDef(e, t, i) {
    const s = e.spanRows !== this.colDef.spanRows;
    this.colDef = e, this.userProvidedColDef = t, this.initMinAndMaxWidths(), this.initDotNotation(), this.initTooltip(), s && (this.beans.rowSpanSvc?.deregister(this), this.initRowSpan()), this.dispatchColEvent("colDefChanged", i);
  }
  getUserProvidedColDef() {
    return this.userProvidedColDef;
  }
  getParent() {
    return this.parent;
  }
  getOriginalParent() {
    return this.originalParent;
  }
  // this is done after constructor as it uses gridOptionsService
  postConstruct() {
    this.setState(), this.initMinAndMaxWidths(), this.resetActualWidth("gridInitializing"), this.initDotNotation(), this.initTooltip(), this.initRowSpan(), this.addPivotListener();
  }
  initDotNotation() {
    const {
      gos: e,
      colDef: { field: t, tooltipField: i }
    } = this, s = e.get("suppressFieldDotNotation");
    this.fieldContainsDots = $(t) && t.indexOf(".") >= 0 && !s, this.tooltipFieldContainsDots = $(i) && i.indexOf(".") >= 0 && !s;
  }
  initMinAndMaxWidths() {
    const e = this.colDef;
    this.minWidth = e.minWidth ?? this.beans.environment.getDefaultColumnMinWidth(), this.maxWidth = e.maxWidth ?? Number.MAX_SAFE_INTEGER;
  }
  initTooltip() {
    this.beans.tooltipSvc?.initCol(this);
  }
  initRowSpan() {
    this.colDef.spanRows && this.beans.rowSpanSvc?.register(this);
  }
  addPivotListener() {
    const e = this.beans.pivotColDefSvc, t = this.colDef.pivotValueColumn;
    !e || !t || this.addManagedListeners(t, {
      colDefChanged: (i) => {
        const s = e.recreateColDef(this.colDef);
        this.setColDef(s, s, i.source);
      }
    });
  }
  resetActualWidth(e) {
    const t = this.calculateColInitialWidth(this.colDef);
    this.setActualWidth(t, e, !0);
  }
  calculateColInitialWidth(e) {
    let t;
    const i = e.width, s = e.initialWidth;
    return i != null ? t = i : s != null ? t = s : t = 200, Math.max(Math.min(t, this.maxWidth), this.minWidth);
  }
  isEmptyGroup() {
    return !1;
  }
  isRowGroupDisplayed(e) {
    return this.beans.showRowGroupCols?.isRowGroupDisplayed(this, e) ?? !1;
  }
  isPrimary() {
    return this.primary;
  }
  isFilterAllowed() {
    return !!this.colDef.filter;
  }
  isFieldContainsDots() {
    return this.fieldContainsDots;
  }
  isTooltipEnabled() {
    return this.tooltipEnabled;
  }
  isTooltipFieldContainsDots() {
    return this.tooltipFieldContainsDots;
  }
  getHighlighted() {
    return this.highlighted;
  }
  __addEventListener(e, t) {
    this.colEventSvc.addEventListener(e, t);
  }
  __removeEventListener(e, t) {
    this.colEventSvc.removeEventListener(e, t);
  }
  /**
   * PUBLIC USE ONLY: for internal use within AG Grid use the `__addEventListener` and `__removeEventListener` methods.
   */
  addEventListener(e, t) {
    this.frameworkEventListenerService = this.beans.frameworkOverrides.createLocalEventListenerWrapper?.(
      this.frameworkEventListenerService,
      this.colEventSvc
    );
    const i = this.frameworkEventListenerService?.wrap(e, t) ?? t;
    this.colEventSvc.addEventListener(e, i);
  }
  /**
   * PUBLIC USE ONLY: for internal use within AG Grid use the `__addEventListener` and `__removeEventListener` methods.
   */
  removeEventListener(e, t) {
    const i = this.frameworkEventListenerService?.unwrap(e, t) ?? t;
    this.colEventSvc.removeEventListener(e, i);
  }
  createColumnFunctionCallbackParams(e) {
    return Z(this.gos, {
      node: e,
      data: e.data,
      column: this,
      colDef: this.colDef
    });
  }
  isSuppressNavigable(e) {
    return this.beans.cellNavigation?.isSuppressNavigable(this, e) ?? !1;
  }
  isCellEditable(e) {
    return this.beans.editSvc?.isCellEditable({ rowNode: e, column: this }) ?? !1;
  }
  isSuppressFillHandle() {
    return !!this.colDef.suppressFillHandle;
  }
  isAutoHeight() {
    return !!this.colDef.autoHeight;
  }
  isAutoHeaderHeight() {
    return !!this.colDef.autoHeaderHeight;
  }
  isRowDrag(e) {
    return this.isColumnFunc(e, this.colDef.rowDrag);
  }
  isDndSource(e) {
    return this.isColumnFunc(e, this.colDef.dndSource);
  }
  isCellCheckboxSelection(e) {
    return this.beans.selectionSvc?.isCellCheckboxSelection(this, e) ?? !1;
  }
  isSuppressPaste(e) {
    return this.isColumnFunc(e, this.colDef?.suppressPaste ?? null);
  }
  isResizable() {
    return !!this.getColDefValue("resizable");
  }
  /** Get value from ColDef or default if it exists. */
  getColDefValue(e) {
    return this.colDef[e] ?? Fx[e];
  }
  isColumnFunc(e, t) {
    if (typeof t == "boolean")
      return t;
    if (typeof t == "function") {
      const i = this.createColumnFunctionCallbackParams(e);
      return t(i);
    }
    return !1;
  }
  createColumnEvent(e, t) {
    return Z(this.gos, {
      type: e,
      column: this,
      columns: [this],
      source: t
    });
  }
  isMoving() {
    return this.moving;
  }
  getSort() {
    return this.sort;
  }
  isSortable() {
    return !!this.getColDefValue("sortable");
  }
  /** @deprecated v32 use col.getSort() === 'asc */
  isSortAscending() {
    return this.sort === "asc";
  }
  /** @deprecated v32 use col.getSort() === 'desc */
  isSortDescending() {
    return this.sort === "desc";
  }
  /** @deprecated v32 use col.getSort() === undefined */
  isSortNone() {
    return Ce(this.sort);
  }
  /** @deprecated v32 use col.getSort() !== undefined */
  isSorting() {
    return $(this.sort);
  }
  getSortIndex() {
    return this.sortIndex;
  }
  isMenuVisible() {
    return this.menuVisible;
  }
  getAggFunc() {
    return this.aggFunc;
  }
  getLeft() {
    return this.left;
  }
  getOldLeft() {
    return this.oldLeft;
  }
  getRight() {
    return this.left + this.actualWidth;
  }
  setLeft(e, t) {
    this.oldLeft = this.left, this.left !== e && (this.left = e, this.dispatchColEvent("leftChanged", t));
  }
  isFilterActive() {
    return this.filterActive;
  }
  /** @deprecated v33 Use `api.isColumnHovered(column)` instead. */
  isHovered() {
    return B(261), !!this.beans.colHover?.isHovered(this);
  }
  setFirstRightPinned(e, t) {
    this.firstRightPinned !== e && (this.firstRightPinned = e, this.dispatchColEvent("firstRightPinnedChanged", t));
  }
  setLastLeftPinned(e, t) {
    this.lastLeftPinned !== e && (this.lastLeftPinned = e, this.dispatchColEvent("lastLeftPinnedChanged", t));
  }
  isFirstRightPinned() {
    return this.firstRightPinned;
  }
  isLastLeftPinned() {
    return this.lastLeftPinned;
  }
  isPinned() {
    return this.pinned === "left" || this.pinned === "right";
  }
  isPinnedLeft() {
    return this.pinned === "left";
  }
  isPinnedRight() {
    return this.pinned === "right";
  }
  getPinned() {
    return this.pinned;
  }
  setVisible(e, t) {
    const i = e === !0;
    this.visible !== i && (this.visible = i, this.dispatchColEvent("visibleChanged", t)), this.dispatchStateUpdatedEvent("hide");
  }
  isVisible() {
    return this.visible;
  }
  isSpanHeaderHeight() {
    return !this.getColDef().suppressSpanHeaderHeight;
  }
  /**
   * Returns the first parent that is not a padding group.
   */
  getFirstRealParent() {
    let e = this.getOriginalParent();
    for (; e && e.isPadding(); )
      e = e.getOriginalParent();
    return e;
  }
  getColumnGroupPaddingInfo() {
    let e = this.getParent();
    if (!e || !e.isPadding())
      return { numberOfParents: 0, isSpanningTotal: !1 };
    const t = e.getPaddingLevel() + 1;
    let i = !0;
    for (; e; ) {
      if (!e.isPadding()) {
        i = !1;
        break;
      }
      e = e.getParent();
    }
    return { numberOfParents: t, isSpanningTotal: i };
  }
  getColDef() {
    return this.colDef;
  }
  getDefinition() {
    return this.colDef;
  }
  getColumnGroupShow() {
    return this.colDef.columnGroupShow;
  }
  getColId() {
    return this.colId;
  }
  getId() {
    return this.colId;
  }
  getUniqueId() {
    return this.colId;
  }
  getActualWidth() {
    return this.actualWidth;
  }
  getAutoHeaderHeight() {
    return this.autoHeaderHeight;
  }
  /** Returns true if the header height has changed */
  setAutoHeaderHeight(e) {
    const t = e !== this.autoHeaderHeight;
    return this.autoHeaderHeight = e, t;
  }
  createBaseColDefParams(e) {
    return Z(this.gos, {
      node: e,
      data: e.data,
      colDef: this.colDef,
      column: this
    });
  }
  getColSpan(e) {
    if (Ce(this.colDef.colSpan))
      return 1;
    const t = this.createBaseColDefParams(e), i = this.colDef.colSpan(t);
    return Math.max(i, 1);
  }
  getRowSpan(e) {
    if (Ce(this.colDef.rowSpan))
      return 1;
    const t = this.createBaseColDefParams(e), i = this.colDef.rowSpan(t);
    return Math.max(i, 1);
  }
  setActualWidth(e, t, i = !1) {
    e = Math.max(e, this.minWidth), e = Math.min(e, this.maxWidth), this.actualWidth !== e && (this.actualWidth = e, this.flex != null && t !== "flex" && t !== "gridInitializing" && (this.flex = null), i || this.fireColumnWidthChangedEvent(t)), this.dispatchStateUpdatedEvent("width");
  }
  fireColumnWidthChangedEvent(e) {
    this.dispatchColEvent("widthChanged", e);
  }
  isGreaterThanMax(e) {
    return e > this.maxWidth;
  }
  getMinWidth() {
    return this.minWidth;
  }
  getMaxWidth() {
    return this.maxWidth;
  }
  getFlex() {
    return this.flex;
  }
  isRowGroupActive() {
    return this.rowGroupActive;
  }
  isPivotActive() {
    return this.pivotActive;
  }
  isAnyFunctionActive() {
    return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
  }
  isAnyFunctionAllowed() {
    return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
  }
  isValueActive() {
    return this.aggregationActive;
  }
  isAllowPivot() {
    return this.colDef.enablePivot === !0;
  }
  isAllowValue() {
    return this.colDef.enableValue === !0;
  }
  isAllowRowGroup() {
    return this.colDef.enableRowGroup === !0;
  }
  dispatchColEvent(e, t, i) {
    const s = this.createColumnEvent(e, t);
    i && Qe(s, i), this.colEventSvc.dispatchEvent(s);
  }
  dispatchStateUpdatedEvent(e) {
    this.colEventSvc.dispatchEvent({
      type: "columnStateUpdated",
      key: e
    });
  }
};
function Ke(e) {
  return e instanceof pn;
}
var pn = class extends T {
  constructor(e, t, i, s) {
    super(), this.colGroupDef = e, this.groupId = t, this.padding = i, this.level = s, this.isColumn = !1, this.expandable = !1, this.instanceId = wf(), this.expandableListenerRemoveCallback = null, this.expanded = !!e?.openByDefault;
  }
  destroy() {
    this.expandableListenerRemoveCallback && this.reset(null, void 0), super.destroy();
  }
  reset(e, t) {
    this.colGroupDef = e, this.level = t, this.originalParent = null, this.expandableListenerRemoveCallback && this.expandableListenerRemoveCallback(), this.children = void 0, this.expandable = void 0;
  }
  getInstanceId() {
    return this.instanceId;
  }
  getOriginalParent() {
    return this.originalParent;
  }
  getLevel() {
    return this.level;
  }
  isVisible() {
    return this.children ? this.children.some((e) => e.isVisible()) : !1;
  }
  isPadding() {
    return this.padding;
  }
  setExpanded(e) {
    this.expanded = e === void 0 ? !1 : e, this.dispatchLocalEvent({ type: "expandedChanged" });
  }
  isExpandable() {
    return this.expandable;
  }
  isExpanded() {
    return this.expanded;
  }
  getGroupId() {
    return this.groupId;
  }
  getId() {
    return this.getGroupId();
  }
  setChildren(e) {
    this.children = e;
  }
  getChildren() {
    return this.children;
  }
  getColGroupDef() {
    return this.colGroupDef;
  }
  getLeafColumns() {
    const e = [];
    return this.addLeafColumns(e), e;
  }
  forEachLeafColumn(e) {
    if (this.children)
      for (const t of this.children)
        gi(t) ? e(t) : Ke(t) && t.forEachLeafColumn(e);
  }
  addLeafColumns(e) {
    this.children && this.children.forEach((t) => {
      gi(t) ? e.push(t) : Ke(t) && t.addLeafColumns(e);
    });
  }
  getColumnGroupShow() {
    const e = this.colGroupDef;
    if (e)
      return e.columnGroupShow;
  }
  // need to check that this group has at least one col showing when both expanded and contracted.
  // if not, then we don't allow expanding and contracting on this group
  setupExpandable() {
    this.setExpandable(), this.expandableListenerRemoveCallback && this.expandableListenerRemoveCallback();
    const e = this.onColumnVisibilityChanged.bind(this);
    this.getLeafColumns().forEach((t) => t.__addEventListener("visibleChanged", e)), this.expandableListenerRemoveCallback = () => {
      this.getLeafColumns().forEach((t) => t.__removeEventListener("visibleChanged", e)), this.expandableListenerRemoveCallback = null;
    };
  }
  setExpandable() {
    if (this.isPadding())
      return;
    let e = !1, t = !1, i = !1;
    const s = this.findChildrenRemovingPadding();
    for (let n = 0, r = s.length; n < r; n++) {
      const a = s[n];
      if (!a.isVisible())
        continue;
      const l = a.getColumnGroupShow();
      l === "open" ? (e = !0, i = !0) : l === "closed" ? (t = !0, i = !0) : (e = !0, t = !0);
    }
    const o = e && t && i;
    this.expandable !== o && (this.expandable = o, this.dispatchLocalEvent({ type: "expandableChanged" }));
  }
  findChildrenRemovingPadding() {
    const e = [], t = (i) => {
      i.forEach((s) => {
        Ke(s) && s.isPadding() ? t(s.children) : e.push(s);
      });
    };
    return t(this.children), e;
  }
  onColumnVisibilityChanged() {
    this.setExpandable();
  }
}, Ex = {
  numericColumn: {
    headerClass: "ag-right-aligned-header",
    cellClass: "ag-right-aligned-cell"
  },
  rightAligned: {
    headerClass: "ag-right-aligned-header",
    cellClass: "ag-right-aligned-cell"
  }
};
function Ru(e, t, i) {
  const s = {}, o = e.gos;
  return Object.assign(s, o.get("defaultColGroupDef")), Object.assign(s, t), o.validateColDef(s, i), s;
}
var Dx = class {
  constructor() {
    this.existingKeys = {};
  }
  addExistingKeys(e) {
    for (let t = 0; t < e.length; t++)
      this.existingKeys[e[t]] = !0;
  }
  getUniqueKey(e, t) {
    e = Na(e);
    let i = 0;
    for (; ; ) {
      let s = e ?? t;
      if (s ? i !== 0 && (s += "_" + i) : s = i, !this.existingKeys[s]) {
        const o = String(s);
        return e && i > 0 && B(273, { providedId: e, usedId: o }), this.existingKeys[o] = !0, o;
      }
      i++;
    }
  }
}, Un = Object.freeze([]);
function ue(e) {
  if (e?.length)
    return e[e.length - 1];
}
function Yi(e, t, i) {
  return e == null && t == null ? !0 : e != null && t != null && e.length === t.length && e.every((s, o) => i ? i(s, t[o]) : t[o] === s);
}
function Ko(e, t) {
  if (e)
    for (const i of e)
      t(i);
}
function St(e, t) {
  const i = e.indexOf(t);
  i >= 0 && e.splice(i, 1);
}
function xu(e, t, i) {
  for (let s = 0; s < t.length; s++)
    St(e, t[s]);
  for (let s = t.length - 1; s >= 0; s--)
    e.splice(i, 0, t[s]);
}
var ur = "ag-Grid-AutoColumn", Sf = "ag-Grid-SelectionColumn", yf = "ag-Grid-RowNumbersColumn";
function bf(e) {
  const t = [], i = (s) => {
    for (let o = 0; o < s.length; o++) {
      const n = s[o];
      gi(n) ? t.push(n) : Ke(n) && i(n.getChildren());
    }
  };
  return i(e), t;
}
function zt(e) {
  return e.reduce((t, i) => t + i.getActualWidth(), 0);
}
function jn(e, t, i) {
  const s = {};
  if (!t)
    return;
  $t(null, t, (n) => {
    s[n.getInstanceId()] = n;
  }), i && $t(null, i, (n) => {
    s[n.getInstanceId()] = null;
  });
  const o = Object.values(s).filter((n) => n != null);
  e.context.destroyBeans(o);
}
function hc(e) {
  return e.getId().startsWith(ur);
}
function fi(e) {
  return (typeof e == "string" ? e : "getColId" in e ? e.getColId() : e.colId)?.startsWith(Sf) ?? !1;
}
function ai(e) {
  return (typeof e == "string" ? e : "getColId" in e ? e.getColId() : e.colId)?.startsWith(yf) ?? !1;
}
function Tx(e) {
  return fi(e) || ai(e);
}
function $n(e) {
  let t = [];
  return e instanceof Array ? t = e : typeof e == "string" && (t = e.split(",")), t;
}
function Mx(e, t) {
  return Yi(e, t, (i, s) => i.getColId() === s.getColId());
}
function Ax(e) {
  e.map = {}, e.list.forEach((t) => e.map[t.getId()] = t);
}
function ps(e) {
  return e === "gridOptionsUpdated" ? "gridOptionsChanged" : e;
}
function Rf(e, t) {
  const i = e === t, s = e.getColDef() === t, o = e.getColId() == t;
  return i || s || o;
}
var Ix = (e, t) => (i, s) => {
  const o = {
    value1: void 0,
    value2: void 0
  };
  let n = !1;
  return e && (e[i] !== void 0 && (o.value1 = e[i], n = !0), $(s) && e[s] !== void 0 && (o.value2 = e[s], n = !0)), !n && t && (t[i] !== void 0 && (o.value1 = t[i]), $(s) && t[s] !== void 0 && (o.value2 = t[s])), o;
};
function kx(e, t = null, i, s, o) {
  const n = new Dx(), { existingCols: r, existingGroups: a, existingColKeys: l } = Lx(s);
  n.addExistingKeys(l);
  const c = xf(
    e,
    t,
    0,
    i,
    r,
    n,
    a,
    o
  ), { colGroupSvc: d } = e, u = d?.findMaxDepth(c, 0) ?? 0, h = d ? d.balanceColumnTree(c, 0, u, n) : c;
  return $t(null, h, (p, f) => {
    Ke(p) && p.setupExpandable(), p.originalParent = f;
  }), {
    columnTree: h,
    treeDepth: u
  };
}
function Lx(e) {
  const t = [], i = [], s = [];
  return e && $t(null, e, (o) => {
    if (Ke(o)) {
      const n = o;
      i.push(n);
    } else {
      const n = o;
      s.push(n.getId()), t.push(n);
    }
  }), { existingCols: t, existingGroups: i, existingColKeys: s };
}
function xf(e, t, i, s, o, n, r, a) {
  if (!t)
    return [];
  const { colGroupSvc: l } = e, c = new Array(t.length);
  for (let d = 0; d < c.length; d++) {
    const u = t[d];
    l && Nx(u) ? c[d] = l.createProvidedColumnGroup(
      s,
      u,
      i,
      o,
      n,
      r,
      a
    ) : c[d] = Ox(e, s, u, o, n, a);
  }
  return c;
}
function Ox(e, t, i, s, o, n) {
  const r = Gx(i, s);
  r && s?.splice(r.idx, 1);
  let a = r?.column;
  if (a) {
    const l = Za(e, i, a.getColId());
    a.setColDef(l, i, n), Vx(e, a, l, n);
  } else {
    const l = o.getUniqueKey(i.colId, i.field), c = Za(e, i, l);
    a = new Ki(c, i, l, t), e.context.createBean(a);
  }
  return e.dataTypeSvc?.addColumnListeners(a), a;
}
function Ff(e, t, i, s, o, n, r, a) {
  const { sortSvc: l, pinnedCols: c, colFlex: d } = e;
  i !== void 0 && t.setVisible(!i, a), l && (l.updateColSort(t, s, a), o !== void 0 && l.setColSortIndex(t, o)), n !== void 0 && c?.setColPinned(t, n), r !== void 0 && d?.setColFlex(t, r);
}
function Vx(e, t, i, s) {
  Ff(
    e,
    t,
    i.hide,
    i.sort,
    i.sortIndex,
    i.pinned,
    i.flex,
    s
  );
  const o = t.getFlex();
  if (!(o != null && o > 0))
    if (i.width != null)
      t.setActualWidth(i.width, s);
    else {
      const n = t.getActualWidth();
      t.setActualWidth(n, s);
    }
}
function Gx(e, t) {
  if (t)
    for (let i = 0; i < t.length; i++) {
      const s = t[i].getUserProvidedColDef();
      if (!s)
        continue;
      if (e.colId != null) {
        if (t[i].getId() === e.colId)
          return { idx: i, column: t[i] };
        continue;
      }
      if (e.field != null) {
        if (s.field === e.field)
          return { idx: i, column: t[i] };
        continue;
      }
      if (s === e)
        return { idx: i, column: t[i] };
    }
}
function Za(e, t, i, s) {
  const { gos: o, dataTypeSvc: n } = e, r = {}, a = o.get("defaultColDef");
  Qe(r, a, !1, !0);
  const l = Hx(e, r, t, i);
  l && Bx(e, l, r);
  const c = r.cellDataType;
  Qe(r, t, !1, !0), c !== void 0 && (r.cellDataType = c);
  const d = o.get("autoGroupColumnDef"), u = Mt(o);
  return t.rowGroup && d && u && Qe(
    r,
    { sort: d.sort, initialSort: d.initialSort },
    !1,
    !0
  ), n && (n.postProcess(r), n.validateColDef(r)), o.validateColDef(r, i, s), r;
}
function Hx(e, t, i, s) {
  const o = e.dataTypeSvc?.updateColDefAndGetColumnType(t, i, s), n = i.type ?? o ?? t.type;
  return t.type = n, n ? $n(n) : void 0;
}
function Bx(e, t, i) {
  if (!t.length)
    return;
  const s = Object.assign({}, Ex), o = e.gos.get("columnTypes") || {};
  for (const n of Object.keys(o)) {
    const r = o[n];
    n in s ? B(34, { key: n }) : (r.type && B(35), s[n] = r);
  }
  t.forEach((n) => {
    const r = s[n.trim()];
    r ? Qe(i, r, !1, !0) : B(36, { t: n });
  });
}
function Nx(e) {
  return e.children !== void 0;
}
function $t(e, t, i) {
  if (t)
    for (let s = 0; s < t.length; s++) {
      const o = t[s];
      Ke(o) && $t(o, o.getChildren(), i), i(o, e);
    }
}
function Pf(e, t) {
  const i = [], s = [], o = [];
  return e.forEach((r) => {
    const a = r.getColDef().lockPosition;
    a === "right" ? o.push(r) : a === "left" || a === !0 ? i.push(r) : s.push(r);
  }), t.get("enableRtl") ? [...o, ...s, ...i] : [...i, ...s, ...o];
}
function Ef(e, t) {
  let i = !0;
  return $t(null, t, (s) => {
    if (!Ke(s))
      return;
    const o = s, n = o.getColGroupDef();
    if (!(n && n.marryChildren))
      return;
    const a = [];
    o.getLeafColumns().forEach((h) => {
      const g = e.indexOf(h);
      a.push(g);
    });
    const l = Math.max.apply(Math, a), c = Math.min.apply(Math, a), d = l - c, u = o.getLeafColumns().length - 1;
    d > u && (i = !1);
  }), i;
}
function Df(e, t) {
  if (!e || e.length == 0)
    return;
  const i = t(e[0]);
  for (let s = 1; s < e.length; s++)
    if (i !== t(e[s]))
      return;
  return i;
}
function Tf(e, t, i) {
  if (!t.length)
    return;
  const s = t.length === 1 ? t[0] : null, o = Df(t, (n) => n.getPinned());
  e.dispatchEvent({
    type: "columnPinned",
    // mistake in typing, 'undefined' should be allowed, as 'null' means 'not pinned'
    pinned: o ?? null,
    columns: t,
    column: s,
    source: i
  });
}
function Wx(e, t, i) {
  if (!t.length)
    return;
  const s = t.length === 1 ? t[0] : null, o = Df(t, (n) => n.isVisible());
  e.dispatchEvent({
    type: "columnVisible",
    visible: o,
    columns: t,
    column: s,
    source: i
  });
}
function zx(e, t, i, s) {
  e.dispatchEvent({
    type: t,
    columns: i,
    column: i && i.length == 1 ? i[0] : null,
    source: s
  });
}
function Ps(e, t, i, s, o = null) {
  t?.length && e.dispatchEvent({
    type: "columnResized",
    columns: t,
    column: t.length === 1 ? t[0] : null,
    flexColumns: o,
    finished: i,
    source: s
  });
}
function Ft(e, t, i) {
  const {
    colModel: s,
    rowGroupColsSvc: o,
    pivotColsSvc: n,
    autoColSvc: r,
    selectionColSvc: a,
    colAnimation: l,
    visibleCols: c,
    pivotResultCols: d,
    environment: u,
    valueColsSvc: h,
    eventSvc: g,
    gos: p
  } = e, f = s.getColDefCols() ?? [], m = a?.getColumns();
  if (!f?.length && !m?.length)
    return !1;
  if (t?.state && !t.state.forEach)
    return B(32), !1;
  const C = (S, x, D, M, k) => {
    if (!S)
      return;
    const P = Ix(x, t.defaultState), F = P("flex").value1;
    if (Ff(
      e,
      S,
      P("hide").value1,
      P("sort").value1,
      P("sortIndex").value1,
      P("pinned").value1,
      F,
      i
    ), F == null) {
      const N = P("width").value1;
      if (N != null) {
        const j = S.getColDef().minWidth ?? u.getDefaultColumnMinWidth();
        j != null && N >= j && S.setActualWidth(N, i);
      }
    }
    k || !S.isPrimary() || (h?.syncColumnWithState(S, i, P), o?.syncColumnWithState(S, i, P, D), n?.syncColumnWithState(S, i, P, M));
  }, v = (S, x, D) => {
    const M = Mf(e, i), k = x.slice(), P = {}, F = {}, N = [], j = [], z = [];
    let A = 0;
    const O = o?.columns.slice() ?? [], G = n?.columns.slice() ?? [];
    S.forEach((b) => {
      const L = b.colId;
      if (L.startsWith(ur)) {
        N.push(b), z.push(b);
        return;
      }
      if (fi(L)) {
        j.push(b), z.push(b);
        return;
      }
      const K = D(L);
      K ? (C(K, b, P, F, !1), St(k, K)) : (z.push(b), A += 1);
    });
    const I = (b) => C(b, null, P, F, !1);
    k.forEach(I), o?.sortColumns(Fu.bind(o, P, O)), n?.sortColumns(Fu.bind(n, F, G)), s.refreshCols(!1);
    const _ = (b, L, U = []) => {
      L.forEach((K) => {
        const Q = b(K.colId);
        St(U, Q), C(Q, K, null, null, !0);
      }), U.forEach(I);
    };
    return _(
      (b) => r?.getColumn(b) ?? null,
      N,
      r?.getColumns()?.slice()
    ), _(
      (b) => a?.getColumn(b) ?? null,
      j,
      a?.getColumns()?.slice()
    ), Ux(t, s, p), c.refresh(i), g.dispatchEvent({
      type: "columnEverythingChanged",
      source: i
    }), M(), { unmatchedAndAutoStates: z, unmatchedCount: A };
  };
  l?.start();
  let { unmatchedAndAutoStates: w, unmatchedCount: y } = v(
    t.state || [],
    f,
    (S) => s.getColDefCol(S)
  );
  if (w.length > 0 || $(t.defaultState)) {
    const S = d?.getPivotResultCols()?.list ?? [];
    y = v(
      w,
      S,
      (x) => d?.getPivotResultCol(x) ?? null
    ).unmatchedCount;
  }
  return l?.finish(), y === 0;
}
function _x(e, t) {
  const { colModel: i, autoColSvc: s, selectionColSvc: o, eventSvc: n, gos: r } = e, a = i.getColDefCols();
  if (!a?.length)
    return;
  const l = i.getColDefColTree(), c = bf(l), d = [];
  let u = 1e3, h = 1e3;
  const g = (v) => {
    const w = Af(v);
    Ce(w.rowGroupIndex) && w.rowGroup && (w.rowGroupIndex = u++), Ce(w.pivotIndex) && w.pivot && (w.pivotIndex = h++), d.push(w);
  };
  s?.getColumns()?.forEach(g), o?.getColumns()?.forEach(g), c?.forEach(g), Ft(e, { state: d }, t);
  const p = s?.getColumns() ?? [], C = [...o?.getColumns() ?? [], ...p, ...a].map((v) => ({ colId: v.colId }));
  Ft(e, { state: C, applyOrder: !0 }, t), n.dispatchEvent(Z(r, { type: "columnsReset", source: t }));
}
function Mf(e, t) {
  const { rowGroupColsSvc: i, pivotColsSvc: s, valueColsSvc: o, colModel: n, sortSvc: r, eventSvc: a } = e, l = {
    rowGroupColumns: i?.columns.slice() ?? [],
    pivotColumns: s?.columns.slice() ?? [],
    valueColumns: o?.columns.slice() ?? []
  }, c = Kn(e), d = {};
  return c.forEach((u) => {
    d[u.colId] = u;
  }), () => {
    const u = (x, D, M, k) => {
      const P = D.map(k), F = M.map(k);
      if (Yi(P, F))
        return;
      const j = new Set(D);
      M.forEach((A) => {
        j.delete(A) || j.add(A);
      });
      const z = [...j];
      a.dispatchEvent({
        type: x,
        columns: z,
        column: z.length === 1 ? z[0] : null,
        source: t
      });
    }, h = (x) => {
      const D = [];
      return n.forAllCols((M) => {
        const k = d[M.getColId()];
        k && x(k, M) && D.push(M);
      }), D;
    }, g = (x) => x.getColId();
    u(
      "columnRowGroupChanged",
      l.rowGroupColumns,
      i?.columns ?? [],
      g
    ), u(
      "columnPivotChanged",
      l.pivotColumns,
      s?.columns ?? [],
      g
    );
    const f = h((x, D) => {
      const M = x.aggFunc != null, k = M != D.isValueActive(), P = M && x.aggFunc != D.getAggFunc();
      return k || P;
    });
    f.length > 0 && zx(a, "columnValueChanged", f, t), Ps(a, h((x, D) => x.width != D.getActualWidth()), !0, t), Tf(a, h((x, D) => x.pinned != D.getPinned()), t), Wx(a, h((x, D) => x.hide == D.isVisible()), t);
    const y = h((x, D) => x.sort != D.getSort() || x.sortIndex != D.getSortIndex());
    y.length > 0 && r?.dispatchSortChangedEvents(t, y);
    const S = Kn(e);
    $x(c, S, t, n, a);
  };
}
function Kn(e) {
  const { colModel: t, rowGroupColsSvc: i, pivotColsSvc: s } = e, o = t.getColDefCols();
  if (Ce(o) || !t.isAlive())
    return [];
  const n = i?.columns, r = s?.columns, a = [], l = (d) => {
    const u = d.isRowGroupActive() && n ? n.indexOf(d) : null, h = d.isPivotActive() && r ? r.indexOf(d) : null, g = d.isValueActive() ? d.getAggFunc() : null, p = d.getSort() != null ? d.getSort() : null, f = d.getSortIndex() != null ? d.getSortIndex() : null;
    a.push({
      colId: d.getColId(),
      width: d.getActualWidth(),
      hide: !d.isVisible(),
      pinned: d.getPinned(),
      sort: p,
      sortIndex: f,
      aggFunc: g,
      rowGroup: d.isRowGroupActive(),
      rowGroupIndex: u,
      pivot: d.isPivotActive(),
      pivotIndex: h,
      flex: d.getFlex() ?? null
    });
  };
  t.forAllCols((d) => l(d));
  const c = new Map(
    t.getCols().map((d, u) => [d.getColId(), u])
  );
  return a.sort((d, u) => {
    const h = c.has(d.colId) ? c.get(d.colId) : -1, g = c.has(u.colId) ? c.get(u.colId) : -1;
    return h - g;
  }), a;
}
function Af(e) {
  const t = (p, f) => p ?? f ?? null, i = e.getColDef(), s = t(i.sort, i.initialSort), o = t(i.sortIndex, i.initialSortIndex), n = t(i.hide, i.initialHide), r = t(i.pinned, i.initialPinned), a = t(i.width, i.initialWidth), l = t(i.flex, i.initialFlex);
  let c = t(i.rowGroupIndex, i.initialRowGroupIndex), d = t(i.rowGroup, i.initialRowGroup);
  c == null && (d == null || d == !1) && (c = null, d = null);
  let u = t(i.pivotIndex, i.initialPivotIndex), h = t(i.pivot, i.initialPivot);
  u == null && (h == null || h == !1) && (u = null, h = null);
  const g = t(i.aggFunc, i.initialAggFunc);
  return {
    colId: e.getColId(),
    sort: s,
    sortIndex: o,
    hide: n,
    pinned: r,
    width: a,
    flex: l,
    rowGroup: d,
    rowGroupIndex: c,
    pivot: h,
    pivotIndex: u,
    aggFunc: g
  };
}
function Ux(e, t, i) {
  if (!e.applyOrder || !e.state)
    return;
  const s = [];
  e.state.forEach((o) => {
    o.colId != null && s.push(o.colId);
  }), jx(t.cols, s, t, i);
}
function jx(e, t, i, s) {
  if (e == null)
    return;
  let o = [];
  const n = {};
  t.forEach((a) => {
    if (n[a])
      return;
    const l = e.map[a];
    l && (o.push(l), n[a] = !0);
  });
  let r = 0;
  if (e.list.forEach((a) => {
    const l = a.getColId();
    if (n[l] != null)
      return;
    l.startsWith(ur) ? o.splice(r++, 0, a) : o.push(a);
  }), o = Pf(o, s), !Ef(o, i.getColTree())) {
    B(39);
    return;
  }
  e.list = o;
}
function $x(e, t, i, s, o) {
  const n = {};
  t.forEach((d) => n[d.colId] = d);
  const r = {};
  e.forEach((d) => {
    n[d.colId] && (r[d.colId] = !0);
  });
  const a = e.filter((d) => r[d.colId]), l = t.filter((d) => r[d.colId]), c = [];
  l.forEach((d, u) => {
    const h = a && a[u];
    if (h && h.colId !== d.colId) {
      const g = s.getCol(h.colId);
      g && c.push(g);
    }
  }), c.length && o.dispatchEvent({
    type: "columnMoved",
    columns: c,
    column: c.length === 1 ? c[0] : null,
    finished: !0,
    source: i
  });
}
var Fu = (e, t, i, s) => {
  const o = e[i.getId()], n = e[s.getId()], r = o != null, a = n != null;
  if (r && a)
    return o - n;
  if (r)
    return -1;
  if (a)
    return 1;
  const l = t.indexOf(i), c = t.indexOf(s), d = l >= 0, u = c >= 0;
  return d && u ? l - c : d ? -1 : 1;
}, Kx = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colModel", this.pivotMode = !1, this.ready = !1, this.changeEventsDispatching = !1;
  }
  postConstruct() {
    this.pivotMode = this.gos.get("pivotMode"), this.addManagedPropertyListeners(
      [
        "groupDisplayType",
        "treeData",
        "treeDataDisplayType",
        "groupHideOpenParents",
        "rowNumbers",
        "hidePaddedHeaderRows"
      ],
      (e) => this.refreshAll(ps(e.source))
    ), this.addManagedPropertyListeners(
      ["defaultColDef", "defaultColGroupDef", "columnTypes", "suppressFieldDotNotation"],
      this.recreateColumnDefs.bind(this)
    ), this.addManagedPropertyListener(
      "pivotMode",
      (e) => this.setPivotMode(this.gos.get("pivotMode"), ps(e.source))
    );
  }
  // called from SyncService, when grid has finished initialising
  createColsFromColDefs(e) {
    const { beans: t } = this, { valueCache: i, colAutosize: s, rowGroupColsSvc: o, pivotColsSvc: n, valueColsSvc: r, visibleCols: a, eventSvc: l } = t, c = this.colDefs ? Mf(t, e) : void 0;
    i?.expire();
    const d = this.colDefCols?.list, u = this.colDefCols?.tree, h = kx(t, this.colDefs, !0, u, e);
    jn(t, this.colDefCols?.tree, h.columnTree);
    const g = h.columnTree, p = h.treeDepth, f = bf(g), m = {};
    f.forEach((C) => m[C.getId()] = C), this.colDefCols = { tree: g, treeDepth: p, list: f, map: m }, o?.extractCols(e, d), n?.extractCols(e, d), r?.extractCols(e, d), this.ready = !0, this.refreshCols(!0), a.refresh(e), l.dispatchEvent({
      type: "columnEverythingChanged",
      source: e
    }), c && (this.changeEventsDispatching = !0, c(), this.changeEventsDispatching = !1), l.dispatchEvent({
      type: "newColumnsLoaded",
      source: e
    }), e === "gridInitializing" && s?.applyAutosizeStrategy();
  }
  // called from: buildAutoGroupColumns (events 'groupDisplayType', 'treeData', 'treeDataDisplayType', 'groupHideOpenParents')
  // createColsFromColDefs (recreateColumnDefs, setColumnsDefs),
  // setPivotMode, applyColumnState,
  // functionColsService.setPrimaryColList, functionColsService.updatePrimaryColList,
  // pivotResultCols.setPivotResultCols
  refreshCols(e) {
    if (!this.colDefCols)
      return;
    const t = this.cols?.tree;
    this.saveColOrder();
    const {
      autoColSvc: i,
      selectionColSvc: s,
      rowNumbersSvc: o,
      quickFilter: n,
      pivotResultCols: r,
      showRowGroupCols: a,
      rowAutoHeight: l,
      visibleCols: c,
      colViewport: d,
      eventSvc: u
    } = this.beans, h = this.selectCols(r, this.colDefCols);
    this.createColumnsForService([i, s, o], h);
    const g = ex(this.gos, this.showingPivotResult);
    (!e || g) && this.restoreColOrder(h), this.positionLockedCols(h), a?.refresh(), n?.refreshCols(), this.setColSpanActive(), l?.setAutoHeightActive(h), c.clear(), d.clear(), !Yi(t, this.cols.tree) && u.dispatchEvent({
      type: "gridColumnsChanged"
    });
  }
  createColumnsForService(e, t) {
    for (const i of e)
      i && (i.createColumns(t, (s) => {
        this.lastOrder = s(this.lastOrder), this.lastPivotOrder = s(this.lastPivotOrder);
      }), i.addColumns(t));
  }
  selectCols(e, t) {
    const i = e?.getPivotResultCols() ?? null;
    this.showingPivotResult = i != null;
    const { map: s, list: o, tree: n, treeDepth: r } = i ?? t;
    return this.cols = {
      list: o.slice(),
      map: { ...s },
      tree: n.slice(),
      treeDepth: r
    }, i && (i.list.some((l) => this.cols?.map[l.getColId()] !== void 0) || (this.lastPivotOrder = null)), this.cols;
  }
  getColsToShow() {
    if (!this.cols)
      return [];
    const { valueColsSvc: e, selectionColSvc: t, gos: i } = this.beans, s = this.isPivotMode() && !this.showingPivotResult, o = t?.isSelectionColumnEnabled(), n = i.get("rowNumbers"), r = e?.columns;
    return this.cols.list.filter((l) => {
      const c = hc(l);
      if (s) {
        const d = r?.includes(l);
        return c || d || o && fi(l) || n && ai(l);
      } else
        return c || l.isVisible();
    });
  }
  // on events 'groupDisplayType', 'treeData', 'treeDataDisplayType', 'groupHideOpenParents'
  refreshAll(e) {
    this.ready && (this.refreshCols(!1), this.beans.visibleCols.refresh(e));
  }
  setColsVisible(e, t = !1, i) {
    Ft(
      this.beans,
      {
        state: e.map((s) => ({
          colId: typeof s == "string" ? s : s.getColId(),
          hide: !t
        }))
      },
      i
    );
  }
  /**
   * Restores provided columns order to the previous order in this.lastPivotOrder / this.lastOrder
   * If columns are not in the last order:
   *  - Check column groups, and apply column after the last column in the lowest shared group
   *  - If no sibling is found, apply the column at the end of the cols
   */
  restoreColOrder(e) {
    const t = this.showingPivotResult ? this.lastPivotOrder : this.lastOrder;
    if (!t)
      return;
    const i = t.filter((u) => e.map[u.getId()] != null);
    if (i.length === 0)
      return;
    if (i.length === e.list.length) {
      e.list = i;
      return;
    }
    const s = (u) => {
      const h = u.getOriginalParent();
      return h ? h.getChildren().length > 1 ? !0 : s(h) : !1;
    };
    if (!i.some((u) => s(u))) {
      const u = new Set(i);
      for (const h of e.list)
        u.has(h) || i.push(h);
      e.list = i;
      return;
    }
    const o = /* @__PURE__ */ new Map();
    for (let u = 0; u < i.length; u++) {
      const h = i[u];
      o.set(h, u);
    }
    const n = e.list.filter((u) => !o.has(u));
    if (n.length === 0) {
      e.list = i;
      return;
    }
    const r = (u, h) => {
      const g = h ? h.getOriginalParent() : u.getOriginalParent();
      if (!g)
        return null;
      let p = null, f = null;
      for (const m of g.getChildren())
        if (!(m === h || m === u)) {
          if (m instanceof Ki) {
            const C = o.get(m);
            if (C == null)
              continue;
            (p == null || p < C) && (p = C, f = m);
            continue;
          }
          m.forEachLeafColumn((C) => {
            const v = o.get(C);
            v != null && (p == null || p < v) && (p = v, f = C);
          });
        }
      return f ?? r(u, g);
    }, a = [], l = /* @__PURE__ */ new Map();
    for (const u of n) {
      const h = r(u, null);
      if (h == null) {
        a.push(u);
        continue;
      }
      const g = l.get(h);
      g === void 0 ? l.set(h, u) : Array.isArray(g) ? g.push(u) : l.set(h, [g, u]);
    }
    const c = new Array(e.list.length);
    let d = c.length - 1;
    for (let u = a.length - 1; u >= 0; u--)
      c[d--] = a[u];
    for (let u = i.length - 1; u >= 0; u--) {
      const h = i[u], g = l.get(h);
      if (g)
        if (Array.isArray(g))
          for (let p = g.length - 1; p >= 0; p--) {
            const f = g[p];
            c[d--] = f;
          }
        else
          c[d--] = g;
      c[d--] = h;
    }
    e.list = c;
  }
  positionLockedCols(e) {
    e.list = Pf(e.list, this.gos);
  }
  saveColOrder() {
    this.showingPivotResult ? this.lastPivotOrder = this.cols?.list ?? null : this.lastOrder = this.cols?.list ?? null;
  }
  getColumnDefs() {
    return this.colDefCols ? this.beans.colDefFactory?.getColumnDefs(
      this.colDefCols.list,
      this.showingPivotResult,
      this.lastOrder,
      this.cols?.list ?? []
    ) : void 0;
  }
  setColSpanActive() {
    this.colSpanActive = !!this.cols?.list.some((e) => e.getColDef().colSpan != null);
  }
  isPivotMode() {
    return this.pivotMode;
  }
  setPivotMode(e, t) {
    if (e === this.pivotMode || (this.pivotMode = e, !this.ready))
      return;
    this.refreshCols(!1);
    const { visibleCols: i, eventSvc: s } = this.beans;
    i.refresh(t), s.dispatchEvent({
      type: "columnPivotModeChanged"
    });
  }
  // + clientSideRowModel
  isPivotActive() {
    const e = this.beans.pivotColsSvc?.columns;
    return this.pivotMode && !!e?.length;
  }
  // called when dataTypes change
  recreateColumnDefs(e) {
    if (!this.cols)
      return;
    this.beans.autoColSvc?.updateColumns(e);
    const t = ps(e.source);
    this.createColsFromColDefs(t);
  }
  setColumnDefs(e, t) {
    this.colDefs = e, this.createColsFromColDefs(t);
  }
  destroy() {
    jn(this.beans, this.colDefCols?.tree), super.destroy();
  }
  getColTree() {
    return this.cols?.tree ?? [];
  }
  // + columnSelectPanel
  getColDefColTree() {
    return this.colDefCols?.tree ?? [];
  }
  // + clientSideRowController -> sorting, building quick filter text
  // + headerRenderer -> sorting (clearing icon)
  getColDefCols() {
    return this.colDefCols?.list ?? null;
  }
  // + moveColumnController
  getCols() {
    return this.cols?.list ?? [];
  }
  forAllCols(e) {
    const { pivotResultCols: t, autoColSvc: i, selectionColSvc: s } = this.beans;
    Ko(this.colDefCols?.list, e), Ko(i?.columns?.list, e), Ko(s?.columns?.list, e), Ko(t?.getPivotResultCols()?.list, e);
  }
  getColsForKeys(e) {
    return e ? e.map((t) => this.getCol(t)).filter((t) => t != null) : [];
  }
  getColDefCol(e) {
    return this.colDefCols?.list ? this.getColFromCollection(e, this.colDefCols) : null;
  }
  getCol(e) {
    return e == null ? null : this.getColFromCollection(e, this.cols);
  }
  /**
   * Get column exclusively by ID.
   *
   * Note getCol/getColFromCollection have poor performance when col has been removed.
   */
  getColById(e) {
    return this.cols?.map[e] ?? null;
  }
  getColFromCollection(e, t) {
    if (t == null)
      return null;
    const { map: i, list: s } = t;
    if (typeof e == "string" && i[e])
      return i[e];
    for (let o = 0; o < s.length; o++)
      if (Rf(s[o], e))
        return s[o];
    return this.beans.autoColSvc?.getColumn(e) ?? this.beans.selectionColSvc?.getColumn(e) ?? null;
  }
}, If = class {
  constructor() {
    this.existingIds = {};
  }
  getInstanceIdForKey(e) {
    const t = this.existingIds[e];
    let i;
    return typeof t != "number" ? i = 0 : i = t + 1, this.existingIds[e] = i, i;
  }
}, Os = class extends T {
};
function Vo(e, t, i) {
  return i && e.addDestroyFunc(() => t.destroyBean(i)), i ?? e;
}
var Go = class {
  constructor(e) {
    this.cssClassStates = {}, this.getGui = e;
  }
  toggleCss(e, t) {
    if (!e)
      return;
    if (e.indexOf(" ") >= 0) {
      const s = (e || "").split(" ");
      if (s.length > 1) {
        s.forEach((o) => this.toggleCss(o, t));
        return;
      }
    }
    this.cssClassStates[e] !== t && e.length && (this.getGui()?.classList.toggle(e, t), this.cssClassStates[e] = t);
  }
}, Yx = 0, q = null, pe = class extends T {
  constructor(e, t) {
    super(), this.suppressDataRefValidation = !1, this.displayed = !0, this.visible = !0, this.compId = Yx++, this.cssManager = new Go(() => this.eGui), this.componentSelectors = new Map((t ?? []).map((i) => [i.selector, i])), e && this.setTemplate(e);
  }
  preConstruct() {
    this.wireTemplate(this.getGui());
    const e = "component-" + Object.getPrototypeOf(this)?.constructor?.name;
    this.css?.forEach((t) => this.beans.environment.addGlobalCSS(t, e));
  }
  wireTemplate(e, t) {
    e && this.gos && (this.applyElementsToComponent(e), this.createChildComponentsFromTags(e, t));
  }
  getCompId() {
    return this.compId;
  }
  getDataRefAttribute(e) {
    return e.getAttribute ? e.getAttribute(Xp) : null;
  }
  applyElementsToComponent(e, t, i, s = null) {
    if (t === void 0 && (t = this.getDataRefAttribute(e)), t) {
      const o = this[t];
      if (o === q)
        this[t] = s ?? e;
      else {
        const n = i && i[t];
        if (!this.suppressDataRefValidation && !n)
          throw new Error(`data-ref: ${t} on ${this.constructor.name} with ${o}`);
      }
    }
  }
  // for registered components only, eg creates AgCheckbox instance from ag-checkbox HTML tag
  createChildComponentsFromTags(e, t) {
    const i = [];
    for (const s of e.childNodes ?? [])
      i.push(s);
    i.forEach((s) => {
      if (!(s instanceof HTMLElement))
        return;
      const o = this.createComponentFromElement(
        s,
        (n) => {
          const r = n.getGui();
          if (r)
            for (const a of s.attributes ?? [])
              r.setAttribute(a.name, a.value);
        },
        t
      );
      if (o) {
        if (o.addItems && s.children.length) {
          this.createChildComponentsFromTags(s, t);
          const n = Array.prototype.slice.call(s.children);
          o.addItems(n);
        }
        this.swapComponentForNode(o, e, s);
      } else s.childNodes && this.createChildComponentsFromTags(s, t);
    });
  }
  createComponentFromElement(e, t, i) {
    const s = e.nodeName, o = this.getDataRefAttribute(e), n = s.indexOf("AG-") === 0, r = n ? this.componentSelectors.get(s) : null;
    let a = null;
    if (r) {
      const l = i && o ? i[o] : void 0;
      a = new r.component(l), a.setParentComponent(this), this.createBean(a, null, t);
    } else if (n)
      throw new Error(`selector: ${s}`);
    return this.applyElementsToComponent(e, o, i, a), a;
  }
  swapComponentForNode(e, t, i) {
    const s = e.getGui();
    t.replaceChild(s, i), t.insertBefore(document.createComment(i.nodeName), s), this.addDestroyFunc(this.destroyBean.bind(this, e));
  }
  activateTabIndex(e) {
    const t = this.gos.get("tabIndex");
    e || (e = []), e.length || e.push(this.getGui()), e.forEach((i) => i.setAttribute("tabindex", t.toString()));
  }
  setTemplate(e, t, i) {
    let s;
    typeof e == "string" || e == null ? s = rc(e) : s = Ae(e), this.setTemplateFromElement(s, t, i);
  }
  setTemplateFromElement(e, t, i, s = !1) {
    if (this.eGui = e, this.suppressDataRefValidation = s, t)
      for (let o = 0; o < t.length; o++) {
        const n = t[o];
        this.componentSelectors.set(n.selector, n);
      }
    this.wireTemplate(e, i);
  }
  getGui() {
    return this.eGui;
  }
  getFocusableElement() {
    return this.eGui;
  }
  getAriaElement() {
    return this.getFocusableElement();
  }
  setParentComponent(e) {
    this.parentComponent = e;
  }
  getParentComponent() {
    return this.parentComponent;
  }
  // this method is for older code, that wants to provide the gui element,
  // it is not intended for this to be in ag-Stack
  setGui(e) {
    this.eGui = e;
  }
  queryForHtmlElement(e) {
    return this.eGui.querySelector(e);
  }
  getContainerAndElement(e, t) {
    let i = t;
    return e == null ? null : (i || (i = this.eGui), lc(e) ? {
      element: e,
      parent: i
    } : {
      element: e.getGui(),
      parent: i
    });
  }
  prependChild(e, t) {
    const { element: i, parent: s } = this.getContainerAndElement(e, t) || {};
    !i || !s || s.insertAdjacentElement("afterbegin", i);
  }
  appendChild(e, t) {
    const { element: i, parent: s } = this.getContainerAndElement(e, t) || {};
    !i || !s || s.appendChild(i);
  }
  isDisplayed() {
    return this.displayed;
  }
  setVisible(e, t = {}) {
    if (e !== this.visible) {
      this.visible = e;
      const { skipAriaHidden: i } = t;
      _R(this.eGui, e, { skipAriaHidden: i });
    }
  }
  setDisplayed(e, t = {}) {
    if (e !== this.displayed) {
      this.displayed = e;
      const { skipAriaHidden: i } = t;
      Re(this.eGui, e, { skipAriaHidden: i });
      const s = {
        type: "displayChanged",
        visible: this.displayed
      };
      this.dispatchLocalEvent(s);
    }
  }
  destroy() {
    this.parentComponent && (this.parentComponent = void 0), super.destroy();
  }
  addGuiEventListener(e, t, i) {
    this.eGui.addEventListener(e, t, i), this.addDestroyFunc(() => this.eGui.removeEventListener(e, t));
  }
  addCss(e) {
    this.cssManager.toggleCss(e, !0);
  }
  removeCss(e) {
    this.cssManager.toggleCss(e, !1);
  }
  toggleCss(e, t) {
    this.cssManager.toggleCss(e, t);
  }
  registerCSS(e) {
    this.css || (this.css = []), this.css.push(e);
  }
};
function kf(e) {
  return typeof e == "object" && !!e.component;
}
var re = class Ys {
  constructor(t) {
    this.status = 0, this.resolution = null, this.waiters = [], t(
      (i) => this.onDone(i),
      (i) => this.onReject(i)
    );
  }
  static all(t) {
    return t.length ? new Ys((i) => {
      let s = t.length;
      const o = new Array(s);
      t.forEach((n, r) => {
        n.then((a) => {
          o[r] = a, s--, s === 0 && i(o);
        });
      });
    }) : Ys.resolve();
  }
  static resolve(t = null) {
    return new Ys((i) => i(t));
  }
  then(t) {
    return new Ys((i) => {
      this.status === 1 ? i(t(this.resolution)) : this.waiters.push((s) => i(t(s)));
    });
  }
  onDone(t) {
    this.status = 1, this.resolution = t, this.waiters.forEach((i) => i(t));
  }
  onReject(t) {
  }
};
function qx(e) {
  return e ? e.prototype && "getGui" in e.prototype : !1;
}
function Lf(e, t, i, s) {
  const { name: o } = i;
  let n, r, a, l, c, d;
  if (t) {
    const u = t, h = u[o + "Selector"], g = h ? h(s) : null, p = (f) => {
      typeof f == "string" ? n = f : f != null && f !== !0 && (e.isFrameworkComponent(f) ? a = f : r = f);
    };
    g ? (p(g.component), l = g.params, c = g.popup, d = g.popupPosition) : p(u[o]);
  }
  return { compName: n, jsComp: r, fwComp: a, paramsFromSelector: l, popupFromSelector: c, popupPositionFromSelector: d };
}
var Xx = class extends T {
  constructor() {
    super(...arguments), this.beanName = "userCompFactory";
  }
  wireBeans(e) {
    this.agCompUtils = e.agCompUtils, this.registry = e.registry, this.frameworkCompWrapper = e.frameworkCompWrapper, this.gridOptions = e.gridOptions;
  }
  getCompDetailsFromGridOptions(e, t, i, s = !1) {
    return this.getCompDetails(this.gridOptions, e, t, i, s);
  }
  getCompDetails(e, t, i, s, o = !1) {
    const { name: n, cellRenderer: r } = t;
    let { compName: a, jsComp: l, fwComp: c, paramsFromSelector: d, popupFromSelector: u, popupPositionFromSelector: h } = Lf(this.beans.frameworkOverrides, e, t, s), g, p;
    const f = (w) => {
      const y = this.registry.getUserComponent(n, w);
      y && (l = y.componentFromFramework ? void 0 : y.component, c = y.componentFromFramework ? y.component : void 0, g = y.params, p = y.processParams);
    };
    if (a != null && f(a), l == null && c == null && i != null && f(i), l && r && !qx(l) && (l = this.agCompUtils?.adaptFunction(t, l)), !l && !c) {
      const { validation: w } = this.beans;
      o && (a !== i || !i) ? a ? w?.isProvidedUserComp(a) || he(50, { compName: a }) : i ? w || he(260, {
        ...this.gos.getModuleErrorParams(),
        propName: n,
        compName: i
      }) : he(216, { name: n }) : i && !w && he(146, { comp: i });
      return;
    }
    const m = this.mergeParams(
      e,
      t,
      s,
      d,
      g,
      p
    ), C = l == null, v = l ?? c;
    return {
      componentFromFramework: C,
      componentClass: v,
      params: m,
      type: t,
      popupFromSelector: u,
      popupPositionFromSelector: h,
      newAgStackInstance: () => this.newAgStackInstance(v, C, m, t)
    };
  }
  newAgStackInstance(e, t, i, s) {
    const o = !t;
    let n;
    o ? n = new e() : n = this.frameworkCompWrapper.wrap(
      e,
      s.mandatoryMethods,
      s.optionalMethods,
      s
    ), this.createBean(n);
    const r = n.init?.(i);
    return r == null ? re.resolve(n) : r.then(() => n);
  }
  /**
   * merges params with application provided params
   * used by Floating Filter
   */
  mergeParams(e, t, i, s = null, o, n) {
    const r = { ...i, ...o }, a = e, l = a && a[t.name + "Params"];
    if (typeof l == "function") {
      const c = l(i);
      Qe(r, c);
    } else typeof l == "object" && Qe(r, l);
    return Qe(r, s), n ? n(r) : r;
  }
}, Zx = {
  name: "dateComponent",
  mandatoryMethods: ["getDate", "setDate"],
  optionalMethods: ["afterGuiAttached", "setInputPlaceholder", "setInputAriaLabel", "setDisabled", "refresh"]
}, Qx = {
  name: "dragAndDropImageComponent",
  mandatoryMethods: ["setIcon", "setLabel"]
}, Jx = { name: "headerComponent", optionalMethods: ["refresh"] }, eF = { name: "innerHeaderComponent" }, tF = { name: "innerHeaderGroupComponent" }, iF = { name: "headerGroupComponent" }, sF = {
  name: "cellRenderer",
  optionalMethods: ["refresh", "afterGuiAttached"],
  cellRenderer: !0
}, oF = { name: "loadingCellRenderer", cellRenderer: !0 }, nF = {
  name: "cellEditor",
  mandatoryMethods: ["getValue"],
  optionalMethods: [
    "isPopup",
    "isCancelBeforeStart",
    "isCancelAfterEnd",
    "getPopupPosition",
    "focusIn",
    "focusOut",
    "afterGuiAttached",
    "refresh"
  ]
}, rF = { name: "loadingOverlayComponent", optionalMethods: ["refresh"] }, aF = { name: "noRowsOverlayComponent", optionalMethods: ["refresh"] }, lF = { name: "tooltipComponent" }, gc = {
  name: "filter",
  mandatoryMethods: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
  optionalMethods: [
    "afterGuiAttached",
    "afterGuiDetached",
    "onNewRowsLoaded",
    "getModelAsString",
    "onFloatingFilterChanged",
    "onAnyFilterChanged",
    "refresh"
  ]
}, cF = {
  name: "floatingFilterComponent",
  mandatoryMethods: ["onParentModelChanged"],
  optionalMethods: ["afterGuiAttached", "refresh"]
}, dF = {
  name: "fullWidthCellRenderer",
  optionalMethods: ["refresh", "afterGuiAttached"],
  cellRenderer: !0
}, uF = { name: "loadingCellRenderer", cellRenderer: !0 }, hF = {
  name: "groupRowRenderer",
  optionalMethods: ["afterGuiAttached"],
  cellRenderer: !0
}, gF = { name: "detailCellRenderer", optionalMethods: ["refresh"], cellRenderer: !0 };
function pF(e, t) {
  return e.getCompDetailsFromGridOptions(Qx, "agDragAndDropImage", t, !0);
}
function fF(e, t, i) {
  return e.getCompDetails(t, Jx, "agColumnHeader", i);
}
function mF(e, t, i) {
  return e.getCompDetails(t, eF, void 0, i);
}
function CF(e, t) {
  const i = t.columnGroup.getColGroupDef();
  return e.getCompDetails(i, iF, "agColumnGroupHeader", t);
}
function vF(e, t, i) {
  return e.getCompDetails(t, tF, void 0, i);
}
function wF(e, t) {
  return e.getCompDetailsFromGridOptions(dF, void 0, t, !0);
}
function SF(e, t) {
  return e.getCompDetailsFromGridOptions(uF, "agLoadingCellRenderer", t, !0);
}
function yF(e, t) {
  return e.getCompDetailsFromGridOptions(hF, "agGroupRowRenderer", t, !0);
}
function bF(e, t) {
  return e.getCompDetailsFromGridOptions(gF, "agDetailCellRenderer", t, !0);
}
function Pu(e, t, i) {
  return e.getCompDetails(t, sF, void 0, i);
}
function Eu(e, t, i) {
  return e.getCompDetails(t, oF, "agSkeletonCellRenderer", i, !0);
}
function Of(e, t, i) {
  return e.getCompDetails(t, nF, "agCellEditor", i, !0);
}
function RF(e, t, i, s) {
  const o = t.filter;
  return kf(o) && (t = {
    filter: o.component,
    filterParams: t.filterParams
  }), e.getCompDetails(t, gc, s, i, !0);
}
function xF(e, t, i) {
  return e.getCompDetails(t, Zx, "agDateInput", i, !0);
}
function FF(e, t) {
  return e.getCompDetailsFromGridOptions(rF, "agLoadingOverlay", t, !0);
}
function PF(e, t) {
  return e.getCompDetailsFromGridOptions(aF, "agNoRowsOverlay", t, !0);
}
function EF(e, t) {
  return e.getCompDetails(t.colDef, lF, "agTooltipComponent", t, !0);
}
function DF(e, t, i, s) {
  return e.getCompDetails(t, cF, s, i);
}
function Vf(e, t) {
  return Lf(e, t, gc);
}
function jr(e, t, i) {
  return e.mergeParams(t, gc, i);
}
function bo(e) {
  const t = e;
  return t != null && t.getFrameworkComponentInstance != null ? t.getFrameworkComponentInstance() : e;
}
var Gf = /* @__PURE__ */ new Set(), Yn = {}, Ii = {}, fn, Hf = !1, Bf = !1, TF = !1;
function MF(e) {
  const [t, i] = e.version.split(".") || [], [s, o] = fn.split(".") || [];
  return t === s && i === o;
}
function AF(e) {
  fn || (fn = e.version);
  const t = (i) => `You are using incompatible versions of AG Grid modules. Major and minor versions should always match across modules. ${i} Please update all modules to the same version.`;
  if (e.version ? MF(e) || ds(
    t(
      `'${e.moduleName}' is version ${e.version} but the other modules are version ${fn}.`
    )
  ) : ds(t(`'${e.moduleName}' is incompatible.`)), e.validate) {
    const i = e.validate();
    i.isValid || ds(`${i.message}`);
  }
}
function Ro(e, t, i = !1) {
  i || (Hf = !0), AF(e);
  const s = e.rowModels ?? ["all"];
  Gf.add(e);
  let o;
  t !== void 0 ? (Bf = !0, Ii[t] === void 0 && (Ii[t] = {}), o = Ii[t]) : o = Yn, s.forEach((n) => {
    o[n] === void 0 && (o[n] = {}), o[n][e.moduleName] = e;
  }), e.dependsOn && e.dependsOn.forEach((n) => Ro(n, t, i));
}
function IF(e) {
  delete Ii[e];
}
function Qa(e, t, i) {
  const s = (o) => !!Yn[o]?.[e] || !!Ii[t]?.[o]?.[e];
  return s(i) || s("all");
}
function pc() {
  return Bf;
}
function kF(e, t) {
  const i = Ii[e] ?? {};
  return [
    ...Object.values(Yn.all ?? {}),
    ...Object.values(i.all ?? {}),
    ...Object.values(Yn[t] ?? {}),
    ...Object.values(i[t] ?? {})
  ];
}
function LF() {
  return new Set(Gf);
}
function OF(e, t) {
  const i = Ii[e] ?? {};
  return [...Object.values(i.all ?? {}), ...Object.values(i[t] ?? {})];
}
function VF() {
  return Hf;
}
function GF() {
  return TF;
}
var HF = class {
  /**
   * @deprecated v33 Use `registerModules([module])` instead.
   */
  static register(e) {
    Ro(e, void 0);
  }
  /**
   * Globally register the given modules for all grids.
   * @param modules - modules to register
   */
  static registerModules(e) {
    e.forEach((t) => Ro(t, void 0));
  }
}, BF = class {
  constructor(e) {
    this.beans = {}, this.createdBeans = [], this.destroyed = !1, !(!e || !e.beanClasses) && (this.beanDestroyComparator = e.beanDestroyComparator, this.init(e));
  }
  init(e) {
    for (const t of Object.keys(e.providedBeanInstances))
      this.beans[t] = e.providedBeanInstances[t];
    e.beanClasses.forEach((t) => {
      const i = new t();
      i.beanName ? this.beans[i.beanName] = i : console.error(`Bean ${t.name} is missing beanName`), this.createdBeans.push(i);
    }), e.derivedBeans?.forEach((t) => {
      const { beanName: i, bean: s } = t(this);
      this.beans[i] = s, this.createdBeans.push(s);
    }), e.beanInitComparator && this.createdBeans.sort(e.beanInitComparator), this.initBeans(this.createdBeans);
  }
  getBeanInstances() {
    return Object.values(this.beans);
  }
  createBean(e, t) {
    return this.initBeans([e], t), e;
  }
  initBeans(e, t) {
    e.forEach((i) => {
      i.preWireBeans?.(this.beans), i.wireBeans?.(this.beans);
    }), e.forEach((i) => i.preConstruct?.()), t && e.forEach(t), e.forEach((i) => i.postConstruct?.());
  }
  getBeans() {
    return this.beans;
  }
  getBean(e) {
    return this.beans[e];
  }
  destroy() {
    if (this.destroyed)
      return;
    this.destroyed = !0;
    const e = this.getBeanInstances();
    this.beanDestroyComparator && e.sort(this.beanDestroyComparator), this.destroyBeans(e), this.beans = {}, this.createdBeans = [];
  }
  /**
   * Destroys a bean and returns undefined to support destruction and clean up in a single line.
   * this.dateComp = this.context.destroyBean(this.dateComp);
   */
  destroyBean(e) {
    e?.destroy?.();
  }
  /**
   * Destroys an array of beans and returns an empty array to support destruction and clean up in a single line.
   * this.dateComps = this.context.destroyBeans(this.dateComps);
   */
  destroyBeans(e) {
    if (e)
      for (let t = 0; t < e.length; t++)
        this.destroyBean(e[t]);
    return [];
  }
  isDestroyed() {
    return this.destroyed;
  }
};
function NF(e) {
  return typeof e == "object" && !!e.getComp;
}
var WF = class extends BF {
  init(e) {
    this.gridId = e.gridId, this.beans.context = this, this.destroyCallback = e.destroyCallback, super.init(e);
  }
  destroy() {
    super.destroy(), IF(this.gridId), this.destroyCallback?.();
  }
  getGridId() {
    return this.gridId;
  }
}, zF = class extends T {
  constructor() {
    super(...arguments), this.beanName = "editModelSvc", this.edits = /* @__PURE__ */ new Map(), this.cellValidations = new Nf(), this.rowValidations = new Wf(), this.suspendEdits = !1;
  }
  suspend(e) {
    this.suspendEdits = e;
  }
  removeEdits({ rowNode: e, column: t }) {
    if (!this.hasEdits({ rowNode: e }) || !e)
      return;
    const i = this.getEditRow(e);
    t ? i.delete(t) : i.clear(), i.size === 0 && this.edits.delete(e);
  }
  getEditRow(e, t = {}) {
    if (this.suspendEdits || this.edits.size === 0)
      return;
    const i = e && this.edits.get(e);
    if (i)
      return i;
    if (t.checkSiblings) {
      const s = e.pinnedSibling;
      if (s)
        return this.getEditRow(s);
    }
  }
  getEditRowDataValue(e, { checkSiblings: t } = {}) {
    if (this.edits.size === 0)
      return e.data;
    const i = this.getEditRow(e), s = e.pinnedSibling, o = t && s && this.getEditRow(s);
    if (!i && !o)
      return e.data;
    const n = Object.assign({}, e.data), r = (a, l) => a.forEach(({ pendingValue: c }, d) => {
      c !== yt && (l[d.getColId()] = c);
    });
    return i && r(i, n), o && r(o, n), n;
  }
  getEdit(e, t) {
    const i = this._getEdit(e);
    return t && i ? { ...i } : i;
  }
  _getEdit(e) {
    if (!this.suspendEdits && this.edits.size !== 0)
      return e.rowNode && e.column && this.getEditRow(e.rowNode)?.get(e.column);
  }
  getEditMap(e = !0) {
    if (this.suspendEdits || this.edits.size === 0)
      return /* @__PURE__ */ new Map();
    if (!e)
      return this.edits;
    const t = /* @__PURE__ */ new Map();
    return this.edits.forEach((i, s) => t.set(s, new Map(i))), t;
  }
  setEditMap(e) {
    this.edits.clear(), e.forEach((t, i) => {
      const s = /* @__PURE__ */ new Map();
      t.forEach(
        (o, n) => (
          // Ensure we copy the cell data to avoid reference issues
          s.set(n, { ...o })
        )
      ), this.edits.set(i, s);
    });
  }
  setEdit(e, t) {
    (this.edits.size === 0 || !this.edits.has(e.rowNode)) && this.edits.set(e.rowNode, /* @__PURE__ */ new Map());
    const i = { ...this._getEdit(e), ...t };
    return this.getEditRow(e.rowNode).set(e.column, i), i;
  }
  clearEditValue(e) {
    const { rowNode: t, column: i } = e;
    if (t)
      if (i) {
        const s = this._getEdit(e);
        s && (s.editorValue = void 0, s.pendingValue = s.sourceValue, s.state = "changed");
      } else
        this.getEditRow(t)?.forEach((s) => {
          s.editorValue = void 0, s.pendingValue = s.sourceValue, s.state = "changed";
        });
  }
  getState(e) {
    if (!this.suspendEdits)
      return this.getEdit(e)?.state;
  }
  getEditPositions(e) {
    if (this.suspendEdits || (e ?? this.edits).size === 0)
      return [];
    const t = [];
    return (e ?? this.edits).forEach((i, s) => {
      for (const o of i.keys())
        t.push({
          rowNode: s,
          column: o,
          ...i.get(o)
        });
    }), t;
  }
  hasRowEdits(e, t) {
    return this.suspendEdits || this.edits.size === 0 ? !1 : !!this.getEditRow(e, t);
  }
  hasEdits(e = {}, t = {}) {
    if (this.suspendEdits || this.edits.size === 0)
      return !1;
    const { rowNode: i, column: s } = e, { withOpenEditor: o } = t;
    if (i) {
      const n = this.getEditRow(i, t);
      return n ? s ? o ? this.getEdit(e)?.state === "editing" : n.has(s) ?? !1 : n.size !== 0 ? o ? Array.from(n.values()).some(({ state: r }) => r === "editing") : !0 : !1 : !1;
    }
    return o ? this.getEditPositions().some(({ state: n }) => n === "editing") : this.edits.size > 0;
  }
  start(e) {
    const t = this.getEditRow(e.rowNode) ?? /* @__PURE__ */ new Map(), { rowNode: i, column: s } = e;
    s && !t.has(s) && t.set(s, {
      editorValue: void 0,
      pendingValue: yt,
      sourceValue: this.beans.valueSvc.getValue(s, i, !0, "api"),
      state: "editing"
    }), this.edits.set(i, t);
  }
  stop(e) {
    this.hasEdits(e) && (e ? this.removeEdits(e) : this.clear());
  }
  clear() {
    for (const e of this.edits.values())
      e.clear();
    this.edits.clear();
  }
  getCellValidationModel() {
    return this.cellValidations;
  }
  getRowValidationModel() {
    return this.rowValidations;
  }
  setCellValidationModel(e) {
    this.cellValidations = e;
  }
  setRowValidationModel(e) {
    this.rowValidations = e;
  }
  destroy() {
    super.destroy(), this.clear();
  }
}, Nf = class {
  constructor() {
    this.cellValidations = /* @__PURE__ */ new Map();
  }
  getCellValidation(e) {
    const { rowNode: t, column: i } = e || {};
    return this.cellValidations?.get(t)?.get(i);
  }
  hasCellValidation(e) {
    return !e || !e.rowNode || !e.column ? this.cellValidations.size > 0 : !!this.getCellValidation(e);
  }
  setCellValidation(e, t) {
    const { rowNode: i, column: s } = e;
    this.cellValidations.has(i) || this.cellValidations.set(i, /* @__PURE__ */ new Map()), this.cellValidations.get(i).set(s, t);
  }
  clearCellValidation(e) {
    const { rowNode: t, column: i } = e;
    this.cellValidations.get(t)?.delete(i);
  }
  setCellValidationMap(e) {
    this.cellValidations = e;
  }
  getCellValidationMap() {
    return this.cellValidations;
  }
  clearCellValidationMap() {
    this.cellValidations.clear();
  }
}, Wf = class {
  constructor() {
    this.rowValidations = /* @__PURE__ */ new Map();
  }
  getRowValidation(e) {
    const { rowNode: t } = e || {};
    return this.rowValidations.get(t);
  }
  hasRowValidation(e) {
    return !e || !e.rowNode ? this.rowValidations.size > 0 : !!this.getRowValidation(e);
  }
  setRowValidation({ rowNode: e }, t) {
    this.rowValidations.set(e, t);
  }
  clearRowValidation({ rowNode: e }) {
    this.rowValidations.delete(e);
  }
  setRowValidationMap(e) {
    this.rowValidations = e;
  }
  getRowValidationMap() {
    return this.rowValidations;
  }
  clearRowValidationMap() {
    this.rowValidations.clear();
  }
};
function _F(e) {
  const { rowIndex: t, rowPinned: i, column: s } = e;
  return `${t}.${i ?? "null"}.${s.getId()}`;
}
function zf(e, t) {
  const i = e.column === t.column, s = e.rowPinned === t.rowPinned, o = e.rowIndex === t.rowIndex;
  return i && s && o;
}
function UF(e, t) {
  switch (e.rowPinned) {
    case "top":
      if (t.rowPinned !== "top")
        return !0;
      break;
    case "bottom":
      if (t.rowPinned !== "bottom")
        return !1;
      break;
    default:
      if ($(t.rowPinned))
        return t.rowPinned !== "top";
      break;
  }
  return e.rowIndex < t.rowIndex;
}
function jF(e, t) {
  return !e && !t ? !0 : e && !t || !e && t ? !1 : e.rowIndex === t.rowIndex && e.rowPinned == t.rowPinned;
}
function $F(e) {
  let t = 0, i;
  const { pinnedRowModel: s, rowModel: o, pageBounds: n } = e;
  return s?.getPinnedTopRowCount() ? i = "top" : o.getRowCount() ? (i = null, t = n.getFirstRow()) : s?.getPinnedBottomRowCount() && (i = "bottom"), i === void 0 ? null : { rowIndex: t, rowPinned: i };
}
function KF(e) {
  let t, i = null;
  const { pinnedRowModel: s, pageBounds: o } = e, n = s?.getPinnedBottomRowCount(), r = s?.getPinnedTopRowCount();
  return n ? (i = "bottom", t = n - 1) : e.rowModel.getRowCount() ? (i = null, t = o.getLastRow()) : r && (i = "top", t = r - 1), t === void 0 ? null : { rowIndex: t, rowPinned: i };
}
function Zt(e, t) {
  switch (t.rowPinned) {
    case "top":
      return e.pinnedRowModel?.getPinnedTopRow(t.rowIndex);
    case "bottom":
      return e.pinnedRowModel?.getPinnedBottomRow(t.rowIndex);
    default:
      return e.rowModel.getRow(t.rowIndex);
  }
}
function qs(e, t) {
  const i = e.spannedRowRenderer?.getCellByPosition(t);
  if (i)
    return i;
  const s = e.rowRenderer.getRowByPosition(t);
  return s ? s.getCellCtrl(t.column) : null;
}
function YF(e, t, i) {
  const { rowModel: s, pinnedRowModel: o } = e;
  let n;
  return n ?? (n = s?.getRowNode(t)), i ? n ?? (n = o?.getPinnedRowById(t, i)) : (n ?? (n = o?.getPinnedRowById(t, "top")), n ?? (n = o?.getPinnedRowById(t, "bottom"))), n;
}
function qn(e, t) {
  const { rowIndex: i, rowPinned: s } = t, { pageBounds: o, pinnedRowModel: n, rowModel: r } = e;
  if (i === 0)
    return s === "top" ? null : s === "bottom" && r.isRowsToRender() ? { rowIndex: o.getLastRow(), rowPinned: null } : n?.isRowsToRender("top") ? { rowIndex: n.getPinnedTopRowCount() - 1, rowPinned: "top" } : null;
  const a = s ? void 0 : r.getRow(i);
  return _f(e, a, !0) ?? { rowIndex: i - 1, rowPinned: s };
}
function Du(e, t) {
  const { rowIndex: i, rowPinned: s } = t, { pageBounds: o, pinnedRowModel: n, rowModel: r } = e;
  if (qF(e, t))
    return s === "bottom" ? null : s === "top" && r.isRowsToRender() ? { rowIndex: o.getFirstRow(), rowPinned: null } : n?.isRowsToRender("bottom") ? { rowIndex: 0, rowPinned: "bottom" } : null;
  const a = s ? void 0 : r.getRow(i);
  return _f(e, a) ?? { rowIndex: i + 1, rowPinned: s };
}
function _f(e, t, i = !1) {
  const { gos: s, rowRenderer: o } = e;
  if (!t?.sticky || !lf(s))
    return;
  const n = o.getStickyTopRowCtrls(), r = o.getStickyBottomRowCtrls(), a = !r.some((u) => u.rowNode.rowIndex === t.rowIndex), l = a ? n : r, c = (i ? -1 : 1) * (a ? -1 : 1);
  let d;
  for (let u = 0; u < l.length; u++)
    if (l[u].rowNode.rowIndex === t.rowIndex) {
      d = l[u + c];
      break;
    }
  return d ? { rowIndex: d.rowNode.rowIndex, rowPinned: null } : void 0;
}
function qF(e, t) {
  const { rowPinned: i, rowIndex: s } = t, { pinnedRowModel: o, pageBounds: n } = e;
  return i === "top" ? (o?.getPinnedTopRowCount() ?? 0) - 1 <= s : i === "bottom" ? (o?.getPinnedBottomRowCount() ?? 0) - 1 <= s : n.getLastRow() <= s;
}
function fc(e, t = {}) {
  const { rowIndex: i, rowId: s, rowCtrl: o, rowPinned: n } = t;
  if (o)
    return o;
  const { rowModel: r, rowRenderer: a } = e;
  let { rowNode: l } = t;
  return l || (s ? l = YF(e, s, n) : i != null && (l = r.getRow(i))), a.getRowCtrls(l ? [l] : [])?.[0];
}
function me(e, t = {}) {
  const { cellCtrl: i, colId: s, columnId: o, column: n } = t;
  if (i)
    return i;
  const r = e.colModel.getCol(s ?? o ?? Ja(n)), a = t.rowCtrl ?? fc(e, t), l = a?.getCellCtrl(r) ?? void 0;
  if (l)
    return l;
  const c = t.rowNode ?? a?.rowNode;
  if (c)
    return e.rowRenderer.getCellCtrls([c], [r])?.[0];
}
function Tu(e) {
  const { editSvc: t } = e;
  t?.isBatchEditing() ? fs(e) : t?.stopEditing(void 0, { source: "api" });
}
function XF(e, t, i) {
  const { gos: s, popupSvc: o } = t;
  if (!s.get("stopEditingWhenCellsLoseFocus"))
    return;
  const n = (r) => {
    const a = r.relatedTarget;
    if (ja(a) === null) {
      Tu(t);
      return;
    }
    let l = (
      // see if click came from inside the viewports
      i.some((c) => c.contains(a)) && // and also that it's not from a detail grid
      tm(s, a)
    );
    l || (l = !!o && (o.getActivePopups().some((c) => c.contains(a)) || o.isElementWithinCustomPopup(a))), l || Tu(t);
  };
  i.forEach((r) => e.addManagedElementListeners(r, { focusout: n }));
}
function Ja(e) {
  if (e)
    return typeof e == "string" ? e : e.getColId();
}
var yt = Symbol("unedited");
function Uf(e, t = {}) {
  const i = [], s = e.rowRenderer.getCellCtrls(t.rowNodes, t.columns);
  for (const o of s) {
    const n = o.comp?.getCellEditor();
    n && i.push({
      ctrl: o,
      editor: bo(n)
    });
  }
  return i;
}
var ZF = (e, t = {}) => Uf(e, t).map((i) => i.editor);
function QF(e, t, i, s, o, n) {
  t.length === 0 && i?.rowNode && i?.column && Es(e, i, { key: s, event: o, cellStartedEdit: n });
  const { valueSvc: r, editSvc: a, editModelSvc: l } = e, { rowNode: c, column: d } = i ?? {};
  for (const u of t) {
    const { rowNode: h, column: g } = u, p = me(e, u);
    if (!p) {
      if (h && g) {
        const m = r.getValue(g, h, void 0, "api"), w = (i?.rowNode === h && i?.column === g && s || void 0) ?? a?.getCellDataValue(u, !1) ?? r.getValueForDisplay(g, h)?.value ?? m ?? yt;
        l?.setEdit(u, {
          pendingValue: w,
          sourceValue: m,
          state: "editing"
        });
      }
      continue;
    }
    const f = n && c === p.rowNode && p.column === d;
    Es(
      e,
      { rowNode: c, column: p.column },
      {
        key: f ? s : null,
        event: f ? o : null,
        cellStartedEdit: f && n
      }
    );
  }
}
function li({
  pendingValue: e,
  sourceValue: t
}) {
  return e === yt && (e = t), e !== t;
}
function Es(e, t, i) {
  const { key: s, event: o, cellStartedEdit: n, silent: r } = i ?? {}, a = me(e, t), l = a?.comp?.getCellEditor(), c = $f(e, t, s, n && !r), d = e.editModelSvc?.getEdit(t);
  let u = c.value;
  if (u === void 0 && (u = d?.sourceValue), e.editModelSvc?.setEdit(t, {
    editorValue: u,
    state: "editing"
  }), l) {
    l.refresh?.(c);
    return;
  }
  const h = t.column.getColDef(), g = Of(e.userCompFactory, h, c), p = g?.popupFromSelector != null ? g.popupFromSelector : !!h.cellEditorPopup, f = g?.popupPositionFromSelector != null ? g.popupPositionFromSelector : h.cellEditorPopupPosition;
  Kf(g.params, o), a && (a.editCompDetails = g, a.comp?.setEditDetails(g, p, f, e.gos.get("reactiveCustomComponents")), a?.rowCtrl?.refreshRow({ suppressFlash: !0 }), r || e.editSvc?.dispatchCellEvent(t, o, "cellEditingStarted"));
}
function jf(e) {
  const t = { editorValueExists: !1 };
  return (e.getValidationErrors?.()?.length ?? 0) > 0 ? t : {
    editorValue: e.getValue(),
    editorValueExists: !0
  };
}
function $f(e, t, i, s) {
  const { valueSvc: o, gos: n, editSvc: r } = e, a = me(e, t), l = t.rowNode?.rowIndex ?? void 0, c = r?.isBatchEditing(), d = e.colModel.getCol(t.column.getId()), { rowNode: u, column: h } = t, g = a.comp?.getCellEditor(), p = r?.getCellDataValue(t, !1) ?? (g ? jf(g)?.editorValue : void 0), f = p === yt ? o.getValueForDisplay(d, u)?.value : p;
  return Z(n, {
    value: f,
    eventKey: i ?? null,
    column: h,
    colDef: h.getColDef(),
    rowIndex: l,
    node: u,
    data: u.data,
    cellStartedEdit: s ?? !1,
    onKeyDown: a?.onKeyDown.bind(a),
    stopEditing: (m) => {
      r.stopEditing(t, { source: c ? "ui" : "api", suppressNavigateAfterEdit: m }), Xn(e, t);
    },
    eGridCell: a?.eGui,
    parseValue: (m) => o.parseValue(d, u, m, a?.value),
    formatValue: a?.formatValue.bind(a),
    validate: () => {
      r?.validateEdit();
    }
  });
}
function el(e, t) {
  const { editModelSvc: i } = e;
  i?.getEditMap().forEach((s, o) => {
    s.forEach((n, r) => {
      !t && (n.state === "editing" || n.pendingValue === yt) || !li(n) && (n.state !== "editing" || t) && i?.removeEdits({ rowNode: o, column: r });
    });
  });
}
function JF(e, t) {
  const i = t.comp?.getCellEditor();
  if (!i?.refresh)
    return;
  const { eventKey: s, cellStartedEdit: o } = t.editCompDetails.params, { column: n } = t, r = $f(e, t, s, o), a = n.getColDef(), l = Of(e.userCompFactory, a, r);
  i.refresh(Kf(l.params, s));
}
function Kf(e, t) {
  return t instanceof KeyboardEvent && e.column.getColDef().cellEditor === "agNumberCellEditor" ? e.suppressPreventDefault = ["-", "+", ".", "e"].includes(t?.key ?? "") || e.suppressPreventDefault : t?.preventDefault?.(), e;
}
function xi(e, t) {
  e.editModelSvc?.getEditPositions().forEach((i) => {
    const s = me(e, i);
    if (!s)
      return;
    const o = s.comp?.getCellEditor();
    if (!o)
      return;
    const { editorValue: n, editorValueExists: r } = jf(o);
    mn(e, i, t, n, void 0, !r);
  });
}
function mn(e, t, i, s, o, n) {
  const { editModelSvc: r, valueSvc: a } = e;
  if (!r)
    return;
  const { rowNode: l, column: c } = t;
  if (!(l && c))
    return;
  const u = !!me(e, t)?.comp?.getCellEditor();
  let h = r.getEdit(t, !0);
  h?.sourceValue || (h = r.setEdit(t, {
    sourceValue: a.getValue(c, l, void 0, "api"),
    pendingValue: yt,
    state: u ? "editing" : "changed"
  })), r.setEdit(t, {
    editorValue: n ? h.sourceValue : s,
    state: u ? "editing" : "changed"
  }), i && eP(e, t);
}
function eP(e, t) {
  const { editModelSvc: i } = e, s = i?.getEdit(t, !0);
  i?.setEdit(t, {
    pendingValue: s?.editorValue
  });
}
function fs(e, t, i) {
  t || (t = e.editModelSvc?.getEditPositions()), t.forEach((s) => Xn(e, s, i));
}
function Xn(e, t, i) {
  const { editSvc: s, editModelSvc: o } = e, { rowNode: n, column: r } = t, a = me(e, t);
  if (!a) {
    o?.hasEdits(t) && n && r && o?.setEdit(t, { state: "changed" });
    return;
  }
  const { comp: l } = a;
  if (l && !l.getCellEditor()) {
    a?.refreshCell();
    return;
  }
  const c = l?.getCellEditor()?.getValidationErrors?.(), d = o?.getCellValidationModel();
  c?.length ? d?.setCellValidation(t, { errorMessages: c }) : d?.clearCellValidation(t), o?.getEdit(t) && o?.setEdit(t, { state: "changed" }), l?.setEditDetails(), l?.refreshEditStyles(!1, !1), a?.refreshCell({ force: !0, suppressFlash: !0 });
  const u = o?.getEdit(t);
  u?.state === "changed" && !i?.silent && s?.dispatchCellEvent(t, i?.event, "cellEditingStopped", {
    valueChanged: li(u),
    newValue: u?.pendingValue,
    oldValue: u?.sourceValue
  });
}
function Ni(e) {
  const t = Uf(e), i = new Nf(), { ariaAnnounce: s, localeSvc: o, editModelSvc: n, gos: r } = e, a = r.get("editType") === "fullRow", c = Mp(o)("ariaValidationErrorPrefix", "Cell Editor Validation");
  for (const u of t) {
    const { ctrl: h, editor: g } = u, { rowNode: p, column: f } = h, m = g.getValidationErrors?.() ?? [], C = g.getValidationElement?.(!1) || !g.isPopup?.() && h.eGui;
    if (C) {
      const v = m != null && m.length > 0, w = v ? m.join(". ") : "";
      DR(C, v), v && s.announceValue(`${c} ${m}`, "editorValidation"), C instanceof HTMLInputElement ? C.setCustomValidity(w) : C.classList.toggle("invalid", v);
    }
    m?.length > 0 && i.setCellValidation(
      {
        rowNode: p,
        column: f
      },
      {
        errorMessages: m
      }
    );
  }
  xi(e, !1), n?.setCellValidationModel(i);
  const d = /* @__PURE__ */ new Set();
  for (const { ctrl: u } of t)
    d.add(u.rowCtrl);
  if (a) {
    const u = tP(e);
    n?.setRowValidationModel(u);
  }
  for (const u of d.values()) {
    u.rowEditStyleFeature?.applyRowStyles();
    for (const h of u.getAllCellCtrls())
      h.tooltipFeature?.refreshTooltip(!0), h.editorTooltipFeature?.refreshTooltip(!0), h.editStyleFeature?.applyCellStyles?.();
  }
}
var tP = (e) => {
  const t = new Wf(), i = e.gos.get("getFullRowEditValidationErrors"), s = e.editModelSvc?.getEditMap();
  if (!s)
    return t;
  for (const o of s.keys()) {
    const n = s.get(o);
    if (!n)
      continue;
    const r = [], { rowIndex: a, rowPinned: l } = o;
    for (const d of n.keys()) {
      const u = n.get(d);
      if (!u)
        continue;
      const { editorValue: h, pendingValue: g, sourceValue: p } = u, f = h ?? (g === yt ? void 0 : g) ?? p;
      r.push({
        column: d,
        colId: d.getColId(),
        rowIndex: a,
        rowPinned: l,
        oldValue: p,
        newValue: f
      });
    }
    const c = i?.({ editorsState: r }) ?? [];
    c.length > 0 && t.setRowValidation(
      {
        rowNode: o
      },
      { errorMessages: c }
    );
  }
  return t;
};
function iP(e) {
  Ni(e);
  const t = e.editModelSvc?.getCellValidationModel().getCellValidationMap();
  if (!t)
    return null;
  const i = [];
  return t.forEach((s, o) => {
    s.forEach(({ errorMessages: n }, r) => {
      i.push({
        column: r,
        rowIndex: o.rowIndex,
        rowPinned: o.rowPinned,
        messages: n ?? null
      });
    });
  }), i;
}
var sP = "ag-column-first", oP = "ag-column-last";
function Yf(e, t, i, s) {
  return Ce(e) ? [] : rP(e.headerClass, e, t, i, s);
}
function qf(e, t, i) {
  e.toggleCss(sP, i.isColAtEdge(t, "first")), e.toggleCss(oP, i.isColAtEdge(t, "last"));
}
function nP(e, t, i, s) {
  return Z(t, {
    // bad naming, as colDef here can be a group or a column,
    // however most people won't appreciate the difference,
    // so keeping it as colDef to avoid confusion.
    colDef: e,
    column: i,
    columnGroup: s
  });
}
function rP(e, t, i, s, o) {
  if (Ce(e))
    return [];
  let n;
  if (typeof e == "function") {
    const r = nP(t, i, s, o);
    n = e(r);
  } else
    n = e;
  return typeof n == "string" ? [n] : Array.isArray(n) ? [...n] : [];
}
function Ho(e) {
  return !!(e.rowPinned && e.pinnedSibling);
}
function gt(e, t, i, s) {
  const o = t === "top";
  if (!i)
    return gt(
      e,
      t,
      o ? e.getPinnedTopRow(0) : e.getPinnedBottomRow(0),
      s
    );
  if (!s) {
    const l = o ? e.getPinnedTopRowCount() : e.getPinnedBottomRowCount();
    return gt(
      e,
      t,
      i,
      o ? e.getPinnedTopRow(l - 1) : e.getPinnedBottomRow(l - 1)
    );
  }
  let n = !1, r = !1;
  const a = [];
  return e.forEachPinnedRow(t, (l) => {
    if (l === i && !n) {
      n = !0, a.push(l);
      return;
    }
    if (n && l === s) {
      r = !0, a.push(l);
      return;
    }
    n && !r && a.push(l);
  }), a;
}
var E = {
  BACKSPACE: "Backspace",
  TAB: "Tab",
  ENTER: "Enter",
  ESCAPE: "Escape",
  SPACE: " ",
  LEFT: "ArrowLeft",
  UP: "ArrowUp",
  RIGHT: "ArrowRight",
  DOWN: "ArrowDown",
  DELETE: "Delete",
  F2: "F2",
  PAGE_UP: "PageUp",
  PAGE_DOWN: "PageDown",
  PAGE_HOME: "Home",
  PAGE_END: "End",
  // these should be used with `event.code` instead of `event.key`
  // as `event.key` changes when non-latin keyboards are used
  A: "KeyA",
  C: "KeyC",
  D: "KeyD",
  V: "KeyV",
  X: "KeyX",
  Y: "KeyY",
  Z: "KeyZ"
}, tl = !1, Zn = 0;
function aP(e) {
  Zn > 0 || (e.addEventListener("keydown", Qn), e.addEventListener("mousedown", Qn));
}
function lP(e) {
  Zn > 0 || (e.removeEventListener("keydown", Qn), e.removeEventListener("mousedown", Qn));
}
function Qn(e) {
  const t = tl, i = e.type === "keydown";
  i && (e.ctrlKey || e.metaKey || e.altKey) || t !== i && (tl = i);
}
function cP(e) {
  const t = He(e);
  return aP(t), Zn++, () => {
    Zn--, lP(t);
  };
}
function dP() {
  return tl;
}
function uP(e, t, i) {
  t.addManagedElementListeners(i, {
    keydown: (s) => {
      if (!s.defaultPrevented && s.key === E.TAB) {
        const o = s.shiftKey;
        qi(e, i, !1, o) || Ds(e, o) && s.preventDefault();
      }
    }
  });
}
function ms(e, t, i = !1) {
  const s = zR;
  let o = Up;
  t && (o += ", " + t), i && (o += ', [tabindex="-1"]');
  const n = Array.prototype.slice.apply(e.querySelectorAll(s)).filter((l) => Ht(l)), r = Array.prototype.slice.apply(e.querySelectorAll(o));
  return r.length ? ((l, c) => l.filter((d) => c.indexOf(d) === -1))(n, r) : n;
}
function Wi(e, t = !1, i = !1, s = !1) {
  const o = ms(
    e,
    s ? ".ag-tab-guard" : null,
    i
  ), n = t ? ue(o) : o[0];
  return n ? (n.focus({ preventScroll: !0 }), !0) : !1;
}
function qi(e, t, i, s) {
  const o = ms(t, i ? ':not([tabindex="-1"])' : null), n = Fe(e);
  let r;
  i ? r = o.findIndex((l) => l.contains(n)) : r = o.indexOf(n);
  const a = r + (s ? -1 : 1);
  return a < 0 || a >= o.length ? null : o[a];
}
function Xf(e, t = 5) {
  let i = 0;
  for (; e && ja(e) === null && ++i <= t; )
    e = e.parentElement;
  return ja(e) === null ? null : e;
}
function hP(e, t) {
  return e.ctrlsSvc.get("gridCtrl").focusInnerElement(t);
}
function ki(e) {
  return e.gos.get("suppressHeaderFocus") || !!e.overlays?.isExclusive();
}
function hr(e) {
  return e.gos.get("suppressCellFocus") || !!e.overlays?.isExclusive();
}
function Ds(e, t, i = !1) {
  const s = e.ctrlsSvc.get("gridCtrl");
  return !i && s.focusNextInnerContainer(t) ? !0 : ((i || !t && !s.isDetailGrid()) && s.forceFocusOutOfContainer(t), !1);
}
function gP(e, t, i, { rowNode: s, column: o }, n) {
  return Z(e.gos, {
    type: i,
    node: s,
    data: s.data,
    value: n,
    column: o,
    colDef: o.getColDef(),
    rowPinned: s.rowPinned,
    event: t,
    rowIndex: s.rowIndex
  });
}
function pP(e, t = !1) {
  return e === E.DELETE ? !0 : !t && e === E.BACKSPACE ? Wp() : !1;
}
var fP = class extends T {
  constructor(e, t, i, s) {
    super(), this.cellCtrl = e, this.rowNode = i, this.rowCtrl = s, this.beans = t;
  }
  init() {
    this.eGui = this.cellCtrl.eGui;
  }
  onKeyDown(e) {
    const t = e.key;
    switch (t) {
      case E.ENTER:
        this.onEnterKeyDown(e);
        break;
      case E.F2:
        this.onF2KeyDown(e);
        break;
      case E.ESCAPE:
        this.onEscapeKeyDown(e);
        break;
      case E.TAB:
        this.onTabKeyDown(e);
        break;
      case E.BACKSPACE:
      case E.DELETE:
        this.onBackspaceOrDeleteKeyDown(t, e);
        break;
      case E.DOWN:
      case E.UP:
      case E.RIGHT:
      case E.LEFT:
        this.onNavigationKeyDown(e, t);
        break;
    }
  }
  onNavigationKeyDown(e, t) {
    const { cellCtrl: i, beans: s } = this;
    if (!s.editSvc?.isEditing(i, { withOpenEditor: !0 })) {
      if (e.shiftKey && i.isRangeSelectionEnabled())
        this.onShiftRangeSelect(e);
      else {
        const o = i.getFocusedCellPosition();
        s.navigation?.navigateToNextCell(e, t, o, !0);
      }
      e.preventDefault();
    }
  }
  onShiftRangeSelect(e) {
    const { rangeSvc: t, navigation: i } = this.beans;
    if (!t)
      return;
    const s = t.extendLatestRangeInDirection(e);
    s && (e.key === E.LEFT || e.key === E.RIGHT ? i?.ensureColumnVisible(s.column) : i?.ensureRowVisible(s.rowIndex));
  }
  onTabKeyDown(e) {
    this.beans.navigation?.onTabKeyDown(this.cellCtrl, e);
  }
  onBackspaceOrDeleteKeyDown(e, t) {
    const { cellCtrl: i, beans: s, rowNode: o } = this, { gos: n, rangeSvc: r, eventSvc: a, editSvc: l } = s;
    if (a.dispatchEvent({ type: "keyShortcutChangedCellStart" }), pP(e, n.get("enableCellEditingOnBackspace")) && !l?.isEditing(i, { withOpenEditor: !0 })) {
      if (r && hi(n))
        r.clearCellRangeCellValues({ dispatchWrapperEvents: !0, wrapperEventSource: "deleteKey" });
      else if (i.isCellEditable()) {
        const { column: c } = i, d = this.beans.valueSvc.getDeleteValue(c, o);
        o.setDataValue(c, d, "cellClear");
      }
    } else l?.isEditing(i, { withOpenEditor: !0 }) || s.editSvc?.startEditing(i, { startedEdit: !0, event: t });
    a.dispatchEvent({ type: "keyShortcutChangedCellEnd" });
  }
  onEnterKeyDown(e) {
    const { cellCtrl: t, beans: i } = this, { editSvc: s, navigation: o } = i, n = s?.isEditing(t, { withOpenEditor: !0 }), r = t.rowNode, a = s?.isRowEditing(r, { withOpenEditor: !0 }), l = (c) => {
      s?.startEditing(c, {
        startedEdit: !0,
        event: e,
        source: "edit"
      }) && e.preventDefault();
    };
    if (n || a) {
      if (this.isCtrlEnter(e)) {
        s?.applyBulkEdit(t, i?.rangeSvc?.getCellRanges() || []);
        return;
      }
      if (Ni(i), s?.checkNavWithValidation(void 0, e) === "block-stop")
        return;
      s?.isEditing(t, { withOpenEditor: !0 }) ? s?.stopEditing(t, {
        event: e,
        source: "edit"
      }) : a && !t.isCellEditable() ? s?.stopEditing({ rowNode: r }, { event: e, source: "edit" }) : l(t);
    } else if (i.gos.get("enterNavigatesVertically")) {
      const c = e.shiftKey ? E.UP : E.DOWN;
      o?.navigateToNextCell(null, c, t.cellPosition, !1);
    } else {
      if (s?.hasValidationErrors())
        return;
      s?.hasValidationErrors(t) && s.revertSingleCellEdit(t, !0), l(t);
    }
  }
  isCtrlEnter(e) {
    return (e.ctrlKey || e.metaKey) && e.key === E.ENTER;
  }
  onF2KeyDown(e) {
    const {
      cellCtrl: t,
      beans: { editSvc: i }
    } = this;
    i?.isEditing() && (Ni(this.beans), i?.checkNavWithValidation(void 0, e) === "block-stop") || i?.startEditing(t, { startedEdit: !0, event: e });
  }
  onEscapeKeyDown(e) {
    const {
      cellCtrl: t,
      beans: { editSvc: i }
    } = this;
    i?.checkNavWithValidation(t, e) === "block-stop" && i.revertSingleCellEdit(t), i?.stopEditing(t, {
      event: e,
      cancel: !0
    });
  }
  processCharacter(e) {
    const i = e.target !== this.eGui, {
      beans: { editSvc: s },
      cellCtrl: o
    } = this;
    if (i || s?.isEditing(o, { withOpenEditor: !0 }))
      return;
    if (e.key === E.SPACE)
      this.onSpaceKeyDown(e);
    else if (s?.isCellEditable(o, "ui")) {
      if (s?.hasValidationErrors() && !s?.hasValidationErrors(o))
        return;
      s?.startEditing(o, { startedEdit: !0, event: e, source: "api" }), !o.editCompDetails?.params?.suppressPreventDefault && e.preventDefault();
    }
  }
  onSpaceKeyDown(e) {
    const { gos: t, editSvc: i } = this.beans, { rowNode: s } = this.cellCtrl;
    !i?.isEditing(this.cellCtrl, { withOpenEditor: !0 }) && Mi(t) && this.beans.selectionSvc?.handleSelectionEvent(e, s, "spaceKey"), e.preventDefault();
  }
};
function Zf(e, t, i) {
  if (i === 0)
    return !1;
  const s = Math.abs(e.clientX - t.clientX), o = Math.abs(e.clientY - t.clientY);
  return Math.max(s, o) <= i;
}
function Mu({ gos: e }, t) {
  return t.button === 2 || t.ctrlKey && e.get("allowContextMenuWithControlKey");
}
var mP = class extends T {
  constructor(e, t, i) {
    super(), this.cellCtrl = e, this.column = i, this.beans = t;
  }
  onMouseEvent(e, t) {
    if (!jt(t))
      switch (e) {
        case "click":
          this.onCellClicked(t);
          break;
        case "mousedown":
        case "touchstart":
          this.onMouseDown(t);
          break;
        case "dblclick":
          this.onCellDoubleClicked(t);
          break;
        case "mouseout":
          this.onMouseOut(t);
          break;
        case "mouseover":
          this.onMouseOver(t);
          break;
      }
  }
  onCellClicked(e) {
    if (this.beans.touchSvc?.handleCellDoubleClick(this, e))
      return;
    const { eventSvc: t, rangeSvc: i, editSvc: s, editModelSvc: o, frameworkOverrides: n } = this.beans, r = e.ctrlKey || e.metaKey, { cellCtrl: a } = this, { column: l, cellPosition: c } = a;
    i && r && i.getCellRangeCount(c) > 1 && i.intersectLastRange(!0);
    const d = a.createEvent(e, "cellClicked");
    t.dispatchEvent(d);
    const u = l.getColDef();
    if (u.onCellClicked && window.setTimeout(() => {
      n.wrapOutgoing(() => {
        u.onCellClicked(d);
      });
    }, 0), o?.getState(a) !== "editing") {
      const h = s?.isEditing(), g = o?.getCellValidationModel().getCellValidationMap().size ?? 0, p = o?.getRowValidationModel().getRowValidationMap().size ?? 0;
      if (h && (g > 0 || p > 0))
        return;
      s?.shouldStartEditing(a, e) ? s?.startEditing(a, { event: e }) : s?.shouldStopEditing(a, e) && (this.beans.gos.get("editType") === "fullRow" ? s?.stopEditing(a, {
        event: e,
        source: "edit"
      }) : s?.stopEditing(void 0, {
        event: e,
        source: "edit"
      }));
    }
  }
  onCellDoubleClicked(e) {
    const { column: t, beans: i, cellCtrl: s } = this, { eventSvc: o, frameworkOverrides: n, editSvc: r, editModelSvc: a } = i, l = t.getColDef(), c = s.createEvent(e, "cellDoubleClicked");
    if (o.dispatchEvent(c), typeof l.onCellDoubleClicked == "function" && window.setTimeout(() => {
      n.wrapOutgoing(() => {
        l.onCellDoubleClicked(c);
      });
    }, 0), r?.shouldStartEditing(this.cellCtrl, e) && this.beans.editModelSvc?.getState(this.cellCtrl) !== "editing") {
      const d = r?.isEditing(), u = a?.getCellValidationModel().getCellValidationMap().size ?? 0, h = a?.getRowValidationModel().getRowValidationMap().size ?? 0;
      if (d && (u > 0 || h > 0))
        return;
      r?.startEditing(s, { event: e });
    }
  }
  onMouseDown(e) {
    const { ctrlKey: t, metaKey: i, shiftKey: s } = e, o = e.target, { cellCtrl: n, beans: r } = this, { eventSvc: a, rangeSvc: l, rowNumbersSvc: c, focusSvc: d, gos: u, editSvc: h } = r;
    if (this.isRightClickInExistingRange(e))
      return;
    const g = l && !l.isEmpty(), p = this.containsWidget(o), { cellPosition: f, column: m } = n, C = ai(m);
    if (c && C && !c.handleMouseDownOnCell(f, e)) {
      l && e.preventDefault(), e.stopImmediatePropagation();
      return;
    }
    if (!s || !g) {
      const v = h?.isEditing(n), y = u.get("enableCellTextSelection") && e.defaultPrevented, S = (Ui() || y) && !v && !oc(o) && !p;
      n.focusCell(S, e);
    }
    if (s && g && !d.isCellFocused(f)) {
      e.preventDefault();
      const v = d.getFocusedCell();
      if (v) {
        const { column: w, rowIndex: y, rowPinned: S } = v;
        h?.isEditing(v) && h?.stopEditing(v), d.setFocusedCell({
          column: w,
          rowIndex: y,
          rowPinned: S,
          forceBrowserFocus: !0,
          preventScrollOnBrowserFocus: !0,
          sourceEvent: e
        });
      }
    }
    if (!p) {
      if (l) {
        C && e.preventDefault();
        const v = Mu(this.beans, e) && C;
        if (s)
          l.extendLatestRangeToCell(f);
        else if (!v) {
          const w = t || i;
          l.setRangeToCell(f, w);
        }
      }
      a.dispatchEvent(this.cellCtrl.createEvent(e, "cellMouseDown"));
    }
  }
  isRightClickInExistingRange(e) {
    const { rangeSvc: t } = this.beans;
    if (t) {
      const i = t.isCellInAnyRange(this.cellCtrl.cellPosition), s = Mu(this.beans, e);
      if (i && s)
        return !0;
    }
    return !1;
  }
  containsWidget(e) {
    return Ti(e, "ag-selection-checkbox", 3) || Ti(e, "ag-drag-handle", 3);
  }
  onMouseOut(e) {
    if (this.mouseStayingInsideCell(e))
      return;
    const { eventSvc: t, colHover: i } = this.beans;
    t.dispatchEvent(this.cellCtrl.createEvent(e, "cellMouseOut")), i?.clearMouseOver();
  }
  onMouseOver(e) {
    if (this.mouseStayingInsideCell(e))
      return;
    const { eventSvc: t, colHover: i } = this.beans;
    t.dispatchEvent(this.cellCtrl.createEvent(e, "cellMouseOver")), i?.setMouseOver([this.column]);
  }
  mouseStayingInsideCell(e) {
    if (!e.target || !e.relatedTarget)
      return !1;
    const t = this.cellCtrl.eGui, i = t.contains(e.target), s = t.contains(e.relatedTarget);
    return i && s;
  }
}, CP = class extends T {
  constructor(e, t) {
    super(), this.cellCtrl = e, this.beans = t, this.column = e.column, this.rowNode = e.rowNode;
  }
  setupRowSpan() {
    this.rowSpan = this.column.getRowSpan(this.rowNode), this.addManagedListeners(this.beans.eventSvc, { newColumnsLoaded: () => this.onNewColumnsLoaded() });
  }
  init() {
    this.eSetLeft = this.cellCtrl.getRootElement(), this.eContent = this.cellCtrl.eGui;
    const e = this.cellCtrl.getCellSpan();
    if (e || (this.setupColSpan(), this.setupRowSpan()), this.onLeftChanged(), this.onWidthChanged(), e || this._legacyApplyRowSpan(), e) {
      const t = this.refreshSpanHeight.bind(this, e);
      t(), this.addManagedListeners(this.beans.eventSvc, {
        paginationChanged: t,
        recalculateRowBounds: t,
        pinnedHeightChanged: t
      });
    }
  }
  refreshSpanHeight(e) {
    const t = e.getCellHeight();
    t != null && (this.eContent.style.height = `${t}px`);
  }
  onNewColumnsLoaded() {
    const e = this.column.getRowSpan(this.rowNode);
    this.rowSpan !== e && (this.rowSpan = e, this._legacyApplyRowSpan(!0));
  }
  onDisplayColumnsChanged() {
    const e = this.getColSpanningList();
    Yi(this.colsSpanning, e) || (this.colsSpanning = e, this.onWidthChanged(), this.onLeftChanged());
  }
  setupColSpan() {
    this.column.getColDef().colSpan != null && (this.colsSpanning = this.getColSpanningList(), this.addManagedListeners(this.beans.eventSvc, {
      // because we are col spanning, a reorder of the cols can change what cols we are spanning over
      displayedColumnsChanged: this.onDisplayColumnsChanged.bind(this),
      // because we are spanning over multiple cols, we check for width any time any cols width changes.
      // this is expensive - really we should be explicitly checking only the cols we are spanning over
      // instead of every col, however it would be tricky code to track the cols we are spanning over, so
      // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.
      displayedColumnsWidthChanged: this.onWidthChanged.bind(this)
    }));
  }
  onWidthChanged() {
    if (!this.eContent)
      return;
    const e = this.getCellWidth();
    this.eContent.style.width = `${e}px`;
  }
  getCellWidth() {
    return this.colsSpanning ? this.colsSpanning.reduce((e, t) => e + t.getActualWidth(), 0) : this.column.getActualWidth();
  }
  getColSpanningList() {
    const { column: e, rowNode: t } = this, i = e.getColSpan(t), s = [];
    if (i === 1)
      s.push(e);
    else {
      let o = e;
      const n = e.getPinned();
      for (let r = 0; o && r < i && (s.push(o), o = this.beans.visibleCols.getColAfter(o), !(!o || Ce(o) || n !== o.getPinned())); r++)
        ;
    }
    return s;
  }
  onLeftChanged() {
    if (!this.eSetLeft)
      return;
    const e = this.modifyLeftForPrintLayout(this.getCellLeft());
    this.eSetLeft.style.left = e + "px";
  }
  getCellLeft() {
    let e;
    return this.beans.gos.get("enableRtl") && this.colsSpanning ? e = ue(this.colsSpanning) : e = this.column, e.getLeft();
  }
  modifyLeftForPrintLayout(e) {
    if (!this.cellCtrl.printLayout || this.column.getPinned() === "left")
      return e;
    const { visibleCols: t } = this.beans, i = t.getColsLeftWidth();
    if (this.column.getPinned() === "right") {
      const s = t.bodyWidth;
      return i + s + (e || 0);
    }
    return i + (e || 0);
  }
  _legacyApplyRowSpan(e) {
    if (this.rowSpan === 1 && !e)
      return;
    const i = Ai(this.beans) * this.rowSpan;
    this.eContent.style.height = `${i}px`, this.eContent.style.zIndex = "1";
  }
  // overriding to make public, as we don't dispose this bean via context
  destroy() {
    super.destroy();
  }
}, vP = "ag-cell", wP = "ag-cell-auto-height", SP = "ag-cell-normal-height", yP = "ag-cell-focus", bP = "ag-cell-first-right-pinned", RP = "ag-cell-last-left-pinned", xP = "ag-cell-not-inline-editing", FP = "ag-cell-wrap-text", Jn = "cellCtrl";
function Qf(e, t) {
  return Cf(e, t, Jn);
}
var PP = 0, Cs = class extends T {
  constructor(e, t, i, s) {
    super(), this.column = e, this.rowNode = t, this.rowCtrl = s, this.rangeFeature = void 0, this.rowResizeFeature = void 0, this.positionFeature = void 0, this.customStyleFeature = void 0, this.editStyleFeature = void 0, this.mouseListener = void 0, this.keyboardListener = void 0, this.suppressRefreshCell = !1, this.onCompAttachedFuncs = [], this.onEditorAttachedFuncs = [], this.focusEventWhileNotReady = null, this.hasBeenFocused = !1, this.hasEdit = !1, this.tooltipFeature = void 0, this.editorTooltipFeature = void 0, this.beans = i, this.gos = i.gos, this.editSvc = i.editSvc, this.hasEdit = !!i.editSvc;
    const { colId: o } = e;
    this.instanceId = o + "-" + PP++, this.createCellPosition(), this.updateAndFormatValue(!1);
  }
  addFeatures() {
    const { beans: e } = this;
    this.positionFeature = new CP(this, e), this.customStyleFeature = e.cellStyles?.createCellCustomStyleFeature(this, e), this.editStyleFeature = e.editSvc?.createCellStyleFeature(this, e), this.mouseListener = new mP(this, e, this.column), this.keyboardListener = new fP(this, e, this.rowNode, this.rowCtrl), this.enableTooltipFeature();
    const { rangeSvc: t } = e;
    t && hi(e.gos) && (this.rangeFeature = t.createCellRangeFeature(e, this)), ai(this.column) && (this.rowResizeFeature = this.beans.rowNumbersSvc.createRowNumbersRowResizerFeature(e, this));
  }
  isCellSpanning() {
    return !1;
  }
  getCellSpan() {
  }
  removeFeatures() {
    const e = this.beans.context;
    this.positionFeature = e.destroyBean(this.positionFeature), this.editorTooltipFeature = e.destroyBean(this.editorTooltipFeature), this.customStyleFeature = e.destroyBean(this.customStyleFeature), this.editStyleFeature = e.destroyBean(this.editStyleFeature), this.mouseListener = e.destroyBean(this.mouseListener), this.keyboardListener = e.destroyBean(this.keyboardListener), this.rangeFeature = e.destroyBean(this.rangeFeature), this.rowResizeFeature = e.destroyBean(this.rowResizeFeature), this.disableTooltipFeature();
  }
  enableTooltipFeature(e, t) {
    this.tooltipFeature = this.beans.tooltipSvc?.enableCellTooltipFeature(this, e, t);
  }
  disableTooltipFeature() {
    this.tooltipFeature = this.beans.context.destroyBean(this.tooltipFeature);
  }
  enableEditorTooltipFeature(e) {
    this.editorTooltipFeature && this.disableEditorTooltipFeature(), this.editorTooltipFeature = this.beans.tooltipSvc?.setupCellEditorTooltip(this, e), Ni(this.beans);
  }
  disableEditorTooltipFeature() {
    this.editorTooltipFeature = this.beans.context.destroyBean(this.editorTooltipFeature);
  }
  setComp(e, t, i, s, o, n, r) {
    this.comp = e, this.eGui = t, this.printLayout = o, r ?? (r = this), this.addDomData(r), this.addFeatures(), r.addDestroyFunc(() => this.removeFeatures()), this.onSuppressCellFocusChanged(this.beans.gos.get("suppressCellFocus")), this.setupFocus(), this.applyStaticCssClasses(), this.setWrapText(), this.onFirstRightPinnedChanged(), this.onLastLeftPinnedChanged(), this.onColumnHover(), this.setupControlComps(), this.setupAutoHeight(s, r), this.refreshFirstAndLastStyles(), this.refreshAriaColIndex(), this.positionFeature?.init(), this.customStyleFeature?.setComp(e), this.editStyleFeature?.setComp(e), this.tooltipFeature?.refreshTooltip(), this.keyboardListener?.init(), this.rangeFeature?.setComp(e), this.rowResizeFeature?.refreshRowResizer(), n && this.isCellEditable() ? this.editSvc?.startEditing(this, { startedEdit: !1, source: "api", silent: !0 }) : this.showValue(!1, !0), this.onCompAttachedFuncs.length && (this.onCompAttachedFuncs.forEach((a) => a()), this.onCompAttachedFuncs = []);
  }
  setupAutoHeight(e, t) {
    this.isAutoHeight = this.beans.rowAutoHeight?.setupCellAutoHeight(this, e, t) ?? !1;
  }
  getCellAriaRole() {
    return this.column.getColDef().cellAriaRole ?? "gridcell";
  }
  isCellRenderer() {
    const e = this.column.getColDef();
    return e.cellRenderer != null || e.cellRendererSelector != null;
  }
  getValueToDisplay() {
    return this.valueFormatted ?? this.value;
  }
  getDeferLoadingCellRenderer() {
    const { beans: e, column: t } = this, { userCompFactory: i, ctrlsSvc: s, eventSvc: o } = e, n = t.getColDef(), r = this.createCellRendererParams();
    r.deferRender = !0;
    const a = Eu(i, n, r);
    if (s.getGridBodyCtrl()?.scrollFeature?.isScrolling()) {
      let l;
      const c = new re((d) => {
        l = d;
      });
      return this.addManagedListeners(o, {
        bodyScrollEnd: () => l()
      }), { loadingComp: a, onReady: c };
    }
    return { loadingComp: a, onReady: re.resolve() };
  }
  showValue(e, t) {
    const { beans: i, column: s, rowNode: o, rangeFeature: n } = this, { userCompFactory: r } = i;
    let a = this.getValueToDisplay(), l;
    const c = o.stub && o.groupData?.[s.getId()] == null, d = s.getColDef();
    if (c || this.isCellRenderer()) {
      const u = this.createCellRendererParams();
      !c || ai(s) ? l = Pu(r, d, u) : l = Eu(r, d, u);
    }
    if (!l && !c && i.findSvc?.isMatch(o, s)) {
      const u = this.createCellRendererParams();
      l = Pu(
        r,
        { ...s.getColDef(), cellRenderer: "agFindCellRenderer" },
        u
      );
    }
    if (this.hasEdit && this.editSvc.isBatchEditing() && this.editSvc.isRowEditing(o, { checkSiblings: !0 })) {
      const u = this.editSvc.prepDetailsDuringBatch(this, { compDetails: l, valueToDisplay: a });
      u && (u.compDetails ? l = u.compDetails : u.valueToDisplay && (a = u.valueToDisplay));
    }
    this.comp.setRenderDetails(l, a, e), !t && n && Jt(i, () => n?.refreshHandle()), this.rowResizeFeature?.refreshRowResizer();
  }
  setupControlComps() {
    const e = this.column.getColDef();
    this.includeSelection = this.isIncludeControl(this.isCheckboxSelection(e), !0), this.includeRowDrag = this.isIncludeControl(e.rowDrag), this.includeDndSource = this.isIncludeControl(e.dndSource), this.comp.setIncludeSelection(this.includeSelection), this.comp.setIncludeDndSource(this.includeDndSource), this.comp.setIncludeRowDrag(this.includeRowDrag);
  }
  isForceWrapper() {
    return this.beans.gos.get("enableCellTextSelection") || this.column.isAutoHeight();
  }
  /**
   * Wrapper providing general conditions under which control elements (e.g. checkboxes and drag handles)
   * are rendered for a particular cell.
   * @param value Whether to render the control in the specific context of the caller
   * @param allowManuallyPinned Whether manually pinned rows are permitted this form of control element
   */
  // eslint-disable-next-line @typescript-eslint/ban-types
  isIncludeControl(e, t = !1) {
    return (this.rowNode.rowPinned == null || t && Ho(this.rowNode)) && !!e;
  }
  isCheckboxSelection(e) {
    const { rowSelection: t, groupDisplayType: i } = this.beans.gridOptions, s = Nn(t), o = fi(this.column);
    return i === "custom" && s !== "selectionColumn" && o ? !1 : e.checkboxSelection || o && typeof t == "object" && gs(t);
  }
  refreshShouldDestroy() {
    const e = this.column.getColDef(), t = this.includeSelection != this.isIncludeControl(this.isCheckboxSelection(e), !0), i = this.includeRowDrag != this.isIncludeControl(e.rowDrag), s = this.includeDndSource != this.isIncludeControl(e.dndSource), o = this.isAutoHeight != this.column.isAutoHeight();
    return t || i || s || o;
  }
  onPopupEditorClosed() {
    const { editSvc: e } = this.beans;
    e?.isEditing(this, { withOpenEditor: !0 }) && e?.stopEditing(this, { source: e?.isBatchEditing() ? "ui" : "api" });
  }
  /**
   * Ends the Cell Editing
   * @param cancel `True` if the edit process is being canceled.
   * @returns `True` if the value of the `GridCell` has been updated, otherwise `False`.
   */
  stopEditing(e = !1) {
    const { editSvc: t } = this.beans;
    return t?.stopEditing(this, { cancel: e, source: t?.isBatchEditing() ? "ui" : "api" }) ?? !1;
  }
  createCellRendererParams() {
    const {
      value: e,
      valueFormatted: t,
      column: i,
      rowNode: s,
      comp: o,
      eGui: n,
      beans: { valueSvc: r, gos: a, editSvc: l }
    } = this;
    return Z(a, {
      value: e,
      valueFormatted: t,
      getValue: () => r.getValueForDisplay(i, s).value,
      setValue: (d) => l?.setDataValue({ rowNode: s, column: i }, d) || r.setValue(s, i, d),
      formatValue: this.formatValue.bind(this),
      data: s.data,
      node: s,
      pinned: i.getPinned(),
      colDef: i.getColDef(),
      column: i,
      refreshCell: this.refreshCell.bind(this),
      eGridCell: n,
      eParentOfValue: o.getParentOfValue(),
      registerRowDragger: (d, u, h, g) => this.registerRowDragger(d, u, g),
      setTooltip: (d, u) => {
        a.assertModuleRegistered("Tooltip", 3), this.tooltipFeature && this.disableTooltipFeature(), this.enableTooltipFeature(d, u), this.tooltipFeature?.refreshTooltip();
      }
    });
  }
  onCellChanged(e) {
    e.column === this.column && this.refreshCell({});
  }
  refreshOrDestroyCell(e) {
    if (this.refreshShouldDestroy() ? this.rowCtrl?.recreateCell(this) : this.refreshCell(e), this.hasEdit && this.editCompDetails) {
      const { editSvc: t, comp: i } = this;
      !i?.getCellEditor() && t.isEditing(this, { withOpenEditor: !0 }) && t.startEditing(this, { startedEdit: !1, source: "api", silent: !0 });
    }
  }
  // + stop editing {force: true, suppressFlash: true}
  // + event cellChanged {}
  // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything
  // + rowCtrl: event dataChanged {suppressFlash: !update, newData: !update}
  // + rowCtrl: api refreshCells() {animate: true/false}
  // + rowRenderer: api softRefreshView() {}
  refreshCell({ force: e, suppressFlash: t, newData: i } = {}) {
    if (this.suppressRefreshCell)
      return;
    const s = this.column.getColDef(), o = s.field == null && s.valueGetter == null && s.showRowGroup == null, n = e || o || i, r = !!this.comp, a = this.updateAndFormatValue(r), l = n || a;
    if (r) {
      if (l) {
        this.showValue(!!i, !1);
        const c = this.beans.filterManager?.isSuppressFlashingCellsBecauseFiltering();
        !t && !c && s.enableCellChangeFlash && this.beans.cellFlashSvc?.flashCell(this), this.editStyleFeature?.applyCellStyles?.(), this.customStyleFeature?.applyUserStyles(), this.customStyleFeature?.applyClassesFromColDef();
      }
      this.tooltipFeature?.refreshTooltip(), this.customStyleFeature?.applyCellClassRules();
    }
  }
  isCellEditable() {
    return this.column.isCellEditable(this.rowNode);
  }
  formatValue(e) {
    return this.callValueFormatter(e) ?? e;
  }
  callValueFormatter(e) {
    return this.beans.valueSvc.formatValue(this.column, this.rowNode, e);
  }
  updateAndFormatValue(e) {
    const t = this.value, i = this.valueFormatted, { value: s, valueFormatted: o } = this.beans.valueSvc.getValueForDisplay(this.column, this.rowNode, !0);
    return this.value = s, this.valueFormatted = o, e ? !this.valuesAreEqual(t, this.value) || this.valueFormatted != i : !0;
  }
  valuesAreEqual(e, t) {
    const i = this.column.getColDef();
    return i.equals ? i.equals(e, t) : e === t;
  }
  addDomData(e) {
    const t = this.eGui;
    Hi(this.beans.gos, t, Jn, this), e.addDestroyFunc(() => Hi(this.beans.gos, t, Jn, null));
  }
  createEvent(e, t) {
    const { rowNode: i, column: s, value: o, beans: n } = this;
    return gP(n, e, t, { rowNode: i, column: s }, o);
  }
  processCharacter(e) {
    this.keyboardListener?.processCharacter(e);
  }
  onKeyDown(e) {
    this.keyboardListener?.onKeyDown(e);
  }
  onMouseEvent(e, t) {
    this.mouseListener?.onMouseEvent(e, t);
  }
  getColSpanningList() {
    return this.positionFeature?.getColSpanningList() ?? [];
  }
  onLeftChanged() {
    this.comp && this.positionFeature?.onLeftChanged();
  }
  onDisplayedColumnsChanged() {
    this.eGui && (this.refreshAriaColIndex(), this.refreshFirstAndLastStyles());
  }
  refreshFirstAndLastStyles() {
    const { comp: e, column: t, beans: i } = this;
    qf(e, t, i.visibleCols);
  }
  refreshAriaColIndex() {
    const e = this.beans.visibleCols.getAriaColIndex(this.column);
    Bp(this.eGui, e);
  }
  onWidthChanged() {
    return this.positionFeature?.onWidthChanged();
  }
  getRowPosition() {
    const { rowIndex: e, rowPinned: t } = this.cellPosition;
    return {
      rowIndex: e,
      rowPinned: t
    };
  }
  updateRangeBordersIfRangeCount() {
    this.comp && this.rangeFeature?.updateRangeBordersIfRangeCount();
  }
  onCellSelectionChanged() {
    this.comp && this.rangeFeature?.onCellSelectionChanged();
  }
  isRangeSelectionEnabled() {
    return this.rangeFeature != null;
  }
  focusCell(e = !1, t) {
    const i = this.editSvc?.allowedFocusTargetOnValidation(this);
    i && i !== this || this.beans.focusSvc.setFocusedCell({
      ...this.getFocusedCellPosition(),
      forceBrowserFocus: e,
      sourceEvent: t
    });
  }
  /**
   * Restores focus to the cell, if it should have it
   * @param waitForRender if the cell has just setComp, it may not be rendered yet, so we wait for the next render
   */
  restoreFocus(e = !1) {
    const {
      beans: { editSvc: t, focusSvc: i },
      comp: s
    } = this;
    if (!s || t?.isEditing(this) || !this.isCellFocused() || !i.shouldTakeFocus())
      return;
    const o = () => {
      if (!this.isAlive())
        return;
      const n = s.getFocusableElement();
      this.isCellFocused() && n.focus({ preventScroll: !0 });
    };
    if (e) {
      setTimeout(o, 0);
      return;
    }
    o();
  }
  onRowIndexChanged() {
    this.createCellPosition(), this.onCellFocused(), this.restoreFocus(), this.rangeFeature?.onCellSelectionChanged(), this.rowResizeFeature?.refreshRowResizer();
  }
  onSuppressCellFocusChanged(e) {
    const t = this.eGui;
    t && (ai(this.column) && (e = !0), rt(t, "tabindex", e ? void 0 : -1));
  }
  onFirstRightPinnedChanged() {
    if (!this.comp)
      return;
    const e = this.column.isFirstRightPinned();
    this.comp.toggleCss(bP, e);
  }
  onLastLeftPinnedChanged() {
    if (!this.comp)
      return;
    const e = this.column.isLastLeftPinned();
    this.comp.toggleCss(RP, e);
  }
  /**
   * Returns whether cell is focused by the focusSvc, overridden by spannedCellCtrl
   */
  checkCellFocused() {
    return this.beans.focusSvc.isCellFocused(this.cellPosition);
  }
  isCellFocused() {
    const e = this.checkCellFocused();
    return this.hasBeenFocused || (this.hasBeenFocused = e), e;
  }
  setupFocus() {
    this.restoreFocus(!0), this.onCellFocused(this.focusEventWhileNotReady ?? void 0);
  }
  onCellFocused(e) {
    const { beans: t } = this;
    if (hr(t))
      return;
    if (!this.comp) {
      e && (this.focusEventWhileNotReady = e);
      return;
    }
    const i = this.isCellFocused(), s = t.editSvc?.isEditing(this) ?? !1;
    if (this.comp.toggleCss(yP, i), i && e && e.forceBrowserFocus) {
      let o = this.comp.getFocusableElement();
      if (s) {
        const n = ms(o, null, !0);
        n.length && (o = n[0]);
      }
      o.focus({ preventScroll: !!e.preventScrollOnBrowserFocus });
    }
    i && this.rowCtrl.announceDescription();
  }
  createCellPosition() {
    const { rowIndex: e, rowPinned: t } = this.rowNode;
    this.cellPosition = {
      rowIndex: e,
      rowPinned: Ut(t),
      column: this.column
    };
  }
  // CSS Classes that only get applied once, they never change
  applyStaticCssClasses() {
    const { comp: e } = this;
    e.toggleCss(vP, !0), e.toggleCss(xP, !0);
    const t = this.column.isAutoHeight() == !0;
    e.toggleCss(wP, t), e.toggleCss(SP, !t);
  }
  onColumnHover() {
    this.beans.colHover?.onCellColumnHover(this.column, this.comp);
  }
  onColDefChanged() {
    this.comp && (this.column.isTooltipEnabled() ? (this.disableTooltipFeature(), this.enableTooltipFeature()) : this.disableTooltipFeature(), this.setWrapText(), this.editSvc?.isEditing(this) ? this.editSvc?.handleColDefChanged(this) : this.refreshOrDestroyCell({ force: !0, suppressFlash: !0 }));
  }
  setWrapText() {
    const e = this.column.getColDef().wrapText == !0;
    this.comp.toggleCss(FP, e);
  }
  dispatchCellContextMenuEvent(e) {
    const t = this.column.getColDef(), i = this.createEvent(e, "cellContextMenu"), { beans: s } = this;
    s.eventSvc.dispatchEvent(i), t.onCellContextMenu && window.setTimeout(() => {
      s.frameworkOverrides.wrapOutgoing(() => {
        t.onCellContextMenu(i);
      });
    }, 0);
  }
  getCellRenderer() {
    return this.comp?.getCellRenderer() ?? null;
  }
  destroy() {
    this.onCompAttachedFuncs = [], this.onEditorAttachedFuncs = [], this.isCellFocused() && this.hasBrowserFocus() && this.beans.focusSvc.attemptToRecoverFocus(), super.destroy();
  }
  hasBrowserFocus() {
    return this.eGui?.contains(Fe(this.beans)) ?? !1;
  }
  createSelectionCheckbox() {
    const e = this.beans.selectionSvc?.createCheckboxSelectionComponent();
    if (e)
      return this.beans.context.createBean(e), e.init({ rowNode: this.rowNode, column: this.column }), e;
  }
  createDndSource() {
    const e = this.beans.registry.createDynamicBean(
      "dndSourceComp",
      !1,
      this.rowNode,
      this.column,
      this.eGui
    );
    return e && this.beans.context.createBean(e), e;
  }
  registerRowDragger(e, t, i) {
    if (this.customRowDragComp) {
      this.customRowDragComp.setDragElement(e, t);
      return;
    }
    const s = this.createRowDragComp(e, t, i);
    s && (this.customRowDragComp = s, this.addDestroyFunc(() => {
      this.beans.context.destroyBean(s), this.customRowDragComp = null;
    }));
  }
  createRowDragComp(e, t, i) {
    const s = this.beans.rowDragSvc?.createRowDragCompForCell(
      this.rowNode,
      this.column,
      () => this.value,
      e,
      t,
      i
    );
    if (s)
      return this.beans.context.createBean(s), s;
  }
  cellEditorAttached() {
    this.onEditorAttachedFuncs.forEach((e) => e()), this.onEditorAttachedFuncs = [];
  }
  setFocusedCellPosition(e) {
  }
  getFocusedCellPosition() {
    return this.cellPosition;
  }
  // used by spannedCellCtrl
  refreshAriaRowIndex() {
  }
  /**
   * Returns the root element of the cell, could be a span container rather than the cell element.
   * @returns The root element of the cell.
   */
  getRootElement() {
    return this.eGui;
  }
}, Jf = "__ag_grid_instance";
function em(e, t) {
  t[Jf] = e.gridInstanceId;
}
function xo(e, t) {
  return tm(e, t.target);
}
function tm(e, t) {
  let i = t;
  for (; i; ) {
    const s = i[Jf];
    if ($(s))
      return s === e.gridInstanceId;
    i = i.parentElement;
  }
  return !1;
}
function EP(e, t) {
  return Qf(e, t.target)?.getFocusedCellPosition() ?? null;
}
function Au(e, t) {
  const i = ze(e.gos, "normal"), s = t;
  let o, n;
  s.clientX != null || s.clientY != null ? (o = s.clientX, n = s.clientY) : (o = s.x, n = s.y);
  const { pageFirstPixel: r } = e.pageBounds.getCurrentPagePixelRange();
  if (n += r, i) {
    const a = e.ctrlsSvc.getScrollFeature(), l = a.getVScrollPosition(), c = a.getHScrollPosition();
    o += c.left, n += l.top;
  }
  return { x: o, y: n };
}
var DP = class extends T {
  constructor() {
    super(...arguments), this.beanName = "dragAndDrop", this.dragSourceAndParamsList = [], this.dropTargets = [];
  }
  wireBeans(e) {
    this.ctrlsSvc = e.ctrlsSvc, this.dragSvc = e.dragSvc, this.environment = e.environment, this.userCompFactory = e.userCompFactory;
  }
  addDragSource(e, t = !1) {
    const i = {
      eElement: e.eElement,
      dragStartPixels: e.dragStartPixels,
      onDragStart: this.onDragStart.bind(this, e),
      onDragStop: this.onDragStop.bind(this),
      onDragging: this.onDragging.bind(this),
      onDragCancel: this.onDragCancel.bind(this),
      includeTouch: t
    };
    this.dragSourceAndParamsList.push({ params: i, dragSource: e }), this.dragSvc.addDragSource(i);
  }
  getDragAndDropImageComponent() {
    const { dragAndDropImageComp: e } = this;
    return !e || !e.comp ? null : e.comp;
  }
  removeDragSource(e) {
    const { dragSourceAndParamsList: t, dragSvc: i } = this, s = t.find((o) => o.dragSource === e);
    s && (i.removeDragSource(s.params), St(t, s));
  }
  destroy() {
    const { dragSourceAndParamsList: e, dragSvc: t, dropTargets: i } = this;
    e.forEach((s) => t.removeDragSource(s.params)), e.length = 0, i.length = 0, this.clearDragAndDropProperties(), super.destroy();
  }
  nudge() {
    this.dragging && this.onDragging(this.eventLastTime, !0);
  }
  onDragStart(e, t) {
    this.dragging = !0, this.dragSource = e, this.eventLastTime = t, this.dragItem = e.getDragItem(), e.onDragStarted?.(), this.createDragAndDropImageComponent();
  }
  onDragStop(e) {
    this.dragSource?.onDragStopped?.();
    const { lastDropTarget: t } = this;
    if (t?.onDragStop) {
      const i = this.createDropTargetEvent(t, e, null, null, !1);
      t.onDragStop(i);
    }
    this.clearDragAndDropProperties();
  }
  onDragCancel() {
    const { dragSource: e, lastDropTarget: t } = this;
    e?.onDragCancelled?.(), t?.onDragCancel && t.onDragCancel(
      this.createDropTargetEvent(t, this.eventLastTime, null, null, !1)
    ), this.clearDragAndDropProperties();
  }
  clearDragAndDropProperties() {
    this.eventLastTime = null, this.dragging = !1, this.lastDropTarget = void 0, this.dragItem = null, this.dragSource = null, this.removeDragAndDropImageComponent();
  }
  onDragging(e, t = !1) {
    const i = this.getHorizontalDirection(e), s = this.getVerticalDirection(e);
    this.eventLastTime = e, this.positionDragAndDropImageComp(e);
    const o = this.dropTargets.filter((d) => this.isMouseOnDropTarget(e, d)), n = this.findCurrentDropTarget(e, o), { lastDropTarget: r, dragSource: a, dragAndDropImageComp: l, dragItem: c } = this;
    if (n !== r) {
      if (this.leaveLastTargetIfExists(e, i, s, t), r !== null && n === null && a?.onGridExit?.(c), r === null && n !== null && a?.onGridEnter?.(c), this.enterDragTargetIfExists(n, e, i, s, t), n && l) {
        const { comp: d, promise: u } = l;
        d ? d.setIcon(n.getIconName ? n.getIconName() : null, !1) : u.then((h) => {
          h && h.setIcon(n.getIconName ? n.getIconName() : null, !1);
        });
      }
      this.lastDropTarget = n;
    } else if (n && n.onDragging) {
      const d = this.createDropTargetEvent(n, e, i, s, t);
      n.onDragging(d);
    }
  }
  getAllContainersFromDropTarget(e) {
    const t = e.getSecondaryContainers ? e.getSecondaryContainers() : null, i = [[e.getContainer()]];
    return t ? i.concat(t) : i;
  }
  // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers
  isMouseOnDropTarget(e, t) {
    const i = this.getAllContainersFromDropTarget(t);
    let s = !1;
    const o = (a, l) => {
      for (const c of l) {
        const { width: d, height: u, left: h, right: g, top: p, bottom: f } = c.getBoundingClientRect();
        if (d === 0 || u === 0)
          return !1;
        const m = a.clientX >= h && a.clientX < g, C = a.clientY >= p && a.clientY < f;
        if (!m || !C)
          return !1;
      }
      return !0;
    };
    for (const a of i)
      if (o(e, a)) {
        s = !0;
        break;
      }
    const { eElement: n, type: r } = this.dragSource;
    return t.targetContainsSource && !t.getContainer().contains(n) ? !1 : s && t.isInterestedIn(r, n);
  }
  findCurrentDropTarget(e, t) {
    const i = t.length;
    if (i === 0)
      return null;
    if (i === 1)
      return t[0];
    const o = So(this.beans).elementsFromPoint(e.clientX, e.clientY);
    for (const n of o)
      for (const r of t)
        if (this.getAllContainersFromDropTarget(r).flatMap((l) => l).indexOf(n) !== -1)
          return r;
    return null;
  }
  enterDragTargetIfExists(e, t, i, s, o) {
    if (e && e.onDragEnter) {
      const n = this.createDropTargetEvent(
        e,
        t,
        i,
        s,
        o
      );
      e.onDragEnter(n);
    }
  }
  leaveLastTargetIfExists(e, t, i, s) {
    const { lastDropTarget: o } = this;
    if (!o)
      return;
    if (o.onDragLeave) {
      const r = this.createDropTargetEvent(
        o,
        e,
        t,
        i,
        s
      );
      o.onDragLeave(r);
    }
    const n = this.getDragAndDropImageComponent();
    n && n.setIcon(null, !1);
  }
  addDropTarget(e) {
    this.dropTargets.push(e);
  }
  removeDropTarget(e) {
    this.dropTargets = this.dropTargets.filter((t) => t.getContainer() !== e.getContainer());
  }
  hasExternalDropZones() {
    return this.dropTargets.some((e) => e.external);
  }
  findExternalZone(e) {
    return this.dropTargets.filter((i) => i.external).find((i) => i.getContainer() === e.getContainer()) || null;
  }
  isDropZoneWithinThisGrid(e) {
    const i = this.ctrlsSvc.getGridBodyCtrl().eGridBody, { dropZoneTarget: s } = e;
    return i.contains(s);
  }
  getHorizontalDirection(e) {
    const t = this.eventLastTime?.clientX, i = e.clientX;
    return t === i ? null : t > i ? "left" : "right";
  }
  getVerticalDirection(e) {
    const t = this.eventLastTime?.clientY, i = e.clientY;
    return t === i ? null : t > i ? "up" : "down";
  }
  createDropTargetEvent(e, t, i, s, o) {
    const n = e.getContainer(), r = n.getBoundingClientRect(), { dragItem: a, dragSource: l, gos: c } = this, d = t.clientX - r.left, u = t.clientY - r.top;
    return Z(c, {
      event: t,
      x: d,
      y: u,
      vDirection: s,
      hDirection: i,
      dragSource: l,
      fromNudge: o,
      dragItem: a,
      dropZoneTarget: n
    });
  }
  positionDragAndDropImageComp(e) {
    const t = this.getDragAndDropImageComponent();
    t && ox(t.getGui(), e, this.beans);
  }
  removeDragAndDropImageComponent() {
    const { dragAndDropImageComp: e } = this;
    if (e) {
      const { comp: t } = e;
      if (t) {
        const i = t.getGui();
        this.dragAndDropImageParent?.removeChild(i), this.destroyBean(t);
      }
    }
    this.dragAndDropImageComp = null;
  }
  createDragAndDropImageComponent() {
    const { dragSource: e, gos: t, userCompFactory: i } = this;
    if (!e)
      return;
    const s = pF(
      i,
      Z(t, {
        dragSource: e
      })
    );
    if (!s)
      return;
    const o = s.newAgStackInstance();
    this.dragAndDropImageComp = {
      promise: o
    }, o.then((n) => {
      !n || !this.isAlive() || (this.processDragAndDropImageComponent(n), this.dragAndDropImageComp.comp = n);
    });
  }
  processDragAndDropImageComponent(e) {
    const { dragSource: t, environment: i } = this;
    if (!t)
      return;
    const s = e.getGui();
    s.style.setProperty("position", "absolute"), s.style.setProperty("z-index", "9999"), em(this.gos, s), i.applyThemeClasses(s), e.setIcon(null, !1);
    let { dragItemName: o } = t;
    typeof o == "function" && (o = o()), e.setLabel(o || ""), s.style.top = "20px", s.style.left = "20px";
    const n = uc(this.beans);
    this.dragAndDropImageParent = n, n ? n.appendChild(s) : B(54);
  }
  registerGridDropTarget(e, t) {
    const i = {
      getContainer: e,
      isInterestedIn: (s) => s === 1 || s === 0,
      getIconName: () => "notAllowed"
    };
    this.addDropTarget(i), t.addDestroyFunc(() => this.removeDropTarget(i));
  }
}, TP = class extends T {
  constructor() {
    super(...arguments), this.beanName = "dragSvc", this.dragEndFunctions = [], this.dragSources = [];
  }
  destroy() {
    const { dragSources: e } = this;
    e.forEach(this.removeListener.bind(this)), e.length = 0, super.destroy();
  }
  removeListener(e) {
    const t = e.dragSource.eElement, i = e.mouseDownListener;
    if (t.removeEventListener("mousedown", i), e.touchEnabled) {
      const s = e.touchStartListener;
      t.removeEventListener("touchstart", s, { passive: !0 });
    }
  }
  removeDragSource(e) {
    const { dragSources: t } = this, i = t.find((s) => s.dragSource === e);
    i && (this.removeListener(i), St(t, i));
  }
  addDragSource(e) {
    const t = this.onMouseDown.bind(this, e), { eElement: i, includeTouch: s, stopPropagationForTouch: o } = e;
    i.addEventListener("mousedown", t);
    let n = null;
    const r = this.gos.get("suppressTouch");
    s && !r && (n = (a) => {
      oc(a.target) || (o && a.stopPropagation(), this.onTouchStart(e, a));
    }, i.addEventListener("touchstart", n, { passive: !1 })), this.dragSources.push({
      dragSource: e,
      mouseDownListener: t,
      touchStartListener: n,
      touchEnabled: !!s
    });
  }
  // gets called whenever mouse down on any drag source
  onTouchStart(e, t) {
    this.currentDragParams = e, this.dragging = !1;
    const i = t.touches[0];
    this.touchLastTime = i, this.touchStart = i;
    const s = (l) => this.onTouchMove(l, e.eElement), o = (l) => this.onTouchUp(l, e.eElement), n = (l) => {
      l.cancelable && l.preventDefault();
    }, r = t.target, a = [
      // Prevents the page document from moving while we are dragging items around.
      // preventDefault needs to be called in the touchmove listener and never inside the
      // touchstart, because using touchstart causes the click event to be cancelled on touch devices.
      {
        target: So(this.beans),
        type: "touchmove",
        listener: n,
        options: { passive: !1 }
      },
      { target: r, type: "touchmove", listener: s, options: { passive: !0 } },
      { target: r, type: "touchend", listener: o, options: { passive: !0 } },
      { target: r, type: "touchcancel", listener: o, options: { passive: !0 } }
    ];
    this.addTemporaryEvents(a), e.dragStartPixels === 0 && this.onCommonMove(i, this.touchStart, e.eElement);
  }
  // gets called whenever mouse down on any drag source
  onMouseDown(e, t) {
    const i = t;
    if (e.skipMouseEvent && e.skipMouseEvent(t) || i._alreadyProcessedByDragService || (i._alreadyProcessedByDragService = !0, t.button !== 0))
      return;
    this.shouldPreventMouseEvent(t) && t.preventDefault(), this.currentDragParams = e, this.dragging = !1, this.mouseStartEvent = t, this.startTarget = t.target;
    const s = (c) => this.onMouseMove(c, e.eElement), o = (c) => this.onMouseUp(c, e.eElement), n = (c) => c.preventDefault(), r = (c) => {
      c.key === E.ESCAPE && this.cancelDrag(e.eElement);
    }, a = So(this.beans), l = [
      { target: a, type: "mousemove", listener: s },
      { target: a, type: "mouseup", listener: o },
      { target: a, type: "contextmenu", listener: n },
      { target: a, type: "keydown", listener: r }
    ];
    this.addTemporaryEvents(l), e.dragStartPixels === 0 && this.onMouseMove(t, e.eElement);
  }
  addTemporaryEvents(e) {
    e.forEach((t) => {
      const { target: i, type: s, listener: o, options: n } = t;
      i.addEventListener(s, o, n);
    }), this.dragEndFunctions.push(() => {
      e.forEach((t) => {
        const { target: i, type: s, listener: o, options: n } = t;
        i.removeEventListener(s, o, n);
      });
    });
  }
  // returns true if the event is close to the original event by X pixels either vertically or horizontally.
  // we only start dragging after X pixels so this allows us to know if we should start dragging yet.
  isEventNearStartEvent(e, t) {
    const { dragStartPixels: i } = this.currentDragParams, s = $(i) ? i : 4;
    return Zf(e, t, s);
  }
  getFirstActiveTouch(e) {
    for (let t = 0; t < e.length; t++)
      if (e[t].identifier === this.touchStart.identifier)
        return e[t];
    return null;
  }
  onCommonMove(e, t, i) {
    if (!this.dragging) {
      if (this.isEventNearStartEvent(e, t))
        return;
      if (this.dragging = !0, this.eventSvc.dispatchEvent({
        type: "dragStarted",
        target: i
      }), this.currentDragParams.onDragStart(t), !this.currentDragParams) {
        this.dragging = !1;
        return;
      }
      this.currentDragParams.onDragging(t);
    }
    this.currentDragParams?.onDragging(e);
  }
  onTouchMove(e, t) {
    const i = this.getFirstActiveTouch(e.touches);
    i && this.onCommonMove(i, this.touchStart, t);
  }
  // only gets called after a mouse down - as this is only added after mouseDown
  // and is removed when mouseUp happens
  onMouseMove(e, t) {
    Ui() && He(this.beans).getSelection()?.removeAllRanges(), this.shouldPreventMouseEvent(e) && e.preventDefault(), this.onCommonMove(e, this.mouseStartEvent, t);
  }
  shouldPreventMouseEvent(e) {
    const { gos: t } = this, i = t.get("enableCellTextSelection"), s = e.type === "mousemove", o = (n) => !!n.target?.tagName.toLocaleLowerCase()?.match("^a$|textarea|input|select|button");
    return (
      // when `isEnableCellTextSelect` is `true`, we need to preventDefault on mouseMove
      // to avoid the grid text being selected while dragging components.
      i && s && e.cancelable && xo(t, e) && !o(e)
    );
  }
  onTouchUp(e, t) {
    let i = this.getFirstActiveTouch(e.changedTouches);
    i || (i = this.touchLastTime), this.onUpCommon(i, t);
  }
  onMouseUp(e, t) {
    this.onUpCommon(e, t);
  }
  onUpCommon(e, t) {
    this.dragging && (this.dragging = !1, this.currentDragParams.onDragStop(e), this.eventSvc.dispatchEvent({
      type: "dragStopped",
      target: t
    })), this.resetDragProperties();
  }
  cancelDrag(e) {
    this.eventSvc.dispatchEvent({
      type: "dragCancelled",
      target: e
    }), this.currentDragParams?.onDragCancel?.(), this.resetDragProperties();
  }
  resetDragProperties() {
    this.mouseStartEvent = null, this.startTarget = null, this.touchStart = null, this.touchLastTime = null, this.currentDragParams = null;
    const { dragEndFunctions: e } = this;
    e.forEach((t) => t()), e.length = 0;
  }
};
function im(e, t) {
  return e + "_" + t;
}
function De(e) {
  return e instanceof Fo;
}
var Fo = class extends T {
  constructor(e, t, i, s) {
    super(), this.providedColumnGroup = e, this.groupId = t, this.partId = i, this.pinned = s, this.isColumn = !1, this.displayedChildren = [], this.autoHeaderHeight = null, this.parent = null;
  }
  // as the user is adding and removing columns, the groups are recalculated.
  // this reset clears out all children, ready for children to be added again
  reset() {
    this.parent = null, this.children = null, this.displayedChildren = null;
  }
  getParent() {
    return this.parent;
  }
  getUniqueId() {
    return im(this.groupId, this.partId);
  }
  isEmptyGroup() {
    return this.displayedChildren.length === 0;
  }
  isMoving() {
    const e = this.getProvidedColumnGroup().getLeafColumns();
    return !e || e.length === 0 ? !1 : e.every((t) => t.isMoving());
  }
  checkLeft() {
    if (this.displayedChildren.forEach((e) => {
      De(e) && e.checkLeft();
    }), this.displayedChildren.length > 0)
      if (this.gos.get("enableRtl")) {
        const t = ue(this.displayedChildren).getLeft();
        this.setLeft(t);
      } else {
        const e = this.displayedChildren[0].getLeft();
        this.setLeft(e);
      }
    else
      this.setLeft(null);
  }
  getLeft() {
    return this.left;
  }
  getOldLeft() {
    return this.oldLeft;
  }
  setLeft(e) {
    this.oldLeft = this.left, this.left !== e && (this.left = e, this.dispatchLocalEvent({ type: "leftChanged" }));
  }
  getPinned() {
    return this.pinned;
  }
  getGroupId() {
    return this.groupId;
  }
  getPartId() {
    return this.partId;
  }
  getActualWidth() {
    let e = 0;
    return this.displayedChildren?.forEach((t) => {
      e += t.getActualWidth();
    }), e;
  }
  isResizable() {
    if (!this.displayedChildren)
      return !1;
    let e = !1;
    return this.displayedChildren.forEach((t) => {
      t.isResizable() && (e = !0);
    }), e;
  }
  getMinWidth() {
    let e = 0;
    return this.displayedChildren.forEach((t) => {
      e += t.getMinWidth();
    }), e;
  }
  addChild(e) {
    this.children || (this.children = []), this.children.push(e);
  }
  getDisplayedChildren() {
    return this.displayedChildren;
  }
  getLeafColumns() {
    const e = [];
    return this.addLeafColumns(e), e;
  }
  getDisplayedLeafColumns() {
    const e = [];
    return this.addDisplayedLeafColumns(e), e;
  }
  getDefinition() {
    return this.providedColumnGroup.getColGroupDef();
  }
  getColGroupDef() {
    return this.providedColumnGroup.getColGroupDef();
  }
  isPadding() {
    return this.providedColumnGroup.isPadding();
  }
  isExpandable() {
    return this.providedColumnGroup.isExpandable();
  }
  isExpanded() {
    return this.providedColumnGroup.isExpanded();
  }
  setExpanded(e) {
    this.providedColumnGroup.setExpanded(e);
  }
  isAutoHeaderHeight() {
    return !!this.getColGroupDef()?.autoHeaderHeight;
  }
  getAutoHeaderHeight() {
    return this.autoHeaderHeight;
  }
  /** Returns true if the header height has changed */
  setAutoHeaderHeight(e) {
    const t = e !== this.autoHeaderHeight;
    return this.autoHeaderHeight = e, t;
  }
  addDisplayedLeafColumns(e) {
    this.displayedChildren.forEach((t) => {
      gi(t) ? e.push(t) : De(t) && t.addDisplayedLeafColumns(e);
    });
  }
  addLeafColumns(e) {
    this.children.forEach((t) => {
      gi(t) ? e.push(t) : De(t) && t.addLeafColumns(e);
    });
  }
  getChildren() {
    return this.children;
  }
  getColumnGroupShow() {
    return this.providedColumnGroup.getColumnGroupShow();
  }
  getProvidedColumnGroup() {
    return this.providedColumnGroup;
  }
  getPaddingLevel() {
    const e = this.getParent();
    return !this.isPadding() || !e || !e.isPadding() ? 0 : 1 + e.getPaddingLevel();
  }
  calculateDisplayedColumns() {
    this.displayedChildren = [];
    let e = this;
    for (; e != null && e.isPadding(); )
      e = e.getParent();
    if (!(e ? e.getProvidedColumnGroup().isExpandable() : !1)) {
      this.displayedChildren = this.children, this.dispatchLocalEvent({ type: "displayedChildrenChanged" });
      return;
    }
    this.children.forEach((i) => {
      if (De(i) && !i.displayedChildren?.length)
        return;
      switch (i.getColumnGroupShow()) {
        case "open":
          e.getProvidedColumnGroup().isExpanded() && this.displayedChildren.push(i);
          break;
        case "closed":
          e.getProvidedColumnGroup().isExpanded() || this.displayedChildren.push(i);
          break;
        default:
          this.displayedChildren.push(i);
          break;
      }
    }), this.dispatchLocalEvent({ type: "displayedChildrenChanged" });
  }
}, il = "row-group-", mc = "t-", Cc = "b-", MP = 0, zi = class {
  constructor(e) {
    this.master = !1, this.detail = void 0, this.rowIndex = null, this.key = null, this.sourceRowIndex = -1, this.childrenMapped = null, this.treeParent = null, this.treeNodeFlags = 0, this.displayed = !1, this.rowTop = null, this.oldRowTop = null, this.selectable = !0, this.__objectId = MP++, this.alreadyRendered = !1, this.hovered = !1, this.__selected = !1, this.beans = e;
  }
  /**
   * Replaces the data on the `rowNode`. When this method is called, the grid refreshes the entire rendered row if it is displayed.
   */
  setData(e) {
    this.setDataCommon(e, !1);
  }
  // similar to setRowData, however it is expected that the data is the same data item. this
  // is intended to be used with Redux type stores, where the whole data can be changed. we are
  // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the
  // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving
  // dataChanged event, refreshes the cells rather than rip them all out (so user can show transitions).
  /**
   * Updates the data on the `rowNode`. When this method is called, the grid refreshes the entire rendered row if it is displayed.
   */
  updateData(e) {
    this.setDataCommon(e, !0);
  }
  setDataCommon(e, t) {
    const { valueCache: i, eventSvc: s } = this.beans, o = this.data;
    this.data = e, i?.onDataChanged(), this.updateDataOnDetailNode(), this.resetQuickFilterAggregateText();
    const n = this.createDataChangedEvent(e, o, t);
    if (this.__localEventService?.dispatchEvent(n), this.sibling) {
      this.sibling.data = e;
      const a = this.sibling.createDataChangedEvent(e, o, t);
      this.sibling.__localEventService?.dispatchEvent(a);
    }
    s.dispatchEvent({ type: "rowNodeDataChanged", node: this });
    const r = this.pinnedSibling;
    r && (r.data = e, r.__localEventService?.dispatchEvent(
      r.createDataChangedEvent(e, o, t)
    ), s.dispatchEvent({ type: "rowNodeDataChanged", node: r }));
  }
  // when we are doing master / detail, the detail node is lazy created, but then kept around.
  // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data
  // in sync, otherwise expand/collapse of the detail would still show the old values.
  updateDataOnDetailNode() {
    this.detailNode && (this.detailNode.data = this.data);
  }
  createDataChangedEvent(e, t, i) {
    return {
      type: "dataChanged",
      node: this,
      oldData: t,
      newData: e,
      update: i
    };
  }
  getRowIndexString() {
    return this.rowIndex == null ? (he(13), null) : this.rowPinned === "top" ? mc + this.rowIndex : this.rowPinned === "bottom" ? Cc + this.rowIndex : this.rowIndex.toString();
  }
  setDataAndId(e, t) {
    const { selectionSvc: i } = this.beans, s = i?.createDaemonNode?.(this), o = this.data;
    this.data = e, this.updateDataOnDetailNode(), this.setId(t), i && (i.updateRowSelectable(this), i.syncInRowNode(this, s));
    const n = this.createDataChangedEvent(e, o, !1);
    this.__localEventService?.dispatchEvent(n);
  }
  setId(e) {
    const t = Fs(this.beans.gos);
    if (t)
      if (this.data) {
        const i = this.parent?.getRoute() ?? [];
        this.id = t({
          data: this.data,
          parentKeys: i.length > 0 ? i : void 0,
          level: this.level,
          rowPinned: this.rowPinned
        }), this.id.startsWith(il) && he(14, {
          groupPrefix: il
        });
      } else
        this.id = void 0;
    else
      this.id = e;
  }
  setRowTop(e) {
    this.oldRowTop = this.rowTop, this.rowTop !== e && (this.rowTop = e, this.dispatchRowEvent("topChanged"), this.setDisplayed(e !== null));
  }
  clearRowTopAndRowIndex() {
    this.oldRowTop = null, this.setRowTop(null), this.setRowIndex(null);
  }
  setHovered(e) {
    this.hovered = e;
  }
  isHovered() {
    return this.hovered;
  }
  /**
   * Sets the row height.
   * Call if you want to change the height initially assigned to the row.
   * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows. */
  setRowHeight(e, t = !1) {
    this.rowHeight = e, this.rowHeightEstimated = t, this.dispatchRowEvent("heightChanged");
  }
  setExpanded(e, t, i) {
    this.beans.expansionSvc?.setExpanded(this, e, t, i);
  }
  /**
   * Replaces the value on the `rowNode` for the specified column. When complete,
   * the grid refreshes the rendered cell on the required row only.
   * **Note**: This method only fires `onCellEditRequest` when the Grid is in **Read Only** mode.
   * **Note**: This method defers to EditModule if available and batches the edit when `fullRow` or `batchEdit` is enabled.
   *
   * @param colKey The column where the value should be updated
   * @param newValue The new value
   * @param eventSource The source of the event
   * @returns `true` if the value was changed, otherwise `false`.
   */
  setDataValue(e, t, i) {
    const { colModel: s, valueSvc: o, gos: n, editSvc: r } = this.beans, a = typeof e != "string" ? e : s.getCol(e) ?? s.getColDefCol(e);
    if (!a)
      return !1;
    const l = o.getValueForDisplay(a, this, void 0, void 0, "api").value;
    if (n.get("readOnlyEdit")) {
      const {
        beans: { eventSvc: u },
        data: h,
        rowIndex: g,
        rowPinned: p
      } = this;
      return u.dispatchEvent({
        type: "cellEditRequest",
        event: null,
        rowIndex: g,
        rowPinned: p,
        column: a,
        colDef: a.colDef,
        data: h,
        node: this,
        oldValue: l,
        newValue: t,
        value: t,
        source: i
      }), !1;
    }
    if (r && !r.committing) {
      const u = r.setDataValue({ rowNode: this, column: a }, t, i);
      if (u != null)
        return u;
    }
    const c = o.setValue(this, a, t, i);
    this.dispatchCellChangedEvent(a, t, l);
    const d = this.pinnedSibling;
    return d && c && d.dispatchCellChangedEvent(a, t, l), c;
  }
  updateHasChildren() {
    let e = this.group && !this.footer || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;
    const { rowChildrenSvc: t } = this.beans;
    t && (e = t.getHasChildrenValue(this)), e !== this.__hasChildren && (this.__hasChildren = !!e, this.dispatchRowEvent("hasChildrenChanged"));
  }
  hasChildren() {
    return this.__hasChildren == null && this.updateHasChildren(), this.__hasChildren;
  }
  dispatchCellChangedEvent(e, t, i) {
    const s = {
      type: "cellChanged",
      node: this,
      column: e,
      newValue: t,
      oldValue: i
    };
    this.__localEventService?.dispatchEvent(s);
  }
  /**
   * The first time `quickFilter` runs, the grid creates a one-off string representation of the row.
   * This string is then used for the quick filter instead of hitting each column separately.
   * When you edit, using grid editing, this string gets cleared down.
   * However, if you edit without using grid editing, you need to clear this string down for the row to be updated with the new values.
   * Otherwise, new values would not work with the `quickFilter`. */
  resetQuickFilterAggregateText() {
    this.quickFilterAggregateText = null;
  }
  /** Returns:
   * - `true` if the node can be expanded, i.e it is a group or master row.
   * - `false` if the node cannot be expanded
   */
  isExpandable() {
    return this.beans.expansionSvc?.isExpandable(this) ?? !1;
  }
  /** Returns:
   * - `true` if node is selected,
   * - `false` if the node isn't selected
   * - `undefined` if it's partially selected (group where not all children are selected). */
  isSelected() {
    return this.footer ? this.sibling.isSelected() : this.rowPinned && this.pinnedSibling ? this.pinnedSibling.isSelected() : this.__selected;
  }
  /** Perform a depth-first search of this node and its children. */
  depthFirstSearch(e) {
    this.childrenAfterGroup?.forEach((t) => t.depthFirstSearch(e)), e(this);
  }
  dispatchRowEvent(e) {
    this.__localEventService?.dispatchEvent({
      type: e,
      node: this
    });
  }
  /**
   * Select (or deselect) the node.
   * @param newValue -`true` for selection, `false` for deselection.
   * @param clearSelection - If selecting, then passing `true` selects the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact.
   * @param source - Source property that appears in the `selectionChanged` event.
   */
  setSelected(e, t = !1, i = "api") {
    this.beans.selectionSvc?.setNodesSelected({
      nodes: [this],
      newValue: e,
      clearSelection: t,
      source: i
    });
  }
  /**
   * Returns:
   * - `true` if node is either pinned to the `top` or `bottom`
   * - `false` if the node isn't pinned
   */
  isRowPinned() {
    return !!this.rowPinned;
  }
  __addEventListener(e, t) {
    this.__localEventService || (this.__localEventService = new Oi()), this.__localEventService.addEventListener(e, t);
  }
  __removeEventListener(e, t) {
    this.removeLocalListener(e, t);
  }
  /**
   * PUBLIC USE ONLY: for internal use within AG Grid use the `__addEventListener` and `__removeEventListener` methods.
   */
  addEventListener(e, t) {
    this.beans.validation?.checkRowEvents(e), this.__localEventService || (this.__localEventService = new Oi()), this.frameworkEventListenerService = this.beans.frameworkOverrides.createLocalEventListenerWrapper?.(
      this.frameworkEventListenerService,
      this.__localEventService
    );
    const i = this.frameworkEventListenerService?.wrap(e, t) ?? t;
    this.__localEventService.addEventListener(e, i);
  }
  /**
   * PUBLIC USE ONLY: for internal use within AG Grid use the `__addEventListener` and `__removeEventListener` methods.
   */
  removeEventListener(e, t) {
    const i = this.frameworkEventListenerService?.unwrap(e, t) ?? t;
    this.removeLocalListener(e, i);
  }
  removeLocalListener(e, t) {
    this.__localEventService?.removeEventListener(e, t), this.__localEventService?.noRegisteredListenersExist() && (this.__localEventService = null);
  }
  /**
   * @deprecated v32.2.0 Check `node.detail` then user provided callback `isFullWidthRow` instead.
   *
   * Returns:
   * - `true` if the node is a full width cell
   * - `false` if the node is not a full width cell
   */
  isFullWidthCell() {
    if (B(61), this.detail)
      return !0;
    const e = this.beans.gos.getCallback("isFullWidthRow");
    return e ? e({ rowNode: this }) : !1;
  }
  /**
   * Returns the route of keys to the row node. Returns undefined if the node has no key.
   */
  getRoute() {
    if (this.level === -1)
      return [];
    if (this.key == null)
      return;
    const e = [];
    let t = this;
    for (; t && t.key != null; )
      e.push(t.key), t = t.parent;
    return e.reverse();
  }
  setFirstChild(e) {
    this.firstChild !== e && (this.firstChild = e, this.dispatchRowEvent("firstChildChanged"));
  }
  setDisplayed(e) {
    this.displayed !== e && (this.displayed = e, this.dispatchRowEvent("displayedChanged"));
  }
  setRowIndex(e) {
    this.rowIndex !== e && (this.rowIndex = e, this.dispatchRowEvent("rowIndexChanged"));
  }
  setAllChildrenCount(e) {
    this.allChildrenCount !== e && (this.allChildrenCount = e, this.dispatchRowEvent("allChildrenCountChanged"));
  }
  setUiLevel(e) {
    this.uiLevel !== e && (this.uiLevel = e, this.dispatchRowEvent("uiLevelChanged"));
  }
  getFirstChild() {
    return this.childStore ? this.childStore.getFirstNode() : this.childrenAfterSort?.[0] ?? null;
  }
};
function AP(e, t, i) {
  return Z(t, {
    type: i,
    node: e,
    data: e.data,
    rowIndex: e.rowIndex,
    rowPinned: e.rowPinned
  });
}
var IP = /* @__PURE__ */ new Set(["__localEventService", "__objectId", "sticky", "__autoHeights", "__checkAutoHeightsDebounced", "childStore"]);
function kP(e, t) {
  const i = new zi(t);
  return Object.keys(e).forEach((s) => {
    IP.has(s) || (i[s] = e[s]);
  }), i.oldRowTop = null, i;
}
var sm = {
  agSetColumnFilter: "agSetColumnFilterHandler",
  agMultiColumnFilter: "agMultiColumnFilterHandler",
  agGroupColumnFilter: "agGroupColumnFilterHandler",
  agNumberColumnFilter: "agNumberColumnFilterHandler",
  agDateColumnFilter: "agDateColumnFilterHandler",
  agTextColumnFilter: "agTextColumnFilterHandler"
}, LP = new Set(Object.values(sm));
function ei(e, t) {
  const i = e.filterUi;
  if (!i)
    return null;
  if (i.created)
    return i.promise;
  if (t)
    return null;
  const s = i.create(i.refreshed), o = i;
  return o.created = !0, o.promise = s, s;
}
function OP(e, t, i, s, o, n) {
  return t.refresh?.({ ...i, model: s, source: n }), e().then((r) => {
    if (r) {
      const { filter: a, filterParams: l } = r;
      om(a, l, s, o, n);
    }
  });
}
function om(e, t, i, s, o) {
  e?.refresh?.({
    ...t,
    model: i,
    state: s,
    source: o
  });
}
function nm(e, t, i) {
  const s = e();
  s?.created && s.promise.then((o) => {
    const n = t();
    om(o, s.filterParams, n, i() ?? { model: n }, "ui");
  });
}
function Iu(e, t, i, s, o, n) {
  let r, a = !1, l;
  switch (e) {
    case "apply": {
      const c = s();
      l = c?.model ?? null, r = {
        // keep the other UI state
        state: c?.state,
        model: l
      }, a = !0;
      break;
    }
    case "clear": {
      r = {
        // wipe other UI state
        model: null
      };
      break;
    }
    case "reset": {
      r = {
        // wipe other UI state
        model: null
      }, a = !0, l = null;
      break;
    }
    case "cancel": {
      r = {
        // wipe other UI state
        model: i()
      };
      break;
    }
  }
  o(r), a ? n(l) : nm(t, i, s);
}
function Ge(e, t) {
  return e[t] ?? null;
}
function VP(e) {
  return {
    tag: "div",
    cls: e
  };
}
var GP = class extends pe {
  constructor(e) {
    const { className: t = "ag-filter-apply-panel" } = e ?? {};
    super(VP(t)), this.listeners = [], this.validationMessage = null, this.className = t;
  }
  updateButtons(e, t) {
    const i = this.buttons;
    if (this.buttons = e, i === e)
      return;
    const s = this.getGui();
    ct(s);
    let o;
    this.destroyListeners();
    const n = document.createDocumentFragment(), r = this.className, a = ({ type: c, label: d }) => {
      const u = (C) => {
        this.dispatchLocalEvent({
          type: c,
          event: C
        });
      };
      ["apply", "clear", "reset", "cancel"].includes(c) || B(75);
      const h = c === "apply", p = Ae({
        tag: "button",
        attrs: { type: h && t ? "submit" : "button" },
        ref: `${c}FilterButton`,
        cls: `ag-button ag-standard-button ${r}-button${h ? " " + r + "-apply-button" : ""}`,
        children: d
      });
      this.activateTabIndex([p]), h && (o = p);
      const f = (C) => {
        C.key === E.ENTER && (C.preventDefault(), u(C));
      }, m = this.listeners;
      p.addEventListener("click", u), m.push(() => p.removeEventListener("click", u)), p.addEventListener("keydown", f), m.push(() => p.removeEventListener("keydown", f)), n.append(p);
    };
    e.forEach((c) => a(c)), this.eApply = o;
    const l = this.validationTooltipFeature;
    o && !l ? this.validationTooltipFeature = this.createOptionalManagedBean(
      this.beans.registry.createDynamicBean("tooltipFeature", !1, {
        getGui: () => this.eApply,
        getLocation: () => "advancedFilter",
        getTooltipShowDelayOverride: () => 1e3
      })
    ) : !o && l && (this.validationTooltipFeature = this.destroyBean(l)), s.append(n);
  }
  getApplyButton() {
    return this.eApply;
  }
  updateValidity(e, t = null) {
    const i = this.eApply;
    i && (vo(i, e === !1), this.validationMessage = t ?? null, this.validationTooltipFeature?.setTooltipAndRefresh(this.validationMessage));
  }
  destroyListeners() {
    this.listeners.forEach((e) => e()), this.listeners = [];
  }
  destroy() {
    this.destroyListeners(), super.destroy();
  }
}, HP = {
  applyFilter: "Apply",
  clearFilter: "Clear",
  resetFilter: "Reset",
  cancelFilter: "Cancel",
  textFilter: "Text Filter",
  numberFilter: "Number Filter",
  dateFilter: "Date Filter",
  setFilter: "Set Filter",
  filterOoo: "Filter...",
  empty: "Choose one",
  equals: "Equals",
  notEqual: "Does not equal",
  lessThan: "Less than",
  greaterThan: "Greater than",
  inRange: "Between",
  inRangeStart: "From",
  inRangeEnd: "To",
  lessThanOrEqual: "Less than or equal to",
  greaterThanOrEqual: "Greater than or equal to",
  contains: "Contains",
  notContains: "Does not contain",
  startsWith: "Begins with",
  endsWith: "Ends with",
  blank: "Blank",
  notBlank: "Not blank",
  before: "Before",
  after: "After",
  andCondition: "AND",
  orCondition: "OR",
  dateFormatOoo: "yyyy-mm-dd",
  filterSummaryInactive: "is (All)",
  filterSummaryContains: "contains",
  filterSummaryNotContains: "does not contain",
  filterSummaryTextEquals: "equals",
  filterSummaryTextNotEqual: "does not equal",
  filterSummaryStartsWith: "begins with",
  filterSummaryEndsWith: "ends with",
  filterSummaryBlank: "is blank",
  filterSummaryNotBlank: "is not blank",
  filterSummaryEquals: "=",
  filterSummaryNotEqual: "!=",
  filterSummaryGreaterThan: ">",
  filterSummaryGreaterThanOrEqual: ">=",
  filterSummaryLessThan: "<",
  filterSummaryLessThanOrEqual: "<=",
  filterSummaryInRange: "between",
  filterSummaryInRangeValues: (e) => `(${e[0]}, ${e[1]})`,
  filterSummaryTextQuote: (e) => `"${e[0]}"`
};
function ni(e, t, i) {
  return SR(e, HP, t, i);
}
function vc(e, t) {
  const { debounceMs: i } = e;
  return gr(e) ? (i != null && B(71), 0) : i ?? t;
}
function gr(e) {
  return (e.buttons?.indexOf("apply") ?? -1) >= 0;
}
var BP = class extends pe {
  constructor(e, t, i, s, o, n) {
    super(), this.column = e, this.wrapper = t, this.eventParent = i, this.updateModel = s, this.isGlobalButtons = o, this.enableGlobalButtonCheck = n, this.hidePopup = null, this.applyActive = !1;
  }
  postConstruct() {
    const { comp: e, params: t } = this.wrapper, i = t, s = i.useForm, o = s ? "form" : "div";
    this.setTemplate({
      tag: o,
      cls: "ag-filter-wrapper"
    }), s && this.addManagedElementListeners(this.getGui(), {
      submit: (n) => {
        n?.preventDefault();
      },
      keydown: this.handleKeyDown.bind(this)
    }), this.appendChild(e.getGui()), this.params = i, this.resetButtonsPanel(i), this.addManagedListeners(this.eventParent, {
      filterParamsChanged: ({ column: n, params: r }) => {
        n === this.column && this.resetButtonsPanel(r, this.params);
      },
      filterStateChanged: ({ column: n, state: r }) => {
        n === this.column && this.eButtons?.updateValidity(r.valid !== !1);
      },
      filterAction: ({ column: n, action: r, event: a }) => {
        n === this.column && this.afterAction(r, a);
      },
      ...this.enableGlobalButtonCheck ? {
        filterGlobalButtons: ({ isGlobal: n }) => {
          if (n !== this.isGlobalButtons) {
            this.isGlobalButtons = n;
            const r = this.params;
            this.resetButtonsPanel(r, r, !0);
          }
        }
      } : void 0
    });
  }
  afterGuiAttached(e) {
    e && (this.hidePopup = e.hidePopup);
  }
  resetButtonsPanel(e, t, i) {
    const { buttons: s, readOnly: o } = t ?? {}, { buttons: n, readOnly: r, useForm: a } = e;
    if (!i && o === r && mo(s, n))
      return;
    const l = n && n.length > 0 && !e.readOnly && !this.isGlobalButtons;
    let c = this.eButtons;
    if (l) {
      const d = n.map((u) => {
        const h = `${u}Filter`;
        return { type: u, label: ni(this, h) };
      });
      if (this.applyActive = gr(this.params), !c) {
        c = this.createBean(new GP()), this.appendChild(c.getGui());
        const u = this.column, h = (g) => ({ event: p }) => {
          this.updateModel(u, g), this.afterAction(g, p);
        };
        c?.addManagedListeners(c, {
          apply: h("apply"),
          clear: h("clear"),
          reset: h("reset"),
          cancel: h("cancel")
        }), this.eButtons = c;
      }
      c.updateButtons(d, a);
    } else
      this.applyActive = !1, c && (Xt(c.getGui()), this.eButtons = this.destroyBean(c));
  }
  close(e) {
    const t = this.hidePopup;
    if (!t)
      return;
    const i = e, s = i && i.key;
    let o;
    (s === E.ENTER || s === E.SPACE) && (o = { keyboardEvent: i }), t(o), this.hidePopup = null;
  }
  afterAction(e, t) {
    const { params: i, applyActive: s } = this, o = i?.closeOnApply;
    switch (e) {
      case "apply": {
        t?.preventDefault(), o && s && this.close(t);
        break;
      }
      case "reset": {
        o && s && this.close();
        break;
      }
      case "cancel": {
        o && this.close(t);
        break;
      }
    }
  }
  handleKeyDown(e) {
    !e.defaultPrevented && e.key === E.ENTER && this.applyActive && (this.updateModel(this.column, "apply"), this.afterAction("apply", e));
  }
  destroy() {
    this.hidePopup = null, this.eButtons = this.destroyBean(this.eButtons);
  }
}, NP = { tag: "div", cls: "ag-filter" }, WP = class extends pe {
  constructor(e, t, i) {
    super(NP), this.column = e, this.source = t, this.enableGlobalButtonCheck = i, this.wrapper = null;
  }
  postConstruct() {
    this.beans.colFilter?.activeFilterComps.add(this), this.createFilter(!0), this.addManagedEventListeners({ filterDestroyed: this.onFilterDestroyed.bind(this) });
  }
  hasFilter() {
    return this.wrapper != null;
  }
  getFilter() {
    return this.wrapper?.then((e) => e.comp) ?? null;
  }
  afterInit() {
    return this.wrapper?.then(() => {
    }) ?? re.resolve();
  }
  afterGuiAttached(e) {
    this.afterGuiAttachedParams = e, this.wrapper?.then((t) => {
      this.comp?.afterGuiAttached(e), t?.comp?.afterGuiAttached?.(e);
    });
  }
  afterGuiDetached() {
    this.wrapper?.then((e) => {
      e?.comp?.afterGuiDetached?.();
    });
  }
  createFilter(e) {
    const {
      column: t,
      source: i,
      beans: { colFilter: s }
    } = this, o = s.getFilterUiForDisplay(t) ?? null;
    this.wrapper = o, o?.then((n) => {
      if (!n)
        return;
      const { isHandler: r, comp: a } = n;
      let l;
      if (r) {
        const c = !!this.enableGlobalButtonCheck, d = this.createBean(
          new BP(
            t,
            n,
            s,
            s.updateModel.bind(s),
            c && s.isGlobalButtons,
            c
          )
        );
        this.comp = d, l = d.getGui();
      } else
        l = a.getGui(), $(l) || B(69, { guiFromFilter: l });
      this.appendChild(l), e ? this.eventSvc.dispatchEvent({
        type: "filterOpened",
        column: t,
        source: i,
        eGui: this.getGui()
      }) : a.afterGuiAttached?.(this.afterGuiAttachedParams);
    });
  }
  onFilterDestroyed(e) {
    const { source: t, column: i } = e;
    (t === "api" || t === "paramsUpdated") && i.getId() === this.column.getId() && this.beans.colModel.getColDefCol(this.column) && (ct(this.getGui()), this.comp = this.destroyBean(this.comp), this.createFilter());
  }
  destroy() {
    this.beans.colFilter?.activeFilterComps.delete(this), this.eventSvc.dispatchEvent({
      type: "filterClosed",
      column: this.column
    }), this.wrapper = null, this.comp = this.destroyBean(this.comp), this.afterGuiAttachedParams = void 0, super.destroy();
  }
}, wc = "T", zP = new RegExp(`^\\d{4}-\\d{2}-\\d{2}(${wc}\\d{2}:\\d{2}:\\d{2}\\D?)?`);
function At(e, t) {
  return e.toString().padStart(t, "0");
}
function lt(e, t = !0, i = "-") {
  if (!e)
    return null;
  let s = [e.getFullYear(), e.getMonth() + 1, e.getDate()].map((o) => At(o, 2)).join(i);
  return t && (s += wc + [e.getHours(), e.getMinutes(), e.getSeconds()].map((o) => At(o, 2)).join(":")), s;
}
function Yo(e, t = !0) {
  return e ? t ? [
    String(e.getFullYear()),
    String(e.getMonth() + 1),
    At(e.getDate(), 2),
    At(e.getHours(), 2),
    `:${At(e.getMinutes(), 2)}`,
    `:${At(e.getSeconds(), 2)}`
  ] : [e.getFullYear(), e.getMonth() + 1, At(e.getDate(), 2)].map(String) : null;
}
var $r = (e) => {
  if (e > 3 && e < 21)
    return "th";
  switch (e % 10) {
    case 1:
      return "st";
    case 2:
      return "nd";
    case 3:
      return "rd";
  }
  return "th";
};
function sl(e, t) {
  if (t == null)
    return lt(e, !1);
  const i = At(e.getFullYear(), 4), s = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ], o = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], n = {
    YYYY: () => i.slice(i.length - 4, i.length),
    YY: () => i.slice(i.length - 2, i.length),
    Y: () => `${e.getFullYear()}`,
    MMMM: () => s[e.getMonth()],
    MMM: () => s[e.getMonth()].slice(0, 3),
    MM: () => At(e.getMonth() + 1, 2),
    Mo: () => `${e.getMonth() + 1}${$r(e.getMonth() + 1)}`,
    M: () => `${e.getMonth() + 1}`,
    Do: () => `${e.getDate()}${$r(e.getDate())}`,
    DD: () => At(e.getDate(), 2),
    D: () => `${e.getDate()}`,
    dddd: () => o[e.getDay()],
    ddd: () => o[e.getDay()].slice(0, 3),
    dd: () => o[e.getDay()].slice(0, 2),
    do: () => `${e.getDay()}${$r(e.getDay())}`,
    d: () => `${e.getDay()}`
  }, r = new RegExp(Object.keys(n).join("|"), "g");
  return t.replace(r, (a) => a in n ? n[a]() : a);
}
function Cn(e, t = !1) {
  return !!st(e, t);
}
function _P(e) {
  return Cn(e, !0);
}
function st(e, t = !1) {
  if (!e || !zP.test(e))
    return null;
  const [i, s] = e.split(wc);
  if (!i)
    return null;
  const o = i.split("-").map((h) => parseInt(h, 10));
  if (o.filter((h) => !isNaN(h)).length !== 3)
    return null;
  const [n, r, a] = o, l = new Date(n, r - 1, a);
  if (l.getFullYear() !== n || l.getMonth() !== r - 1 || l.getDate() !== a || !s && t)
    return null;
  if (!s || s === "00:00:00")
    return l;
  const [c, d, u] = s.split(":").map((h) => parseInt(h, 10));
  if (c >= 0 && c < 24)
    l.setHours(c);
  else if (t)
    return null;
  if (d >= 0 && d < 60)
    l.setMinutes(d);
  else if (t)
    return null;
  if (u >= 0 && u < 60)
    l.setSeconds(u);
  else if (t)
    return null;
  return l;
}
var ku = {
  january: "January",
  february: "February",
  march: "March",
  april: "April",
  may: "May",
  june: "June",
  july: "July",
  august: "August",
  september: "September",
  october: "October",
  november: "November",
  december: "December"
}, Lu = [
  "january",
  "february",
  "march",
  "april",
  "may",
  "june",
  "july",
  "august",
  "september",
  "october",
  "november",
  "december"
];
function UP(e, t) {
  return e == null ? -1 : t == null ? 1 : parseFloat(e) - parseFloat(t);
}
function Ou(e) {
  return e instanceof Date && !isNaN(e.getTime());
}
var ol = {
  number: () => {
  },
  boolean: () => ({
    maxNumConditions: 1,
    debounceMs: 0,
    filterOptions: [
      "empty",
      {
        displayKey: "true",
        displayName: "True",
        predicate: (e, t) => t,
        numberOfInputs: 0
      },
      {
        displayKey: "false",
        displayName: "False",
        predicate: (e, t) => t === !1,
        numberOfInputs: 0
      }
    ]
  }),
  date: () => ({ isValidDate: Ou }),
  dateString: ({ dataTypeDefinition: e }) => ({
    comparator: (t, i) => {
      const s = e.dateParser(i);
      return i == null || s < t ? -1 : s > t ? 1 : 0;
    },
    isValidDate: (t) => typeof t == "string" && Ou(e.dateParser(t))
  }),
  dateTime: (e) => ol.date(e),
  dateTimeString: (e) => ol.dateString(e),
  object: () => {
  },
  text: () => {
  }
}, nl = {
  number: () => ({ comparator: UP }),
  boolean: ({ t: e }) => ({
    valueFormatter: (t) => $(t.value) ? e(String(t.value), t.value ? "True" : "False") : e("blanks", "(Blanks)")
  }),
  date: ({ formatValue: e, t }) => ({
    valueFormatter: (i) => {
      const s = e(i);
      return $(s) ? s : t("blanks", "(Blanks)");
    },
    treeList: !0,
    treeListFormatter: (i, s) => {
      if (i === "NaN")
        return t("invalidDate", "Invalid Date");
      if (s === 1 && i != null) {
        const o = Lu[Number(i) - 1];
        return t(o, ku[o]);
      }
      return i ?? t("blanks", "(Blanks)");
    },
    treeListPathGetter: (i) => Yo(i, !1)
  }),
  dateString: ({ formatValue: e, dataTypeDefinition: t, t: i }) => ({
    valueFormatter: (s) => {
      const o = e(s);
      return $(o) ? o : i("blanks", "(Blanks)");
    },
    treeList: !0,
    treeListPathGetter: (s) => Yo(t.dateParser(s ?? void 0), !1),
    treeListFormatter: (s, o) => {
      if (o === 1 && s != null) {
        const n = Lu[Number(s) - 1];
        return i(n, ku[n]);
      }
      return s ?? i("blanks", "(Blanks)");
    }
  }),
  dateTime: (e) => {
    const t = nl.date(e);
    return t.treeListPathGetter = Yo, t;
  },
  dateTimeString(e) {
    const t = e.dataTypeDefinition.dateParser, i = nl.dateString(e);
    return i.treeListPathGetter = (s) => Yo(t(s ?? void 0)), i;
  },
  object: ({ formatValue: e, t }) => ({
    valueFormatter: (i) => {
      const s = e(i);
      return $(s) ? s : t("blanks", "(Blanks)");
    }
  }),
  text: () => {
  }
};
function jP(e, t, i, s, o, n, r) {
  let a = t, l = i;
  const c = e === "agSetColumnFilter";
  !l && s.baseDataType === "object" && !c && (l = ({ column: g, node: p }) => o({ column: g, node: p, value: n.valueSvc.getValue(g, p) }));
  const u = (c ? nl : ol)[s.baseDataType], h = u({ dataTypeDefinition: s, formatValue: o, t: r });
  return a = typeof t == "object" ? {
    ...h,
    ...t
  } : h, { filterParams: a, filterValueGetter: l };
}
var $P = {
  boolean: "agTextColumnFilter",
  date: "agDateColumnFilter",
  dateString: "agDateColumnFilter",
  dateTime: "agDateColumnFilter",
  dateTimeString: "agDateColumnFilter",
  number: "agNumberColumnFilter",
  object: "agTextColumnFilter",
  text: "agTextColumnFilter"
}, KP = {
  boolean: "agTextColumnFloatingFilter",
  date: "agDateColumnFloatingFilter",
  dateString: "agDateColumnFloatingFilter",
  dateTime: "agDateColumnFloatingFilter",
  dateTimeString: "agDateColumnFloatingFilter",
  number: "agNumberColumnFloatingFilter",
  object: "agTextColumnFloatingFilter",
  text: "agTextColumnFloatingFilter"
};
function YP(e, t = !1) {
  return (t ? KP : $P)[e ?? "text"];
}
var rm = "ag-resizer-wrapper", ti = (e, t) => ({
  tag: "div",
  ref: `${e}Resizer`,
  cls: `ag-resizer ag-resizer-${t}`
}), qP = {
  tag: "div",
  cls: rm,
  children: [
    ti("eTopLeft", "topLeft"),
    ti("eTop", "top"),
    ti("eTopRight", "topRight"),
    ti("eRight", "right"),
    ti("eBottomRight", "bottomRight"),
    ti("eBottom", "bottom"),
    ti("eBottomLeft", "bottomLeft"),
    ti("eLeft", "left")
  ]
}, XP = class extends T {
  constructor(e, t) {
    super(), this.element = e, this.dragStartPosition = {
      x: 0,
      y: 0
    }, this.position = {
      x: 0,
      y: 0
    }, this.lastSize = {
      width: -1,
      height: -1
    }, this.positioned = !1, this.resizersAdded = !1, this.resizeListeners = [], this.boundaryEl = null, this.isResizing = !1, this.isMoving = !1, this.resizable = {}, this.movable = !1, this.currentResizer = null, this.config = Object.assign({}, { popup: !1 }, t);
  }
  wireBeans(e) {
    this.popupSvc = e.popupSvc, this.dragSvc = e.dragSvc;
  }
  center(e) {
    const { clientHeight: t, clientWidth: i } = this.offsetParent, s = i / 2 - this.getWidth() / 2, o = t / 2 - this.getHeight() / 2;
    this.offsetElement(s, o, e);
  }
  initialisePosition(e) {
    if (this.positioned)
      return;
    const { centered: t, forcePopupParentAsOffsetParent: i, minWidth: s, width: o, minHeight: n, height: r, x: a, y: l } = this.config;
    this.offsetParent || this.setOffsetParent();
    let c = 0, d = 0;
    const u = Ht(this.element);
    if (u) {
      const h = this.findBoundaryElement(), g = window.getComputedStyle(h);
      if (g.minWidth != null) {
        const p = h.offsetWidth - this.element.offsetWidth;
        d = parseInt(g.minWidth, 10) - p;
      }
      if (g.minHeight != null) {
        const p = h.offsetHeight - this.element.offsetHeight;
        c = parseInt(g.minHeight, 10) - p;
      }
    }
    if (this.minHeight = n || c, this.minWidth = s || d, o && this.setWidth(o), r && this.setHeight(r), (!o || !r) && this.refreshSize(), t)
      this.center(e);
    else if (a || l)
      this.offsetElement(a, l, e);
    else if (u && i) {
      let h = this.boundaryEl, g = !0;
      if (h || (h = this.findBoundaryElement(), g = !1), h) {
        const p = parseFloat(h.style.top), f = parseFloat(h.style.left);
        g ? this.offsetElement(isNaN(f) ? 0 : f, isNaN(p) ? 0 : p, e) : this.setPosition(f, p);
      }
    }
    this.positioned = !!this.offsetParent;
  }
  isPositioned() {
    return this.positioned;
  }
  getPosition() {
    return this.position;
  }
  setMovable(e, t) {
    if (!this.config.popup || e === this.movable)
      return;
    this.movable = e;
    const i = this.moveElementDragListener || {
      eElement: t,
      onDragStart: this.onMoveStart.bind(this),
      onDragging: this.onMove.bind(this),
      onDragStop: this.onMoveEnd.bind(this)
    };
    e ? (this.dragSvc?.addDragSource(i), this.moveElementDragListener = i) : (this.dragSvc?.removeDragSource(i), this.moveElementDragListener = void 0);
  }
  setResizable(e) {
    if (this.clearResizeListeners(), e ? this.addResizers() : this.removeResizers(), typeof e == "boolean") {
      if (e === !1)
        return;
      e = {
        topLeft: e,
        top: e,
        topRight: e,
        right: e,
        bottomRight: e,
        bottom: e,
        bottomLeft: e,
        left: e
      };
    }
    Object.keys(e).forEach((t) => {
      const s = !!e[t], o = this.getResizerElement(t), n = {
        dragStartPixels: 0,
        eElement: o,
        onDragStart: (r) => this.onResizeStart(r, t),
        onDragging: this.onResize.bind(this),
        onDragStop: (r) => this.onResizeEnd(r, t)
      };
      (s || !this.isAlive() && !s) && (s ? (this.dragSvc?.addDragSource(n), this.resizeListeners.push(n), o.style.pointerEvents = "all") : o.style.pointerEvents = "none", this.resizable[t] = s);
    });
  }
  removeSizeFromEl() {
    this.element.style.removeProperty("height"), this.element.style.removeProperty("width"), this.element.style.removeProperty("flex");
  }
  restoreLastSize() {
    this.element.style.flex = "0 0 auto";
    const { height: e, width: t } = this.lastSize;
    t !== -1 && (this.element.style.width = `${t}px`), e !== -1 && (this.element.style.height = `${e}px`);
  }
  getHeight() {
    return this.element.offsetHeight;
  }
  setHeight(e) {
    const { popup: t } = this.config, i = this.element;
    let s = !1;
    if (typeof e == "string" && e.indexOf("%") !== -1)
      to(i, e), e = jp(i), s = !0;
    else if (e = Math.max(this.minHeight, e), this.positioned) {
      const o = this.getAvailableHeight();
      o && e > o && (e = o);
    }
    this.getHeight() !== e && (s ? (i.style.maxHeight = "unset", i.style.minHeight = "unset") : t ? to(i, e) : (i.style.height = `${e}px`, i.style.flex = "0 0 auto", this.lastSize.height = typeof e == "number" ? e : parseFloat(e)));
  }
  getAvailableHeight() {
    const { popup: e, forcePopupParentAsOffsetParent: t } = this.config;
    this.positioned || this.initialisePosition();
    const { clientHeight: i } = this.offsetParent;
    if (!i)
      return null;
    const s = this.element.getBoundingClientRect(), o = this.offsetParent.getBoundingClientRect(), n = e ? this.position.y : s.top, r = e ? 0 : o.top;
    let a = 0;
    if (t) {
      const c = this.element.parentElement;
      if (c) {
        const { bottom: d } = c.getBoundingClientRect();
        a = d - s.bottom;
      }
    }
    return i + r - n - a;
  }
  getWidth() {
    return this.element.offsetWidth;
  }
  setWidth(e) {
    const t = this.element, { popup: i } = this.config;
    let s = !1;
    if (typeof e == "string" && e.indexOf("%") !== -1)
      Vt(t, e), e = On(t), s = !0;
    else if (this.positioned) {
      e = Math.max(this.minWidth, e);
      const { clientWidth: o } = this.offsetParent, n = i ? this.position.x : this.element.getBoundingClientRect().left;
      o && e + n > o && (e = o - n);
    }
    this.getWidth() !== e && (s ? (t.style.maxWidth = "unset", t.style.minWidth = "unset") : this.config.popup ? Vt(t, e) : (t.style.width = `${e}px`, t.style.flex = " unset", this.lastSize.width = typeof e == "number" ? e : parseFloat(e)));
  }
  offsetElement(e = 0, t = 0, i) {
    const { forcePopupParentAsOffsetParent: s } = this.config, o = s ? this.boundaryEl : this.element;
    o && (this.popupSvc?.positionPopup({
      ePopup: o,
      keepWithinBounds: !0,
      skipObserver: this.movable || this.isResizable(),
      updatePosition: () => ({ x: e, y: t }),
      postProcessCallback: i
    }), this.setPosition(parseFloat(o.style.left), parseFloat(o.style.top)));
  }
  constrainSizeToAvailableHeight(e) {
    if (!this.config.forcePopupParentAsOffsetParent)
      return;
    const t = () => {
      const i = this.getAvailableHeight();
      this.element.style.setProperty("max-height", `${i}px`);
    };
    e && this.popupSvc ? (this.resizeObserverSubscriber?.(), this.resizeObserverSubscriber = Qt(
      this.beans,
      this.popupSvc?.getPopupParent(),
      t
    )) : (this.element.style.removeProperty("max-height"), this.resizeObserverSubscriber && (this.resizeObserverSubscriber(), this.resizeObserverSubscriber = void 0));
  }
  setPosition(e, t) {
    this.position.x = e, this.position.y = t;
  }
  updateDragStartPosition(e, t) {
    this.dragStartPosition = { x: e, y: t };
  }
  calculateMouseMovement(e) {
    const { e: t, isLeft: i, isTop: s, anywhereWithin: o, topBuffer: n } = e, r = t.clientX - this.dragStartPosition.x, a = t.clientY - this.dragStartPosition.y, l = this.shouldSkipX(t, !!i, !!o, r) ? 0 : r, c = this.shouldSkipY(t, !!s, n, a) ? 0 : a;
    return { movementX: l, movementY: c };
  }
  shouldSkipX(e, t, i, s) {
    const o = this.element.getBoundingClientRect(), n = this.offsetParent.getBoundingClientRect(), r = this.boundaryEl.getBoundingClientRect(), a = this.config.popup ? this.position.x : o.left;
    let l = a <= 0 && n.left >= e.clientX || n.right <= e.clientX && n.right <= r.right;
    return l ? !0 : (t ? l = // skip if we are moving to the left and the cursor
    // is positioned to the right of the left side anchor
    s < 0 && e.clientX > a + n.left || // skip if we are moving to the right and the cursor
    // is positioned to the left of the dialog
    s > 0 && e.clientX < a + n.left : i ? l = s < 0 && e.clientX > r.right || s > 0 && e.clientX < a + n.left : l = // if the movement is bound to the right side of the dialog
    // we skip if we are moving to the left and the cursor
    // is to the right of the dialog
    s < 0 && e.clientX > r.right || // or skip if we are moving to the right and the cursor
    // is to the left of the right side anchor
    s > 0 && e.clientX < r.right, l);
  }
  shouldSkipY(e, t, i = 0, s) {
    const o = this.element.getBoundingClientRect(), n = this.offsetParent.getBoundingClientRect(), r = this.boundaryEl.getBoundingClientRect(), a = this.config.popup ? this.position.y : o.top;
    let l = a <= 0 && n.top >= e.clientY || n.bottom <= e.clientY && n.bottom <= r.bottom;
    return l ? !0 : (t ? l = // skip if we are moving to towards top and the cursor is
    // below the top anchor + topBuffer
    // note: topBuffer is used when moving the dialog using the title bar
    s < 0 && e.clientY > a + n.top + i || // skip if we are moving to the bottom and the cursor is
    // above the top anchor
    s > 0 && e.clientY < a + n.top : l = // skip if we are moving towards the top and the cursor
    // is below the bottom anchor
    s < 0 && e.clientY > r.bottom || // skip if we are moving towards the bottom and the cursor
    // is above the bottom anchor
    s > 0 && e.clientY < r.bottom, l);
  }
  createResizeMap() {
    const e = (t) => ({
      element: this.element.querySelector(`[data-ref=${t}Resizer]`)
    });
    this.resizerMap = {
      topLeft: e("eTopLeft"),
      top: e("eTop"),
      topRight: e("eTopRight"),
      right: e("eRight"),
      bottomRight: e("eBottomRight"),
      bottom: e("eBottom"),
      bottomLeft: e("eBottomLeft"),
      left: e("eLeft")
    };
  }
  addResizers() {
    if (this.resizersAdded)
      return;
    const e = this.element;
    e && (e.appendChild(Ae(qP)), this.createResizeMap(), this.resizersAdded = !0);
  }
  removeResizers() {
    this.resizerMap = void 0;
    const e = this.element.querySelector(`.${rm}`);
    e && this.element.removeChild(e), this.resizersAdded = !1;
  }
  getResizerElement(e) {
    return this.resizerMap[e].element;
  }
  onResizeStart(e, t) {
    this.boundaryEl = this.findBoundaryElement(), this.positioned || this.initialisePosition(), this.currentResizer = {
      isTop: !!t.match(/top/i),
      isRight: !!t.match(/right/i),
      isBottom: !!t.match(/bottom/i),
      isLeft: !!t.match(/left/i)
    }, this.element.classList.add("ag-resizing"), this.resizerMap[t].element.classList.add("ag-active");
    const { popup: i, forcePopupParentAsOffsetParent: s } = this.config;
    !i && !s && this.applySizeToSiblings(this.currentResizer.isBottom || this.currentResizer.isTop), this.isResizing = !0, this.updateDragStartPosition(e.clientX, e.clientY);
  }
  getSiblings() {
    const t = this.element.parentElement;
    return t ? Array.prototype.slice.call(t.children).filter((i) => !i.classList.contains("ag-hidden")) : null;
  }
  getMinSizeOfSiblings() {
    const e = this.getSiblings() || [];
    let t = 0, i = 0;
    for (let s = 0; s < e.length; s++) {
      const o = e[s], n = !!o.style.flex && o.style.flex !== "0 0 auto";
      if (o === this.element)
        continue;
      let r = this.minHeight || 0, a = this.minWidth || 0;
      if (n) {
        const l = window.getComputedStyle(o);
        l.minHeight && (r = parseInt(l.minHeight, 10)), l.minWidth && (a = parseInt(l.minWidth, 10));
      } else
        r = o.offsetHeight, a = o.offsetWidth;
      t += r, i += a;
    }
    return { height: t, width: i };
  }
  applySizeToSiblings(e) {
    let t = null;
    const i = this.getSiblings();
    if (i) {
      for (let s = 0; s < i.length; s++) {
        const o = i[s];
        o !== t && (e ? o.style.height = `${o.offsetHeight}px` : o.style.width = `${o.offsetWidth}px`, o.style.flex = "0 0 auto", o === this.element && (t = i[s + 1]));
      }
      t && (t.style.removeProperty("height"), t.style.removeProperty("min-height"), t.style.removeProperty("max-height"), t.style.flex = "1 1 auto");
    }
  }
  isResizable() {
    return Object.values(this.resizable).some((e) => e);
  }
  onResize(e) {
    if (!this.isResizing || !this.currentResizer)
      return;
    const { popup: t, forcePopupParentAsOffsetParent: i } = this.config, { isTop: s, isRight: o, isBottom: n, isLeft: r } = this.currentResizer, a = o || r, l = n || s, { movementX: c, movementY: d } = this.calculateMouseMovement({ e, isLeft: r, isTop: s }), u = this.position.x, h = this.position.y;
    let g = 0, p = 0;
    if (a && c) {
      const f = r ? -1 : 1, m = this.getWidth(), C = m + c * f;
      let v = !1;
      r && (g = m - C, (u + g <= 0 || C <= this.minWidth) && (v = !0, g = 0)), v || this.setWidth(C);
    }
    if (l && d) {
      const f = s ? -1 : 1, m = this.getHeight(), C = m + d * f;
      let v = !1;
      s ? (p = m - C, (h + p <= 0 || C <= this.minHeight) && (v = !0, p = 0)) : !this.config.popup && !this.config.forcePopupParentAsOffsetParent && m < C && this.getMinSizeOfSiblings().height + C > this.element.parentElement.offsetHeight && (v = !0), v || this.setHeight(C);
    }
    this.updateDragStartPosition(e.clientX, e.clientY), ((t || i) && g || p) && this.offsetElement(u + g, h + p);
  }
  onResizeEnd(e, t) {
    this.isResizing = !1, this.currentResizer = null, this.boundaryEl = null, this.element.classList.remove("ag-resizing"), this.resizerMap[t].element.classList.remove("ag-active"), this.dispatchLocalEvent({ type: "resize" });
  }
  refreshSize() {
    const e = this.element;
    this.config.popup && (this.config.width || this.setWidth(e.offsetWidth), this.config.height || this.setHeight(e.offsetHeight));
  }
  onMoveStart(e) {
    this.boundaryEl = this.findBoundaryElement(), this.positioned || this.initialisePosition(), this.isMoving = !0, this.element.classList.add("ag-moving"), this.updateDragStartPosition(e.clientX, e.clientY);
  }
  onMove(e) {
    if (!this.isMoving)
      return;
    const { x: t, y: i } = this.position;
    let s;
    this.config.calculateTopBuffer && (s = this.config.calculateTopBuffer());
    const { movementX: o, movementY: n } = this.calculateMouseMovement({
      e,
      isTop: !0,
      anywhereWithin: !0,
      topBuffer: s
    });
    this.offsetElement(t + o, i + n), this.updateDragStartPosition(e.clientX, e.clientY);
  }
  onMoveEnd() {
    this.isMoving = !1, this.boundaryEl = null, this.element.classList.remove("ag-moving");
  }
  setOffsetParent() {
    this.config.forcePopupParentAsOffsetParent && this.popupSvc ? this.offsetParent = this.popupSvc.getPopupParent() : this.offsetParent = this.element.offsetParent;
  }
  findBoundaryElement() {
    let e = this.element;
    for (; e; ) {
      if (window.getComputedStyle(e).position !== "static")
        return e;
      e = e.parentElement;
    }
    return this.element;
  }
  clearResizeListeners() {
    for (; this.resizeListeners.length; ) {
      const e = this.resizeListeners.pop();
      this.dragSvc?.removeDragSource(e);
    }
  }
  destroy() {
    super.destroy(), this.moveElementDragListener && this.dragSvc?.removeDragSource(this.moveElementDragListener), this.constrainSizeToAvailableHeight(!1), this.clearResizeListeners(), this.removeResizers();
  }
}, ZP = "ag-focus-managed", Vs = class extends T {
  constructor(e, t = {}) {
    super(), this.eFocusable = e, this.callbacks = t, this.callbacks = {
      shouldStopEventPropagation: () => !1,
      onTabKeyDown: (i) => {
        if (i.defaultPrevented)
          return;
        const s = qi(this.beans, this.eFocusable, !1, i.shiftKey);
        s && (s.focus(), i.preventDefault());
      },
      ...t
    };
  }
  postConstruct() {
    const {
      eFocusable: e,
      callbacks: { onFocusIn: t, onFocusOut: i }
    } = this;
    e.classList.add(ZP), this.addKeyDownListeners(e), t && this.addManagedElementListeners(e, { focusin: t }), i && this.addManagedElementListeners(e, { focusout: i });
  }
  addKeyDownListeners(e) {
    this.addManagedElementListeners(e, {
      keydown: (t) => {
        if (t.defaultPrevented || jt(t))
          return;
        const { callbacks: i } = this;
        if (i.shouldStopEventPropagation(t)) {
          Bi(t);
          return;
        }
        t.key === E.TAB ? i.onTabKeyDown(t) : i.handleKeyDown && i.handleKeyDown(t);
      }
    });
  }
}, QP = class extends pe {
  constructor(e, t) {
    super(), this.filterNameKey = e, this.cssIdentifier = t, this.applyActive = !1, this.debouncePending = !1, this.defaultDebounceMs = 0;
  }
  postConstruct() {
    const e = {
      tag: "div",
      cls: `ag-filter-body-wrapper ag-${this.cssIdentifier}-body-wrapper`,
      children: [this.createBodyTemplate()]
    };
    this.setTemplate(e, this.getAgComponents()), this.createManagedBean(
      new Vs(this.getFocusableElement(), {
        handleKeyDown: this.handleKeyDown.bind(this)
      })
    ), this.positionableFeature = this.createBean(
      new XP(this.getPositionableElement(), {
        forcePopupParentAsOffsetParent: !0
      })
    );
  }
  handleKeyDown(e) {
  }
  init(e) {
    const t = e;
    this.setParams(t), this.setModelIntoUi(t.state.model, !0).then(() => this.updateUiVisibility());
  }
  refresh(e) {
    const t = e, i = this.params;
    this.params = t, t.source === "colDef" && this.updateParams(t, i);
    const o = t.state, n = this.state;
    return this.state = o, (o.model !== n.model || o.state !== n.state) && this.setModelIntoUi(o.model), !0;
  }
  /** Called on init only. Override in subclasses */
  setParams(e) {
    this.params = e, this.state = e.state, this.commonUpdateParams(e);
  }
  /** Called on refresh only. Override in subclasses */
  updateParams(e, t) {
    this.commonUpdateParams(e, t);
  }
  commonUpdateParams(e, t) {
    this.applyActive = gr(e), this.setupApplyDebounced();
  }
  /**
   * @deprecated v34 Use the same method on the filter handler (`api.getColumnFilterHandler()`) instead.
   */
  doesFilterPass(e) {
    B(283);
    const { getHandler: t, model: i, column: s } = this.params;
    return t().doesFilterPass({
      ...e,
      model: i,
      handlerParams: this.beans.colFilter.getHandlerParams(s)
    });
  }
  getFilterTitle() {
    return this.translate(this.filterNameKey);
  }
  /**
   * @deprecated v34 Filters are active when they have a model. Use `api.getColumnFilterModel()` instead.
   */
  isFilterActive() {
    return B(284), this.params.model != null;
  }
  setupApplyDebounced() {
    const e = vc(this.params, this.defaultDebounceMs), t = We(this, this.checkApplyDebounce.bind(this), e);
    this.applyDebounced = () => {
      this.debouncePending = !0, t();
    };
  }
  checkApplyDebounce() {
    this.debouncePending && (this.debouncePending = !1, this.doApplyModel());
  }
  /**
   * @deprecated v34 Use (`api.getColumnFilterModel()`) instead.
   */
  getModel() {
    return B(285), this.params.model;
  }
  /**
   * @deprecated v34 Use (`api.setColumnFilterModel()`) instead.
   */
  setModel(e) {
    B(286);
    const { beans: t, params: i } = this;
    return t.colFilter.setModelForColumnLegacy(i.column, e);
  }
  /**
   * Applies changes made in the UI to the filter, and returns true if the model has changed.
   */
  applyModel(e = "api") {
    return this.doApplyModel();
  }
  canApply(e) {
    return !0;
  }
  doApplyModel(e) {
    const { params: t, state: i } = this, s = !this.areModelsEqual(t.model, i.model);
    return s && t.onAction("apply", e), s;
  }
  /**
   * @deprecated v34 Internal method - should only be called by the grid.
   */
  onNewRowsLoaded() {
  }
  /**
   * By default, if the change came from a floating filter it will be applied immediately, otherwise if there is no
   * apply button it will be applied after a debounce, otherwise it will not be applied at all. This behaviour can
   * be adjusted by using the apply parameter.
   */
  onUiChanged(e, t = !1) {
    this.updateUiVisibility();
    const i = this.getModelFromUi(), s = {
      model: i,
      state: this.getState(),
      valid: this.canApply(i)
    };
    this.state = s;
    const o = this.params;
    o.onStateChange(s), o.onUiChange(this.getUiChangeEventParams()), this.gos.get("enableFilterHandlers") || this.eventSvc.dispatchEvent({
      type: "filterModified",
      column: o.column,
      filterInstance: this
    }), e ?? (e = this.applyActive ? void 0 : "debounce"), e === "immediately" ? this.doApplyModel({ afterFloatingFilter: t, afterDataChange: !1 }) : e === "debounce" && this.applyDebounced();
  }
  getState() {
  }
  getUiChangeEventParams() {
  }
  afterGuiAttached(e) {
    this.lastContainerType = e?.container, this.refreshFilterResizer(e?.container);
  }
  refreshFilterResizer(e) {
    const { positionableFeature: t, gos: i } = this;
    if (!t)
      return;
    const s = e === "floatingFilter" || e === "columnFilter";
    s ? (t.restoreLastSize(), t.setResizable(
      i.get("enableRtl") ? { bottom: !0, bottomLeft: !0, left: !0 } : { bottom: !0, bottomRight: !0, right: !0 }
    )) : (t.removeSizeFromEl(), t.setResizable(!1)), t.constrainSizeToAvailableHeight(s);
  }
  afterGuiDetached() {
    this.checkApplyDebounce(), this.positionableFeature?.constrainSizeToAvailableHeight(!1);
  }
  destroy() {
    this.positionableFeature = this.destroyBean(this.positionableFeature), super.destroy();
  }
  translate(e) {
    return ni(this, e);
  }
  // override to control positionable feature
  getPositionableElement() {
    return this.getGui();
  }
  areModelsEqual(e, t) {
    return e === t || e == null && t == null ? !0 : e == null || t == null ? !1 : this.areNonNullModelsEqual(e, t);
  }
};
function JP(e) {
  return !!e.operator;
}
function eE(e, t, i) {
  if (t == null)
    return null;
  let s = null;
  const { compName: o, jsComp: n, fwComp: r } = Vf(e, t);
  return o ? s = {
    agSetColumnFilter: "agSetColumnFloatingFilter",
    agMultiColumnFilter: "agMultiColumnFloatingFilter",
    agGroupColumnFilter: "agGroupColumnFloatingFilter",
    agNumberColumnFilter: "agNumberColumnFloatingFilter",
    agDateColumnFilter: "agDateColumnFloatingFilter",
    agTextColumnFilter: "agTextColumnFloatingFilter"
  }[o] : n == null && r == null && t.filter === !0 && (s = i()), s;
}
var vn = {
  AUTO_HEIGHT: "ag-layout-auto-height",
  NORMAL: "ag-layout-normal",
  PRINT: "ag-layout-print"
}, Sc = class extends T {
  constructor(e) {
    super(), this.view = e;
  }
  postConstruct() {
    this.addManagedPropertyListener("domLayout", this.updateLayoutClasses.bind(this)), this.updateLayoutClasses();
  }
  updateLayoutClasses() {
    const e = this.gos.get("domLayout"), t = {
      autoHeight: e === "autoHeight",
      normal: e === "normal",
      print: e === "print"
    }, i = t.autoHeight ? vn.AUTO_HEIGHT : t.print ? vn.PRINT : vn.NORMAL;
    this.view.updateLayoutClasses(i, t);
  }
}, ii = "Viewport", Vu = "fakeVScrollComp", Kr = [
  "fakeHScrollComp",
  "centerHeader",
  "topCenter",
  "bottomCenter",
  "stickyTopCenter",
  "stickyBottomCenter"
], Gu = 100, Yr = 150, tE = class extends T {
  constructor(e) {
    super(), this.clearRetryListenerFncs = [], this.lastScrollSource = [null, null], this.scrollLeft = -1, this.nextScrollTop = -1, this.scrollTop = -1, this.lastOffsetHeight = -1, this.lastScrollTop = -1, this.lastIsHorizontalScrollShowing = !1, this.scrollTimer = 0, this.isScrollActive = !1, this.isVerticalPositionInvalidated = !0, this.isHorizontalPositionInvalidated = !0, this.eBodyViewport = e, this.resetLastHScrollDebounced = We(
      this,
      () => this.lastScrollSource[
        1
        /* Horizontal */
      ] = null,
      Yr
    ), this.resetLastVScrollDebounced = We(
      this,
      () => this.lastScrollSource[
        0
        /* Vertical */
      ] = null,
      Yr
    );
  }
  wireBeans(e) {
    this.ctrlsSvc = e.ctrlsSvc, this.animationFrameSvc = e.animationFrameSvc, this.visibleCols = e.visibleCols;
  }
  destroy() {
    super.destroy(), this.clearRetryListenerFncs = [], window.clearTimeout(this.scrollTimer);
  }
  postConstruct() {
    this.enableRtl = this.gos.get("enableRtl");
    const e = this.invalidateVerticalScroll.bind(this), t = this.invalidateHorizontalScroll.bind(this);
    this.addManagedEventListeners({
      displayedColumnsWidthChanged: this.onDisplayedColumnsWidthChanged.bind(this),
      gridSizeChanged: e,
      // We only invalidate horizontal scrolling when the viewport switches
      // between scrollable and non-scrollable, avoiding unnecessary
      // invalidation on every gridSizeChanged event. If more properties
      // require invalidation, read/write DOM cycles may be needed.
      scrollGapChanged: t
    }), this.addManagedElementListeners(this.eBodyViewport, {
      scroll: e
    }), this.ctrlsSvc.whenReady(this, (i) => {
      this.centerRowsCtrl = i.center, this.onDisplayedColumnsWidthChanged(), this.addScrollListener();
    });
  }
  invalidateHorizontalScroll() {
    this.isHorizontalPositionInvalidated = !0;
  }
  invalidateVerticalScroll() {
    this.isVerticalPositionInvalidated = !0;
  }
  addScrollListener() {
    this.addHorizontalScrollListeners(), this.addVerticalScrollListeners();
  }
  addHorizontalScrollListeners() {
    this.addManagedElementListeners(this.centerRowsCtrl.eViewport, {
      scroll: this.onHScroll.bind(this, ii)
    });
    for (const e of Kr) {
      const t = this.ctrlsSvc.get(e);
      this.registerScrollPartner(t, this.onHScroll.bind(this, e));
    }
  }
  addVerticalScrollListeners() {
    const e = this.ctrlsSvc.get("fakeVScrollComp"), t = this.gos.get("debounceVerticalScrollbar"), i = t ? We(this, this.onVScroll.bind(this, ii), Gu) : this.onVScroll.bind(this, ii), s = t ? We(this, this.onVScroll.bind(this, Vu), Gu) : this.onVScroll.bind(this, Vu);
    this.addManagedElementListeners(this.eBodyViewport, { scroll: i }), this.registerScrollPartner(e, s);
  }
  registerScrollPartner(e, t) {
    e.onScrollCallback(t);
  }
  onDisplayedColumnsWidthChanged() {
    this.enableRtl && this.horizontallyScrollHeaderCenterAndFloatingCenter();
  }
  horizontallyScrollHeaderCenterAndFloatingCenter(e) {
    this.centerRowsCtrl != null && (e === void 0 && (e = this.centerRowsCtrl.getCenterViewportScrollLeft()), this.setScrollLeftForAllContainersExceptCurrent(Math.abs(e)));
  }
  setScrollLeftForAllContainersExceptCurrent(e) {
    for (const t of [...Kr, ii]) {
      if (this.lastScrollSource[
        1
        /* Horizontal */
      ] === t)
        continue;
      const i = this.getViewportForSource(t);
      Gn(i, e, this.enableRtl);
    }
  }
  getViewportForSource(e) {
    return e === ii ? this.centerRowsCtrl.eViewport : this.ctrlsSvc.get(e).eViewport;
  }
  isControllingScroll(e, t) {
    return this.lastScrollSource[t] == null ? (t === 0 ? this.lastScrollSource[0] = e : this.lastScrollSource[1] = e, !0) : this.lastScrollSource[t] === e;
  }
  onHScroll(e) {
    if (!this.isControllingScroll(
      e,
      1
      /* Horizontal */
    ))
      return;
    const t = this.centerRowsCtrl.eViewport, { scrollLeft: i } = t;
    if (this.shouldBlockScrollUpdate(1, i, !0))
      return;
    const s = Vn(this.getViewportForSource(e), this.enableRtl);
    this.doHorizontalScroll(s), this.resetLastHScrollDebounced();
  }
  onVScroll(e) {
    if (!this.isControllingScroll(
      e,
      0
      /* Vertical */
    ))
      return;
    let t;
    if (e === ii ? t = this.eBodyViewport.scrollTop : t = this.ctrlsSvc.get("fakeVScrollComp").getScrollPosition(), this.shouldBlockScrollUpdate(0, t, !0))
      return;
    const { animationFrameSvc: i } = this;
    i?.setScrollTop(t), this.nextScrollTop = t, e === ii ? this.ctrlsSvc.get("fakeVScrollComp").setScrollPosition(t) : this.eBodyViewport.scrollTop = t, i?.active ? i.schedule() : this.scrollGridIfNeeded(!0), this.resetLastVScrollDebounced();
  }
  doHorizontalScroll(e) {
    const t = this.ctrlsSvc.get("fakeHScrollComp").getScrollPosition();
    this.scrollLeft === e && e === t || (this.scrollLeft = e, this.fireScrollEvent(
      1
      /* Horizontal */
    ), this.horizontallyScrollHeaderCenterAndFloatingCenter(e), this.centerRowsCtrl.onHorizontalViewportChanged(!0));
  }
  isScrolling() {
    return this.isScrollActive;
  }
  fireScrollEvent(e) {
    const t = {
      type: "bodyScroll",
      direction: e === 1 ? "horizontal" : "vertical",
      left: this.scrollLeft,
      top: this.scrollTop
    };
    this.isScrollActive = !0, this.eventSvc.dispatchEvent(t), window.clearTimeout(this.scrollTimer), this.scrollTimer = window.setTimeout(() => {
      this.scrollTimer = 0, this.isScrollActive = !1, this.eventSvc.dispatchEvent({
        ...t,
        type: "bodyScrollEnd"
      });
    }, Yr);
  }
  shouldBlockScrollUpdate(e, t, i = !1) {
    return i && !Di() ? !1 : e === 0 ? this.shouldBlockVerticalScroll(t) : this.shouldBlockHorizontalScroll(t);
  }
  shouldBlockVerticalScroll(e) {
    const t = nc(this.eBodyViewport), { scrollHeight: i } = this.eBodyViewport;
    return e < 0 || e + t > i;
  }
  shouldBlockHorizontalScroll(e) {
    const t = this.centerRowsCtrl.getCenterWidth(), { scrollWidth: i } = this.centerRowsCtrl.eViewport;
    if (this.enableRtl) {
      if (e > 0)
        return !0;
    } else if (e < 0)
      return !0;
    return Math.abs(e) + t > i;
  }
  redrawRowsAfterScroll() {
    this.fireScrollEvent(
      0
      /* Vertical */
    );
  }
  // this is to cater for AG-3274, where grid is removed from the dom and then inserted back in again.
  // (which happens with some implementations of tabbing). this can result in horizontal scroll getting
  // reset back to the left, however no scroll event is fired. so we need to get header to also scroll
  // back to the left to be kept in sync.
  // adding and removing the grid from the DOM both resets the scroll position and
  // triggers a resize event, so notify listeners if the scroll position has changed
  checkScrollLeft() {
    const e = this.scrollLeft;
    let t = !1;
    for (const i of Kr)
      if (this.getViewportForSource(i).scrollLeft !== e) {
        t = !0;
        break;
      }
    t && this.onHScroll(ii);
  }
  scrollGridIfNeeded(e = !1) {
    const t = this.scrollTop != this.nextScrollTop;
    return t && (this.scrollTop = this.nextScrollTop, e && this.invalidateVerticalScroll(), this.redrawRowsAfterScroll()), t;
  }
  // called by scrollHorizontally method and alignedGridsService
  setHorizontalScrollPosition(e, t = !1) {
    const s = this.centerRowsCtrl.eViewport.scrollWidth - this.centerRowsCtrl.getCenterWidth();
    !t && this.shouldBlockScrollUpdate(1, e) && (this.enableRtl ? e = e > 0 ? 0 : s : e = Math.min(Math.max(e, 0), s)), Gn(this.centerRowsCtrl.eViewport, Math.abs(e), this.enableRtl), this.doHorizontalScroll(e);
  }
  setVerticalScrollPosition(e) {
    this.invalidateVerticalScroll(), this.eBodyViewport.scrollTop = e;
  }
  getVScrollPosition() {
    if (!this.isVerticalPositionInvalidated) {
      const { lastOffsetHeight: i, lastScrollTop: s } = this;
      return {
        top: s,
        bottom: s + i
      };
    }
    this.isVerticalPositionInvalidated = !1;
    const { scrollTop: e, offsetHeight: t } = this.eBodyViewport;
    return this.lastScrollTop = e, this.lastOffsetHeight = t, {
      top: e,
      bottom: e + t
    };
  }
  /** Get an approximate scroll position that returns the last real value read.
   * This is useful for avoiding repeated DOM reads that force the browser to recalculate styles.
   * This can have big performance improvements but may not be 100% accurate so only use if this is acceptable.
   */
  getApproximateVScollPosition() {
    return this.lastScrollTop >= 0 && this.lastOffsetHeight >= 0 ? {
      top: this.scrollTop,
      bottom: this.scrollTop + this.lastOffsetHeight
    } : this.getVScrollPosition();
  }
  getHScrollPosition() {
    return this.centerRowsCtrl.getHScrollPosition();
  }
  isHorizontalScrollShowing() {
    return this.isHorizontalPositionInvalidated && (this.lastIsHorizontalScrollShowing = this.centerRowsCtrl.isHorizontalScrollShowing(), this.isHorizontalPositionInvalidated = !1), this.lastIsHorizontalScrollShowing;
  }
  // called by the headerRootComp and moveColumnController
  scrollHorizontally(e) {
    const t = this.centerRowsCtrl.eViewport.scrollLeft;
    return this.setHorizontalScrollPosition(t + e), this.centerRowsCtrl.eViewport.scrollLeft - t;
  }
  // gets called by rowRenderer when new data loaded, as it will want to scroll to the top
  scrollToTop() {
    this.eBodyViewport.scrollTop = 0;
  }
  // Valid values for position are bottom, middle and top
  ensureNodeVisible(e, t = null) {
    const { rowModel: i } = this.beans, s = i.getRowCount();
    let o = -1;
    for (let n = 0; n < s; n++) {
      const r = i.getRow(n);
      if (typeof e == "function") {
        if (r && e(r)) {
          o = n;
          break;
        }
      } else if (e === r || e === r.data) {
        o = n;
        break;
      }
    }
    o >= 0 && this.ensureIndexVisible(o, t);
  }
  // Valid values for position are bottom, middle and top
  // position should be {'top','middle','bottom', or undefined/null}.
  // if undefined/null, then the grid will to the minimal amount of scrolling,
  // eg if grid needs to scroll up, it scrolls until row is on top,
  //    if grid needs to scroll down, it scrolls until row is on bottom,
  //    if row is already in view, grid does not scroll
  ensureIndexVisible(e, t, i = 0) {
    if (ze(this.gos, "print"))
      return;
    const { rowModel: s } = this.beans, o = s.getRowCount();
    if (typeof e != "number" || e < 0 || e >= o) {
      B(88, { index: e });
      return;
    }
    this.clearRetryListeners();
    const { frameworkOverrides: n, pageBounds: r, rowContainerHeight: a, rowRenderer: l } = this.beans;
    n.wrapIncoming(() => {
      const c = this.ctrlsSvc.getGridBodyCtrl(), d = s.getRow(e);
      let u, h, g = 0;
      this.invalidateVerticalScroll();
      do {
        const { stickyTopHeight: p, stickyBottomHeight: f } = c, m = d.rowTop, C = d.rowHeight, v = r.getPixelOffset(), w = d.rowTop - v, y = w + d.rowHeight, S = this.getVScrollPosition(), x = a.divStretchOffset, D = S.top + x, M = S.bottom + x, k = M - D, P = a.getScrollPositionForPixel(w), F = a.getScrollPositionForPixel(y - k), N = Math.min((P + F) / 2, w), j = D + p > w, z = M - f < y;
        let A = null;
        t === "top" ? A = P - p : t === "bottom" ? A = F + f : t === "middle" ? A = N : j ? A = P - p : z && (F - P > k ? A = P - p : A = F + f), A !== null && (this.setVerticalScrollPosition(A), l.redraw({ afterScroll: !0 })), u = m !== d.rowTop || C !== d.rowHeight, h = p !== c.stickyTopHeight || f !== c.stickyBottomHeight, g++;
      } while ((u || h) && g < 10);
      if (this.animationFrameSvc?.flushAllFrames(), i < 10 && (d?.stub || !this.beans.rowAutoHeight?.areRowsMeasured())) {
        const p = this.getVScrollPosition().top;
        this.clearRetryListenerFncs = this.addManagedEventListeners({
          bodyScroll: () => {
            const f = this.getVScrollPosition().top;
            p !== f && this.clearRetryListeners();
          },
          modelUpdated: () => {
            this.clearRetryListeners(), !(e >= s.getRowCount()) && this.ensureIndexVisible(e, t, i + 1);
          }
        });
      }
    });
  }
  clearRetryListeners() {
    this.clearRetryListenerFncs.forEach((e) => e()), this.clearRetryListenerFncs = [];
  }
  ensureColumnVisible(e, t = "auto") {
    const { colModel: i, frameworkOverrides: s } = this.beans, o = i.getCol(e);
    if (!o || o.isPinned() || !this.visibleCols.isColDisplayed(o))
      return;
    const n = this.getPositionedHorizontalScroll(o, t);
    s.wrapIncoming(() => {
      n !== null && this.centerRowsCtrl.setCenterViewportScrollLeft(n), this.centerRowsCtrl.onHorizontalViewportChanged(), this.animationFrameSvc?.flushAllFrames();
    });
  }
  getPositionedHorizontalScroll(e, t) {
    const { columnBeforeStart: i, columnAfterEnd: s } = this.isColumnOutsideViewport(e), o = this.centerRowsCtrl.getCenterWidth() < e.getActualWidth(), n = this.centerRowsCtrl.getCenterWidth(), r = this.enableRtl;
    let a = (r ? i : s) || o, l = r ? s : i;
    t !== "auto" && (a = t === "start", l = t === "end");
    const c = t === "middle";
    if (a || l || c) {
      const { colLeft: d, colMiddle: u, colRight: h } = this.getColumnBounds(e);
      return c ? u - n / 2 : a ? r ? h : d : r ? d - n : h - n;
    }
    return null;
  }
  isColumnOutsideViewport(e) {
    const { start: t, end: i } = this.getViewportBounds(), { colLeft: s, colRight: o } = this.getColumnBounds(e), n = this.enableRtl, r = n ? t > o : i < o, a = n ? i < s : t > s;
    return { columnBeforeStart: r, columnAfterEnd: a };
  }
  getColumnBounds(e) {
    const t = this.enableRtl, i = this.visibleCols.bodyWidth, s = e.getActualWidth(), o = e.getLeft(), n = t ? -1 : 1, r = t ? i - o : o, a = r + s * n, l = r + s / 2 * n;
    return { colLeft: r, colMiddle: l, colRight: a };
  }
  getViewportBounds() {
    const e = this.centerRowsCtrl.getCenterWidth(), t = this.centerRowsCtrl.getCenterViewportScrollLeft(), i = t, s = e + t;
    return { start: i, end: s, width: e };
  }
}, yc = class extends T {
  constructor(e, t = !1) {
    super(), this.callback = e, this.addSpacer = t;
  }
  postConstruct() {
    const e = this.setWidth.bind(this);
    this.addManagedPropertyListener("domLayout", e), this.addManagedEventListeners({
      columnContainerWidthChanged: e,
      displayedColumnsChanged: e,
      leftPinnedWidthChanged: e
    }), this.addSpacer && this.addManagedEventListeners({
      rightPinnedWidthChanged: e,
      scrollVisibilityChanged: e,
      scrollbarWidthChanged: e
    }), this.setWidth();
  }
  setWidth() {
    const e = ze(this.gos, "print"), { visibleCols: t, scrollVisibleSvc: i } = this.beans, s = t.bodyWidth, o = t.getColsLeftWidth(), n = t.getDisplayedColumnsRightWidth();
    let r;
    e ? r = s + o + n : (r = s, this.addSpacer && (this.gos.get("enableRtl") ? o : n) === 0 && i.verticalScrollShowing && (r += i.getScrollbarWidth())), this.callback(r);
  }
}, iE = class extends T {
  constructor(e) {
    super(), this.centerContainerCtrl = e;
  }
  wireBeans(e) {
    this.scrollVisibleSvc = e.scrollVisibleSvc;
  }
  postConstruct() {
    this.beans.ctrlsSvc.whenReady(this, (e) => {
      this.gridBodyCtrl = e.gridBodyCtrl, this.listenForResize();
    }), this.addManagedEventListeners({ scrollbarWidthChanged: this.onScrollbarWidthChanged.bind(this) }), this.addManagedPropertyListeners(["alwaysShowHorizontalScroll", "alwaysShowVerticalScroll"], () => {
      this.checkViewportAndScrolls();
    });
  }
  listenForResize() {
    const { beans: e, centerContainerCtrl: t, gridBodyCtrl: i } = this, s = () => {
      Jt(e, () => {
        this.onCenterViewportResized();
      });
    };
    t.registerViewportResizeListener(s), i.registerBodyViewportResizeListener(s);
  }
  onScrollbarWidthChanged() {
    this.checkViewportAndScrolls();
  }
  onCenterViewportResized() {
    if (this.scrollVisibleSvc.updateScrollGap(), this.centerContainerCtrl.isViewportInTheDOMTree()) {
      const { pinnedCols: e, colFlex: t } = this.beans;
      e?.keepPinnedColumnsNarrowerThanViewport(), this.checkViewportAndScrolls();
      const i = this.centerContainerCtrl.getCenterWidth();
      i !== this.centerWidth && (this.centerWidth = i, t?.refreshFlexedColumns({
        viewportWidth: this.centerWidth,
        updateBodyWidths: !0,
        fireResizedEvent: !0
      }));
    } else
      this.bodyHeight = 0;
  }
  // gets called every time the viewport size changes. we use this to check visibility of scrollbars
  // in the grid panel, and also to check size and position of viewport for row and column virtualisation.
  checkViewportAndScrolls() {
    this.updateScrollVisibleService(), this.checkBodyHeight(), this.onHorizontalViewportChanged(), this.gridBodyCtrl.scrollFeature.checkScrollLeft();
  }
  getBodyHeight() {
    return this.bodyHeight;
  }
  checkBodyHeight() {
    const e = this.gridBodyCtrl.eBodyViewport, t = nc(e);
    this.bodyHeight !== t && (this.bodyHeight = t, this.eventSvc.dispatchEvent({
      type: "bodyHeightChanged"
    }));
  }
  updateScrollVisibleService() {
    this.updateScrollVisibleServiceImpl(), setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);
  }
  updateScrollVisibleServiceImpl() {
    const e = {
      horizontalScrollShowing: this.centerContainerCtrl.isHorizontalScrollShowing(),
      verticalScrollShowing: this.gridBodyCtrl.isVerticalScrollShowing()
    };
    this.scrollVisibleSvc.setScrollsVisible(e);
  }
  // this gets called whenever a change in the viewport, so we can inform column controller it has to work
  // out the virtual columns again. gets called from following locations:
  // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged
  onHorizontalViewportChanged() {
    const e = this.centerContainerCtrl.getCenterWidth(), t = this.centerContainerCtrl.getViewportScrollLeft();
    this.beans.colViewport.setScrollPosition(e, t);
  }
};
function bc(e, t, i, s, o, n) {
  if (i == null && t == null)
    return;
  const r = {}, a = {}, l = (c, d) => {
    c.split(" ").forEach((u) => {
      u.trim() != "" && d(u);
    });
  };
  if (i) {
    const c = Object.keys(i);
    for (let d = 0; d < c.length; d++) {
      const u = c[d], h = i[u];
      let g;
      typeof h == "string" ? g = e ? e.evaluate(h, s) : !0 : typeof h == "function" && (g = h(s)), l(u, (p) => {
        g ? r[p] = !0 : a[p] = !0;
      });
    }
  }
  t && n && Object.keys(t).forEach(
    (c) => l(c, (d) => {
      r[d] || (a[d] = !0);
    })
  ), n && Object.keys(a).forEach(n), Object.keys(r).forEach(o);
}
function Hu(e) {
  if (e.group)
    return e.level;
  const t = e.parent;
  return t ? t.level + 1 : 0;
}
var sE = class extends T {
  constructor() {
    super(...arguments), this.beanName = "rowStyleSvc";
  }
  processClassesFromGridOptions(e, t) {
    const i = this.gos, s = (r) => {
      typeof r == "string" ? e.push(r) : Array.isArray(r) && r.forEach((a) => e.push(a));
    }, o = i.get("rowClass");
    o && s(o);
    const n = i.getCallback("getRowClass");
    if (n) {
      const r = {
        data: t.data,
        node: t,
        rowIndex: t.rowIndex
      }, a = n(r);
      s(a);
    }
  }
  preProcessRowClassRules(e, t) {
    this.processRowClassRules(
      t,
      (i) => {
        e.push(i);
      },
      () => {
      }
    );
  }
  processRowClassRules(e, t, i) {
    const { gos: s, expressionSvc: o } = this.beans, n = Z(s, {
      data: e.data,
      node: e,
      rowIndex: e.rowIndex
    });
    bc(
      o,
      void 0,
      s.get("rowClassRules"),
      n,
      t,
      i
    );
  }
  processStylesFromGridOptions(e) {
    const t = this.gos, i = t.get("rowStyle"), s = t.getCallback("getRowStyle");
    let o;
    if (s) {
      const n = {
        data: e.data,
        node: e,
        rowIndex: e.rowIndex
      };
      o = s(n);
    }
    if (o || i)
      return Object.assign({}, i, o);
  }
}, oE = 0, er = "renderedRow", tr = class extends T {
  constructor(e, t, i, s, o) {
    super(), this.rowNode = e, this.useAnimationFrameForCreate = s, this.printLayout = o, this.allRowGuis = [], this.active = !0, this.centerCellCtrls = { list: [], map: {} }, this.leftCellCtrls = { list: [], map: {} }, this.rightCellCtrls = { list: [], map: {} }, this.slideInAnimation = {
      left: !1,
      center: !1,
      right: !1,
      fullWidth: !1
    }, this.fadeInAnimation = {
      left: !1,
      center: !1,
      right: !1,
      fullWidth: !1
    }, this.rowDragComps = [], this.lastMouseDownOnDragger = !1, this.emptyStyle = {}, this.updateColumnListsPending = !1, this.rowId = null, this.businessKey = null, this.beans = t, this.gos = t.gos, this.paginationPage = t.pagination?.getCurrentPage() ?? 0, this.suppressRowTransform = this.gos.get("suppressRowTransform"), this.instanceId = e.id + "-" + oE++, this.rowId = gn(e.id), this.initRowBusinessKey(), this.rowFocused = t.focusSvc.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned), this.rowLevel = Hu(this.rowNode), this.setRowType(), this.setAnimateFlags(i), this.rowStyles = this.processStylesFromGridOptions(), this.rowEditStyleFeature = t.editSvc?.createRowStyleFeature(this, t), this.addListeners();
  }
  initRowBusinessKey() {
    this.businessKeyForNodeFunc = this.gos.get("getBusinessKeyForNode"), this.updateRowBusinessKey();
  }
  updateRowBusinessKey() {
    if (typeof this.businessKeyForNodeFunc != "function")
      return;
    const e = this.businessKeyForNodeFunc(this.rowNode);
    this.businessKey = gn(e);
  }
  updateGui(e, t) {
    e === "left" ? this.leftGui = t : e === "right" ? this.rightGui = t : e === "fullWidth" ? this.fullWidthGui = t : this.centerGui = t;
  }
  setComp(e, t, i, s) {
    const { context: o, focusSvc: n } = this.beans;
    s = Vo(this, o, s);
    const r = { rowComp: e, element: t, containerType: i, compBean: s };
    this.allRowGuis.push(r), this.updateGui(i, r), this.initialiseRowComp(r);
    const a = this.rowNode, l = this.rowType === "FullWidthLoading" || a.stub, c = !a.data && this.beans.rowModel.getType() === "infinite";
    !l && !c && !a.rowPinned && this.beans.rowRenderer.dispatchFirstDataRenderedEvent();
    const d = this.fullWidthGui?.element;
    d && !this.beans.editSvc?.isEditing(this) && n.isRowFocused(a.rowIndex, a.rowPinned) && n.shouldTakeFocus() && setTimeout(() => d.focus({ preventScroll: !0 }), 0);
  }
  unsetComp(e) {
    this.allRowGuis = this.allRowGuis.filter((t) => t.containerType !== e), this.updateGui(e, void 0);
  }
  isCacheable() {
    return this.rowType === "FullWidthDetail" && this.gos.get("keepDetailRows");
  }
  setCached(e) {
    const t = e ? "none" : "";
    this.allRowGuis.forEach((i) => i.element.style.display = t);
  }
  initialiseRowComp(e) {
    const t = this.gos;
    this.onSuppressCellFocusChanged(this.beans.gos.get("suppressCellFocus")), this.listenOnDomOrder(e), this.onRowHeightChanged(e), this.updateRowIndexes(e), this.setFocusedClasses(e), this.setStylesFromGridOptions(!1, e), Mi(t) && this.rowNode.selectable && this.onRowSelected(e), this.updateColumnLists(!this.useAnimationFrameForCreate);
    const i = e.rowComp;
    this.getInitialRowClasses(e.containerType).forEach((o) => i.toggleCss(o, !0)), this.executeSlideAndFadeAnimations(e), this.rowNode.group && Wa(e.element, this.rowNode.expanded == !0), this.setRowCompRowId(i), this.setRowCompRowBusinessKey(i), Hi(t, e.element, er, this), e.compBean.addDestroyFunc(() => Hi(t, e.element, er, null)), this.useAnimationFrameForCreate ? this.beans.animationFrameSvc.createTask(
      this.addHoverFunctionality.bind(this, e),
      this.rowNode.rowIndex,
      "p2",
      !1
    ) : this.addHoverFunctionality(e), this.isFullWidth() && this.setupFullWidth(e), t.get("rowDragEntireRow") && this.addRowDraggerToRow(e), this.useAnimationFrameForCreate && this.beans.animationFrameSvc.addDestroyTask(() => {
      this.isAlive() && e.rowComp.toggleCss("ag-after-created", !0);
    }), this.executeProcessRowPostCreateFunc();
  }
  setRowCompRowBusinessKey(e) {
    this.businessKey != null && e.setRowBusinessKey(this.businessKey);
  }
  setRowCompRowId(e) {
    const t = gn(this.rowNode.id);
    this.rowId = t, t != null && e.setRowId(t);
  }
  executeSlideAndFadeAnimations(e) {
    const { containerType: t } = e;
    this.slideInAnimation[t] && ($a(() => {
      this.onTopChanged();
    }), this.slideInAnimation[t] = !1), this.fadeInAnimation[t] && ($a(() => {
      e.rowComp.toggleCss("ag-opacity-zero", !1);
    }), this.fadeInAnimation[t] = !1);
  }
  addRowDraggerToRow(e) {
    const t = this.beans.rowDragSvc?.createRowDragCompForRow(this.rowNode, e.element);
    if (!t)
      return;
    const i = this.createBean(t, this.beans.context);
    this.rowDragComps.push(i), e.compBean.addDestroyFunc(() => {
      this.rowDragComps = this.rowDragComps.filter((s) => s !== i), this.rowEditStyleFeature = this.destroyBean(this.rowEditStyleFeature, this.beans.context), this.destroyBean(i, this.beans.context);
    });
  }
  setupFullWidth(e) {
    const t = this.getPinnedForContainer(e.containerType), i = this.createFullWidthCompDetails(e.element, t);
    e.rowComp.showFullWidth(i);
  }
  getFullWidthCellRenderers() {
    return this.gos.get("embedFullWidthRows") ? this.allRowGuis.map((e) => e?.rowComp?.getFullWidthCellRenderer()) : [this.fullWidthGui?.rowComp?.getFullWidthCellRenderer()];
  }
  executeProcessRowPostCreateFunc() {
    const e = this.gos.getCallback("processRowPostCreate");
    if (!e || !this.areAllContainersReady())
      return;
    const t = {
      // areAllContainersReady asserts that centerGui is not null
      eRow: this.centerGui.element,
      ePinnedLeftRow: this.leftGui ? this.leftGui.element : void 0,
      ePinnedRightRow: this.rightGui ? this.rightGui.element : void 0,
      node: this.rowNode,
      rowIndex: this.rowNode.rowIndex,
      addRenderedRowListener: this.addEventListener.bind(this)
    };
    e(t);
  }
  areAllContainersReady() {
    const {
      leftGui: e,
      centerGui: t,
      rightGui: i,
      beans: { visibleCols: s }
    } = this, o = !!e || !s.isPinningLeft(), n = !!t, r = !!i || !s.isPinningRight();
    return o && n && r;
  }
  isNodeFullWidthCell() {
    if (this.rowNode.detail)
      return !0;
    const e = this.beans.gos.getCallback("isFullWidthRow");
    return e ? e({ rowNode: this.rowNode }) : !1;
  }
  setRowType() {
    const e = this.rowNode.stub && !this.gos.get("suppressServerSideFullWidthLoadingRow") && !this.gos.get("groupHideOpenParents"), t = this.isNodeFullWidthCell(), i = this.gos.get("masterDetail") && this.rowNode.detail, s = this.beans.colModel.isPivotMode(), o = uf(this.gos, this.rowNode, s);
    e ? this.rowType = "FullWidthLoading" : i ? this.rowType = "FullWidthDetail" : t ? this.rowType = "FullWidth" : o ? this.rowType = "FullWidthGroup" : this.rowType = "Normal";
  }
  updateColumnLists(e = !1, t = !1) {
    if (this.isFullWidth())
      return;
    const { animationFrameSvc: i } = this.beans;
    if (!i?.active || e || this.printLayout) {
      this.updateColumnListsImpl(t);
      return;
    }
    this.updateColumnListsPending || (i.createTask(
      () => {
        this.active && this.updateColumnListsImpl(!0);
      },
      this.rowNode.rowIndex,
      "p1",
      !1
    ), this.updateColumnListsPending = !0);
  }
  /**
   * Overridden by SpannedRowCtrl
   */
  getNewCellCtrl(e) {
    if (!this.beans.rowSpanSvc?.isCellSpanning(e, this.rowNode))
      return new Cs(e, this.rowNode, this.beans, this);
  }
  /**
   * Overridden by SpannedRowCtrl, if span context changes cell needs rebuilt
   */
  isCorrectCtrlForSpan(e) {
    return !this.beans.rowSpanSvc?.isCellSpanning(e.column, this.rowNode);
  }
  createCellCtrls(e, t, i = null) {
    const s = {
      list: [],
      map: {}
    }, o = (c, d, u) => {
      u != null ? s.list.splice(u, 0, d) : s.list.push(d), s.map[c] = d;
    }, n = [];
    for (const c of t) {
      const d = c.getInstanceId();
      let u = e.map[d];
      u && !this.isCorrectCtrlForSpan(u) && (u.destroy(), u = void 0), u || (u = this.getNewCellCtrl(c)), u && o(d, u);
    }
    for (const c of e.list) {
      const d = c.column.getInstanceId();
      if (s.map[d] != null)
        continue;
      !this.isCellEligibleToBeRemoved(c, i) ? n.push([d, c]) : c.destroy();
    }
    if (n.length)
      for (const [c, d] of n) {
        const u = s.list.findIndex((g) => g.column.getLeft() > d.column.getLeft()), h = u === -1 ? void 0 : Math.max(u - 1, 0);
        o(c, d, h);
      }
    const { focusSvc: r, visibleCols: a } = this.beans, l = r.getFocusedCell();
    if (l && l.column.getPinned() == i) {
      const c = l.column.getInstanceId();
      if (!s.map[c] && a.allCols.includes(l.column)) {
        const u = this.createFocusedCellCtrl();
        if (u) {
          const h = s.list.findIndex((p) => p.column.getLeft() > u.column.getLeft()), g = h === -1 ? void 0 : Math.max(h - 1, 0);
          o(c, u, g);
        }
      }
    }
    return s;
  }
  /**
   * Creates a new cell ctrl for the focused cell, if this is the correct row ctrl.
   * @returns a CellCtrl for the focused cell, if required.
   */
  createFocusedCellCtrl() {
    const { focusSvc: e, rowSpanSvc: t } = this.beans, i = e.getFocusedCell();
    if (!i)
      return;
    const s = t?.getCellSpan(i.column, this.rowNode);
    if (s) {
      if (s.firstNode !== this.rowNode || !s.doesSpanContain(i))
        return;
    } else if (!e.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned))
      return;
    return this.getNewCellCtrl(i.column);
  }
  updateColumnListsImpl(e) {
    this.updateColumnListsPending = !1, this.createAllCellCtrls(), this.setCellCtrls(e);
  }
  setCellCtrls(e) {
    this.allRowGuis.forEach((t) => {
      const i = this.getCellCtrlsForContainer(t.containerType);
      t.rowComp.setCellCtrls(i, e);
    });
  }
  getCellCtrlsForContainer(e) {
    switch (e) {
      case "left":
        return this.leftCellCtrls.list;
      case "right":
        return this.rightCellCtrls.list;
      case "fullWidth":
        return [];
      case "center":
        return this.centerCellCtrls.list;
    }
  }
  createAllCellCtrls() {
    const e = this.beans.colViewport, t = this.beans.visibleCols;
    if (this.printLayout)
      this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, t.allCols), this.leftCellCtrls = { list: [], map: {} }, this.rightCellCtrls = { list: [], map: {} };
    else {
      const i = e.getColsWithinViewport(this.rowNode);
      this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, i);
      const s = t.getLeftColsForRow(this.rowNode);
      this.leftCellCtrls = this.createCellCtrls(this.leftCellCtrls, s, "left");
      const o = t.getRightColsForRow(this.rowNode);
      this.rightCellCtrls = this.createCellCtrls(this.rightCellCtrls, o, "right");
    }
  }
  isCellEligibleToBeRemoved(e, t) {
    const { column: o } = e;
    if (o.getPinned() != t || !this.isCorrectCtrlForSpan(e))
      return !0;
    const { visibleCols: n, editSvc: r } = this.beans, a = r?.isEditing(e), l = e.isCellFocused();
    return a || l ? !(n.allCols.indexOf(o) >= 0) : !0;
  }
  getDomOrder() {
    return this.gos.get("ensureDomOrder") || ze(this.gos, "print");
  }
  listenOnDomOrder(e) {
    const t = () => {
      e.rowComp.setDomOrder(this.getDomOrder());
    };
    e.compBean.addManagedPropertyListeners(["domLayout", "ensureDomOrder"], t);
  }
  setAnimateFlags(e) {
    if (this.rowNode.sticky || !e)
      return;
    const t = $(this.rowNode.oldRowTop), { visibleCols: i } = this.beans, s = i.isPinningLeft(), o = i.isPinningRight();
    if (t) {
      const { slideInAnimation: n } = this;
      if (this.isFullWidth() && !this.gos.get("embedFullWidthRows")) {
        n.fullWidth = !0;
        return;
      }
      n.center = !0, n.left = s, n.right = o;
    } else {
      const { fadeInAnimation: n } = this;
      if (this.isFullWidth() && !this.gos.get("embedFullWidthRows")) {
        n.fullWidth = !0;
        return;
      }
      n.center = !0, n.left = s, n.right = o;
    }
  }
  isFullWidth() {
    return this.rowType !== "Normal";
  }
  refreshFullWidth() {
    const e = (r, a) => r ? r.rowComp.refreshFullWidth(() => this.createFullWidthCompDetails(r.element, a).params) : !0, t = e(this.fullWidthGui, null), i = e(this.centerGui, null), s = e(this.leftGui, "left"), o = e(this.rightGui, "right");
    return t && i && s && o;
  }
  addListeners() {
    const { beans: e, gos: t, rowNode: i } = this, { expansionSvc: s, eventSvc: o, context: n, rowSpanSvc: r } = e;
    this.addManagedListeners(this.rowNode, {
      heightChanged: () => this.onRowHeightChanged(),
      rowSelected: () => this.onRowSelected(),
      rowIndexChanged: this.onRowIndexChanged.bind(this),
      topChanged: this.onTopChanged.bind(this),
      ...s?.getRowExpandedListeners(this) ?? {}
    }), i.detail && this.addManagedListeners(i.parent, { dataChanged: this.onRowNodeDataChanged.bind(this) }), this.addManagedListeners(i, {
      dataChanged: this.onRowNodeDataChanged.bind(this),
      cellChanged: this.postProcessCss.bind(this),
      rowHighlightChanged: this.onRowNodeHighlightChanged.bind(this),
      draggingChanged: this.postProcessRowDragging.bind(this),
      uiLevelChanged: this.onUiLevelChanged.bind(this),
      rowPinned: this.onRowPinned.bind(this)
    }), this.addManagedListeners(o, {
      paginationPixelOffsetChanged: this.onPaginationPixelOffsetChanged.bind(this),
      heightScaleChanged: this.onTopChanged.bind(this),
      displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),
      virtualColumnsChanged: this.onVirtualColumnsChanged.bind(this),
      cellFocused: this.onCellFocusChanged.bind(this),
      cellFocusCleared: this.onCellFocusChanged.bind(this),
      paginationChanged: this.onPaginationChanged.bind(this),
      modelUpdated: this.refreshFirstAndLastRowStyles.bind(this),
      columnMoved: () => this.updateColumnLists()
    }), r && this.addManagedListeners(r, {
      spannedCellsUpdated: ({ pinned: a }) => {
        a && !i.rowPinned || this.updateColumnLists();
      }
    }), this.addDestroyFunc(() => {
      this.rowDragComps = this.destroyBeans(this.rowDragComps, n), this.tooltipFeature = this.destroyBean(this.tooltipFeature, n), this.rowEditStyleFeature = this.destroyBean(this.rowEditStyleFeature, n);
    }), this.addManagedPropertyListeners(
      ["rowStyle", "getRowStyle", "rowClass", "getRowClass", "rowClassRules"],
      this.postProcessCss.bind(this)
    ), this.addManagedPropertyListener("rowDragEntireRow", () => {
      if (t.get("rowDragEntireRow")) {
        this.allRowGuis.forEach((l) => {
          this.addRowDraggerToRow(l);
        });
        return;
      }
      this.rowDragComps = this.destroyBeans(this.rowDragComps, n);
    }), this.addListenersForCellComps();
  }
  addListenersForCellComps() {
    this.addManagedListeners(this.rowNode, {
      rowIndexChanged: () => this.getAllCellCtrls().forEach((e) => e.onRowIndexChanged()),
      cellChanged: (e) => this.getAllCellCtrls().forEach((t) => t.onCellChanged(e))
    });
  }
  /** Should only ever be triggered on source rows (i.e. not on pinned siblings) */
  onRowPinned() {
    for (const e of this.allRowGuis)
      e.rowComp.toggleCss("ag-row-pinned-source", !!this.rowNode.pinnedSibling);
  }
  onRowNodeDataChanged(e) {
    this.refreshRow({
      suppressFlash: !e.update,
      newData: !e.update
    });
  }
  refreshRow(e) {
    if (this.isFullWidth() !== !!this.isNodeFullWidthCell()) {
      this.beans.rowRenderer.redrawRow(this.rowNode);
      return;
    }
    if (this.isFullWidth()) {
      this.refreshFullWidth() || this.beans.rowRenderer.redrawRow(this.rowNode);
      return;
    }
    this.getAllCellCtrls().forEach((i) => i.refreshCell(e)), this.allRowGuis.forEach((i) => {
      this.setRowCompRowId(i.rowComp), this.updateRowBusinessKey(), this.setRowCompRowBusinessKey(i.rowComp);
    }), this.onRowSelected(), this.postProcessCss();
  }
  postProcessCss() {
    this.setStylesFromGridOptions(!0), this.postProcessClassesFromGridOptions(), this.postProcessRowClassRules(), this.rowEditStyleFeature?.applyRowStyles(), this.postProcessRowDragging();
  }
  onRowNodeHighlightChanged() {
    const e = this.beans.rowDropHighlightSvc, t = e?.row === this.rowNode ? e.position : "none", i = t === "above", s = t === "inside", o = t === "below", r = this.gos.get("treeData") && (o || i), a = this.rowNode.uiLevel.toString();
    this.allRowGuis.forEach((l) => {
      const c = l.rowComp;
      c.toggleCss("ag-row-highlight-above", i), c.toggleCss("ag-row-highlight-inside", s), c.toggleCss("ag-row-highlight-below", o), c.toggleCss("ag-row-highlight-indent", r), r ? l.element.style.setProperty("--ag-row-highlight-level", a) : l.element.style.removeProperty("--ag-row-highlight-level");
    });
  }
  postProcessRowDragging() {
    const e = this.rowNode.dragging;
    this.allRowGuis.forEach((t) => t.rowComp.toggleCss("ag-row-dragging", e));
  }
  onDisplayedColumnsChanged() {
    this.updateColumnLists(!0), this.beans.rowAutoHeight?.requestCheckAutoHeight();
  }
  onVirtualColumnsChanged() {
    this.updateColumnLists(!1, !0);
  }
  getRowPosition() {
    return {
      rowPinned: Ut(this.rowNode.rowPinned),
      rowIndex: this.rowNode.rowIndex
    };
  }
  onKeyboardNavigate(e) {
    const t = this.findFullWidthInfoForEvent(e);
    if (!t)
      return;
    const { rowGui: i, column: s } = t;
    if (!(i.element === e.target))
      return;
    const r = this.rowNode, { focusSvc: a, navigation: l } = this.beans, c = a.getFocusedCell(), d = {
      rowIndex: r.rowIndex,
      rowPinned: r.rowPinned,
      column: c?.column ?? s
    };
    l?.navigateToNextCell(e, e.key, d, !0), e.preventDefault();
  }
  onTabKeyDown(e) {
    if (e.defaultPrevented || jt(e))
      return;
    const t = this.allRowGuis.find(
      (a) => a.element.contains(e.target)
    ), i = t ? t.element : null, s = i === e.target, o = Fe(this.beans);
    let n = !1;
    i && o && (n = i.contains(o) && o.classList.contains("ag-cell"));
    let r = null;
    !s && !n && (r = qi(this.beans, i, !1, e.shiftKey)), (this.isFullWidth() && s || !r) && this.beans.navigation?.onTabKeyDown(this, e);
  }
  getFullWidthElement() {
    return this.fullWidthGui ? this.fullWidthGui.element : null;
  }
  getRowYPosition() {
    const e = this.allRowGuis.find((t) => Ht(t.element))?.element;
    return e ? e.getBoundingClientRect().top : 0;
  }
  onSuppressCellFocusChanged(e) {
    const t = this.isFullWidth() && e ? void 0 : -1;
    this.allRowGuis.forEach((i) => {
      rt(i.element, "tabindex", t);
    });
  }
  onFullWidthRowFocused(e) {
    const t = this.rowNode, i = e ? this.isFullWidth() && e.rowIndex === t.rowIndex && e.rowPinned == t.rowPinned : !1;
    let s;
    if (this.fullWidthGui)
      s = this.fullWidthGui.element;
    else {
      const n = this.beans.colModel.getCol(e?.column)?.pinned;
      n ? s = n === "right" ? this.rightGui?.element : this.leftGui?.element : s = this.centerGui?.element;
    }
    s && (s.classList.toggle("ag-full-width-focus", i), i && e?.forceBrowserFocus && s.focus({ preventScroll: !0 }));
  }
  recreateCell(e) {
    this.centerCellCtrls = this.removeCellCtrl(this.centerCellCtrls, e), this.leftCellCtrls = this.removeCellCtrl(this.leftCellCtrls, e), this.rightCellCtrls = this.removeCellCtrl(this.rightCellCtrls, e), e.destroy(), this.updateColumnLists();
  }
  removeCellCtrl(e, t) {
    const i = {
      list: [],
      map: {}
    };
    return e.list.forEach((s) => {
      s !== t && (i.list.push(s), i.map[s.column.getInstanceId()] = s);
    }), i;
  }
  onMouseEvent(e, t) {
    switch (e) {
      case "dblclick":
        this.onRowDblClick(t);
        break;
      case "click":
        this.onRowClick(t);
        break;
      case "touchstart":
      case "mousedown":
        this.onRowMouseDown(t);
        break;
    }
  }
  createRowEvent(e, t) {
    const { rowNode: i } = this;
    return Z(this.gos, {
      type: e,
      node: i,
      data: i.data,
      rowIndex: i.rowIndex,
      rowPinned: i.rowPinned,
      event: t
    });
  }
  createRowEventWithSource(e, t) {
    const i = this.createRowEvent(e, t);
    return i.source = this, i;
  }
  onRowDblClick(e) {
    jt(e) || this.beans.eventSvc.dispatchEvent(this.createRowEventWithSource("rowDoubleClicked", e));
  }
  findFullWidthInfoForEvent(e) {
    if (!e)
      return;
    const t = this.findFullWidthRowGui(e.target), i = this.getColumnForFullWidth(t);
    if (!(!t || !i))
      return { rowGui: t, column: i };
  }
  findFullWidthRowGui(e) {
    return this.allRowGuis.find((t) => t.element.contains(e));
  }
  getColumnForFullWidth(e) {
    const { visibleCols: t } = this.beans;
    switch (e?.containerType) {
      case "center":
        return t.centerCols[0];
      case "left":
        return t.leftCols[0];
      case "right":
        return t.rightCols[0];
      default:
        return t.allCols[0];
    }
  }
  onRowMouseDown(e) {
    if (this.lastMouseDownOnDragger = Ti(e.target, "ag-row-drag", 3), !this.isFullWidth())
      return;
    const t = this.rowNode, { rangeSvc: i, focusSvc: s } = this.beans;
    i?.removeAllCellRanges();
    const o = this.findFullWidthInfoForEvent(e);
    if (!o)
      return;
    const { rowGui: n, column: r } = o, a = n.element, l = e.target;
    let c = e.defaultPrevented || Ui();
    a && a.contains(l) && oc(l) && (c = !1), s.setFocusedCell({
      rowIndex: t.rowIndex,
      column: r,
      rowPinned: t.rowPinned,
      forceBrowserFocus: c
    });
  }
  onRowClick(e) {
    if (jt(e) || this.lastMouseDownOnDragger)
      return;
    const { eventSvc: i, selectionSvc: s } = this.beans;
    i.dispatchEvent(this.createRowEventWithSource("rowClicked", e)), s?.handleSelectionEvent(e, this.rowNode, "rowClicked");
  }
  setupDetailRowAutoHeight(e) {
    this.rowType === "FullWidthDetail" && this.beans.masterDetailSvc?.setupDetailRowAutoHeight(this, e);
  }
  createFullWidthCompDetails(e, t) {
    const { gos: i, rowNode: s } = this, o = Z(i, {
      fullWidth: !0,
      data: s.data,
      node: s,
      value: s.key,
      valueFormatted: s.key,
      // these need to be taken out, as part of 'afterAttached' now
      eGridCell: e,
      eParentOfValue: e,
      pinned: t,
      addRenderedRowListener: this.addEventListener.bind(this),
      // This is not on the type of ICellRendererParams
      registerRowDragger: (r, a, l, c) => this.addFullWidthRowDragging(r, a, l, c),
      setTooltip: (r, a) => {
        i.assertModuleRegistered("Tooltip", 3), this.setupFullWidthRowTooltip(r, a);
      }
    }), n = this.beans.userCompFactory;
    switch (this.rowType) {
      case "FullWidthDetail":
        return bF(n, o);
      case "FullWidthGroup": {
        const { value: r, valueFormatted: a } = this.beans.valueSvc.getValueForDisplay(void 0, this.rowNode, !0);
        return o.value = r, o.valueFormatted = a, yF(n, o);
      }
      case "FullWidthLoading":
        return SF(n, o);
      default:
        return wF(n, o);
    }
  }
  setupFullWidthRowTooltip(e, t) {
    this.fullWidthGui && (this.tooltipFeature = this.beans.tooltipSvc?.setupFullWidthRowTooltip(
      this.tooltipFeature,
      this,
      e,
      t
    ));
  }
  addFullWidthRowDragging(e, t, i = "", s) {
    const { rowDragSvc: o, context: n } = this.beans;
    if (!o || !this.isFullWidth())
      return;
    const r = o.createRowDragComp(
      () => i,
      this.rowNode,
      void 0,
      e,
      t,
      s
    );
    this.createBean(r, n), this.addDestroyFunc(() => {
      this.destroyBean(r, n);
    });
  }
  onUiLevelChanged() {
    const e = Hu(this.rowNode);
    if (this.rowLevel != e) {
      const t = "ag-row-level-" + e, i = "ag-row-level-" + this.rowLevel;
      this.allRowGuis.forEach((s) => {
        s.rowComp.toggleCss(t, !0), s.rowComp.toggleCss(i, !1);
      });
    }
    this.rowLevel = e;
  }
  isFirstRowOnPage() {
    return this.rowNode.rowIndex === this.beans.pageBounds.getFirstRow();
  }
  isLastRowOnPage() {
    return this.rowNode.rowIndex === this.beans.pageBounds.getLastRow();
  }
  refreshFirstAndLastRowStyles() {
    const e = this.isFirstRowOnPage(), t = this.isLastRowOnPage();
    this.firstRowOnPage !== e && (this.firstRowOnPage = e, this.allRowGuis.forEach((i) => i.rowComp.toggleCss("ag-row-first", e))), this.lastRowOnPage !== t && (this.lastRowOnPage = t, this.allRowGuis.forEach((i) => i.rowComp.toggleCss("ag-row-last", t)));
  }
  getAllCellCtrls() {
    return this.leftCellCtrls.list.length === 0 && this.rightCellCtrls.list.length === 0 ? this.centerCellCtrls.list : [...this.centerCellCtrls.list, ...this.leftCellCtrls.list, ...this.rightCellCtrls.list];
  }
  postProcessClassesFromGridOptions() {
    const e = [];
    this.beans.rowStyleSvc?.processClassesFromGridOptions(e, this.rowNode), e.length && e.forEach((t) => {
      this.allRowGuis.forEach((i) => i.rowComp.toggleCss(t, !0));
    });
  }
  postProcessRowClassRules() {
    this.beans.rowStyleSvc?.processRowClassRules(
      this.rowNode,
      (e) => {
        this.allRowGuis.forEach((t) => t.rowComp.toggleCss(e, !0));
      },
      (e) => {
        this.allRowGuis.forEach((t) => t.rowComp.toggleCss(e, !1));
      }
    );
  }
  setStylesFromGridOptions(e, t) {
    e && (this.rowStyles = this.processStylesFromGridOptions()), this.forEachGui(t, (i) => i.rowComp.setUserStyles(this.rowStyles));
  }
  getPinnedForContainer(e) {
    return e === "left" || e === "right" ? e : null;
  }
  getInitialRowClasses(e) {
    const t = this.getPinnedForContainer(e), i = this.isFullWidth(), { rowNode: s, beans: o } = this, n = [];
    n.push("ag-row"), n.push(this.rowFocused ? "ag-row-focus" : "ag-row-no-focus"), this.fadeInAnimation[e] && n.push("ag-opacity-zero"), n.push(s.rowIndex % 2 === 0 ? "ag-row-even" : "ag-row-odd"), s.isRowPinned() && (n.push("ag-row-pinned"), o.pinnedRowModel?.isManual() && n.push("ag-row-pinned-manual")), !s.isRowPinned() && s.pinnedSibling && n.push("ag-row-pinned-source"), s.isSelected() && n.push("ag-row-selected"), s.footer && n.push("ag-row-footer"), n.push("ag-row-level-" + this.rowLevel), s.stub && n.push("ag-row-loading"), i && n.push("ag-full-width-row"), o.expansionSvc?.addExpandedCss(n, s), s.dragging && n.push("ag-row-dragging");
    const { rowStyleSvc: r } = o;
    return r && (r.processClassesFromGridOptions(n, s), r.preProcessRowClassRules(n, s)), n.push(this.printLayout ? "ag-row-position-relative" : "ag-row-position-absolute"), this.isFirstRowOnPage() && n.push("ag-row-first"), this.isLastRowOnPage() && n.push("ag-row-last"), i && (t === "left" && n.push("ag-cell-last-left-pinned"), t === "right" && n.push("ag-cell-first-right-pinned")), n;
  }
  processStylesFromGridOptions() {
    return this.beans.rowStyleSvc?.processStylesFromGridOptions(this.rowNode) ?? this.emptyStyle;
  }
  onRowSelected(e) {
    this.beans.selectionSvc?.onRowCtrlSelected(
      this,
      (t) => {
        (t === this.centerGui || t === this.fullWidthGui) && this.announceDescription();
      },
      e
    );
  }
  announceDescription() {
    this.beans.selectionSvc?.announceAriaRowSelection(this.rowNode);
  }
  addHoverFunctionality(e) {
    if (!this.active)
      return;
    const { element: t, compBean: i } = e, { rowNode: s, beans: o, gos: n } = this;
    i.addManagedListeners(t, {
      // We use pointer events here instead of mouse events, as pointer events
      // are more reliable for hover detection, especially with touch devices
      // or hybrid touch + mouse devices.
      pointerenter: (r) => {
        r.pointerType === "mouse" && s.dispatchRowEvent("mouseEnter");
      },
      pointerleave: (r) => {
        r.pointerType === "mouse" && s.dispatchRowEvent("mouseLeave");
      }
    }), i.addManagedListeners(s, {
      mouseEnter: () => {
        !o.dragSvc?.dragging && !n.get("suppressRowHoverHighlight") && (t.classList.add("ag-row-hover"), s.setHovered(!0));
      },
      mouseLeave: () => {
        this.resetHoveredStatus(t);
      }
    });
  }
  resetHoveredStatus(e) {
    const t = e ? [e] : this.allRowGuis.map((i) => i.element);
    for (const i of t)
      i.classList.remove("ag-row-hover");
    this.rowNode.setHovered(!1);
  }
  // for animation, we don't want to animate entry or exit to a very far away pixel,
  // otherwise the row would move so fast, it would appear to disappear. so this method
  // moves the row closer to the viewport if it is far away, so the row slide in / out
  // at a speed the user can see.
  roundRowTopToBounds(e) {
    const t = this.beans.ctrlsSvc.getScrollFeature().getApproximateVScollPosition(), i = this.applyPaginationOffset(t.top, !0) - 100, s = this.applyPaginationOffset(t.bottom, !0) + 100;
    return Math.min(Math.max(i, e), s);
  }
  forEachGui(e, t) {
    e ? t(e) : this.allRowGuis.forEach(t);
  }
  isRowRendered() {
    return this.allRowGuis.length > 0;
  }
  onRowHeightChanged(e) {
    if (this.rowNode.rowHeight == null)
      return;
    const t = this.rowNode.rowHeight, i = this.beans.environment.getDefaultRowHeight(), o = of(this.gos) ? ui(this.beans, this.rowNode).height : void 0, n = o ? `${Math.min(i, o) - 2}px` : void 0;
    this.forEachGui(e, (r) => {
      r.element.style.height = `${t}px`, n && r.element.style.setProperty("--ag-line-height", n);
    });
  }
  // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.
  destroyFirstPass(e = !1) {
    this.active = !1;
    const { rowNode: t } = this;
    if (!e && hs(this.gos) && !t.sticky)
      if (t.rowTop != null) {
        const o = this.roundRowTopToBounds(t.rowTop);
        this.setRowTop(o);
      } else
        this.allRowGuis.forEach((o) => o.rowComp.toggleCss("ag-opacity-zero", !0));
    this.fullWidthGui?.element.contains(Fe(this.beans)) && this.beans.focusSvc.attemptToRecoverFocus(), t.setHovered(!1);
    const i = this.createRowEvent("virtualRowRemoved");
    this.dispatchLocalEvent(i), this.beans.eventSvc.dispatchEvent(i), super.destroy();
  }
  destroySecondPass() {
    this.allRowGuis.length = 0;
    const e = (t) => (t.list.forEach((i) => i.destroy()), { list: [], map: {} });
    this.centerCellCtrls = e(this.centerCellCtrls), this.leftCellCtrls = e(this.leftCellCtrls), this.rightCellCtrls = e(this.rightCellCtrls);
  }
  setFocusedClasses(e) {
    this.forEachGui(e, (t) => {
      t.rowComp.toggleCss("ag-row-focus", this.rowFocused), t.rowComp.toggleCss("ag-row-no-focus", !this.rowFocused);
    });
  }
  onCellFocusChanged() {
    const { focusSvc: e } = this.beans, t = e.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
    t !== this.rowFocused && (this.rowFocused = t, this.setFocusedClasses());
  }
  onPaginationChanged() {
    const e = this.beans.pagination?.getCurrentPage() ?? 0;
    this.paginationPage !== e && (this.paginationPage = e, this.onTopChanged()), this.refreshFirstAndLastRowStyles();
  }
  onTopChanged() {
    this.setRowTop(this.rowNode.rowTop);
  }
  onPaginationPixelOffsetChanged() {
    this.onTopChanged();
  }
  // applies pagination offset, eg if on second page, and page height is 500px, then removes
  // 500px from the top position, so a row with rowTop 600px is displayed at location 100px.
  // reverse will take the offset away rather than add.
  applyPaginationOffset(e, t = !1) {
    if (this.rowNode.isRowPinned() || this.rowNode.sticky)
      return e;
    const i = this.beans.pageBounds.getPixelOffset();
    return e + i * (t ? 1 : -1);
  }
  setRowTop(e) {
    if (!this.printLayout && $(e)) {
      const t = this.applyPaginationOffset(e), o = `${this.rowNode.isRowPinned() || this.rowNode.sticky ? t : this.beans.rowContainerHeight.getRealPixelPosition(t)}px`;
      this.setRowTopStyle(o);
    }
  }
  // the top needs to be set into the DOM element when the element is created, not updated afterwards.
  // otherwise the transition would not work, as it would be transitioning from zero (the unset value).
  // for example, suppose a row that is outside the viewport, then user does a filter to remove other rows
  // and this row now appears in the viewport, and the row moves up (ie it was under the viewport and not rendered,
  // but now is in the viewport) then a new RowComp is created, however it should have it's position initialised
  // to below the viewport, so the row will appear to animate up. if we didn't set the initial position at creation
  // time, the row would animate down (ie from position zero).
  getInitialRowTop(e) {
    return this.suppressRowTransform ? this.getInitialRowTopShared(e) : void 0;
  }
  getInitialTransform(e) {
    return this.suppressRowTransform ? void 0 : `translateY(${this.getInitialRowTopShared(e)})`;
  }
  getInitialRowTopShared(e) {
    if (this.printLayout)
      return "";
    const t = this.rowNode;
    let i;
    if (t.sticky)
      i = t.stickyRowTop;
    else {
      const s = this.slideInAnimation[e] ? this.roundRowTopToBounds(t.oldRowTop) : t.rowTop, o = this.applyPaginationOffset(s);
      i = t.isRowPinned() ? o : this.beans.rowContainerHeight.getRealPixelPosition(o);
    }
    return i + "px";
  }
  setRowTopStyle(e) {
    this.allRowGuis.forEach(
      (t) => this.suppressRowTransform ? t.rowComp.setTop(e) : t.rowComp.setTransform(`translateY(${e})`)
    );
  }
  getCellCtrl(e, t = !1) {
    let i = null;
    return this.getAllCellCtrls().forEach((s) => {
      s.column == e && (i = s);
    }), i != null || t || this.getAllCellCtrls().forEach((s) => {
      s?.getColSpanningList().indexOf(e) >= 0 && (i = s);
    }), i;
  }
  onRowIndexChanged() {
    this.rowNode.rowIndex != null && (this.onCellFocusChanged(), this.updateRowIndexes(), this.postProcessCss());
  }
  updateRowIndexes(e) {
    const t = this.rowNode.getRowIndexString();
    if (t === null)
      return;
    const i = (this.beans.ctrlsSvc.getHeaderRowContainerCtrl()?.getRowCount() ?? 0) + (this.beans.filterManager?.getHeaderRowCount() ?? 0), s = this.rowNode.rowIndex % 2 === 0, o = i + this.rowNode.rowIndex + 1;
    this.forEachGui(e, (n) => {
      n.rowComp.setRowIndex(t), n.rowComp.toggleCss("ag-row-even", s), n.rowComp.toggleCss("ag-row-odd", !s), Hp(n.element, o);
    });
  }
};
function am(e) {
  return e.altKey || e.ctrlKey || e.metaKey ? !1 : e.key?.length === 1;
}
function rl(e, t, i, s, o) {
  const n = s ? s.getColDef().suppressKeyboardEvent : void 0;
  if (!n)
    return !1;
  const r = Z(e, {
    event: t,
    editing: o,
    column: s,
    node: i,
    data: i.data,
    colDef: s.getColDef()
  });
  return !!(n && n(r));
}
function nE(e) {
  const { pinnedRowModel: t, rowModel: i } = e, [s, o] = [
    t?.isEmpty("top") ?? !0,
    t?.isEmpty("bottom") ?? !0
  ], n = s ? null : "top";
  let r, a;
  o ? (r = null, a = i.getRowCount() - 1) : (r = "bottom", a = t?.getPinnedBottomRowCount() ?? -1);
  const { visibleCols: l, rangeSvc: c } = e, d = l.allCols;
  !c || !d?.length || c.setCellRange({
    rowStartIndex: 0,
    rowStartPinned: n,
    rowEndIndex: a,
    rowEndPinned: r
  });
}
var rE = 65, aE = 67, lE = 86, cE = 68, dE = 90, uE = 89;
function hE(e) {
  const { keyCode: t } = e;
  let i;
  switch (t) {
    case rE:
      i = E.A;
      break;
    case aE:
      i = E.C;
      break;
    case lE:
      i = E.V;
      break;
    case cE:
      i = E.D;
      break;
    case dE:
      i = E.Z;
      break;
    case uE:
      i = E.Y;
      break;
    default:
      i = e.code;
  }
  return i;
}
var gE = class extends T {
  constructor(e) {
    super(), this.element = e;
  }
  postConstruct() {
    this.addKeyboardListeners(), this.addMouseListeners(), this.beans.touchSvc?.mockRowContextMenu(this), this.editSvc = this.beans.editSvc;
  }
  addKeyboardListeners() {
    const e = "keydown", t = this.processKeyboardEvent.bind(this, e);
    this.addManagedElementListeners(this.element, { [e]: t });
  }
  addMouseListeners() {
    ["dblclick", "contextmenu", "mouseover", "mouseout", "click", mf("touchstart") ? "touchstart" : "mousedown"].forEach((i) => {
      const s = this.processMouseEvent.bind(this, i);
      this.addManagedElementListeners(this.element, { [i]: s });
    });
  }
  processMouseEvent(e, t) {
    if (!xo(this.gos, t) || jt(t))
      return;
    const { cellCtrl: i, rowCtrl: s } = this.getControlsForEventTarget(t.target);
    e === "contextmenu" ? (i?.column && i.dispatchCellContextMenuEvent(t), this.beans.contextMenuSvc?.handleContextMenuMouseEvent(t, void 0, s, i)) : (i && i.onMouseEvent(e, t), s && s.onMouseEvent(e, t));
  }
  getControlsForEventTarget(e) {
    const { gos: t } = this;
    return {
      cellCtrl: Qf(t, e),
      rowCtrl: Cf(t, e, er)
    };
  }
  processKeyboardEvent(e, t) {
    const { cellCtrl: i, rowCtrl: s } = this.getControlsForEventTarget(t.target);
    t.defaultPrevented || (i ? this.processCellKeyboardEvent(i, e, t) : s?.isFullWidth() && this.processFullWidthRowKeyboardEvent(s, e, t));
  }
  processCellKeyboardEvent(e, t, i) {
    const s = this.editSvc?.isEditing(e, { withOpenEditor: !0 }) ?? !1;
    !rl(
      this.gos,
      i,
      e.rowNode,
      e.column,
      s
    ) && t === "keydown" && (!s && this.beans.navigation?.handlePageScrollingKey(i) || e.onKeyDown(i), this.doGridOperations(i, s), am(i) && e.processCharacter(i)), t === "keydown" && this.eventSvc.dispatchEvent(e.createEvent(i, "cellKeyDown"));
  }
  processFullWidthRowKeyboardEvent(e, t, i) {
    const { rowNode: s } = e, { focusSvc: o, navigation: n } = this.beans, a = o.getFocusedCell()?.column;
    if (!rl(this.gos, i, s, a, !1)) {
      const c = i.key;
      if (t === "keydown")
        switch (c) {
          case E.PAGE_HOME:
          case E.PAGE_END:
          case E.PAGE_UP:
          case E.PAGE_DOWN:
            n?.handlePageScrollingKey(i, !0);
            break;
          case E.LEFT:
          case E.RIGHT:
            if (!this.gos.get("embedFullWidthRows"))
              break;
          case E.UP:
          case E.DOWN:
            e.onKeyboardNavigate(i);
            break;
          case E.TAB:
            e.onTabKeyDown(i);
            break;
        }
    }
    t === "keydown" && this.eventSvc.dispatchEvent(e.createRowEvent("cellKeyDown", i));
  }
  doGridOperations(e, t) {
    if (!e.ctrlKey && !e.metaKey || t || !xo(this.gos, e))
      return;
    const i = hE(e), { clipboardSvc: s, undoRedo: o } = this.beans;
    if (i === E.A)
      return this.onCtrlAndA(e);
    if (i === E.C)
      return this.onCtrlAndC(s, e);
    if (i === E.D)
      return this.onCtrlAndD(s, e);
    if (i === E.V)
      return this.onCtrlAndV(s, e);
    if (i === E.X)
      return this.onCtrlAndX(s, e);
    if (i === E.Y)
      return this.onCtrlAndY(o);
    if (i === E.Z)
      return this.onCtrlAndZ(o, e);
  }
  onCtrlAndA(e) {
    const {
      beans: { rowModel: t, rangeSvc: i, selectionSvc: s },
      gos: o
    } = this;
    i && hi(o) && t.isRowsToRender() ? nE(this.beans) : s && s?.selectAllRowNodes({ source: "keyboardSelectAll", selectAll: gf(o) }), e.preventDefault();
  }
  onCtrlAndC(e, t) {
    if (!e || this.gos.get("enableCellTextSelection"))
      return;
    const { cellCtrl: i } = this.getControlsForEventTarget(t.target);
    this.editSvc?.isEditing(i, { withOpenEditor: !0 }) || (t.preventDefault(), e.copyToClipboard());
  }
  onCtrlAndX(e, t) {
    if (!e || this.gos.get("enableCellTextSelection") || this.gos.get("suppressCutToClipboard"))
      return;
    const { cellCtrl: i } = this.getControlsForEventTarget(t.target);
    this.editSvc?.isEditing(i, { withOpenEditor: !0 }) || (t.preventDefault(), e.cutToClipboard(void 0, "ui"));
  }
  onCtrlAndV(e, t) {
    const { cellCtrl: i } = this.getControlsForEventTarget(t.target);
    this.editSvc?.isEditing(i, { withOpenEditor: !0 }) || e && !this.gos.get("suppressClipboardPaste") && e.pasteFromClipboard();
  }
  onCtrlAndD(e, t) {
    e && !this.gos.get("suppressClipboardPaste") && e.copyRangeDown(), t.preventDefault();
  }
  onCtrlAndZ(e, t) {
    !this.gos.get("undoRedoCellEditing") || !e || (t.preventDefault(), t.shiftKey ? e.redo("ui") : e.undo("ui"));
  }
  onCtrlAndY(e) {
    e?.redo("ui");
  }
}, lm = class extends T {
  constructor(e, t) {
    super(), this.eContainer = e, this.eViewport = t;
  }
  postConstruct() {
    this.addManagedEventListeners({
      rowContainerHeightChanged: this.onHeightChanged.bind(this, this.beans.rowContainerHeight)
    });
  }
  onHeightChanged(e) {
    const t = e.uiContainerHeight, i = t != null ? `${t}px` : "";
    this.eContainer.style.height = i, this.eViewport && (this.eViewport.style.height = i);
  }
}, qo = (e) => e.topRowCtrls, Xo = (e) => e.getStickyTopRowCtrls(), Zo = (e) => e.getStickyBottomRowCtrls(), Qo = (e) => e.bottomRowCtrls, Jo = (e) => e.allRowCtrls, qr = (e) => e.getCtrls("top"), Xr = (e) => e.getCtrls("center"), Zr = (e) => e.getCtrls("bottom"), pE = {
  center: {
    type: "center",
    name: "center-cols",
    getRowCtrls: Jo,
    getSpannedRowCtrls: Xr
  },
  left: {
    type: "left",
    name: "pinned-left-cols",
    pinnedType: "left",
    getRowCtrls: Jo,
    getSpannedRowCtrls: Xr
  },
  right: {
    type: "right",
    name: "pinned-right-cols",
    pinnedType: "right",
    getRowCtrls: Jo,
    getSpannedRowCtrls: Xr
  },
  fullWidth: {
    type: "fullWidth",
    name: "full-width",
    fullWidth: !0,
    getRowCtrls: Jo
  },
  topCenter: {
    type: "center",
    name: "floating-top",
    getRowCtrls: qo,
    getSpannedRowCtrls: qr
  },
  topLeft: {
    type: "left",
    name: "pinned-left-floating",
    container: "ag-pinned-left-floating-top",
    pinnedType: "left",
    getRowCtrls: qo,
    getSpannedRowCtrls: qr
  },
  topRight: {
    type: "right",
    name: "pinned-right-floating",
    container: "ag-pinned-right-floating-top",
    pinnedType: "right",
    getRowCtrls: qo,
    getSpannedRowCtrls: qr
  },
  topFullWidth: {
    type: "fullWidth",
    name: "floating-top-full-width",
    fullWidth: !0,
    getRowCtrls: qo
  },
  stickyTopCenter: {
    type: "center",
    name: "sticky-top",
    getRowCtrls: Xo
  },
  stickyTopLeft: {
    type: "left",
    name: "pinned-left-sticky-top",
    container: "ag-pinned-left-sticky-top",
    pinnedType: "left",
    getRowCtrls: Xo
  },
  stickyTopRight: {
    type: "right",
    name: "pinned-right-sticky-top",
    container: "ag-pinned-right-sticky-top",
    pinnedType: "right",
    getRowCtrls: Xo
  },
  stickyTopFullWidth: {
    type: "fullWidth",
    name: "sticky-top-full-width",
    fullWidth: !0,
    getRowCtrls: Xo
  },
  stickyBottomCenter: {
    type: "center",
    name: "sticky-bottom",
    getRowCtrls: Zo
  },
  stickyBottomLeft: {
    type: "left",
    name: "pinned-left-sticky-bottom",
    container: "ag-pinned-left-sticky-bottom",
    pinnedType: "left",
    getRowCtrls: Zo
  },
  stickyBottomRight: {
    type: "right",
    name: "pinned-right-sticky-bottom",
    container: "ag-pinned-right-sticky-bottom",
    pinnedType: "right",
    getRowCtrls: Zo
  },
  stickyBottomFullWidth: {
    type: "fullWidth",
    name: "sticky-bottom-full-width",
    fullWidth: !0,
    getRowCtrls: Zo
  },
  bottomCenter: {
    type: "center",
    name: "floating-bottom",
    getRowCtrls: Qo,
    getSpannedRowCtrls: Zr
  },
  bottomLeft: {
    type: "left",
    name: "pinned-left-floating-bottom",
    container: "ag-pinned-left-floating-bottom",
    pinnedType: "left",
    getRowCtrls: Qo,
    getSpannedRowCtrls: Zr
  },
  bottomRight: {
    type: "right",
    name: "pinned-right-floating-bottom",
    container: "ag-pinned-right-floating-bottom",
    pinnedType: "right",
    getRowCtrls: Qo,
    getSpannedRowCtrls: Zr
  },
  bottomFullWidth: {
    type: "fullWidth",
    name: "floating-bottom-full-width",
    fullWidth: !0,
    getRowCtrls: Qo
  }
};
function cm(e) {
  return `ag-${Bo(e).name}-viewport`;
}
function wn(e) {
  const t = Bo(e);
  return t.container ?? `ag-${t.name}-container`;
}
function fE(e) {
  return `ag-${Bo(e).name}-spanned-cells-container`;
}
function Bo(e) {
  return pE[e];
}
var mE = ["topCenter", "topLeft", "topRight"], CE = ["bottomCenter", "bottomLeft", "bottomRight"], vE = ["center", "left", "right"], wE = ["center", "left", "right", "fullWidth"], SE = ["stickyTopCenter", "stickyBottomCenter", "center", "topCenter", "bottomCenter"], yE = ["left", "bottomLeft", "topLeft", "stickyTopLeft", "stickyBottomLeft"], bE = ["right", "bottomRight", "topRight", "stickyTopRight", "stickyBottomRight"], dm = ["stickyTopCenter", "stickyTopLeft", "stickyTopRight"], um = ["stickyBottomCenter", "stickyBottomLeft", "stickyBottomRight"], RE = [
  ...dm,
  "stickyTopFullWidth",
  ...um,
  "stickyBottomFullWidth"
], xE = [
  ...mE,
  ...CE,
  ...vE,
  ...dm,
  ...um
], FE = class extends T {
  constructor(e) {
    super(), this.name = e, this.visible = !0, this.EMPTY_CTRLS = [], this.options = Bo(e);
  }
  postConstruct() {
    this.enableRtl = this.gos.get("enableRtl"), this.forContainers(["center"], () => {
      this.viewportSizeFeature = this.createManagedBean(new iE(this)), this.addManagedEventListeners({
        stickyTopOffsetChanged: this.onStickyTopOffsetChanged.bind(this)
      });
    });
  }
  onStickyTopOffsetChanged(e) {
    this.comp.setOffsetTop(`${e.offset}px`);
  }
  registerWithCtrlsService() {
    this.options.fullWidth || this.beans.ctrlsSvc.register(this.name, this);
  }
  forContainers(e, t) {
    e.indexOf(this.name) >= 0 && t();
  }
  setComp(e, t, i, s) {
    this.comp = e, this.eContainer = t, this.eSpannedContainer = i, this.eViewport = s, this.createManagedBean(new gE(this.eViewport ?? this.eContainer)), this.addPreventScrollWhileDragging(), this.listenOnDomOrder();
    const { pinnedCols: o, rangeSvc: n } = this.beans, r = () => this.onPinnedWidthChanged();
    this.forContainers(yE, () => {
      this.pinnedWidthFeature = this.createOptionalManagedBean(
        o?.createPinnedWidthFeature(!0, this.eContainer, this.eSpannedContainer)
      ), this.addManagedEventListeners({ leftPinnedWidthChanged: r });
    }), this.forContainers(bE, () => {
      this.pinnedWidthFeature = this.createOptionalManagedBean(
        o?.createPinnedWidthFeature(!1, this.eContainer, this.eSpannedContainer)
      ), this.addManagedEventListeners({ rightPinnedWidthChanged: r });
    }), this.forContainers(
      wE,
      () => this.createManagedBean(
        new lm(this.eContainer, this.name === "center" ? s : void 0)
      )
    ), n && this.forContainers(
      xE,
      () => this.createManagedBean(n.createDragListenerFeature(this.eContainer))
    ), this.forContainers(
      SE,
      () => this.createManagedBean(new yc((a) => this.comp.setContainerWidth(`${a}px`)))
    ), this.visible = this.isContainerVisible(), this.addListeners(), this.registerWithCtrlsService();
  }
  onScrollCallback(e) {
    this.addManagedElementListeners(this.eViewport, { scroll: e });
  }
  addListeners() {
    const { spannedRowRenderer: e, gos: t } = this.beans, i = this.onDisplayedColumnsChanged.bind(this);
    this.addManagedEventListeners({
      displayedColumnsChanged: i,
      displayedColumnsWidthChanged: i,
      displayedRowsChanged: (s) => this.onDisplayedRowsChanged(s.afterScroll)
    }), i(), this.onDisplayedRowsChanged(), e && this.options.getSpannedRowCtrls && t.get("enableCellSpan") && this.addManagedListeners(e, {
      spannedRowsUpdated: () => {
        const s = this.options.getSpannedRowCtrls(e);
        s && this.comp.setSpannedRowCtrls(s, !1);
      }
    });
  }
  listenOnDomOrder() {
    if (RE.indexOf(this.name) >= 0) {
      this.comp.setDomOrder(!0);
      return;
    }
    const t = () => {
      const i = this.gos.get("ensureDomOrder"), s = ze(this.gos, "print");
      this.comp.setDomOrder(i || s);
    };
    this.addManagedPropertyListener("domLayout", t), t();
  }
  onDisplayedColumnsChanged() {
    this.forContainers(["center"], () => this.onHorizontalViewportChanged());
  }
  // this methods prevents the grid views from being scrolled while the dragService is being used
  // eg. the view should not scroll up and down while dragging rows using the rowDragComp.
  addPreventScrollWhileDragging() {
    const { dragSvc: e } = this.beans;
    if (!e)
      return;
    const t = (i) => {
      e.dragging && i.cancelable && i.preventDefault();
    };
    this.eContainer.addEventListener("touchmove", t, { passive: !1 }), this.addDestroyFunc(() => this.eContainer.removeEventListener("touchmove", t));
  }
  // this gets called whenever a change in the viewport, so we can inform column controller it has to work
  // out the virtual columns again. gets called from following locations:
  // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged
  onHorizontalViewportChanged(e = !1) {
    const t = this.getCenterWidth(), i = this.getCenterViewportScrollLeft();
    this.beans.colViewport.setScrollPosition(t, i, e);
  }
  hasHorizontalScrollGap() {
    return this.eContainer.clientWidth - this.eViewport.clientWidth < 0;
  }
  hasVerticalScrollGap() {
    return this.eContainer.clientHeight - this.eViewport.clientHeight < 0;
  }
  getCenterWidth() {
    return wo(this.eViewport);
  }
  getCenterViewportScrollLeft() {
    return Vn(this.eViewport, this.enableRtl);
  }
  registerViewportResizeListener(e) {
    const t = Qt(this.beans, this.eViewport, e);
    this.addDestroyFunc(() => t());
  }
  isViewportInTheDOMTree() {
    return Kp(this.eViewport);
  }
  getViewportScrollLeft() {
    return Vn(this.eViewport, this.enableRtl);
  }
  isHorizontalScrollShowing() {
    return this.gos.get("alwaysShowHorizontalScroll") || Yp(this.eViewport);
  }
  setHorizontalScroll(e) {
    this.comp.setHorizontalScroll(e);
  }
  getHScrollPosition() {
    return {
      left: this.eViewport.scrollLeft,
      right: this.eViewport.scrollLeft + this.eViewport.offsetWidth
    };
  }
  setCenterViewportScrollLeft(e) {
    Gn(this.eViewport, e, this.enableRtl);
  }
  isContainerVisible() {
    return !(this.options.pinnedType != null) || !!this.pinnedWidthFeature && this.pinnedWidthFeature.getWidth() > 0;
  }
  onPinnedWidthChanged() {
    const e = this.isContainerVisible();
    this.visible != e && (this.visible = e, this.onDisplayedRowsChanged());
  }
  onDisplayedRowsChanged(e = !1) {
    const t = this.options.getRowCtrls(this.beans.rowRenderer);
    if (!this.visible || t.length === 0) {
      this.comp.setRowCtrls({ rowCtrls: this.EMPTY_CTRLS });
      return;
    }
    const i = ze(this.gos, "print"), o = this.gos.get("embedFullWidthRows") || i, n = t.filter((r) => {
      const a = r.isFullWidth();
      return this.options.fullWidth ? !o && a : o || !a;
    });
    this.comp.setRowCtrls({ rowCtrls: n, useFlushSync: e });
  }
}, PE = "ag-force-vertical-scroll", EE = "ag-selectable", DE = "ag-column-moving", TE = class extends T {
  constructor() {
    super(...arguments), this.stickyTopHeight = 0, this.stickyBottomHeight = 0;
  }
  wireBeans(e) {
    this.ctrlsSvc = e.ctrlsSvc, this.colModel = e.colModel, this.scrollVisibleSvc = e.scrollVisibleSvc, this.pinnedRowModel = e.pinnedRowModel, this.filterManager = e.filterManager, this.rowGroupColsSvc = e.rowGroupColsSvc;
  }
  setComp(e, t, i, s, o, n, r) {
    this.comp = e, this.eGridBody = t, this.eBodyViewport = i, this.eTop = s, this.eBottom = o, this.eStickyTop = n, this.eStickyBottom = r, this.eCenterColsViewport = i.querySelector(`.${cm("center")}`), this.eFullWidthContainer = i.querySelector(`.${wn("fullWidth")}`), this.eStickyTopFullWidthContainer = n.querySelector(
      `.${wn("stickyTopFullWidth")}`
    ), this.eStickyBottomFullWidthContainer = r.querySelector(
      `.${wn("stickyBottomFullWidth")}`
    ), this.setCellTextSelection(this.gos.get("enableCellTextSelection")), this.addManagedPropertyListener(
      "enableCellTextSelection",
      (a) => this.setCellTextSelection(a.currentValue)
    ), this.createManagedBean(new Sc(this.comp)), this.scrollFeature = this.createManagedBean(new tE(i)), this.beans.rowDragSvc?.setupRowDrag(i, this), this.setupRowAnimationCssClass(), this.addEventListeners(), this.addFocusListeners([s, i, o, n, r]), this.setGridRootRole(), this.onGridColumnsChanged(), this.addBodyViewportListener(), this.setFloatingHeights(), this.disableBrowserDragging(), this.addStopEditingWhenGridLosesFocus(), this.updateScrollingClasses(), this.filterManager?.setupAdvFilterHeaderComp(s), this.ctrlsSvc.register("gridBodyCtrl", this);
  }
  addEventListeners() {
    const e = this.setFloatingHeights.bind(this), t = this.setGridRootRole.bind(this), i = this.toggleRowResizeStyles.bind(this);
    this.addManagedEventListeners({
      gridColumnsChanged: this.onGridColumnsChanged.bind(this),
      scrollVisibilityChanged: this.onScrollVisibilityChanged.bind(this),
      scrollGapChanged: this.updateScrollingClasses.bind(this),
      pinnedRowDataChanged: e,
      pinnedHeightChanged: e,
      pinnedRowsChanged: e,
      headerHeightChanged: this.setStickyTopOffsetTop.bind(this),
      columnRowGroupChanged: t,
      columnPivotChanged: t,
      rowResizeStarted: i,
      rowResizeEnded: i
    }), this.addManagedPropertyListener("treeData", t);
  }
  toggleRowResizeStyles(e) {
    const t = e.type === "rowResizeStarted";
    this.eBodyViewport.classList.toggle("ag-prevent-animation", t);
  }
  onGridColumnsChanged() {
    const e = this.beans.colModel.getCols();
    this.comp.setColumnCount(e.length);
  }
  onScrollVisibilityChanged() {
    const { scrollVisibleSvc: e } = this, t = e.verticalScrollShowing;
    this.setVerticalScrollPaddingVisible(t), this.setStickyWidth(t), this.setStickyBottomOffsetBottom();
    const i = t && e.getScrollbarWidth() || 0, s = _p() ? 16 : 0, o = `calc(100% + ${i + s}px)`;
    Jt(this.beans, () => this.comp.setBodyViewportWidth(o)), this.updateScrollingClasses();
  }
  setGridRootRole() {
    const { rowGroupColsSvc: e, colModel: t } = this;
    let i = this.gos.get("treeData");
    if (!i) {
      const s = t.isPivotMode();
      i = (e ? e.columns.length : 0) >= (s ? 2 : 1);
    }
    this.comp.setGridRootRole(i ? "treegrid" : "grid");
  }
  addFocusListeners(e) {
    e.forEach((t) => {
      this.addManagedElementListeners(t, {
        focusin: (i) => {
          const { target: s } = i, o = Ti(s, "ag-root", t);
          t.classList.toggle("ag-has-focus", !o);
        },
        focusout: (i) => {
          const { target: s, relatedTarget: o } = i, n = t.contains(o), r = Ti(
            o,
            "ag-root",
            t
          );
          Ti(s, "ag-root", t) || (!n || r) && t.classList.remove("ag-has-focus");
        }
      });
    });
  }
  // used by ColumnAnimationService
  setColumnMovingCss(e) {
    this.comp.setColumnMovingCss(DE, e);
  }
  setCellTextSelection(e = !1) {
    this.comp.setCellSelectableCss(EE, e);
  }
  updateScrollingClasses() {
    const {
      eGridBody: { classList: e },
      scrollVisibleSvc: t
    } = this;
    e.toggle("ag-body-vertical-content-no-gap", !t.verticalScrollGap), e.toggle("ag-body-horizontal-content-no-gap", !t.horizontalScrollGap);
  }
  // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)
  // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.
  disableBrowserDragging() {
    this.addManagedElementListeners(this.eGridBody, {
      dragstart: (e) => {
        if (e.target instanceof HTMLImageElement)
          return e.preventDefault(), !1;
      }
    });
  }
  addStopEditingWhenGridLosesFocus() {
    this.beans.editSvc?.addStopEditingWhenGridLosesFocus([
      this.eBodyViewport,
      this.eBottom,
      this.eTop,
      this.eStickyTop,
      this.eStickyBottom
    ]);
  }
  updateRowCount() {
    const e = (this.ctrlsSvc.getHeaderRowContainerCtrl()?.getRowCount() ?? 0) + (this.filterManager?.getHeaderRowCount() ?? 0), { rowModel: t } = this.beans, i = t.isLastRowIndexKnown() ? t.getRowCount() : -1, s = i === -1 ? -1 : e + i;
    this.comp.setRowCount(s);
  }
  registerBodyViewportResizeListener(e) {
    this.comp.registerBodyViewportResizeListener(e);
  }
  setVerticalScrollPaddingVisible(e) {
    const t = e ? "scroll" : "hidden";
    this.comp.setPinnedTopBottomOverflowY(t);
  }
  isVerticalScrollShowing() {
    const e = this.gos.get("alwaysShowVerticalScroll"), t = e ? PE : null, i = ze(this.gos, "normal");
    return this.comp.setAlwaysVerticalScrollClass(t, e), e || i && qp(this.eBodyViewport);
  }
  setupRowAnimationCssClass() {
    const { rowContainerHeight: e, environment: t } = this.beans;
    let i = t.sizesMeasured;
    const s = () => {
      const o = i && hs(this.gos) && !e.stretching, n = o ? "ag-row-animation" : "ag-row-no-animation";
      this.comp.setRowAnimationCssOnBodyViewport(n, o);
    };
    s(), this.addManagedEventListeners({ heightScaleChanged: s }), this.addManagedPropertyListener("animateRows", s), this.addManagedEventListeners({
      gridStylesChanged: () => {
        !i && t.sizesMeasured && (i = !0, s());
      }
    });
  }
  addBodyViewportListener() {
    const {
      eBodyViewport: e,
      eStickyTop: t,
      eStickyBottom: i,
      eTop: s,
      eBottom: o,
      beans: { popupSvc: n, touchSvc: r }
    } = this, a = this.onBodyViewportContextMenu.bind(this);
    this.addManagedElementListeners(e, { contextmenu: a }), r?.mockBodyContextMenu(this, a), this.addManagedElementListeners(e, {
      wheel: this.onBodyViewportWheel.bind(this, n)
    });
    const l = this.onStickyWheel.bind(this);
    for (const d of [t, i, s, o])
      this.addManagedElementListeners(d, { wheel: l });
    const c = this.onHorizontalWheel.bind(this);
    for (const d of ["left", "right", "topLeft", "topRight", "bottomLeft", "bottomRight"])
      this.addManagedElementListeners(this.ctrlsSvc.get(d).eContainer, {
        wheel: c
      });
    this.addFullWidthContainerWheelListener();
  }
  addFullWidthContainerWheelListener() {
    this.addManagedElementListeners(this.eFullWidthContainer, {
      wheel: (e) => this.onFullWidthContainerWheel(e)
    });
  }
  onFullWidthContainerWheel(e) {
    const { deltaX: t, deltaY: i, shiftKey: s } = e;
    (s || Math.abs(t) > Math.abs(i)) && xo(this.gos, e) && this.scrollGridBodyToMatchEvent(e);
  }
  onStickyWheel(e) {
    const { deltaY: t } = e;
    this.scrollVertically(t) > 0 && e.preventDefault();
  }
  onHorizontalWheel(e) {
    const { deltaX: t, deltaY: i, shiftKey: s } = e;
    (s || Math.abs(t) > Math.abs(i)) && this.scrollGridBodyToMatchEvent(e);
  }
  scrollGridBodyToMatchEvent(e) {
    const { deltaX: t, deltaY: i } = e;
    e.preventDefault(), this.eCenterColsViewport.scrollBy({ left: t || i });
  }
  onBodyViewportContextMenu(e, t, i) {
    if (!e && !i)
      return;
    this.gos.get("preventDefaultOnContextMenu") && (e || i).preventDefault();
    const { target: s } = e || t;
    (s === this.eBodyViewport || s === this.ctrlsSvc.get("center").eViewport) && this.beans.contextMenuSvc?.showContextMenu({
      mouseEvent: e,
      touchEvent: i,
      value: null,
      anchorToElement: this.eGridBody,
      source: "ui"
    });
  }
  onBodyViewportWheel(e, t) {
    this.gos.get("suppressScrollWhenPopupsAreOpen") && e?.hasAnchoredPopup() && t.preventDefault();
  }
  // called by rowDragFeature
  scrollVertically(e) {
    const t = this.eBodyViewport.scrollTop;
    return this.scrollFeature.setVerticalScrollPosition(t + e), this.eBodyViewport.scrollTop - t;
  }
  setFloatingHeights() {
    const {
      pinnedRowModel: e,
      beans: { environment: t }
    } = this, i = e?.getPinnedTopTotalHeight(), s = e?.getPinnedBottomTotalHeight(), o = t.getPinnedRowBorderWidth(), n = t.getRowBorderWidth(), r = o - n, a = i ? r + i : 0, l = s ? r + s : 0;
    this.comp.setTopHeight(a), this.comp.setBottomHeight(l), this.comp.setTopInvisible(a <= 0), this.comp.setBottomInvisible(l <= 0), this.setStickyTopOffsetTop(), this.setStickyBottomOffsetBottom();
  }
  setStickyTopHeight(e = 0) {
    this.comp.setStickyTopHeight(`${e}px`), this.stickyTopHeight = e;
  }
  setStickyBottomHeight(e = 0) {
    this.comp.setStickyBottomHeight(`${e}px`), this.stickyBottomHeight = e;
  }
  setStickyWidth(e) {
    if (!e)
      this.comp.setStickyTopWidth("100%"), this.comp.setStickyBottomWidth("100%");
    else {
      const t = this.scrollVisibleSvc.getScrollbarWidth();
      this.comp.setStickyTopWidth(`calc(100% - ${t}px)`), this.comp.setStickyBottomWidth(`calc(100% - ${t}px)`);
    }
  }
  setStickyTopOffsetTop() {
    const t = this.ctrlsSvc.get("gridHeaderCtrl").headerHeight + (this.filterManager?.getHeaderHeight() ?? 0), i = this.pinnedRowModel?.getPinnedTopTotalHeight() ?? 0;
    let s = 0;
    t > 0 && (s += t), i > 0 && (s += i), s > 0 && (s += 1), this.comp.setStickyTopTop(`${s}px`);
  }
  setStickyBottomOffsetBottom() {
    const { pinnedRowModel: e, scrollVisibleSvc: t, comp: i } = this, s = e?.getPinnedBottomTotalHeight() ?? 0, n = t.horizontalScrollShowing && t.getScrollbarWidth() || 0, r = s + n;
    i.setStickyBottomBottom(`${r}px`);
  }
}, hm = class extends pe {
  constructor(e, t) {
    super(), this.direction = t, this.eViewport = q, this.eContainer = q, this.hideTimeout = 0, this.setTemplate(e);
  }
  postConstruct() {
    this.addManagedEventListeners({
      scrollVisibilityChanged: this.onScrollVisibilityChanged.bind(this)
    }), this.onScrollVisibilityChanged(), this.toggleCss("ag-apple-scrollbar", Wp() || Di());
  }
  destroy() {
    super.destroy(), window.clearTimeout(this.hideTimeout);
  }
  initialiseInvisibleScrollbar() {
    this.invisibleScrollbar === void 0 && (this.invisibleScrollbar = _p(), this.invisibleScrollbar && (this.hideAndShowInvisibleScrollAsNeeded(), this.addActiveListenerToggles()));
  }
  addActiveListenerToggles() {
    const e = this.getGui(), t = () => this.toggleCss("ag-scrollbar-active", !0), i = () => this.toggleCss("ag-scrollbar-active", !1);
    this.addManagedListeners(e, {
      mouseenter: t,
      mousedown: t,
      touchstart: t,
      mouseleave: i,
      touchend: i
    });
  }
  onScrollVisibilityChanged() {
    this.invisibleScrollbar === void 0 && this.initialiseInvisibleScrollbar(), Jt(this.beans, () => this.setScrollVisible());
  }
  hideAndShowInvisibleScrollAsNeeded() {
    this.addManagedEventListeners({
      bodyScroll: (e) => {
        e.direction === this.direction && (this.hideTimeout && (window.clearTimeout(this.hideTimeout), this.hideTimeout = 0), this.toggleCss("ag-scrollbar-scrolling", !0));
      },
      bodyScrollEnd: () => {
        this.hideTimeout = window.setTimeout(() => {
          this.toggleCss("ag-scrollbar-scrolling", !1), this.hideTimeout = 0;
        }, 400);
      }
    });
  }
  attemptSettingScrollPosition(e) {
    const t = this.eViewport;
    $R(
      () => Ht(t),
      () => this.setScrollPosition(e),
      100
    );
  }
  onScrollCallback(e) {
    this.addManagedElementListeners(this.eViewport, { scroll: e });
  }
}, ME = {
  tag: "div",
  cls: "ag-body-horizontal-scroll",
  attrs: { "aria-hidden": "true" },
  children: [
    { tag: "div", ref: "eLeftSpacer", cls: "ag-horizontal-left-spacer" },
    {
      tag: "div",
      ref: "eViewport",
      cls: "ag-body-horizontal-scroll-viewport",
      children: [{ tag: "div", ref: "eContainer", cls: "ag-body-horizontal-scroll-container" }]
    },
    { tag: "div", ref: "eRightSpacer", cls: "ag-horizontal-right-spacer" }
  ]
}, AE = class extends hm {
  constructor() {
    super(ME, "horizontal"), this.eLeftSpacer = q, this.eRightSpacer = q, this.setScrollVisibleDebounce = 0;
  }
  wireBeans(e) {
    this.visibleCols = e.visibleCols, this.scrollVisibleSvc = e.scrollVisibleSvc;
  }
  postConstruct() {
    super.postConstruct();
    const e = this.setFakeHScrollSpacerWidths.bind(this);
    this.addManagedEventListeners({
      displayedColumnsChanged: e,
      displayedColumnsWidthChanged: e,
      pinnedRowDataChanged: this.refreshCompBottom.bind(this)
    }), this.addManagedPropertyListener("domLayout", e), this.beans.ctrlsSvc.register("fakeHScrollComp", this), this.createManagedBean(new yc((t) => this.eContainer.style.width = `${t}px`)), this.addManagedPropertyListeners(["suppressHorizontalScroll"], this.onScrollVisibilityChanged.bind(this));
  }
  destroy() {
    window.clearTimeout(this.setScrollVisibleDebounce), super.destroy();
  }
  initialiseInvisibleScrollbar() {
    this.invisibleScrollbar === void 0 && (this.enableRtl = this.gos.get("enableRtl"), super.initialiseInvisibleScrollbar(), this.invisibleScrollbar && this.refreshCompBottom());
  }
  refreshCompBottom() {
    if (!this.invisibleScrollbar)
      return;
    const e = this.beans.pinnedRowModel?.getPinnedBottomTotalHeight() ?? 0;
    this.getGui().style.bottom = `${e}px`;
  }
  onScrollVisibilityChanged() {
    super.onScrollVisibilityChanged(), this.setFakeHScrollSpacerWidths();
  }
  setFakeHScrollSpacerWidths() {
    const e = this.scrollVisibleSvc.verticalScrollShowing;
    let t = this.visibleCols.getDisplayedColumnsRightWidth();
    const i = !this.enableRtl && e, s = this.scrollVisibleSvc.getScrollbarWidth();
    i && (t += s), Vt(this.eRightSpacer, t), this.eRightSpacer.classList.toggle("ag-scroller-corner", t <= s);
    let o = this.visibleCols.getColsLeftWidth();
    this.enableRtl && e && (o += s), Vt(this.eLeftSpacer, o), this.eLeftSpacer.classList.toggle("ag-scroller-corner", o <= s);
  }
  setScrollVisible() {
    const e = this.scrollVisibleSvc.horizontalScrollShowing, t = this.invisibleScrollbar, i = this.gos.get("suppressHorizontalScroll"), s = e && this.scrollVisibleSvc.getScrollbarWidth() || 0, n = i ? 0 : s === 0 && t ? 16 : s, r = () => {
      this.setScrollVisibleDebounce = 0, this.toggleCss("ag-scrollbar-invisible", t), to(this.getGui(), n), to(this.eViewport, n), to(this.eContainer, n), n || this.eContainer.style.setProperty("min-height", "1px"), this.setVisible(e, { skipAriaHidden: !0 });
    };
    window.clearTimeout(this.setScrollVisibleDebounce), e ? this.setScrollVisibleDebounce = window.setTimeout(r, 100) : r();
  }
  getScrollPosition() {
    return Vn(this.eViewport, this.enableRtl);
  }
  setScrollPosition(e) {
    Ht(this.eViewport) || this.attemptSettingScrollPosition(e), Gn(this.eViewport, e, this.enableRtl);
  }
}, IE = {
  tag: "div",
  cls: "ag-body-vertical-scroll",
  attrs: { "aria-hidden": "true" },
  children: [
    {
      tag: "div",
      ref: "eViewport",
      cls: "ag-body-vertical-scroll-viewport",
      children: [{ tag: "div", ref: "eContainer", cls: "ag-body-vertical-scroll-container" }]
    }
  ]
}, kE = class extends hm {
  constructor() {
    super(IE, "vertical");
  }
  postConstruct() {
    super.postConstruct(), this.createManagedBean(new lm(this.eContainer));
    const { ctrlsSvc: e } = this.beans;
    e.register("fakeVScrollComp", this), this.addManagedEventListeners({
      rowContainerHeightChanged: this.onRowContainerHeightChanged.bind(this, e)
    });
  }
  setScrollVisible() {
    const { scrollVisibleSvc: e } = this.beans, t = e.verticalScrollShowing, i = this.invisibleScrollbar, s = t && e.getScrollbarWidth() || 0, o = s === 0 && i ? 16 : s;
    this.toggleCss("ag-scrollbar-invisible", i), Vt(this.getGui(), o), Vt(this.eViewport, o), Vt(this.eContainer, o), this.setDisplayed(t, { skipAriaHidden: !0 });
  }
  onRowContainerHeightChanged(e) {
    const i = e.getGridBodyCtrl().eBodyViewport, s = this.getScrollPosition(), o = i.scrollTop;
    s != o && this.setScrollPosition(o, !0);
  }
  getScrollPosition() {
    return this.eViewport.scrollTop;
  }
  setScrollPosition(e, t) {
    !t && !Ht(this.eViewport) && this.attemptSettingScrollPosition(e), this.eViewport.scrollTop = e;
  }
};
function It(e) {
  return e.ctrlsSvc.getHeaderRowContainerCtrl()?.getRowCount() ?? 0;
}
function Rc(e) {
  const t = [], i = e.ctrlsSvc.getHeaderRowContainerCtrls();
  for (const s of i) {
    if (!s)
      continue;
    const o = s.getGroupRowCount() || 0;
    for (let n = 0; n < o; n++) {
      const r = s.getGroupRowCtrlAtIndex(n), a = t[n];
      if (r) {
        const l = LE(e, r);
        (a == null || l > a) && (t[n] = l);
      }
    }
  }
  return t;
}
function LE(e, t) {
  let s = e.colModel.isPivotMode() ? VE(e) : pm(e);
  const o = t.getHeaderCellCtrls();
  for (const n of o) {
    const { column: r } = n, a = r.getAutoHeaderHeight();
    a != null && a > s && r.isAutoHeaderHeight() && (s = a);
  }
  return s;
}
function xc(e) {
  let i = e.colModel.isPivotMode() ? OE(e) : No(e);
  return e.colModel.forAllCols((s) => {
    const o = s.getAutoHeaderHeight();
    o != null && o > i && s.isAutoHeaderHeight() && (i = o);
  }), i;
}
function No(e) {
  return e.gos.get("headerHeight") ?? e.environment.getDefaultHeaderHeight();
}
function gm(e) {
  return e.gos.get("floatingFiltersHeight") ?? No(e);
}
function pm(e) {
  return e.gos.get("groupHeaderHeight") ?? No(e);
}
function OE(e) {
  return e.gos.get("pivotHeaderHeight") ?? No(e);
}
function VE(e) {
  return e.gos.get("pivotGroupHeaderHeight") ?? pm(e);
}
var GE = class extends T {
  setComp(e, t, i) {
    this.comp = e, this.eGui = t;
    const { beans: s } = this, { headerNavigation: o, touchSvc: n, ctrlsSvc: r } = s;
    o && this.createManagedBean(
      new Vs(i, {
        onTabKeyDown: this.onTabKeyDown.bind(this),
        handleKeyDown: this.handleKeyDown.bind(this),
        onFocusOut: this.onFocusOut.bind(this)
      })
    ), this.addManagedEventListeners({
      columnPivotModeChanged: this.onPivotModeChanged.bind(this, s),
      displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this, s)
    }), this.onPivotModeChanged(s), this.setupHeaderHeight();
    const a = this.onHeaderContextMenu.bind(this);
    this.addManagedElementListeners(this.eGui, { contextmenu: a }), n?.mockHeaderContextMenu(this, a), r.register("gridHeaderCtrl", this);
  }
  setupHeaderHeight() {
    const e = this.setHeaderHeight.bind(this);
    e(), this.addManagedPropertyListeners(
      [
        "headerHeight",
        "pivotHeaderHeight",
        "groupHeaderHeight",
        "pivotGroupHeaderHeight",
        "floatingFiltersHeight"
      ],
      e
    ), this.addManagedEventListeners({
      headerRowsChanged: e,
      columnHeaderHeightChanged: e,
      // add this to the animation frame to avoid a feedback loop
      columnGroupHeaderHeightChanged: () => Jt(this.beans, () => e()),
      gridStylesChanged: e,
      advancedFilterEnabledChanged: e
    });
  }
  setHeaderHeight() {
    const { beans: e } = this;
    let t = 0;
    const i = Rc(e).reduce((n, r) => n + r, 0), s = xc(e);
    if (e.filterManager?.hasFloatingFilters() && (t += gm(e)), t += i, t += s, this.headerHeight === t)
      return;
    this.headerHeight = t;
    const o = `${t + 1}px`;
    this.comp.setHeightAndMinHeight(o), this.eventSvc.dispatchEvent({
      type: "headerHeightChanged"
    });
  }
  onPivotModeChanged(e) {
    const t = e.colModel.isPivotMode();
    this.comp.toggleCss("ag-pivot-on", t), this.comp.toggleCss("ag-pivot-off", !t);
  }
  onDisplayedColumnsChanged(e) {
    const i = e.visibleCols.allCols.some((s) => s.isSpanHeaderHeight());
    this.comp.toggleCss("ag-header-allow-overflow", i);
  }
  onTabKeyDown(e) {
    const t = this.gos.get("enableRtl"), i = e.shiftKey, s = i !== t ? "LEFT" : "RIGHT", { beans: o } = this, { headerNavigation: n, focusSvc: r } = o;
    (n.navigateHorizontally(s, !0, e) || !i && r.focusOverlay(!1) || Ds(o, i, !0)) && e.preventDefault();
  }
  handleKeyDown(e) {
    let t = null;
    const { headerNavigation: i } = this.beans;
    switch (e.key) {
      case E.LEFT:
        t = "LEFT";
      case E.RIGHT: {
        $(t) || (t = "RIGHT"), i.navigateHorizontally(t, !1, e) && e.preventDefault();
        break;
      }
      case E.UP:
        t = "UP";
      case E.DOWN: {
        $(t) || (t = "DOWN"), i.navigateVertically(t, e) && e.preventDefault();
        break;
      }
      default:
        return;
    }
  }
  onFocusOut(e) {
    const { relatedTarget: t } = e, { eGui: i, beans: s } = this;
    !t && i.contains(Fe(s)) || i.contains(t) || (s.focusSvc.focusedHeader = null);
  }
  onHeaderContextMenu(e, t, i) {
    const { menuSvc: s, ctrlsSvc: o } = this.beans;
    if (!e && !i || !s?.isHeaderContextMenuEnabled())
      return;
    const { target: n } = e ?? t;
    (n === this.eGui || n === o.getHeaderRowContainerCtrl()?.eViewport) && s.showHeaderContextMenu(void 0, e, i);
  }
}, Fc = class extends T {
  constructor(e, t, i, s) {
    super(), this.columnOrGroup = e, this.eCell = t, this.colsSpanning = s, this.columnOrGroup = e, this.ariaEl = t.querySelector("[role=columnheader]") || t, this.beans = i;
  }
  setColsSpanning(e) {
    this.colsSpanning = e, this.onLeftChanged();
  }
  getColumnOrGroup() {
    const { beans: e, colsSpanning: t } = this;
    return e.gos.get("enableRtl") && t ? ue(t) : this.columnOrGroup;
  }
  postConstruct() {
    const e = this.onLeftChanged.bind(this);
    this.addManagedListeners(this.columnOrGroup, { leftChanged: e }), this.setLeftFirstTime(), this.addManagedEventListeners({ displayedColumnsWidthChanged: e }), this.addManagedPropertyListener("domLayout", e);
  }
  setLeftFirstTime() {
    const { gos: e, colAnimation: t } = this.beans, i = e.get("suppressColumnMoveAnimation"), s = $(this.columnOrGroup.getOldLeft());
    t?.isActive() && s && !i ? this.animateInLeft() : this.onLeftChanged();
  }
  animateInLeft() {
    const e = this.getColumnOrGroup(), t = this.modifyLeftForPrintLayout(e, e.getOldLeft()), i = this.modifyLeftForPrintLayout(e, e.getLeft());
    this.setLeft(t), this.actualLeft = i, this.beans.colAnimation.executeNextVMTurn(() => {
      this.actualLeft === i && this.setLeft(i);
    });
  }
  onLeftChanged() {
    const e = this.getColumnOrGroup(), t = e.getLeft();
    this.actualLeft = this.modifyLeftForPrintLayout(e, t), this.setLeft(this.actualLeft);
  }
  modifyLeftForPrintLayout(e, t) {
    const { gos: i, visibleCols: s } = this.beans;
    if (!ze(i, "print") || e.getPinned() === "left")
      return t;
    const n = s.getColsLeftWidth();
    if (e.getPinned() === "right") {
      const r = s.bodyWidth;
      return n + r + t;
    }
    return n + t;
  }
  setLeft(e) {
    if ($(e) && (this.eCell.style.left = `${e}px`), De(this.columnOrGroup)) {
      const t = this.columnOrGroup.getLeafColumns();
      if (!t.length)
        return;
      t.length > 1 && OR(this.ariaEl, t.length);
    }
  }
}, HE = 0, fm = "headerCtrl", Pc = class extends T {
  constructor(e, t) {
    super(), this.column = e, this.rowCtrl = t, this.resizeToggleTimeout = 0, this.resizeMultiplier = 1, this.resizeFeature = null, this.lastFocusEvent = null, this.dragSource = null, this.instanceId = e.getUniqueId() + "-" + HE++;
  }
  postConstruct() {
    const e = this.refreshTabIndex.bind(this);
    this.addManagedPropertyListeners(["suppressHeaderFocus"], e), this.addManagedEventListeners({
      overlayExclusiveChanged: e
    });
  }
  shouldStopEventPropagation(e) {
    const { headerRowIndex: t, column: i } = this.beans.focusSvc.focusedHeader, s = i.getDefinition(), o = s && s.suppressHeaderKeyboardEvent;
    if (!$(o))
      return !1;
    const n = Z(this.gos, {
      colDef: s,
      column: i,
      headerRowIndex: t,
      event: e
    });
    return !!o(n);
  }
  getWrapperHasFocus() {
    return Fe(this.beans) === this.eGui;
  }
  setGui(e, t) {
    this.eGui = e, this.addDomData(t), t.addManagedListeners(this.beans.eventSvc, {
      displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this)
    }), t.addManagedElementListeners(this.eGui, {
      focus: this.onGuiFocus.bind(this)
    }), this.onDisplayedColumnsChanged(), this.refreshTabIndex();
  }
  refreshHeaderStyles() {
    const e = this.column.getDefinition();
    if (!e)
      return;
    const { headerStyle: t } = e;
    let i;
    if (typeof t == "function") {
      const s = this.getHeaderClassParams();
      i = t(s);
    } else
      i = t;
    i && this.comp.setUserStyles(i);
  }
  onGuiFocus() {
    this.eventSvc.dispatchEvent({
      type: "headerFocused",
      column: this.column
    });
  }
  setupAutoHeight(e) {
    const { wrapperElement: t, checkMeasuringCallback: i, compBean: s } = e, { beans: o } = this, n = (u) => {
      if (!this.isAlive() || !s.isAlive())
        return;
      const { paddingTop: h, paddingBottom: g, borderBottomWidth: p, borderTopWidth: f } = ji(this.eGui), m = h + g + p + f, v = t.offsetHeight + m;
      if (u < 5) {
        const w = He(o), y = !w || !w.contains(t), S = v == 0;
        if (y || S) {
          $a(() => n(u + 1), "raf", o);
          return;
        }
      }
      this.setColHeaderHeight(this.column, v);
    };
    let r = !1, a;
    const l = () => {
      const u = this.column.isAutoHeaderHeight();
      u && !r && c(), !u && r && d();
    }, c = () => {
      r = !0, n(0), this.comp.toggleCss("ag-header-cell-auto-height", !0), a = Qt(this.beans, t, () => n(0));
    }, d = () => {
      r = !1, a && a(), this.comp.toggleCss("ag-header-cell-auto-height", !1), a = void 0;
    };
    l(), s.addDestroyFunc(() => d()), s.addManagedListeners(this.column, { widthChanged: () => r && n(0) }), s.addManagedEventListeners({
      sortChanged: () => {
        r && window.setTimeout(() => n(0));
      }
    }), i && i(l);
  }
  onDisplayedColumnsChanged() {
    const { comp: e, column: t, beans: i, eGui: s } = this;
    !e || !t || !s || (qf(e, t, i.visibleCols), Bp(s, i.visibleCols.getAriaColIndex(t)));
  }
  addResizeAndMoveKeyboardListeners(e) {
    e.addManagedListeners(this.eGui, {
      keydown: this.onGuiKeyDown.bind(this),
      keyup: this.onGuiKeyUp.bind(this)
    });
  }
  refreshTabIndex() {
    const e = ki(this.beans);
    this.eGui && rt(this.eGui, "tabindex", e ? null : "-1");
  }
  onGuiKeyDown(e) {
    const t = Fe(this.beans), i = e.key === E.LEFT || e.key === E.RIGHT;
    if (this.isResizing && (e.preventDefault(), e.stopImmediatePropagation()), // if elements within the header are focused, we don't process the event
    t !== this.eGui || // if shiftKey and altKey are not pressed, it's cell navigation so we don't process the event
    !e.shiftKey && !e.altKey || ((this.isResizing || i) && (e.preventDefault(), e.stopImmediatePropagation()), !i))
      return;
    const o = e.key === E.LEFT !== this.gos.get("enableRtl") ? "left" : "right";
    if (e.altKey) {
      this.isResizing = !0, this.resizeMultiplier += 1;
      const n = this.getViewportAdjustedResizeDiff(e);
      this.resizeHeader(n, e.shiftKey), this.resizeFeature?.toggleColumnResizing(!0);
    } else
      this.moveHeader(o);
  }
  moveHeader(e) {
    this.beans.colMoves?.moveHeader(e, this.eGui, this.column, this.rowCtrl.pinned, this);
  }
  getViewportAdjustedResizeDiff(e) {
    const t = this.getResizeDiff(e), { pinnedCols: i } = this.beans;
    return i ? i.getHeaderResizeDiff(t, this.column) : t;
  }
  getResizeDiff(e) {
    const { gos: t, column: i } = this;
    let s = e.key === E.LEFT !== t.get("enableRtl");
    const o = i.getPinned(), n = t.get("enableRtl");
    return o && n !== (o === "right") && (s = !s), (s ? -1 : 1) * this.resizeMultiplier;
  }
  onGuiKeyUp() {
    this.isResizing && (this.resizeToggleTimeout && (window.clearTimeout(this.resizeToggleTimeout), this.resizeToggleTimeout = 0), this.isResizing = !1, this.resizeMultiplier = 1, this.resizeToggleTimeout = window.setTimeout(() => {
      this.resizeFeature?.toggleColumnResizing(!1);
    }, 150));
  }
  handleKeyDown(e) {
    const t = this.getWrapperHasFocus();
    switch (e.key) {
      case E.PAGE_DOWN:
      case E.PAGE_UP:
      case E.PAGE_HOME:
      case E.PAGE_END:
        t && e.preventDefault();
    }
  }
  addDomData(e) {
    const t = fm, { eGui: i, gos: s } = this;
    Hi(s, i, t, this), e.addDestroyFunc(() => Hi(s, i, t, null));
  }
  focus(e) {
    const { eGui: t } = this;
    return t ? (this.lastFocusEvent = e || null, t.focus(), !0) : !1;
  }
  focusThis() {
    this.beans.focusSvc.focusedHeader = { headerRowIndex: this.rowCtrl.rowIndex, column: this.column };
  }
  removeDragSource() {
    this.dragSource && (this.beans.dragAndDrop?.removeDragSource(this.dragSource), this.dragSource = null);
  }
  handleContextMenuMouseEvent(e, t, i) {
    const s = e ?? t, { menuSvc: o, gos: n } = this.beans;
    n.get("preventDefaultOnContextMenu") && s.preventDefault(), o?.isHeaderContextMenuEnabled(i) && o.showHeaderContextMenu(i, e, t), this.dispatchColumnMouseEvent("columnHeaderContextMenu", i);
  }
  dispatchColumnMouseEvent(e, t) {
    this.eventSvc.dispatchEvent({
      type: e,
      column: t
    });
  }
  setColHeaderHeight(e, t) {
    if (!e.setAutoHeaderHeight(t))
      return;
    const { eventSvc: i } = this;
    e.isColumn ? i.dispatchEvent({
      type: "columnHeaderHeightChanged",
      column: e,
      columns: [e],
      source: "autosizeColumnHeaderHeight"
    }) : i.dispatchEvent({
      type: "columnGroupHeaderHeightChanged",
      columnGroup: e,
      source: "autosizeColumnGroupHeaderHeight"
    });
  }
  clearComponent() {
    this.removeDragSource(), this.resizeFeature = null, this.comp = null, this.eGui = null;
  }
  destroy() {
    super.destroy(), this.column = null, this.lastFocusEvent = null, this.rowCtrl = null;
  }
}, BE = class extends Pc {
  constructor() {
    super(...arguments), this.refreshFunctions = {}, this.userHeaderClasses = /* @__PURE__ */ new Set(), this.ariaDescriptionProperties = /* @__PURE__ */ new Map();
  }
  setComp(e, t, i, s, o) {
    this.comp = e;
    const { rowCtrl: n, column: r, beans: a } = this, { colResize: l, context: c, colHover: d, rangeSvc: u } = a, h = Vo(this, c, o);
    this.setGui(t, h), this.updateState(), this.setupWidth(h), this.setupMovingCss(h), this.setupMenuClass(h), this.setupSortableClass(h), this.setupWrapTextClass(), this.refreshSpanHeaderHeight(), this.setupAutoHeight({
      wrapperElement: s,
      checkMeasuringCallback: (p) => this.setRefreshFunction("measuring", p),
      compBean: h
    }), this.addColumnHoverListener(h), this.setupFilterClass(h), this.setupStylesFromColDef(), this.setupClassesFromColDef(), this.setupTooltip(), this.addActiveHeaderMouseListeners(h), this.setupSelectAll(h), this.setupUserComp(), this.refreshAria(), l ? this.resizeFeature = h.createManagedBean(
      l.createResizeFeature(n.pinned, r, i, e, this)
    ) : Re(i, !1), d?.createHoverFeature(h, [r], t), u?.createRangeHighlightFeature(h, r, e), h.createManagedBean(new Fc(r, t, a)), h.createManagedBean(
      new Vs(t, {
        shouldStopEventPropagation: (p) => this.shouldStopEventPropagation(p),
        onTabKeyDown: () => null,
        handleKeyDown: this.handleKeyDown.bind(this),
        onFocusIn: this.onFocusIn.bind(this),
        onFocusOut: this.onFocusOut.bind(this)
      })
    ), this.addResizeAndMoveKeyboardListeners(h), h.addManagedPropertyListeners(
      ["suppressMovableColumns", "suppressMenuHide", "suppressAggFuncInHeader", "enableAdvancedFilter"],
      () => this.refresh()
    ), h.addManagedListeners(r, { colDefChanged: () => this.refresh() }), h.addManagedListeners(r, { headerHighlightChanged: this.onHeaderHighlightChanged.bind(this) });
    const g = () => this.checkDisplayName();
    h.addManagedEventListeners({
      columnValueChanged: g,
      columnRowGroupChanged: g,
      columnPivotChanged: g,
      headerHeightChanged: this.onHeaderHeightChanged.bind(this)
    }), h.addDestroyFunc(() => {
      this.refreshFunctions = {}, this.selectAllFeature = null, this.dragSourceElement = void 0, this.userCompDetails = null, this.userHeaderClasses.clear(), this.ariaDescriptionProperties.clear(), this.clearComponent();
    });
  }
  resizeHeader(e, t) {
    this.beans.colResize?.resizeHeader(this.column, e, t);
  }
  getHeaderClassParams() {
    const { column: e, beans: t } = this, i = e.colDef;
    return Z(t.gos, {
      colDef: i,
      column: e,
      floatingFilter: !1
    });
  }
  setupUserComp() {
    const e = this.lookupUserCompDetails();
    e && this.setCompDetails(e);
  }
  setCompDetails(e) {
    this.userCompDetails = e, this.comp.setUserCompDetails(e);
  }
  lookupUserCompDetails() {
    const e = this.createParams(), t = this.column.getColDef();
    return fF(this.beans.userCompFactory, t, e);
  }
  createParams() {
    const { menuSvc: e, sortSvc: t, colFilter: i, gos: s } = this.beans;
    return Z(s, {
      column: this.column,
      displayName: this.displayName,
      enableSorting: this.column.isSortable(),
      enableMenu: this.menuEnabled,
      enableFilterButton: this.openFilterEnabled && !!e?.isHeaderFilterButtonEnabled(this.column),
      enableFilterIcon: !!i && (!this.openFilterEnabled || at(this.gos)),
      showColumnMenu: (n, r) => {
        e?.showColumnMenu({
          column: this.column,
          buttonElement: n,
          positionBy: "button",
          onClosedCallback: r
        });
      },
      showColumnMenuAfterMouseClick: (n, r) => {
        e?.showColumnMenu({
          column: this.column,
          mouseEvent: n,
          positionBy: "mouse",
          onClosedCallback: r
        });
      },
      showFilter: (n) => {
        e?.showFilterMenu({
          column: this.column,
          buttonElement: n,
          containerType: "columnFilter",
          positionBy: "button"
        });
      },
      progressSort: (n) => {
        t?.progressSort(this.column, !!n, "uiColumnSorted");
      },
      setSort: (n, r) => {
        t?.setSortForColumn(this.column, n, !!r, "uiColumnSorted");
      },
      eGridHeader: this.eGui,
      setTooltip: (n, r) => {
        s.assertModuleRegistered("Tooltip", 3), this.setupTooltip(n, r);
      }
    });
  }
  setupSelectAll(e) {
    const { selectionSvc: t } = this.beans;
    t && (this.selectAllFeature = e.createOptionalManagedBean(t.createSelectAllFeature(this.column)), this.selectAllFeature?.setComp(this), e.addManagedPropertyListener("rowSelection", () => {
      const i = t.createSelectAllFeature(this.column);
      i && !this.selectAllFeature ? (this.selectAllFeature = e.createManagedBean(i), this.selectAllFeature?.setComp(this), this.comp.refreshSelectAllGui()) : this.selectAllFeature && !i && (this.comp.removeSelectAllGui(), this.selectAllFeature = this.destroyBean(this.selectAllFeature));
    }));
  }
  getSelectAllGui() {
    return this.selectAllFeature?.getCheckboxGui();
  }
  handleKeyDown(e) {
    super.handleKeyDown(e), e.key === E.SPACE && this.selectAllFeature?.onSpaceKeyDown(e), e.key === E.ENTER && this.onEnterKeyDown(e), e.key === E.DOWN && e.altKey && this.showMenuOnKeyPress(e, !1);
  }
  onEnterKeyDown(e) {
    e.ctrlKey || e.metaKey ? this.showMenuOnKeyPress(e, !0) : this.sortable && this.beans.sortSvc?.progressSort(this.column, e.shiftKey, "uiColumnSorted");
  }
  showMenuOnKeyPress(e, t) {
    const i = this.comp.getUserCompInstance();
    Bu(i) && i.onMenuKeyboardShortcut(t) && e.preventDefault();
  }
  onFocusIn(e) {
    this.eGui.contains(e.relatedTarget) || (this.focusThis(), this.announceAriaDescription()), dP() && this.setActiveHeader(!0);
  }
  onFocusOut(e) {
    this.eGui.contains(e.relatedTarget) || this.setActiveHeader(!1);
  }
  setupTooltip(e, t) {
    this.tooltipFeature = this.beans.tooltipSvc?.setupHeaderTooltip(
      this.tooltipFeature,
      this,
      e,
      t
    );
  }
  setupStylesFromColDef() {
    this.setRefreshFunction("headerStyles", this.refreshHeaderStyles.bind(this)), this.refreshHeaderStyles();
  }
  setupClassesFromColDef() {
    const e = () => {
      const t = this.column.getColDef(), i = Yf(t, this.gos, this.column, null), s = this.userHeaderClasses;
      this.userHeaderClasses = new Set(i), i.forEach((o) => {
        s.has(o) ? s.delete(o) : this.comp.toggleCss(o, !0);
      }), s.forEach((o) => this.comp.toggleCss(o, !1));
    };
    this.setRefreshFunction("headerClasses", e), e();
  }
  setDragSource(e) {
    this.dragSourceElement = e, this.removeDragSource(), !(!e || !this.draggable) && (this.dragSource = this.beans.colMoves?.setDragSourceForHeader(e, this.column, this.displayName) ?? null);
  }
  updateState() {
    const { menuSvc: e } = this.beans;
    this.menuEnabled = !!e?.isColumnMenuInHeaderEnabled(this.column), this.openFilterEnabled = !!e?.isFilterMenuInHeaderEnabled(this.column), this.sortable = this.column.isSortable(), this.displayName = this.calculateDisplayName(), this.draggable = this.workOutDraggable();
  }
  setRefreshFunction(e, t) {
    this.refreshFunctions[e] = t;
  }
  refresh() {
    this.updateState(), this.refreshHeaderComp(), this.refreshAria(), Object.values(this.refreshFunctions).forEach((e) => e());
  }
  refreshHeaderComp() {
    const e = this.lookupUserCompDetails();
    if (!e)
      return;
    (this.comp.getUserCompInstance() != null && this.userCompDetails.componentClass == e.componentClass ? this.attemptHeaderCompRefresh(e.params) : !1) ? this.setDragSource(this.dragSourceElement) : this.setCompDetails(e);
  }
  attemptHeaderCompRefresh(e) {
    const t = this.comp.getUserCompInstance();
    return !t || !t.refresh ? !1 : t.refresh(e);
  }
  calculateDisplayName() {
    return this.beans.colNames.getDisplayNameForColumn(this.column, "header", !0);
  }
  checkDisplayName() {
    this.displayName !== this.calculateDisplayName() && this.refresh();
  }
  workOutDraggable() {
    const e = this.column.getColDef();
    return !!(!this.gos.get("suppressMovableColumns") && !e.suppressMovable && !e.lockPosition) || !!e.enableRowGroup || !!e.enablePivot;
  }
  setupWidth(e) {
    const t = () => {
      const i = this.column.getActualWidth();
      this.comp.setWidth(`${i}px`);
    };
    e.addManagedListeners(this.column, { widthChanged: t }), t();
  }
  setupMovingCss(e) {
    const t = () => {
      this.comp.toggleCss("ag-header-cell-moving", this.column.isMoving());
    };
    e.addManagedListeners(this.column, { movingChanged: t }), t();
  }
  setupMenuClass(e) {
    const t = () => {
      this.comp?.toggleCss("ag-column-menu-visible", this.column.isMenuVisible());
    };
    e.addManagedListeners(this.column, { menuVisibleChanged: t }), t();
  }
  setupSortableClass(e) {
    const t = () => {
      this.comp.toggleCss("ag-header-cell-sortable", !!this.sortable);
    };
    t(), this.setRefreshFunction("updateSortable", t), e.addManagedEventListeners({ sortChanged: this.refreshAriaSort.bind(this) });
  }
  setupFilterClass(e) {
    const t = () => {
      const i = this.column.isFilterActive();
      this.comp.toggleCss("ag-header-cell-filtered", i), this.refreshAria();
    };
    e.addManagedListeners(this.column, { filterActiveChanged: t }), t();
  }
  setupWrapTextClass() {
    const e = () => {
      const t = !!this.column.getColDef().wrapHeaderText;
      this.comp.toggleCss("ag-header-cell-wrap-text", t);
    };
    e(), this.setRefreshFunction("wrapText", e);
  }
  onHeaderHighlightChanged() {
    const e = this.column.getHighlighted(), t = e === 0, i = e === 1;
    this.comp.toggleCss("ag-header-highlight-before", t), this.comp.toggleCss("ag-header-highlight-after", i);
  }
  onDisplayedColumnsChanged() {
    super.onDisplayedColumnsChanged(), this.isAlive() && this.onHeaderHeightChanged();
  }
  onHeaderHeightChanged() {
    this.refreshSpanHeaderHeight();
  }
  refreshSpanHeaderHeight() {
    const { eGui: e, column: t, comp: i, beans: s } = this, o = Rc(this.beans), n = o.reduce((h, g) => h += g, 0) === 0;
    if (i.toggleCss("ag-header-parent-hidden", n), !t.isSpanHeaderHeight()) {
      e.style.removeProperty("top"), e.style.removeProperty("height"), i.toggleCss("ag-header-span-height", !1), i.toggleCss("ag-header-span-total", !1);
      return;
    }
    const { numberOfParents: r, isSpanningTotal: a } = this.column.getColumnGroupPaddingInfo();
    i.toggleCss("ag-header-span-height", r > 0);
    const l = xc(s);
    if (r === 0) {
      i.toggleCss("ag-header-span-total", !1), e.style.setProperty("top", "0px"), e.style.setProperty("height", `${l}px`);
      return;
    }
    i.toggleCss("ag-header-span-total", a);
    const c = (this.column.getFirstRealParent()?.getLevel() ?? -1) + 1, d = o.length - c;
    let u = 0;
    for (let h = 0; h < d; h++)
      u += o[o.length - 1 - h];
    e.style.setProperty("top", `${-u}px`), e.style.setProperty("height", `${l + u}px`);
  }
  refreshAriaSort() {
    if (this.sortable) {
      const e = this.getLocaleTextFunc(), t = this.beans.sortSvc?.getDisplaySortForColumn(this.column) || null;
      this.comp.setAriaSort(xR(t)), this.setAriaDescriptionProperty("sort", e("ariaSortableColumn", "Press ENTER to sort"));
    } else
      this.comp.setAriaSort(), this.setAriaDescriptionProperty("sort", null);
  }
  refreshAriaMenu() {
    if (this.menuEnabled) {
      const e = this.getLocaleTextFunc();
      this.setAriaDescriptionProperty("menu", e("ariaMenuColumn", "Press ALT DOWN to open column menu"));
    } else
      this.setAriaDescriptionProperty("menu", null);
  }
  refreshAriaFilterButton() {
    if (this.openFilterEnabled && !at(this.gos)) {
      const e = this.getLocaleTextFunc();
      this.setAriaDescriptionProperty(
        "filterButton",
        e("ariaFilterColumn", "Press CTRL ENTER to open filter")
      );
    } else
      this.setAriaDescriptionProperty("filterButton", null);
  }
  refreshAriaFiltered() {
    const e = this.getLocaleTextFunc();
    this.column.isFilterActive() ? this.setAriaDescriptionProperty("filter", e("ariaColumnFiltered", "Column Filtered")) : this.setAriaDescriptionProperty("filter", null);
  }
  setAriaDescriptionProperty(e, t) {
    t != null ? this.ariaDescriptionProperties.set(e, t) : this.ariaDescriptionProperties.delete(e);
  }
  announceAriaDescription() {
    if (!this.eGui.contains(Fe(this.beans)))
      return;
    const e = Array.from(this.ariaDescriptionProperties.keys()).sort((t, i) => t === "filter" ? -1 : i.charCodeAt(0) - t.charCodeAt(0)).map((t) => this.ariaDescriptionProperties.get(t)).join(". ");
    this.beans.ariaAnnounce?.announceValue(e, "columnHeader");
  }
  refreshAria() {
    this.refreshAriaSort(), this.refreshAriaMenu(), this.refreshAriaFilterButton(), this.refreshAriaFiltered();
  }
  addColumnHoverListener(e) {
    this.beans.colHover?.addHeaderColumnHoverListener(e, this.comp, this.column);
  }
  addActiveHeaderMouseListeners(e) {
    const t = (o) => this.handleMouseOverChange(o.type === "mouseenter"), i = () => {
      this.setActiveHeader(!0), this.dispatchColumnMouseEvent("columnHeaderClicked", this.column);
    }, s = (o) => this.handleContextMenuMouseEvent(o, void 0, this.column);
    e.addManagedListeners(this.eGui, {
      mouseenter: t,
      mouseleave: t,
      click: i,
      contextmenu: s
    });
  }
  handleMouseOverChange(e) {
    this.setActiveHeader(e), this.eventSvc.dispatchEvent({
      type: e ? "columnHeaderMouseOver" : "columnHeaderMouseLeave",
      column: this.column
    });
  }
  setActiveHeader(e) {
    this.comp.toggleCss("ag-header-active", e);
  }
  getAnchorElementForMenu(e) {
    const t = this.comp.getUserCompInstance();
    return Bu(t) ? t.getAnchorElementForMenu(e) : this.eGui;
  }
  destroy() {
    this.tooltipFeature = this.destroyBean(this.tooltipFeature), super.destroy();
  }
};
function Bu(e) {
  return typeof e?.getAnchorElementForMenu == "function" && typeof e.onMenuKeyboardShortcut == "function";
}
var NE = 0, Qr = class extends T {
  constructor(e, t, i) {
    super(), this.rowIndex = e, this.pinned = t, this.type = i, this.instanceId = NE++, this.comp = null, this.allCtrls = [];
    let s = "ag-header-row-column";
    i === "group" ? s = "ag-header-row-group" : i === "filter" && (s = "ag-header-row-filter"), this.headerRowClass = `ag-header-row ${s}`;
  }
  setRowIndex(e) {
    this.rowIndex = e, this.comp?.setRowIndex(this.getAriaRowIndex()), this.onRowHeightChanged();
  }
  postConstruct() {
    this.isPrintLayout = ze(this.gos, "print"), this.isEnsureDomOrder = this.gos.get("ensureDomOrder");
  }
  /** Checks that every header cell that is currently visible has been rendered.
   * Can only be false under some circumstances when using React
   */
  areCellsRendered() {
    return this.comp ? this.allCtrls.every((e) => e.eGui != null) : !1;
  }
  /**
   *
   * @param comp Proxy to the actual component
   * @param initCompState Should the component be initialised with the current state of the controller. Default: true
   */
  setComp(e, t, i = !0) {
    this.comp = e, t = Vo(this, this.beans.context, t), i && (this.setRowIndex(this.rowIndex), this.onVirtualColumnsChanged()), this.setWidth(), this.addEventListeners(t);
  }
  getAriaRowIndex() {
    return this.rowIndex + 1;
  }
  addEventListeners(e) {
    const t = this.onRowHeightChanged.bind(this), i = this.onDisplayedColumnsChanged.bind(this);
    e.addManagedEventListeners({
      columnResized: this.setWidth.bind(this),
      displayedColumnsChanged: i,
      virtualColumnsChanged: (s) => this.onVirtualColumnsChanged(s.afterScroll),
      columnGroupHeaderHeightChanged: t,
      columnHeaderHeightChanged: t,
      gridStylesChanged: t,
      advancedFilterEnabledChanged: t
    }), e.addManagedPropertyListener("domLayout", i), e.addManagedPropertyListener("ensureDomOrder", (s) => this.isEnsureDomOrder = s.currentValue), e.addManagedPropertyListeners(
      [
        "headerHeight",
        "pivotHeaderHeight",
        "groupHeaderHeight",
        "pivotGroupHeaderHeight",
        "floatingFiltersHeight"
      ],
      t
    );
  }
  onDisplayedColumnsChanged() {
    this.isPrintLayout = ze(this.gos, "print"), this.onVirtualColumnsChanged(), this.setWidth(), this.onRowHeightChanged();
  }
  setWidth() {
    if (!this.comp)
      return;
    const e = this.getWidthForRow();
    this.comp.setWidth(`${e}px`);
  }
  getWidthForRow() {
    const { visibleCols: e } = this.beans;
    return this.isPrintLayout ? this.pinned != null ? 0 : e.getContainerWidth("right") + e.getContainerWidth("left") + e.getContainerWidth(null) : e.getContainerWidth(this.pinned);
  }
  onRowHeightChanged() {
    if (!this.comp)
      return;
    const { topOffset: e, rowHeight: t } = this.getTopAndHeight();
    this.comp.setTop(e + "px"), this.comp.setHeight(t + "px");
  }
  getTopAndHeight() {
    let e = 0;
    const t = Rc(this.beans);
    for (let o = 0; o < t.length; o++) {
      if (o === this.rowIndex && this.type === "group")
        return { topOffset: e, rowHeight: t[o] };
      e += t[o];
    }
    const i = xc(this.beans);
    if (this.type === "column")
      return { topOffset: e, rowHeight: i };
    e += i;
    const s = gm(this.beans);
    return { topOffset: e, rowHeight: s };
  }
  onVirtualColumnsChanged(e = !1) {
    if (!this.comp)
      return;
    const t = this.getUpdatedHeaderCtrls(), i = this.isEnsureDomOrder || this.isPrintLayout;
    this.comp.setHeaderCtrls(t, i, e);
  }
  /**
   * Recycles the header cell ctrls and creates new ones for the columns in the viewport
   * @returns The updated header cell ctrls
   */
  getUpdatedHeaderCtrls() {
    const e = this.ctrlsById;
    this.ctrlsById = /* @__PURE__ */ new Map();
    const t = this.getColumnsInViewport();
    for (const s of t)
      this.recycleAndCreateHeaderCtrls(s, this.ctrlsById, e);
    const i = (s) => {
      const { focusSvc: o, visibleCols: n } = this.beans;
      return o.isHeaderWrapperFocused(s) ? n.isVisible(s.column) : !1;
    };
    if (e)
      for (const [s, o] of e)
        i(o) ? this.ctrlsById.set(s, o) : this.destroyBean(o);
    return this.allCtrls = Array.from(this.ctrlsById.values()), this.allCtrls;
  }
  /** Get the current header cell ctrls */
  getHeaderCellCtrls() {
    return this.allCtrls;
  }
  recycleAndCreateHeaderCtrls(e, t, i) {
    if (e.isEmptyGroup())
      return;
    const s = e.getUniqueId();
    let o;
    if (i && (o = i.get(s), i.delete(s)), o && o.column != e && (this.destroyBean(o), o = void 0), o == null)
      switch (this.type) {
        case "filter": {
          o = this.createBean(
            this.beans.registry.createDynamicBean(
              "headerFilterCellCtrl",
              !0,
              e,
              this
            )
          );
          break;
        }
        case "group":
          o = this.createBean(
            this.beans.registry.createDynamicBean(
              "headerGroupCellCtrl",
              !0,
              e,
              this
            )
          );
          break;
        default:
          o = this.createBean(new BE(e, this));
          break;
      }
    t.set(s, o);
  }
  getColumnsInViewport() {
    if (!this.isPrintLayout)
      return this.getComponentsToRender();
    if (this.pinned)
      return [];
    const e = [];
    return ["left", null, "right"].forEach((t) => {
      e.push(...this.getComponentsToRender(t));
    }), e;
  }
  getComponentsToRender(e = this.pinned) {
    return this.type === "group" ? this.beans.colViewport.getHeadersToRender(e, this.rowIndex) : this.beans.colViewport.getColumnHeadersToRender(e);
  }
  focusHeader(e, t) {
    const i = this.allCtrls.find((o) => o.column == e);
    return i ? i.focus(t) : !1;
  }
  destroy() {
    this.allCtrls = this.destroyBeans(this.allCtrls), this.ctrlsById = void 0, this.comp = null, super.destroy();
  }
}, WE = class extends T {
  constructor(e) {
    super(), this.pinned = e, this.hidden = !1, this.includeFloatingFilter = !1, this.groupsRowCtrls = [];
  }
  setComp(e, t) {
    this.comp = e, this.eViewport = t;
    const { pinnedCols: i, ctrlsSvc: s, colModel: o, colMoves: n } = this.beans;
    this.setupCenterWidth(), i?.setupHeaderPinnedWidth(this), this.setupDragAndDrop(n, this.eViewport);
    const r = this.refresh.bind(this, !0);
    this.addManagedEventListeners({
      displayedColumnsChanged: r,
      advancedFilterEnabledChanged: r
    });
    const a = `${typeof this.pinned == "string" ? this.pinned : "center"}Header`;
    s.register(a, this), o.ready && this.refresh();
  }
  getAllCtrls() {
    const e = [...this.groupsRowCtrls];
    return this.columnsRowCtrl && e.push(this.columnsRowCtrl), this.filtersRowCtrl && e.push(this.filtersRowCtrl), e;
  }
  refresh(e = !1) {
    const { focusSvc: t, filterManager: i, visibleCols: s } = this.beans;
    let o = 0;
    const n = t.getFocusHeaderToUseAfterRefresh(), r = () => {
      const u = s.headerGroupRowCount;
      o = u;
      const h = this.groupsRowCtrls.length;
      if (h !== u) {
        if (h > u) {
          for (let g = u; g < h; g++)
            this.destroyBean(this.groupsRowCtrls[g]);
          this.groupsRowCtrls.length = u;
          return;
        }
        for (let g = h; g < u; g++) {
          const p = this.createBean(new Qr(g, this.pinned, "group"));
          this.groupsRowCtrls.push(p);
        }
      }
    }, a = () => {
      const u = o++;
      if (this.hidden) {
        this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl);
        return;
      }
      this.columnsRowCtrl == null || !e ? (this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl), this.columnsRowCtrl = this.createBean(new Qr(u, this.pinned, "column"))) : this.columnsRowCtrl.rowIndex !== u && this.columnsRowCtrl.setRowIndex(u);
    }, l = () => {
      this.includeFloatingFilter = !!i?.hasFloatingFilters() && !this.hidden;
      const u = () => {
        this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);
      };
      if (!this.includeFloatingFilter) {
        u();
        return;
      }
      e || u();
      const h = o++;
      this.filtersRowCtrl ? this.filtersRowCtrl.rowIndex !== h && this.filtersRowCtrl.setRowIndex(h) : this.filtersRowCtrl = this.createBean(new Qr(h, this.pinned, "filter"));
    }, c = this.getAllCtrls();
    r(), a(), l();
    const d = this.getAllCtrls();
    this.comp.setCtrls(d), this.restoreFocusOnHeader(t, n), c.length !== d.length && this.beans.eventSvc.dispatchEvent({
      type: "headerRowsChanged"
    });
  }
  getHeaderCtrlForColumn(e) {
    const t = (i) => i?.getHeaderCellCtrls().find((s) => s.column === e);
    if (gi(e))
      return t(this.columnsRowCtrl);
    if (this.groupsRowCtrls.length !== 0)
      for (let i = 0; i < this.groupsRowCtrls.length; i++) {
        const s = t(this.groupsRowCtrls[i]);
        if (s)
          return s;
      }
  }
  getHtmlElementForColumnHeader(e) {
    return this.getHeaderCtrlForColumn(e)?.eGui ?? null;
  }
  getRowType(e) {
    return this.getAllCtrls()[e]?.type;
  }
  focusHeader(e, t, i) {
    const o = this.getAllCtrls()[e];
    return o ? o.focusHeader(t, i) : !1;
  }
  getGroupRowCount() {
    return this.groupsRowCtrls.length;
  }
  getGroupRowCtrlAtIndex(e) {
    return this.groupsRowCtrls[e];
  }
  getRowCount() {
    return this.groupsRowCtrls.length + (this.columnsRowCtrl ? 1 : 0) + (this.filtersRowCtrl ? 1 : 0);
  }
  setHorizontalScroll(e) {
    this.comp.setViewportScrollLeft(e);
  }
  onScrollCallback(e) {
    this.addManagedElementListeners(this.eViewport, { scroll: e });
  }
  destroy() {
    this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl), this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl), this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls), super.destroy();
  }
  setupDragAndDrop(e, t) {
    const i = e?.createBodyDropTarget(this.pinned, t);
    i && this.createManagedBean(i);
  }
  restoreFocusOnHeader(e, t) {
    if (!t)
      return;
    const { column: i } = t;
    i.getPinned() == this.pinned && e.focusHeaderPosition({ headerPosition: t });
  }
  setupCenterWidth() {
    this.pinned == null && this.createManagedBean(new yc((e) => this.comp.setCenterWidth(`${e}px`), !0));
  }
}, zE = class extends T {
  constructor() {
    super(...arguments), this.beanName = "menuSvc";
  }
  postConstruct() {
    const { enterpriseMenuFactory: e, filterMenuFactory: t } = this.beans;
    this.activeMenuFactory = e ?? t;
  }
  showColumnMenu(e) {
    this.showColumnMenuCommon(this.activeMenuFactory, e, "columnMenu");
  }
  showFilterMenu(e) {
    this.showColumnMenuCommon(Wu(this.beans), e, e.containerType, !0);
  }
  showHeaderContextMenu(e, t, i) {
    this.activeMenuFactory?.showMenuAfterContextMenuEvent(e, t, i);
  }
  hidePopupMenu() {
    this.beans.contextMenuSvc?.hideActiveMenu(), this.activeMenuFactory?.hideActiveMenu();
  }
  hideFilterMenu() {
    Wu(this.beans)?.hideActiveMenu();
  }
  isColumnMenuInHeaderEnabled(e) {
    const { suppressHeaderMenuButton: t } = e.getColDef();
    return !t && !!this.activeMenuFactory?.isMenuEnabled(e) && (at(this.gos) || !!this.beans.enterpriseMenuFactory);
  }
  isFilterMenuInHeaderEnabled(e) {
    return !e.getColDef().suppressHeaderFilterButton && !!this.beans.filterManager?.isFilterAllowed(e);
  }
  isHeaderContextMenuEnabled(e) {
    return !(e && gi(e) ? e.getColDef() : e?.getColGroupDef())?.suppressHeaderContextMenu && this.gos.get("columnMenu") === "new";
  }
  isHeaderMenuButtonAlwaysShowEnabled() {
    return this.isSuppressMenuHide();
  }
  isHeaderMenuButtonEnabled() {
    const e = !this.isSuppressMenuHide();
    return !(Di() && e);
  }
  isHeaderFilterButtonEnabled(e) {
    return this.isFilterMenuInHeaderEnabled(e) && !at(this.gos) && !this.isFloatingFilterButtonDisplayed(e);
  }
  isFilterMenuItemEnabled(e) {
    return !!this.beans.filterManager?.isFilterAllowed(e) && !at(this.gos) && !this.isFilterMenuInHeaderEnabled(e) && !this.isFloatingFilterButtonDisplayed(e);
  }
  isFloatingFilterButtonEnabled(e) {
    return !e.getColDef().suppressFloatingFilterButton;
  }
  isFloatingFilterButtonDisplayed(e) {
    return !!e.getColDef().floatingFilter && this.isFloatingFilterButtonEnabled(e);
  }
  isSuppressMenuHide() {
    const e = this.gos, t = e.get("suppressMenuHide");
    return at(e) ? e.exists("suppressMenuHide") ? t : !1 : t;
  }
  showColumnMenuCommon(e, t, i, s) {
    const { positionBy: o, onClosedCallback: n } = t, r = t.column;
    if (o === "button") {
      const { buttonElement: a } = t;
      e?.showMenuAfterButtonClick(r, a, i, n, s);
    } else if (o === "mouse") {
      const { mouseEvent: a } = t;
      e?.showMenuAfterMouseEvent(r, a, i, n, s);
    } else if (r) {
      const a = this.beans, l = a.ctrlsSvc;
      l.getScrollFeature().ensureColumnVisible(r, "auto"), Jt(a, () => {
        const c = l.getHeaderRowContainerCtrl(r.getPinned())?.getHeaderCtrlForColumn(r);
        c && e?.showMenuAfterButtonClick(
          r,
          c.getAnchorElementForMenu(s),
          i,
          n,
          s
        );
      });
    }
  }
};
function Nu(e, t, i) {
  e.menuVisible !== t && (e.menuVisible = t, e.dispatchColEvent("menuVisibleChanged", i));
}
function Wu(e) {
  const { enterpriseMenuFactory: t, filterMenuFactory: i, gos: s } = e;
  return t && at(s) ? t : i;
}
var Ec = class extends pe {
  isPopup() {
    return !0;
  }
  setParentComponent(e) {
    e.addCss("ag-has-popup"), super.setParentComponent(e);
  }
  destroy() {
    const e = this.parentComponent;
    e && e.isAlive() && e.getGui().classList.remove("ag-has-popup"), super.destroy();
  }
}, pr = class extends Ec {
  constructor() {
    super(...arguments), this.errorMessages = null;
  }
  init(e) {
    this.params = e, this.initialiseEditor(e), this.eEditor.onValueChange(() => e.validate());
  }
  destroy() {
    this.errorMessages = null;
  }
}, mm = class extends pe {
  constructor() {
    super();
  }
}, _E = {
  tag: "span",
  cls: "ag-overlay-loading-center",
  attrs: { "aria-live": "polite", "aria-atomic": "true" }
}, UE = class extends mm {
  init() {
    const e = Ut(this.gos.get("overlayLoadingTemplate")?.trim());
    if (this.setTemplate(e ?? _E), !e) {
      const t = this.getLocaleTextFunc();
      setTimeout(() => {
        this.getGui().textContent = t("loadingOoo", "Loading...");
      });
    }
  }
}, jE = { tag: "span", cls: "ag-overlay-no-rows-center" }, $E = class extends mm {
  init() {
    const e = Ut(this.gos.get("overlayNoRowsTemplate")?.trim());
    if (this.setTemplate(e ?? jE), !e) {
      const t = this.getLocaleTextFunc();
      setTimeout(() => {
        this.getGui().textContent = t("noRowsToShow", "No Rows To Show");
      });
    }
  }
};
function KE(e, t, i) {
  const s = Ct(e, t, i);
  if (s) {
    const { className: n } = s;
    if (typeof n == "string" && n.indexOf("ag-icon") > -1 || typeof n == "object" && n["ag-icon"])
      return s;
  }
  const o = Ae({ tag: "span" });
  return o.appendChild(s), o;
}
function Ct(e, t, i) {
  let s = null;
  e === "smallDown" ? B(262) : e === "smallLeft" ? B(263) : e === "smallRight" && B(264);
  const o = i && i.getColDef().icons;
  if (o && (s = o[e]), t.gos && !s) {
    const n = t.gos.get("icons");
    n && (s = n[e]);
  }
  if (s) {
    let n;
    if (typeof s == "function")
      n = s();
    else if (typeof s == "string")
      n = s;
    else {
      B(38, { iconName: e });
      return;
    }
    if (typeof n == "string")
      return rc(n);
    if (lc(n))
      return n;
    B(133, { iconName: e });
    return;
  } else {
    const n = t.registry.getIcon(e);
    return n || t.validation?.validateIcon(e), Ae({
      tag: "span",
      cls: `ag-icon ag-icon-${n ?? e}`,
      role: "presentation",
      attrs: { unselectable: "on" }
    });
  }
}
var YE = (
  /*css*/
  ".ag-dnd-ghost{align-items:center;background-color:var(--ag-drag-and-drop-image-background-color);border:var(--ag-drag-and-drop-image-border);border-radius:var(--ag-border-radius);box-shadow:var(--ag-drag-and-drop-image-shadow);color:var(--ag-text-color);cursor:move;display:flex;font-weight:500;gap:var(--ag-cell-widget-spacing);height:var(--ag-header-height);overflow:hidden;padding-left:var(--ag-cell-horizontal-padding);padding-right:var(--ag-cell-horizontal-padding);text-overflow:ellipsis;transform:translateY(calc(var(--ag-spacing)*2));white-space:nowrap}"
), qE = {
  tag: "div",
  children: [
    {
      tag: "div",
      ref: "eGhost",
      cls: "ag-dnd-ghost ag-unselectable",
      children: [
        { tag: "span", ref: "eIcon", cls: "ag-dnd-ghost-icon ag-shake-left-to-right" },
        { tag: "div", ref: "eLabel", cls: "ag-dnd-ghost-label" }
      ]
    }
  ]
}, XE = class extends pe {
  constructor() {
    super(), this.dragSource = null, this.eIcon = q, this.eLabel = q, this.eGhost = q, this.registerCSS(YE);
  }
  postConstruct() {
    const e = (t) => KE(t, this.beans, null);
    this.dropIconMap = {
      pinned: e("columnMovePin"),
      hide: e("columnMoveHide"),
      move: e("columnMoveMove"),
      left: e("columnMoveLeft"),
      right: e("columnMoveRight"),
      group: e("columnMoveGroup"),
      aggregate: e("columnMoveValue"),
      pivot: e("columnMovePivot"),
      notAllowed: e("dropNotAllowed")
    };
  }
  init(e) {
    this.dragSource = e.dragSource, this.setTemplate(qE), this.beans.environment.applyThemeClasses(this.eGhost);
  }
  destroy() {
    this.dragSource = null, super.destroy();
  }
  setIcon(e, t) {
    const { eIcon: i, dragSource: s, dropIconMap: o, gos: n } = this;
    ct(i);
    let r = null;
    e || (e = s?.getDefaultIconName ? s.getDefaultIconName() : "notAllowed"), r = o[e], i.classList.toggle("ag-shake-left-to-right", t), !(r === o.hide && n.get("suppressDragLeaveHidesColumns")) && r && i.appendChild(r);
  }
  setLabel(e) {
    this.eLabel.textContent = e;
  }
}, ZE = (
  /*css*/
  ".ag-label{white-space:nowrap}:where(.ag-ltr) .ag-label{margin-right:var(--ag-spacing)}:where(.ag-rtl) .ag-label{margin-left:var(--ag-spacing)}:where(.ag-label-align-right) .ag-label{order:1}:where(.ag-ltr) :where(.ag-label-align-right) .ag-label{margin-left:var(--ag-spacing)}:where(.ag-rtl) :where(.ag-label-align-right) .ag-label{margin-right:var(--ag-spacing)}.ag-label-align-right>*{flex:none}.ag-label-align-top{align-items:flex-start;flex-direction:column;>*{align-self:stretch}}.ag-label-ellipsis{flex:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:where(.ag-label-align-top) .ag-label{margin-bottom:calc(var(--ag-spacing)*.5)}"
), QE = class extends pe {
  constructor(e, t, i) {
    super(t, i), this.labelSeparator = "", this.labelAlignment = "left", this.disabled = !1, this.label = "", this.config = e || {}, this.registerCSS(ZE);
  }
  postConstruct() {
    this.addCss("ag-labeled"), this.eLabel.classList.add("ag-label");
    const { labelSeparator: e, label: t, labelWidth: i, labelAlignment: s, disabled: o } = this.config;
    o != null && this.setDisabled(o), e != null && this.setLabelSeparator(e), t != null && this.setLabel(t), i != null && this.setLabelWidth(i), this.setLabelAlignment(s || this.labelAlignment), this.refreshLabel();
  }
  refreshLabel() {
    const { label: e, eLabel: t } = this;
    ct(t), typeof e == "string" ? t.innerText = e + this.labelSeparator : e && t.appendChild(e), e === "" ? (Re(t, !1), Vi(t, "presentation")) : (Re(t, !0), Vi(t, null));
  }
  setLabelSeparator(e) {
    return this.labelSeparator === e ? this : (this.labelSeparator = e, this.label != null && this.refreshLabel(), this);
  }
  getLabelId() {
    const e = this.eLabel;
    return e.id = e.id || `ag-${this.getCompId()}-label`, e.id;
  }
  getLabel() {
    return this.label;
  }
  setLabel(e) {
    return this.label === e ? this : (this.label = e, this.refreshLabel(), this);
  }
  setLabelAlignment(e) {
    const i = this.getGui().classList;
    return i.toggle("ag-label-align-left", e === "left"), i.toggle("ag-label-align-right", e === "right"), i.toggle("ag-label-align-top", e === "top"), this;
  }
  setLabelEllipsis(e) {
    return this.eLabel.classList.toggle("ag-label-ellipsis", e), this;
  }
  setLabelWidth(e) {
    return this.label == null ? this : (Hn(this.eLabel, e), this);
  }
  setDisabled(e) {
    e = !!e;
    const t = this.getGui();
    return vo(t, e), t.classList.toggle("ag-disabled", e), this.disabled = e, this;
  }
  isDisabled() {
    return !!this.disabled;
  }
}, Cm = class extends QE {
  constructor(e, t, i, s) {
    super(e, t, i), this.className = s;
  }
  postConstruct() {
    super.postConstruct();
    const { width: e, value: t, onValueChange: i } = this.config;
    e != null && this.setWidth(e), t != null && this.setValue(t), i != null && this.onValueChange(i), this.className && this.addCss(this.className), this.refreshAriaLabelledBy();
  }
  setLabel(e) {
    return super.setLabel(e), this.refreshAriaLabelledBy(), this;
  }
  refreshAriaLabelledBy() {
    const e = this.getAriaElement(), t = this.getLabelId(), i = this.getLabel();
    i == null || i == "" || FR(e) !== null ? Co(e, "") : Co(e, t ?? "");
  }
  setAriaLabel(e) {
    return xs(this.getAriaElement(), e), this.refreshAriaLabelledBy(), this;
  }
  onValueChange(e) {
    return this.addManagedListeners(this, { fieldValueChanged: () => e(this.getValue()) }), this;
  }
  getWidth() {
    return this.getGui().clientWidth;
  }
  setWidth(e) {
    return Vt(this.getGui(), e), this;
  }
  getPreviousValue() {
    return this.previousValue;
  }
  getValue() {
    return this.value;
  }
  setValue(e, t) {
    return this.value === e ? this : (this.previousValue = this.value, this.value = e, t || this.dispatchLocalEvent({ type: "fieldValueChanged" }), this);
  }
};
function JE(e) {
  return {
    tag: "div",
    role: "presentation",
    children: [
      { tag: "div", ref: "eLabel", cls: "ag-input-field-label" },
      {
        tag: "div",
        ref: "eWrapper",
        cls: "ag-wrapper ag-input-wrapper",
        role: "presentation",
        children: [{ tag: e, ref: "eInput", cls: "ag-input-field-input" }]
      }
    ]
  };
}
var Fi = class extends Cm {
  constructor(e, t, i = "text", s = "input") {
    super(e, e?.template ?? JE(s), [], t), this.inputType = i, this.displayFieldTag = s, this.eLabel = q, this.eWrapper = q, this.eInput = q;
  }
  postConstruct() {
    super.postConstruct(), this.setInputType(this.inputType);
    const { eLabel: e, eWrapper: t, eInput: i, className: s } = this;
    e.classList.add(`${s}-label`), t.classList.add(`${s}-input-wrapper`), i.classList.add(`${s}-input`), this.addCss("ag-input-field"), i.id = i.id || `ag-${this.getCompId()}-input`;
    const { inputName: o, inputWidth: n } = this.config;
    o != null && this.setInputName(o), n != null && this.setInputWidth(n), this.addInputListeners(), this.activateTabIndex([i]);
  }
  addInputListeners() {
    this.addManagedElementListeners(this.eInput, {
      input: (e) => this.setValue(e.target.value)
    });
  }
  setInputType(e) {
    this.displayFieldTag === "input" && (this.inputType = e, rt(this.eInput, "type", e));
  }
  getInputElement() {
    return this.eInput;
  }
  setInputWidth(e) {
    return Hn(this.eWrapper, e), this;
  }
  setInputName(e) {
    return this.getInputElement().setAttribute("name", e), this;
  }
  getFocusableElement() {
    return this.eInput;
  }
  setMaxLength(e) {
    const t = this.eInput;
    return t.maxLength = e, this;
  }
  setInputPlaceholder(e) {
    return rt(this.eInput, "placeholder", e), this;
  }
  setInputAriaLabel(e) {
    return xs(this.eInput, e), this.refreshAriaLabelledBy(), this;
  }
  setDisabled(e) {
    return vo(this.eInput, e), super.setDisabled(e);
  }
  setAutoComplete(e) {
    if (e === !0)
      rt(this.eInput, "autocomplete", null);
    else {
      const t = typeof e == "string" ? e : "off";
      rt(this.eInput, "autocomplete", t);
    }
    return this;
  }
}, Dc = class extends Fi {
  constructor(e, t = "ag-checkbox", i = "checkbox") {
    super(e, t, i), this.labelAlignment = "right", this.selected = !1, this.readOnly = !1, this.passive = !1;
  }
  postConstruct() {
    super.postConstruct();
    const { readOnly: e, passive: t } = this.config;
    typeof e == "boolean" && this.setReadOnly(e), typeof t == "boolean" && this.setPassive(t);
  }
  addInputListeners() {
    this.addManagedElementListeners(this.eInput, { click: this.onCheckboxClick.bind(this) }), this.addManagedElementListeners(this.eLabel, { click: this.toggle.bind(this) });
  }
  getNextValue() {
    return this.selected === void 0 ? !0 : !this.selected;
  }
  setPassive(e) {
    this.passive = e;
  }
  isReadOnly() {
    return this.readOnly;
  }
  setReadOnly(e) {
    this.eWrapper.classList.toggle("ag-disabled", e), this.eInput.disabled = e, this.readOnly = e;
  }
  setDisabled(e) {
    return this.eWrapper.classList.toggle("ag-disabled", e), super.setDisabled(e);
  }
  toggle() {
    if (this.eInput.disabled)
      return;
    const e = this.isSelected(), t = this.getNextValue();
    this.passive ? this.dispatchChange(t, e) : this.setValue(t);
  }
  getValue() {
    return this.isSelected();
  }
  setValue(e, t) {
    return this.refreshSelectedClass(e), this.setSelected(e, t), this;
  }
  setName(e) {
    const t = this.getInputElement();
    return t.name = e, this;
  }
  isSelected() {
    return this.selected;
  }
  setSelected(e, t) {
    if (this.isSelected() === e)
      return;
    this.previousValue = this.isSelected(), e = this.selected = typeof e == "boolean" ? e : void 0;
    const i = this.eInput;
    i.checked = e, i.indeterminate = e === void 0, t || this.dispatchChange(this.selected, this.previousValue);
  }
  dispatchChange(e, t, i) {
    this.dispatchLocalEvent({ type: "fieldValueChanged", selected: e, previousValue: t, event: i });
    const s = this.getInputElement();
    this.eventSvc.dispatchEvent({
      type: "checkboxChanged",
      id: s.id,
      name: s.name,
      selected: e,
      previousValue: t
    });
  }
  onCheckboxClick(e) {
    if (this.passive || this.eInput.disabled)
      return;
    const t = this.isSelected(), i = this.selected = e.target.checked;
    this.refreshSelectedClass(i), this.dispatchChange(i, t, e);
  }
  refreshSelectedClass(e) {
    const t = this.eWrapper.classList;
    t.toggle("ag-checked", e === !0), t.toggle("ag-indeterminate", e == null);
  }
}, Tc = {
  selector: "AG-CHECKBOX",
  component: Dc
}, e0 = (
  /*css*/
  ".ag-checkbox-cell{height:100%}"
), t0 = {
  tag: "div",
  cls: "ag-cell-wrapper ag-checkbox-cell",
  role: "presentation",
  children: [
    {
      tag: "ag-checkbox",
      ref: "eCheckbox",
      role: "presentation"
    }
  ]
}, i0 = class extends pe {
  constructor() {
    super(t0, [Tc]), this.eCheckbox = q, this.registerCSS(e0);
  }
  init(e) {
    this.refresh(e);
    const { eCheckbox: t, beans: i } = this, s = t.getInputElement();
    s.setAttribute("tabindex", "-1"), Vp(s, "polite"), this.addManagedListeners(s, {
      click: (o) => {
        if (Bi(o), t.isDisabled())
          return;
        const n = t.getValue();
        this.onCheckboxChanged(n);
      },
      dblclick: (o) => {
        Bi(o);
      }
    }), this.addManagedElementListeners(e.eGridCell, {
      keydown: (o) => {
        if (o.key === E.SPACE && !t.isDisabled()) {
          e.eGridCell === Fe(i) && t.toggle();
          const n = t.getValue();
          this.onCheckboxChanged(n), o.preventDefault();
        }
      }
    });
  }
  refresh(e) {
    return this.params = e, this.updateCheckbox(e), !0;
  }
  updateCheckbox(e) {
    let t, i = !0;
    const { value: s, column: o, node: n } = e;
    if (n.group && o)
      if (typeof s == "boolean")
        t = s;
      else {
        const u = o.getColId();
        u.startsWith(ur) ? t = s == null || s === "" ? void 0 : s === "true" : n.aggData && n.aggData[u] !== void 0 ? t = s ?? void 0 : i = !1;
      }
    else
      t = s ?? void 0;
    const { eCheckbox: r } = this;
    if (!i) {
      r.setDisplayed(!1);
      return;
    }
    r.setValue(t);
    const a = e.disabled ?? !o?.isCellEditable(n);
    r.setDisabled(a);
    const l = this.getLocaleTextFunc(), c = dr(l, t), d = a ? c : `${l("ariaToggleCellValue", "Press SPACE to toggle cell value")} (${c})`;
    r.setInputAriaLabel(d);
  }
  onCheckboxChanged(e) {
    const { params: t } = this, { column: i, node: s, value: o } = t;
    this.beans?.editSvc?.setEditingCells(
      [
        {
          column: i,
          colId: i.getColId(),
          rowIndex: s.rowIndex,
          rowPinned: s.rowPinned,
          state: "changed",
          oldValue: o,
          newValue: o
        }
      ],
      { update: !0 }
    );
    const n = s.setDataValue(i, e, "renderer");
    this.beans.editSvc?.stopEditing(
      {
        rowNode: s,
        column: i
      },
      { source: this.beans.editSvc?.isBatchEditing() ? "ui" : "api" }
    ), n || this.updateCheckbox(t);
  }
}, zu = class {
  constructor(e, t) {
    this.beans = e, this.floating = t, this.all = /* @__PURE__ */ new Set(), this.visible = /* @__PURE__ */ new Set(), this.order = [], this.queued = /* @__PURE__ */ new Set();
  }
  size() {
    return this.visible.size;
  }
  add(e) {
    const { all: t, visible: i, order: s } = this;
    t.has(e) || (t.add(e), i.add(e), s.push(e), this.sort());
  }
  delete(e) {
    this.all.delete(e), this.visible.delete(e), this.queued.delete(e.id), St(this.order, e);
  }
  has(e) {
    return this.visible.has(e);
  }
  forEach(e) {
    this.order.forEach(e);
  }
  getByIndex(e) {
    return this.order[e];
  }
  getById(e) {
    for (const t of this.visible)
      if (t.id == e)
        return t;
  }
  clear() {
    const { all: e, visible: t, order: i, queued: s } = this;
    e.clear(), s.clear(), t.clear(), i.length = 0;
  }
  sort() {
    const { sortSvc: e, rowNodeSorter: t, gos: i } = this.beans, s = e?.getSortOptions() ?? [], o = n0(this.order);
    if (this.order.sort((r, a) => (r.pinnedSibling?.rowIndex ?? 0) - (a.pinnedSibling?.rowIndex ?? 0)), this.order = t?.doFullSort(this.order, s) ?? this.order, !o)
      return;
    const n = cf(i);
    n === "bottom" || n === "pinnedBottom" ? this.order.push(o) : this.order.unshift(o);
  }
  hide(e) {
    const { all: t, visible: i } = this;
    t.forEach((s) => e(s) ? i.delete(s) : i.add(s)), this.order = Array.from(i), this.sort();
  }
  queue(e) {
    this.queued.add(e);
  }
  unqueue(e) {
    this.queued.delete(e);
  }
  forEachQueued(e) {
    this.queued.forEach(e);
  }
};
function vm(e) {
  if (e.level === -1)
    return !0;
  const t = e.parent;
  return t?.childrenAfterSort?.some((i) => i == e) ? vm(t) : !1;
}
function Jr(e, t) {
  const { gos: i, rowModel: s, filterManager: o } = e;
  return $i(i) ? !s.getRowNode(t.id) : o?.isAnyFilterPresent() ? !vm(t) : i.get("pivotMode") ? !t.group : !1;
}
function s0(e) {
  return !!e.footer && e.level === -1;
}
function o0(e) {
  return !!e.pinnedSibling && s0(e.pinnedSibling);
}
function n0(e) {
  const t = e.findIndex(o0);
  if (t > -1)
    return e.splice(t, 1)?.[0];
}
var _u = class extends T {
  postConstruct() {
    const { gos: e, beans: t } = this;
    this.top = new zu(t, "top"), this.bottom = new zu(t, "bottom");
    const i = (o) => Jr(t, o.pinnedSibling), s = () => {
      const o = e.get("isRowPinned");
      o && e.get("enableRowPinning") && t.rowModel.forEachNode((n) => this.pinRow(n, o(n)), !0), this.refreshRowPositions(), this.dispatchRowPinnedEvents();
    };
    this.addManagedEventListeners({
      gridStylesChanged: this.onGridStylesChanges.bind(this),
      modelUpdated: ({ keepRenderedRows: o }) => {
        this.tryToEmptyQueues(), this.pinGrandTotalRow(), this.forContainers((n) => n.hide(i)), this.refreshRowPositions(), o || this.dispatchRowPinnedEvents();
      },
      columnRowGroupChanged: () => {
        this.forContainers(a0), this.refreshRowPositions();
      },
      rowNodeDataChanged: ({ node: o }) => {
        (e.get("isRowPinnable")?.(o) ?? !0) || this.pinRow(o, null);
      },
      firstDataRendered: s
    }), this.addManagedPropertyListener("pivotMode", () => {
      this.forContainers((o) => o.hide(i)), this.dispatchRowPinnedEvents();
    }), this.addManagedPropertyListener("grandTotalRow", ({ currentValue: o }) => {
      this._grandTotalPinned = o === "pinnedBottom" ? "bottom" : o === "pinnedTop" ? "top" : null;
    }), this.addManagedPropertyListener("isRowPinned", s);
  }
  destroy() {
    this.reset(!1), super.destroy();
  }
  reset(e = !0) {
    this.forContainers((t) => {
      const i = [];
      t.forEach((s) => i.push(s)), i.forEach((s) => this.pinRow(s, null)), t.clear();
    }), e && this.dispatchRowPinnedEvents();
  }
  pinRow(e, t, i) {
    if (e.footer && e.level > -1)
      return;
    if (e.footer && e.level === -1) {
      this._grandTotalPinned = t, c0(this.beans);
      return;
    }
    const s = e.rowPinned ?? e.pinnedSibling?.rowPinned;
    if (s != null && t != null && t != s) {
      const r = e.rowPinned ? e : e.pinnedSibling, a = e.rowPinned ? e.pinnedSibling : e;
      this.pinRow(r, null, i), this.pinRow(a, t, i);
      return;
    }
    const n = i && l0(this.beans, e, i);
    if (n) {
      n.forEach((r) => this.pinRow(r, t));
      return;
    }
    if (t == null) {
      const r = e.rowPinned ? e : e.pinnedSibling, a = this.findPinnedRowNode(r);
      if (!a)
        return;
      a.delete(r);
      const l = r.pinnedSibling;
      ea(r), this.refreshRowPositions(t), this.dispatchRowPinnedEvents(l);
    } else {
      const r = Uu(this.beans, e, t), a = this.getContainer(t);
      a.add(r), Jr(this.beans, e) && a.hide((l) => Jr(this.beans, l.pinnedSibling)), this.refreshRowPositions(t), this.dispatchRowPinnedEvents(e);
    }
  }
  isManual() {
    return !0;
  }
  isEmpty(e) {
    return this.getContainer(e).size() === 0;
  }
  isRowsToRender(e) {
    return !this.isEmpty(e);
  }
  ensureRowHeightsValid() {
    let e = !1, t = 0;
    const i = (s) => {
      if (s.rowHeightEstimated) {
        const o = ui(this.beans, s);
        s.setRowTop(t), s.setRowHeight(o.height), t += o.height, e = !0;
      }
    };
    return this.bottom.forEach(i), t = 0, this.top.forEach(i), this.eventSvc.dispatchEvent({
      type: "pinnedHeightChanged"
    }), e;
  }
  getPinnedTopTotalHeight() {
    return ju(this.top);
  }
  getPinnedBottomTotalHeight() {
    return ju(this.bottom);
  }
  getPinnedTopRowCount() {
    return this.top.size();
  }
  getPinnedBottomRowCount() {
    return this.bottom.size();
  }
  getPinnedTopRow(e) {
    return this.top.getByIndex(e);
  }
  getPinnedBottomRow(e) {
    return this.bottom.getByIndex(e);
  }
  getPinnedRowById(e, t) {
    return this.getContainer(t).getById(e);
  }
  forEachPinnedRow(e, t) {
    this.getContainer(e).forEach(t);
  }
  getPinnedState() {
    const e = (t) => {
      const i = [];
      return this.forEachPinnedRow(t, (s) => i.push(s.pinnedSibling.id)), i;
    };
    return {
      top: e("top"),
      bottom: e("bottom")
    };
  }
  setPinnedState(e) {
    this.forContainers((t, i) => {
      for (const s of e[i]) {
        const o = this.beans.rowModel.getRowNode(s);
        o ? this.pinRow(o, i) : t.queue(s);
      }
    });
  }
  getGrandTotalPinned() {
    return this._grandTotalPinned;
  }
  setGrandTotalPinned(e) {
    this._grandTotalPinned = e;
  }
  tryToEmptyQueues() {
    this.forContainers((e, t) => {
      const i = /* @__PURE__ */ new Set();
      e.forEachQueued((s) => {
        const o = this.beans.rowModel.getRowNode(s);
        o && i.add(o);
      });
      for (const s of i)
        e.unqueue(s.id), this.pinRow(s, t);
    });
  }
  pinGrandTotalRow() {
    const { gos: e, beans: t, _grandTotalPinned: i } = this, s = t.rowModel;
    if (!Oe(e))
      return;
    const o = s.rootNode?.sibling;
    if (!o)
      return;
    const n = o.pinnedSibling, r = n && this.findPinnedRowNode(n);
    if (i) {
      if (r && r.floating !== i && (r.delete(n), ea(n)), !r || r.floating !== i) {
        const a = Uu(t, o, i);
        this.getContainer(i).add(a);
      }
    } else {
      if (!r)
        return;
      r.delete(n), ea(n);
    }
  }
  onGridStylesChanges(e) {
    e.rowHeightChanged && this.forContainers(
      (t) => t.forEach((i) => i.setRowHeight(i.rowHeight, !0))
    );
  }
  getContainer(e) {
    return e === "top" ? this.top : this.bottom;
  }
  findPinnedRowNode(e) {
    if (this.top.has(e))
      return this.top;
    if (this.bottom.has(e))
      return this.bottom;
  }
  refreshRowPositions(e) {
    const t = (i) => r0(this.beans, i);
    return e == null ? this.forContainers(t) : t(this.getContainer(e));
  }
  forContainers(e) {
    e(this.top, "top"), e(this.bottom, "bottom");
  }
  dispatchRowPinnedEvents(e) {
    this.eventSvc.dispatchEvent({ type: "pinnedRowsChanged" }), e?.dispatchRowEvent("rowPinned");
  }
};
function r0(e, t) {
  let i = 0;
  t.forEach((s, o) => {
    s.setRowTop(i), (s.rowHeightEstimated || s.rowHeight == null) && s.setRowHeight(ui(e, s).height), s.setRowIndex(o), i += s.rowHeight;
  });
}
function Uu(e, t, i) {
  if (t.pinnedSibling)
    return t.pinnedSibling;
  const s = kP(t, e);
  s.setRowTop(null), s.setRowIndex(null), s.rowPinned = i;
  const o = i === "top" ? mc : Cc;
  return s.id = `${o}${i}-${t.id}`, s.pinnedSibling = t, t.pinnedSibling = s, s;
}
function ea(e) {
  if (!e.pinnedSibling)
    return;
  e.rowPinned = null, e.setRowTop(null), e.setRowIndex(null);
  const t = e.pinnedSibling;
  e.pinnedSibling = void 0, t && (t.pinnedSibling = void 0, t.rowPinned = null);
}
function a0(e) {
  const t = /* @__PURE__ */ new Set();
  e.forEach((i) => {
    i.group && t.add(i);
  }), t.forEach((i) => e.delete(i));
}
function l0(e, t, i) {
  const { rowSpanSvc: s } = e, o = (i && s?.isCellSpanning(i, t)) ?? !1;
  if (i && o)
    return s?.getCellSpan(i, t)?.spannedNodes;
}
function ju(e) {
  const t = e.size();
  if (t === 0)
    return 0;
  const i = e.getByIndex(t - 1);
  return i === void 0 ? 0 : i.rowTop + i.rowHeight;
}
function c0({ gos: e, rowModel: t }) {
  Oe(e) && t.refreshModel({ step: "map" });
}
var $u = class extends T {
  constructor() {
    super(...arguments), this.nextId = 0, this.pinnedTopRows = { cache: {}, order: [] }, this.pinnedBottomRows = { cache: {}, order: [] };
  }
  postConstruct() {
    const e = this.gos;
    this.setPinnedRowData(e.get("pinnedTopRowData"), "top"), this.setPinnedRowData(e.get("pinnedBottomRowData"), "bottom"), this.addManagedPropertyListener("pinnedTopRowData", (t) => this.setPinnedRowData(t.currentValue, "top")), this.addManagedPropertyListener("pinnedBottomRowData", (t) => this.setPinnedRowData(t.currentValue, "bottom")), this.addManagedEventListeners({ gridStylesChanged: this.onGridStylesChanges.bind(this) });
  }
  reset() {
  }
  isEmpty(e) {
    return this.getCache(e).order.length === 0;
  }
  isRowsToRender(e) {
    return !this.isEmpty(e);
  }
  isManual() {
    return !1;
  }
  pinRow(e, t) {
  }
  onGridStylesChanges(e) {
    if (e.rowHeightChanged) {
      const t = (i) => {
        i.setRowHeight(i.rowHeight, !0);
      };
      zs(this.pinnedBottomRows, t), zs(this.pinnedTopRows, t);
    }
  }
  ensureRowHeightsValid() {
    let e = !1, t = 0;
    const i = (s) => {
      if (s.rowHeightEstimated) {
        const o = ui(this.beans, s);
        s.setRowTop(t), s.setRowHeight(o.height), t += o.height, e = !0;
      }
    };
    return zs(this.pinnedBottomRows, i), t = 0, zs(this.pinnedTopRows, i), this.eventSvc.dispatchEvent({
      type: "pinnedHeightChanged"
    }), e;
  }
  setPinnedRowData(e, t) {
    this.updateNodesFromRowData(e, t), this.eventSvc.dispatchEvent({
      type: "pinnedRowDataChanged"
    });
  }
  /**
   * Updates existing RowNode instances and creates new ones if necessary
   *
   * Setting data as `undefined` will clear row nodes
   */
  updateNodesFromRowData(e, t) {
    const i = this.getCache(t);
    if (e === void 0) {
      i.order.length = 0, i.cache = {};
      return;
    }
    const s = Fs(this.gos), o = t === "top" ? mc : Cc, n = new Set(i.order), r = [], a = /* @__PURE__ */ new Set();
    let l = 0, c = -1;
    for (const d of e) {
      const u = s?.({ data: d, level: 0, rowPinned: t }) ?? o + this.nextId++;
      if (a.has(u)) {
        B(96, { id: u, data: d });
        continue;
      }
      c++, a.add(u), r.push(u);
      const h = so(i, u);
      if (h !== void 0)
        h.data !== d && h.updateData(d), l += this.setRowTopAndRowIndex(h, l, c), n.delete(u);
      else {
        const g = new zi(this.beans);
        g.id = u, g.data = d, g.rowPinned = t, l += this.setRowTopAndRowIndex(g, l, c), i.cache[u] = g, i.order.push(u);
      }
    }
    n.forEach((d) => {
      so(i, d)?.clearRowTopAndRowIndex(), delete i.cache[d];
    }), i.order = r;
  }
  setRowTopAndRowIndex(e, t, i) {
    return e.setRowTop(t), e.setRowHeight(ui(this.beans, e).height), e.setRowIndex(i), e.rowHeight;
  }
  getPinnedTopTotalHeight() {
    return Ku(this.pinnedTopRows);
  }
  getPinnedBottomTotalHeight() {
    return Ku(this.pinnedBottomRows);
  }
  getPinnedTopRowCount() {
    return ll(this.pinnedTopRows);
  }
  getPinnedBottomRowCount() {
    return ll(this.pinnedBottomRows);
  }
  getPinnedTopRow(e) {
    return al(this.pinnedTopRows, e);
  }
  getPinnedBottomRow(e) {
    return al(this.pinnedBottomRows, e);
  }
  getPinnedRowById(e, t) {
    return so(this.getCache(t), e);
  }
  forEachPinnedRow(e, t) {
    return zs(this.getCache(e), t);
  }
  getCache(e) {
    return e === "top" ? this.pinnedTopRows : this.pinnedBottomRows;
  }
  getPinnedState() {
    return { top: [], bottom: [] };
  }
  setPinnedState() {
  }
  getGrandTotalPinned() {
  }
  setGrandTotalPinned() {
  }
};
function Ku(e) {
  const t = ll(e);
  if (t === 0)
    return 0;
  const i = al(e, t - 1);
  return i === void 0 ? 0 : i.rowTop + i.rowHeight;
}
function so(e, t) {
  return e.cache[t];
}
function al(e, t) {
  return so(e, e.order[t]);
}
function zs(e, t) {
  e.order.forEach((i, s) => {
    const o = so(e, i);
    o && t(o, s);
  });
}
function ll(e) {
  return e.order.length;
}
var d0 = class extends T {
  constructor() {
    super(...arguments), this.beanName = "pinnedRowModel";
  }
  postConstruct() {
    const { gos: e } = this, t = () => {
      const i = e.get("enableRowPinning"), s = cf(e), n = !!i || (s === "pinnedBottom" || s === "pinnedTop"), r = n ? this.inner instanceof $u : this.inner instanceof _u;
      this.inner && r && this.destroyBean(this.inner), (r || !this.inner) && (this.inner = this.createManagedBean(
        n ? new _u() : new $u()
      ));
    };
    this.addManagedPropertyListeners(["enableRowPinning", "grandTotalRow"], t), t();
  }
  reset() {
    return this.inner.reset();
  }
  isEmpty(e) {
    return this.inner.isEmpty(e);
  }
  isManual() {
    return this.inner.isManual();
  }
  isRowsToRender(e) {
    return this.inner.isRowsToRender(e);
  }
  pinRow(e, t, i) {
    return this.inner.pinRow(e, t, i);
  }
  ensureRowHeightsValid() {
    return this.inner.ensureRowHeightsValid();
  }
  getPinnedRowById(e, t) {
    return this.inner.getPinnedRowById(e, t);
  }
  getPinnedTopTotalHeight() {
    return this.inner.getPinnedTopTotalHeight();
  }
  getPinnedBottomTotalHeight() {
    return this.inner.getPinnedBottomTotalHeight();
  }
  getPinnedTopRowCount() {
    return this.inner.getPinnedTopRowCount();
  }
  getPinnedBottomRowCount() {
    return this.inner.getPinnedBottomRowCount();
  }
  getPinnedTopRow(e) {
    return this.inner.getPinnedTopRow(e);
  }
  getPinnedBottomRow(e) {
    return this.inner.getPinnedBottomRow(e);
  }
  forEachPinnedRow(e, t) {
    return this.inner.forEachPinnedRow(e, t);
  }
  getPinnedState() {
    return this.inner.getPinnedState();
  }
  setPinnedState(e) {
    return this.inner.setPinnedState(e);
  }
  setGrandTotalPinned(e) {
    return this.inner.setGrandTotalPinned(e);
  }
  getGrandTotalPinned() {
    return this.inner.getGrandTotalPinned();
  }
}, u0 = "ROOT_NODE_ID", h0 = class extends T {
  constructor() {
    super(...arguments), this.nextId = 0, this.allNodesMap = {}, this.rootNode = null;
  }
  getRowNode(e) {
    return this.allNodesMap[e];
  }
  extractRowData() {
    return this.rootNode?.allLeafChildren?.map((e) => e.data);
  }
  activate(e) {
    this.rootNode = e, e.group = !0, e.level = -1, e.id = u0, e.allLeafChildren = [], e.childrenAfterGroup = [], e.childrenAfterSort = [], e.childrenAfterAggFilter = [], e.childrenAfterFilter = [], this.updateRootSiblingArrays(e);
  }
  deactivate() {
    this.rootNode && (this.allNodesMap = {}, this.rootNode = null);
  }
  destroy() {
    super.destroy(), this.allNodesMap = {}, this.rootNode = null;
  }
  setNewRowData(e) {
    const t = this.rootNode;
    t && (this.dispatchRowDataUpdateStartedEvent(e), t.childrenAfterFilter = null, t.childrenAfterGroup = null, t.childrenAfterAggFilter = null, t.childrenAfterSort = null, t.childrenMapped = null, t.updateHasChildren(), this.allNodesMap = {}, this.nextId = 0, this.loadNewRowData(e), this.updateRootSiblingArrays(t));
  }
  updateRootSiblingArrays(e) {
    const t = e.sibling;
    t && (t.childrenAfterFilter = e.childrenAfterFilter, t.childrenAfterGroup = e.childrenAfterGroup, t.childrenAfterAggFilter = e.childrenAfterAggFilter, t.childrenAfterSort = e.childrenAfterSort, t.childrenMapped = e.childrenMapped, t.allLeafChildren = e.allLeafChildren);
  }
  loadNewRowData(e) {
    this.rootNode.allLeafChildren = e?.map((t, i) => this.createRowNode(t, i)) ?? [];
  }
  setImmutableRowData(e, t) {
    const i = Fs(this.gos), s = !this.gos.get("suppressMaintainUnsortedOrder"), o = e.changedRowNodes, n = /* @__PURE__ */ new Set(), r = this.rootNode, a = r.allLeafChildren, l = a.length;
    let c = !1, d = !1, u = !1, h = !1;
    for (let p = 0, f = -1, m = t.length; p < m; p++) {
      const C = t[p];
      let v = this.getRowNode(
        i({ data: C, level: 0 })
      );
      if (!v)
        c = !0, v = this.createRowNode(C, -1), o.add(v);
      else {
        if (s) {
          const w = v.sourceRowIndex;
          h || (h = w <= f || // A node was moved up, so order changed
          c), f = w;
        }
        v.data !== C && (u = !0, v.updateData(C), o.update(v));
      }
      n.add(v);
    }
    const g = [];
    for (let p = 0; p < l; p++) {
      const f = a[p];
      n.has(f) || (d = !0, f.isSelected() && g.push(f), f.pinnedSibling && this.beans.pinnedRowModel?.pinRow(f.pinnedSibling, null), this.rowNodeDeleted(f), o.remove(f));
    }
    if (c || d || h) {
      const p = new Array(n.size);
      let f = 0;
      if (!s)
        for (let C = 0; C < l; ++C) {
          const v = a[C];
          n.delete(v) && (v.sourceRowIndex = f, p[f++] = v);
        }
      for (const C of n)
        C.sourceRowIndex = f, p[f++] = C;
      r.allLeafChildren = p;
      const m = r.sibling;
      m && (m.allLeafChildren = p), e.rowNodesOrderChanged || (e.rowNodesOrderChanged = h);
    }
    (c || d || h || u) && (this.deselectNodes(g), e.rowDataUpdated = !0);
  }
  /** Called when a node needs to be deleted */
  rowNodeDeleted(e) {
    e.clearRowTopAndRowIndex();
    const t = e.id, i = this.allNodesMap;
    i[t] === e && delete i[t];
  }
  updateRowData(e, t) {
    this.dispatchRowDataUpdateStartedEvent(e.add);
    const i = {
      changedRowNodes: t,
      rowNodeTransaction: { remove: [], update: [], add: [] },
      rowsInserted: !1
    }, s = [], o = Fs(this.gos);
    return this.executeRemove(o, e, i, s), this.executeUpdate(o, e, i, s), this.executeAdd(e, i), this.deselectNodes(s), i;
  }
  executeAdd(e, t) {
    const i = e.add;
    if (!i?.length)
      return;
    let s = this.rootNode.allLeafChildren, o = s.length;
    if (typeof e.addIndex == "number" && (o = this.sanitizeAddIndex(e.addIndex), o > 0 && this.gos.get("treeData") && this.gos.get("getDataPath"))) {
      for (let u = 0; u < s.length; u++)
        if (s[u]?.rowIndex == o - 1) {
          o = u + 1;
          break;
        }
    }
    const n = i.length, r = t.changedRowNodes, a = new Array(n);
    for (let d = 0; d < n; d++) {
      const u = this.createRowNode(i[d], o + d);
      r.add(u), a[d] = u;
    }
    const l = this.rootNode;
    if (o < s.length) {
      const d = s.slice(0, o), u = s.slice(o, s.length), h = d.length + a.length;
      for (let g = 0, p = u.length; g < p; ++g)
        u[g].sourceRowIndex = h + g;
      s = [...d, ...a, ...u], t.rowsInserted = !0;
    } else
      s = s.concat(a);
    l.allLeafChildren = s;
    const c = l.sibling;
    c && (c.allLeafChildren = s), t.rowNodeTransaction.add = a;
  }
  executeRemove(e, t, { changedRowNodes: i, rowNodeTransaction: s }, o) {
    const { remove: n } = t;
    if (!n?.length)
      return;
    const r = {};
    n.forEach((c) => {
      const d = this.lookupRowNode(e, c);
      d && (d.isSelected() && o.push(d), d.pinnedSibling && this.beans.pinnedRowModel?.pinRow(d.pinnedSibling, null), d.clearRowTopAndRowIndex(), r[d.id] = !0, delete this.allNodesMap[d.id], s.remove.push(d), i.remove(d));
    });
    const a = this.rootNode;
    a.allLeafChildren = a.allLeafChildren?.filter((c) => !r[c.id]) ?? null, a.allLeafChildren?.forEach((c, d) => {
      c.sourceRowIndex = d;
    });
    const l = a.sibling;
    l && (l.allLeafChildren = a.allLeafChildren);
  }
  executeUpdate(e, t, { changedRowNodes: i, rowNodeTransaction: s }, o) {
    const { update: n } = t;
    n?.length && n.forEach((r) => {
      const a = this.lookupRowNode(e, r);
      a && (a.updateData(r), !a.selectable && a.isSelected() && o.push(a), s.update.push(a), i.update(a));
    });
  }
  dispatchRowDataUpdateStartedEvent(e) {
    this.eventSvc.dispatchEvent({
      type: "rowDataUpdateStarted",
      firstRowData: e?.length ? e[0] : null
    });
  }
  deselectNodes(e) {
    const t = "rowDataChanged", i = this.beans.selectionSvc, s = e.length > 0;
    s && i?.setNodesSelected({
      newValue: !1,
      nodes: e,
      suppressFinishActions: !0,
      source: t
    }), i?.updateGroupsFromChildrenSelections?.(t), s && this.eventSvc.dispatchEvent({
      type: "selectionChanged",
      source: t,
      selectedNodes: i?.getSelectedNodes() ?? null,
      serverSideState: null
    });
  }
  sanitizeAddIndex(e) {
    const t = this.rootNode.allLeafChildren?.length ?? 0;
    return e < 0 || e >= t || Number.isNaN(e) ? t : Math.ceil(e);
  }
  createRowNode(e, t) {
    const i = new zi(this.beans);
    return i.parent = this.rootNode, i.level = 0, i.group = !1, i.expanded = !1, i.sourceRowIndex = t, i.setDataAndId(e, String(this.nextId)), this.allNodesMap[i.id] && B(2, { nodeId: i.id }), this.allNodesMap[i.id] = i, this.nextId++, i;
  }
  lookupRowNode(e, t) {
    let i;
    if (e) {
      const s = e({ data: t, level: 0 });
      if (i = this.allNodesMap[s], !i)
        return he(4, { id: s }), null;
    } else if (i = this.rootNode?.allLeafChildren?.find((s) => s.data === t), !i)
      return he(5, { data: t }), null;
    return i || null;
  }
}, g0 = {
  tag: "div",
  cls: "ag-selection-checkbox",
  role: "presentation",
  children: [
    {
      tag: "ag-checkbox",
      ref: "eCheckbox",
      role: "presentation"
    }
  ]
}, p0 = class extends pe {
  constructor() {
    super(g0, [Tc]), this.eCheckbox = q;
  }
  postConstruct() {
    this.eCheckbox.setPassive(!0);
  }
  onDataChanged() {
    this.onSelectionChanged();
  }
  onSelectableChanged() {
    this.showOrHideSelect();
  }
  onSelectionChanged() {
    const e = this.getLocaleTextFunc(), { rowNode: t, eCheckbox: i } = this, s = t.isSelected(), o = dr(e, s), [n, r] = t.selectable ? ["ariaRowToggleSelection", "Press Space to toggle row selection"] : ["ariaRowSelectionDisabled", "Row Selection is disabled for this row"], a = e(n, r);
    i.setValue(s, !0), i.setInputAriaLabel(`${a} (${o})`);
  }
  init(e) {
    if (this.rowNode = e.rowNode, this.column = e.column, this.overrides = e.overrides, this.onSelectionChanged(), this.addManagedListeners(this.eCheckbox.getInputElement(), {
      // we don't want double click on this icon to open a group
      dblclick: Bi,
      click: (s) => {
        Bi(s), this.beans.selectionSvc?.handleSelectionEvent(s, this.rowNode, "checkboxSelected");
      }
    }), this.addManagedListeners(this.rowNode, {
      rowSelected: this.onSelectionChanged.bind(this),
      dataChanged: this.onDataChanged.bind(this),
      selectableChanged: this.onSelectableChanged.bind(this)
    }), this.addManagedPropertyListener("rowSelection", ({ currentValue: s, previousValue: o }) => {
      const n = typeof s == "object" ? _r(s) : void 0, r = typeof o == "object" ? _r(o) : void 0;
      n !== r && this.onSelectableChanged();
    }), Xa(this.gos) || typeof this.getIsVisible() == "function") {
      const s = this.showOrHideSelect.bind(this);
      this.addManagedEventListeners({ displayedColumnsChanged: s }), this.addManagedListeners(this.rowNode, {
        dataChanged: s,
        cellChanged: s
      }), this.showOrHideSelect();
    }
    this.eCheckbox.getInputElement().setAttribute("tabindex", "-1");
  }
  showOrHideSelect() {
    const { column: e, rowNode: t, overrides: i, gos: s } = this, o = t.selectable, n = this.getIsVisible();
    let r;
    if (typeof n == "function") {
      const u = i?.callbackParams;
      if (!e)
        r = n({ ...u, node: t, data: t.data });
      else {
        const h = e.createColumnFunctionCallbackParams(t);
        r = n({ ...u, ...h });
      }
    } else
      r = n ?? !1;
    const a = o && !r || !o && r, l = o || r, c = s.get("rowSelection"), d = c && typeof c != "string" ? !_r(c) : !!e?.getColDef().showDisabledCheckboxes;
    if (this.setVisible(l && (a ? d : !0)), this.setDisplayed(l && (a ? d : !0)), l && this.eCheckbox.setDisabled(a), i?.removeHidden) {
      this.setDisplayed(l);
      return;
    }
  }
  getIsVisible() {
    const e = this.overrides;
    if (e)
      return e.isVisible;
    const t = this.gos.get("rowSelection");
    return t && typeof t != "string" ? gs(t) : this.column?.getColDef()?.checkboxSelection;
  }
}, f0 = class {
  constructor(e, t) {
    this.rowModel = e, this.pinnedRowModel = t, this.selectAll = !1, this.rootId = null, this.endId = null, this.cachedRange = [];
  }
  reset() {
    this.rootId = null, this.endId = null, this.cachedRange.length = 0;
  }
  setRoot(e) {
    this.rootId = e.id, this.endId = null, this.cachedRange.length = 0;
  }
  setEndRange(e) {
    this.endId = e.id, this.cachedRange.length = 0;
  }
  getRange() {
    if (this.cachedRange.length === 0) {
      const e = this.getRoot(), t = this.getEnd();
      if (e == null || t == null)
        return this.cachedRange;
      this.cachedRange = this.getNodesInRange(e, t) ?? [];
    }
    return this.cachedRange;
  }
  isInRange(e) {
    return this.rootId === null ? !1 : this.getRange().some((t) => t.id === e.id);
  }
  getRoot(e) {
    if (this.rootId)
      return this.getRowNode(this.rootId);
    if (e)
      return this.setRoot(e), e;
  }
  getEnd() {
    if (this.endId)
      return this.getRowNode(this.endId);
  }
  getRowNode(e) {
    let t;
    const { rowModel: i, pinnedRowModel: s } = this;
    return t ?? (t = i.getRowNode(e)), s?.isManual() && (t ?? (t = s.getPinnedRowById(e, "top")), t ?? (t = s.getPinnedRowById(e, "bottom"))), t;
  }
  /**
   * Truncates the range to the given node (assumed to be within the current range).
   * Returns nodes that remain in the current range and those that should be removed
   *
   * @param node - Node at which to truncate the range
   * @returns Object of nodes to either keep or discard (i.e. deselect) from the range
   */
  truncate(e) {
    const t = this.getRange();
    if (t.length === 0)
      return { keep: [], discard: [] };
    const i = t[0].id === this.rootId, s = t.findIndex((o) => o.id === e.id);
    if (s > -1) {
      const o = t.slice(0, s), n = t.slice(s + 1);
      return this.setEndRange(e), i ? { keep: o, discard: n } : { keep: n, discard: o };
    } else
      return { keep: t, discard: [] };
  }
  /**
   * Extends the range to the given node. Returns nodes that remain in the current range
   * and those that should be removed.
   *
   * @param node - Node marking the new end of the range
   * @returns Object of nodes to either keep or discard (i.e. deselect) from the range
   */
  extend(e, t = !1) {
    const i = this.getRoot();
    if (i == null) {
      const o = this.getRange().slice();
      return t && e.depthFirstSearch((n) => !n.group && o.push(n)), o.push(e), this.setRoot(e), { keep: o, discard: [] };
    }
    const s = this.getNodesInRange(i, e);
    if (!s)
      return this.setRoot(e), { keep: [e], discard: [] };
    if (s.find((o) => o.id === this.endId))
      return this.setEndRange(e), { keep: this.getRange(), discard: [] };
    {
      const o = this.getRange().slice();
      return this.setEndRange(e), { keep: this.getRange(), discard: o };
    }
  }
  getNodesInRange(e, t) {
    const { pinnedRowModel: i, rowModel: s } = this;
    if (!i?.isManual())
      return s.getNodesInRangeForSelection(e, t);
    if (e.rowPinned === "top" && !t.rowPinned)
      return gt(i, "top", e, void 0).concat(s.getNodesInRangeForSelection(s.getRow(0), t) ?? []);
    if (e.rowPinned === "bottom" && !t.rowPinned) {
      const o = gt(i, "bottom", void 0, e), n = s.getRowCount(), r = s.getRow(n - 1);
      return (s.getNodesInRangeForSelection(t, r) ?? []).concat(o);
    }
    if (!e.rowPinned && !t.rowPinned)
      return s.getNodesInRangeForSelection(e, t);
    if (e.rowPinned === "top" && t.rowPinned === "top")
      return gt(i, "top", e, t);
    if (e.rowPinned === "bottom" && t.rowPinned === "top") {
      const o = gt(i, "top", t, void 0), n = gt(i, "bottom", void 0, e), r = s.getRow(0), a = s.getRow(s.getRowCount() - 1);
      return o.concat(s.getNodesInRangeForSelection(r, a) ?? []).concat(n);
    }
    if (!e.rowPinned && t.rowPinned === "top")
      return gt(i, "top", t, void 0).concat(s.getNodesInRangeForSelection(s.getRow(0), e) ?? []);
    if (e.rowPinned === "top" && t.rowPinned === "bottom") {
      const o = gt(i, "top", e, void 0), n = gt(i, "bottom", void 0, t), r = s.getRow(0), a = s.getRow(s.getRowCount() - 1);
      return o.concat(s.getNodesInRangeForSelection(r, a) ?? []).concat(n);
    }
    if (e.rowPinned === "bottom" && t.rowPinned === "bottom")
      return gt(i, "bottom", e, t);
    if (!e.rowPinned && t.rowPinned === "bottom") {
      const o = gt(i, "bottom", void 0, t), n = s.getRow(s.getRowCount());
      return (s.getNodesInRangeForSelection(e, n) ?? []).concat(o);
    }
    return null;
  }
}, m0 = class extends T {
  constructor(e) {
    super(), this.column = e, this.cbSelectAllVisible = !1, this.processingEventFromCheckbox = !1;
  }
  onSpaceKeyDown(e) {
    const t = this.cbSelectAll;
    t.isDisplayed() && !t.getGui().contains(Fe(this.beans)) && (e.preventDefault(), t.setValue(!t.getValue()));
  }
  getCheckboxGui() {
    return this.cbSelectAll.getGui();
  }
  setComp(e) {
    this.headerCellCtrl = e;
    const t = this.createManagedBean(new Dc());
    this.cbSelectAll = t, t.addCss("ag-header-select-all"), Vi(t.getGui(), "presentation"), this.showOrHideSelectAll();
    const i = this.updateStateOfCheckbox.bind(this);
    this.addManagedEventListeners({
      newColumnsLoaded: () => this.showOrHideSelectAll(),
      displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),
      selectionChanged: i,
      paginationChanged: i,
      modelUpdated: i
    }), this.addManagedPropertyListener("rowSelection", ({ currentValue: s, previousValue: o }) => {
      const n = (r) => typeof r == "string" || !r || r.mode === "singleRow" ? void 0 : r.selectAll;
      n(s) !== n(o) && this.showOrHideSelectAll(), this.updateStateOfCheckbox();
    }), this.addManagedListeners(t, { fieldValueChanged: this.onCbSelectAll.bind(this) }), t.getInputElement().setAttribute("tabindex", "-1"), this.refreshSelectAllLabel();
  }
  onDisplayedColumnsChanged(e) {
    this.isAlive() && this.showOrHideSelectAll(e.source === "uiColumnMoved");
  }
  showOrHideSelectAll(e = !1) {
    const t = this.isCheckboxSelection();
    this.cbSelectAllVisible = t, this.cbSelectAll.setDisplayed(t), t && (this.checkRightRowModelType("selectAllCheckbox"), this.checkSelectionType("selectAllCheckbox"), this.updateStateOfCheckbox()), this.refreshSelectAllLabel(e);
  }
  updateStateOfCheckbox() {
    if (!this.cbSelectAllVisible || this.processingEventFromCheckbox)
      return;
    this.processingEventFromCheckbox = !0;
    const e = this.getSelectAllMode(), t = this.beans.selectionSvc, i = this.cbSelectAll, s = t.getSelectAllState(e);
    i.setValue(s);
    const o = t.hasNodesToSelect(e);
    i.setDisabled(!o), this.refreshSelectAllLabel(), this.processingEventFromCheckbox = !1;
  }
  refreshSelectAllLabel(e = !1) {
    const t = this.getLocaleTextFunc(), { headerCellCtrl: i, cbSelectAll: s, cbSelectAllVisible: o } = this, n = s.getValue(), r = dr(t, n), a = t("ariaRowSelectAll", "Press Space to toggle all rows selection");
    i.setAriaDescriptionProperty(
      "selectAll",
      o ? `${a} (${r})` : null
    ), s.setInputAriaLabel(t("ariaHeaderSelection", "Column with Header Selection")), e || i.announceAriaDescription();
  }
  checkSelectionType(e) {
    return zn(this.gos) ? !0 : (B(128, { feature: e }), !1);
  }
  checkRightRowModelType(e) {
    const { gos: t, rowModel: i } = this.beans;
    return Oe(t) || $i(t) ? !0 : (B(129, { feature: e, rowModel: i.getType() }), !1);
  }
  onCbSelectAll() {
    if (this.processingEventFromCheckbox || !this.cbSelectAllVisible)
      return;
    const e = this.cbSelectAll.getValue(), t = this.getSelectAllMode();
    let i = "uiSelectAll";
    t === "currentPage" ? i = "uiSelectAllCurrentPage" : t === "filtered" && (i = "uiSelectAllFiltered");
    const s = { source: i, selectAll: t }, o = this.beans.selectionSvc;
    e ? o.selectAllRowNodes(s) : o.deselectAllRowNodes(s);
  }
  /**
   * Checkbox is enabled when either the `headerCheckbox` option is enabled in the new selection API
   * or `headerCheckboxSelection` is enabled in the legacy API.
   */
  isCheckboxSelection() {
    const { column: e, gos: t, beans: i } = this, n = typeof t.get("rowSelection") == "object" ? "headerCheckbox" : "headerCheckboxSelection";
    return wm(i, e) && this.checkRightRowModelType(n) && this.checkSelectionType(n);
  }
  getSelectAllMode() {
    const e = gf(this.gos, !1);
    if (e)
      return e;
    const { headerCheckboxSelectionCurrentPageOnly: t, headerCheckboxSelectionFilteredOnly: i } = this.column.getColDef();
    return t ? "currentPage" : i ? "filtered" : "all";
  }
  destroy() {
    super.destroy(), this.cbSelectAll = void 0, this.headerCellCtrl = void 0;
  }
};
function wm({ gos: e, selectionColSvc: t }, i) {
  const s = e.get("rowSelection"), o = i.getColDef(), { headerCheckboxSelection: n } = o;
  let r = !1;
  if (typeof s == "object") {
    const l = fi(i), c = hc(i);
    (Nn(s) === "autoGroupColumn" && c || l && t?.isSelectionColumnEnabled()) && (r = un(s));
  } else
    typeof n == "function" ? r = n(Z(e, { column: i, colDef: o })) : r = !!n;
  return r;
}
var C0 = class extends T {
  postConstruct() {
    const { gos: e, beans: t } = this;
    this.selectionCtx = new f0(t.rowModel, t.pinnedRowModel), this.addManagedPropertyListeners(["isRowSelectable", "rowSelection"], () => {
      const i = Xa(e);
      i !== this.isRowSelectable && (this.isRowSelectable = i, this.updateSelectable());
    }), this.isRowSelectable = Xa(e), this.addManagedEventListeners({
      cellValueChanged: (i) => this.updateRowSelectable(i.node),
      rowNodeDataChanged: (i) => this.updateRowSelectable(i.node)
    });
  }
  destroy() {
    super.destroy(), this.selectionCtx.reset();
  }
  createCheckboxSelectionComponent() {
    return new p0();
  }
  createSelectAllFeature(e) {
    if (wm(this.beans, e))
      return new m0(e);
  }
  isMultiSelect() {
    return zn(this.gos);
  }
  onRowCtrlSelected(e, t, i) {
    const s = !!e.rowNode.isSelected();
    e.forEachGui(i, (o) => {
      o.rowComp.toggleCss("ag-row-selected", s);
      const n = o.element;
      za(n, s), n.contains(Fe(this.beans)) && t(o);
    });
  }
  announceAriaRowSelection(e) {
    if (this.isRowSelectionBlocked(e))
      return;
    const t = e.isSelected();
    if (!e.selectable)
      return;
    const s = this.getLocaleTextFunc()(
      t ? "ariaRowDeselect" : "ariaRowSelect",
      `Press SPACE to ${t ? "deselect" : "select"} this row`
    );
    this.beans.ariaAnnounce?.announceValue(s, "rowSelection");
  }
  isRowSelectionBlocked(e) {
    return !e.selectable || e.rowPinned && !Ho(e) || !Mi(this.gos);
  }
  updateRowSelectable(e, t) {
    const i = e.rowPinned && e.pinnedSibling ? (
      // If row node is pinned sibling, copy selectable status over from sibling row node
      e.pinnedSibling.selectable
    ) : (
      // otherwise calculate selectable state directly
      this.isRowSelectable?.(e) ?? !0
    );
    return this.setRowSelectable(e, i, t), i;
  }
  setRowSelectable(e, t, i) {
    if (e.selectable !== t) {
      if (e.selectable = t, e.dispatchRowEvent("selectableChanged"), i)
        return;
      if (yo(this.gos)) {
        const o = this.calculateSelectedFromChildren(e);
        this.setNodesSelected({ nodes: [e], newValue: o ?? !1, source: "selectableChanged" });
        return;
      }
      e.isSelected() && !e.selectable && this.setNodesSelected({ nodes: [e], newValue: !1, source: "selectableChanged" });
    }
  }
  calculateSelectedFromChildren(e) {
    let t = !1, i = !1;
    if (!e.childrenAfterGroup?.length)
      return e.selectable ? e.__selected : null;
    for (let s = 0; s < e.childrenAfterGroup.length; s++) {
      const o = e.childrenAfterGroup[s];
      let n = o.isSelected();
      if (!o.selectable) {
        const r = this.calculateSelectedFromChildren(o);
        if (r === null)
          continue;
        n = r;
      }
      switch (n) {
        case !0:
          t = !0;
          break;
        case !1:
          i = !0;
          break;
        default:
          return;
      }
    }
    if (!(t && i))
      return t ? !0 : i ? !1 : e.selectable ? e.__selected : null;
  }
  selectRowNode(e, t, i, s = "api") {
    const o = !e.selectable && t, n = e.__selected === t;
    if (o || n)
      return !1;
    e.__selected = t, e.dispatchRowEvent("rowSelected");
    const r = e.sibling;
    r && r.footer && r.__localEventService && r.dispatchRowEvent("rowSelected");
    const a = e.pinnedSibling;
    return a && a.rowPinned && a.__localEventService && a.dispatchRowEvent("rowSelected"), this.eventSvc.dispatchEvent({
      ...AP(e, this.gos, "rowSelected"),
      event: i || null,
      source: s
    }), !0;
  }
  isCellCheckboxSelection(e, t) {
    const i = this.gos.get("rowSelection");
    if (i && typeof i != "string") {
      const s = fi(e) && gs(i);
      return e.isColumnFunc(t, s);
    } else
      return e.isColumnFunc(t, e.colDef.checkboxSelection);
  }
  inferNodeSelections(e, t, i, s) {
    const { gos: o, selectionCtx: n } = this, r = e.isSelected(), a = yo(o), l = lx(o), c = cx(o), d = this.isMultiSelect(), u = s === "rowClicked";
    if (u && !(l || c))
      return null;
    if (t && i && d) {
      const h = n.getRoot();
      if (h)
        if (h.isSelected()) {
          const g = n.isInRange(e) ? n.truncate(e) : n.extend(e, a);
          return {
            deselect: g.discard,
            select: g.keep,
            reset: !1
          };
        } else {
          const g = n.extend(e, a);
          return {
            select: [],
            deselect: g.keep,
            reset: !1
          };
        }
      else return null;
    } else if (t && d) {
      const h = n.selectAll ? this.beans.rowModel.getRow(0) : void 0, g = n.getRoot(h), p = n.isInRange(e) ? n.truncate(e) : n.extend(e, a);
      return {
        select: p.keep,
        deselect: p.discard,
        reset: n.selectAll || !!(g && !g.isSelected())
      };
    } else if (i) {
      if (u) {
        const h = !r;
        return h && !l || !h && !c ? null : (n.setRoot(e), {
          node: e,
          newValue: h,
          clearSelection: !1
        });
      }
      return n.setRoot(e), {
        node: e,
        newValue: !r,
        clearSelection: !d
      };
    } else {
      n.setRoot(e);
      const h = dx(o), g = _n(o) === "filteredDescendants", p = u && (!h || !l);
      if (g && r === void 0 && Oe(o))
        return {
          node: e,
          newValue: !1,
          clearSelection: !d || p
        };
      if (u) {
        const f = r ? !h : l;
        return f === r && !p || f && !l || !f && !c ? null : {
          node: e,
          newValue: f,
          clearSelection: !d || p,
          keepDescendants: e.group && a
        };
      }
      return {
        node: e,
        newValue: !r,
        clearSelection: !d || p
      };
    }
  }
}, v0 = class extends Dc {
  constructor(e) {
    super(e, "ag-radio-button", "radio");
  }
  isSelected() {
    return this.eInput.checked;
  }
  toggle() {
    this.eInput.disabled || this.isSelected() || this.setValue(!0);
  }
  addInputListeners() {
    super.addInputListeners(), this.addManagedEventListeners({ checkboxChanged: this.onChange.bind(this) });
  }
  /**
   * This ensures that if another radio button in the same named group is selected, we deselect this radio button.
   * By default the browser does this for you, but we are managing classes ourselves in order to ensure input
   * elements are styled correctly in IE11, and the DOM 'changed' event is only fired when a button is selected,
   * not deselected, so we need to use our own event.
   */
  onChange(e) {
    const t = this.eInput;
    e.selected && e.name && t.name && t.name === e.name && e.id && t.id !== e.id && this.setValue(!1, !0);
  }
}, Xi = class extends Fi {
  constructor(e, t = "ag-text-field", i = "text") {
    super(e, t, i);
  }
  postConstruct() {
    super.postConstruct(), this.config.allowedCharPattern && this.preventDisallowedCharacters();
  }
  setValue(e, t) {
    const i = this.eInput;
    return i.value !== e && (i.value = $(e) ? e : ""), super.setValue(e, t);
  }
  /** Used to set an initial value into the input without necessarily setting `this.value` or triggering events (e.g. to set an invalid value) */
  setStartValue(e) {
    this.setValue(e, !0);
  }
  preventDisallowedCharacters() {
    const e = new RegExp(`[${this.config.allowedCharPattern}]`), t = (i) => {
      am(i) && i.key && !e.test(i.key) && i.preventDefault();
    };
    this.addManagedListeners(this.eInput, {
      keydown: t,
      paste: (i) => {
        const s = i.clipboardData?.getData("text");
        s && s.split("").some((o) => !e.test(o)) && i.preventDefault();
      }
    });
  }
}, fr = {
  selector: "AG-INPUT-TEXT-FIELD",
  component: Xi
}, w0 = class extends Fi {
  constructor(e) {
    super(e, "ag-text-area", null, "textarea");
  }
  setValue(e, t) {
    const i = super.setValue(e, t);
    return this.eInput.value = e, i;
  }
  setCols(e) {
    return this.eInput.cols = e, this;
  }
  setRows(e) {
    return this.eInput.rows = e, this;
  }
}, S0 = {
  selector: "AG-INPUT-TEXT-AREA",
  component: w0
}, Mc = class extends Xi {
  constructor(e) {
    super(e, "ag-number-field", "number");
  }
  postConstruct() {
    super.postConstruct();
    const e = this.eInput;
    this.addManagedListeners(e, {
      blur: () => {
        const n = parseFloat(e.value), r = isNaN(n) ? "" : this.normalizeValue(n.toString());
        this.value !== r && this.setValue(r);
      },
      wheel: this.onWheel.bind(this)
    }), e.step = "any";
    const { precision: t, min: i, max: s, step: o } = this.config;
    typeof t == "number" && this.setPrecision(t), typeof i == "number" && this.setMin(i), typeof s == "number" && this.setMax(s), typeof o == "number" && this.setStep(o);
  }
  onWheel(e) {
    Fe(this.beans) === this.eInput && e.preventDefault();
  }
  normalizeValue(e) {
    return e === "" ? "" : (this.precision != null && (e = this.adjustPrecision(e)), e);
  }
  adjustPrecision(e, t) {
    const i = this.precision;
    if (i == null)
      return e;
    if (t) {
      const o = parseFloat(e).toFixed(i);
      return parseFloat(o).toString();
    }
    const s = String(e).split(".");
    if (s.length > 1) {
      if (s[1].length <= i)
        return e;
      if (i > 0)
        return `${s[0]}.${s[1].slice(0, i)}`;
    }
    return s[0];
  }
  setMin(e) {
    return this.min === e ? this : (this.min = e, rt(this.eInput, "min", e), this);
  }
  setMax(e) {
    return this.max === e ? this : (this.max = e, rt(this.eInput, "max", e), this);
  }
  setPrecision(e) {
    return this.precision = e, this;
  }
  setStep(e) {
    return this.step === e ? this : (this.step = e, rt(this.eInput, "step", e), this);
  }
  setValue(e, t) {
    return this.setValueOrInputValue(
      (i) => super.setValue(i, t),
      () => this,
      e
    );
  }
  setStartValue(e) {
    return this.setValueOrInputValue(
      (t) => super.setValue(t, !0),
      (t) => {
        this.eInput.value = t;
      },
      e
    );
  }
  setValueOrInputValue(e, t, i) {
    if ($(i)) {
      let s = this.isScientificNotation(i);
      if (s && this.eInput.validity.valid)
        return e(i);
      if (!s) {
        i = this.adjustPrecision(i);
        const o = this.normalizeValue(i);
        s = i != o;
      }
      if (s)
        return t(i);
    }
    return e(i);
  }
  getValue() {
    const e = this.eInput;
    if (!e.validity.valid)
      return;
    const t = e.value;
    return this.isScientificNotation(t) ? this.adjustPrecision(t, !0) : super.getValue();
  }
  isScientificNotation(e) {
    return typeof e == "string" && e.includes("e");
  }
}, y0 = {
  selector: "AG-INPUT-NUMBER-FIELD",
  component: Mc
}, b0 = class extends Xi {
  constructor(e) {
    super(e, "ag-date-field", "date");
  }
  postConstruct() {
    super.postConstruct();
    const e = Ui();
    this.addManagedListeners(this.eInput, {
      wheel: this.onWheel.bind(this),
      mousedown: () => {
        this.isDisabled() || e || this.eInput.focus();
      }
    }), this.eInput.step = "any";
  }
  onWheel(e) {
    Fe(this.beans) === this.eInput && e.preventDefault();
  }
  setMin(e) {
    const t = e instanceof Date ? lt(e ?? null, !!this.includeTime) ?? void 0 : e;
    return this.min === t ? this : (this.min = t, rt(this.eInput, "min", t), this);
  }
  setMax(e) {
    const t = e instanceof Date ? lt(e ?? null, !!this.includeTime) ?? void 0 : e;
    return this.max === t ? this : (this.max = t, rt(this.eInput, "max", t), this);
  }
  setStep(e) {
    return this.step === e ? this : (this.step = e, rt(this.eInput, "step", e), this);
  }
  setIncludeTime(e) {
    return this.includeTime === e ? this : (this.includeTime = e, super.setInputType(e ? "datetime-local" : "date"), e && this.setStep(1), this);
  }
  getDate() {
    if (this.eInput.validity.valid)
      return st(this.getValue()) ?? void 0;
  }
  setDate(e, t) {
    this.setValue(lt(e ?? null, this.includeTime), t);
  }
}, Sm = {
  selector: "AG-INPUT-DATE-FIELD",
  component: b0
}, R0 = class extends pe {
  constructor(e = "default", t = !1) {
    super({ tag: "div", cls: `ag-list ag-${e}-list` }), this.cssIdentifier = e, this.unFocusable = t, this.activeClass = "ag-active-item", this.options = [], this.itemEls = [];
  }
  postConstruct() {
    const e = this.getGui();
    this.addManagedElementListeners(e, { mouseleave: () => this.clearHighlighted() }), !this.unFocusable && this.addManagedElementListeners(e, { keydown: this.handleKeyDown.bind(this) });
  }
  handleKeyDown(e) {
    const t = e.key;
    switch (t) {
      case E.ENTER:
        if (!this.highlightedEl)
          this.setValue(this.getValue());
        else {
          const i = this.itemEls.indexOf(this.highlightedEl);
          this.setValueByIndex(i);
        }
        break;
      case E.DOWN:
      case E.UP:
        e.preventDefault(), this.navigate(t);
        break;
      case E.PAGE_DOWN:
      case E.PAGE_UP:
      case E.PAGE_HOME:
      case E.PAGE_END:
        e.preventDefault(), this.navigateToPage(t);
        break;
    }
  }
  navigate(e) {
    const t = e === E.DOWN;
    let i;
    const { itemEls: s, highlightedEl: o } = this;
    if (!o)
      i = s[t ? 0 : s.length - 1];
    else {
      let r = s.indexOf(o) + (t ? 1 : -1);
      r = Math.min(Math.max(r, 0), s.length - 1), i = s[r];
    }
    this.highlightItem(i);
  }
  navigateToPage(e) {
    const { itemEls: t, highlightedEl: i } = this;
    if (!i || t.length === 0)
      return;
    const s = t.indexOf(i), o = this.options.length - 1, n = t[0].clientHeight, r = Math.floor(this.getGui().clientHeight / n);
    let a = -1;
    e === E.PAGE_HOME ? a = 0 : e === E.PAGE_END ? a = o : e === E.PAGE_DOWN ? a = Math.min(s + r, o) : e === E.PAGE_UP && (a = Math.max(s - r, 0)), a !== -1 && this.highlightItem(t[a]);
  }
  addOptions(e) {
    return e.forEach((t) => this.addOption(t)), this;
  }
  addOption(e) {
    const { value: t, text: i } = e, s = i ?? t;
    return this.options.push({ value: t, text: s }), this.renderOption(t, s), this.updateIndices(), this;
  }
  clearOptions() {
    this.options = [], this.reset(!0), this.itemEls.forEach((e) => {
      Xt(e);
    }), this.itemEls = [], this.refreshAriaRole();
  }
  refreshAriaRole() {
    const e = this.getGui();
    Vi(e, this.options.length === 0 ? "presentation" : "listbox");
  }
  updateIndices() {
    const e = this.getGui().querySelectorAll(".ag-list-item");
    this.refreshAriaRole(), e.forEach((t, i) => {
      AR(t, i + 1), MR(t, e.length);
    });
  }
  renderOption(e, t) {
    const i = Ae({
      tag: "div",
      cls: `ag-list-item ag-${this.cssIdentifier}-list-item`,
      attrs: { role: "option" }
    }), s = Ae({
      tag: "span",
      children: t
    });
    i.appendChild(s), this.unFocusable || (i.tabIndex = -1), this.itemEls.push(i), this.addManagedListeners(i, {
      mouseover: () => this.highlightItem(i),
      mousedown: (o) => {
        o.preventDefault(), o.stopPropagation(), this.setValue(e);
      }
    }), this.createOptionalManagedBean(
      this.beans.registry.createDynamicBean("tooltipFeature", !1, {
        getTooltipValue: () => t,
        getGui: () => i,
        getLocation: () => "UNKNOWN",
        // only show tooltips for items where the text cannot be fully displayed
        shouldDisplayTooltip: () => s.scrollWidth > s.clientWidth
      })
    ), this.getGui().appendChild(i);
  }
  setValue(e, t) {
    if (this.value === e)
      return this.fireItemSelected(), this;
    if (e == null)
      return this.reset(t), this;
    const i = this.options.findIndex((s) => s.value === e);
    if (i !== -1) {
      const s = this.options[i];
      this.value = s.value, this.displayValue = s.text, this.highlightItem(this.itemEls[i]), t || this.fireChangeEvent();
    }
    return this;
  }
  setValueByIndex(e) {
    return this.setValue(this.options[e].value);
  }
  getValue() {
    return this.value;
  }
  getDisplayValue() {
    return this.displayValue;
  }
  refreshHighlighted() {
    this.clearHighlighted();
    const e = this.options.findIndex((t) => t.value === this.value);
    e !== -1 && this.highlightItem(this.itemEls[e]);
  }
  reset(e) {
    this.value = null, this.displayValue = null, this.clearHighlighted(), e || this.fireChangeEvent();
  }
  highlightItem(e) {
    if (!Ht(e))
      return;
    this.clearHighlighted(), this.highlightedEl = e, e.classList.add(this.activeClass), za(e, !0);
    const t = this.getGui(), { scrollTop: i, clientHeight: s } = t, { offsetTop: o, offsetHeight: n } = e;
    (o + n > i + s || o < i) && e.scrollIntoView({ block: "nearest" }), this.unFocusable || e.focus();
  }
  clearHighlighted() {
    const e = this.highlightedEl;
    !e || !Ht(e) || (e.classList.remove(this.activeClass), za(e, !1), this.highlightedEl = null);
  }
  fireChangeEvent() {
    this.dispatchLocalEvent({ type: "fieldValueChanged" }), this.fireItemSelected();
  }
  fireItemSelected() {
    this.dispatchLocalEvent({ type: "selectedItem" });
  }
}, x0 = (
  /*css*/
  ".ag-picker-field-display{flex:1 1 auto}.ag-picker-field{align-items:center;display:flex}.ag-picker-field-icon{border:0;cursor:pointer;display:flex;margin:0;padding:0}.ag-picker-field-wrapper{background-color:var(--ag-picker-button-background-color);border:var(--ag-picker-button-border);border-radius:5px;min-height:max(var(--ag-list-item-height),calc(var(--ag-spacing)*4));overflow:hidden;&:where(.ag-picker-has-focus),&:where(:focus-within){background-color:var(--ag-picker-button-focus-background-color);border:var(--ag-picker-button-focus-border);box-shadow:var(--ag-focus-shadow);&:where(.invalid){box-shadow:var(--ag-focus-error-shadow)}}&:where(.invalid){background-color:var(--ag-input-invalid-background-color);border:var(--ag-input-invalid-border);color:var(--ag-input-invalid-text-color)}&:disabled{opacity:.5}}"
), F0 = {
  tag: "div",
  cls: "ag-picker-field",
  role: "presentation",
  children: [
    { tag: "div", ref: "eLabel" },
    {
      tag: "div",
      ref: "eWrapper",
      cls: "ag-wrapper ag-picker-field-wrapper ag-picker-collapsed",
      children: [
        { tag: "div", ref: "eDisplayField", cls: "ag-picker-field-display" },
        { tag: "div", ref: "eIcon", cls: "ag-picker-field-icon", attrs: { "aria-hidden": "true" } }
      ]
    }
  ]
}, P0 = class extends Cm {
  constructor(e) {
    if (super(e, e?.template || F0, e?.agComponents || [], e?.className), this.isPickerDisplayed = !1, this.skipClick = !1, this.pickerGap = 4, this.hideCurrentPicker = null, this.eLabel = q, this.eWrapper = q, this.eDisplayField = q, this.eIcon = q, this.registerCSS(x0), this.ariaRole = e?.ariaRole, this.onPickerFocusIn = this.onPickerFocusIn.bind(this), this.onPickerFocusOut = this.onPickerFocusOut.bind(this), !e)
      return;
    const { pickerGap: t, maxPickerHeight: i, variableWidth: s, minPickerWidth: o, maxPickerWidth: n } = e;
    t != null && (this.pickerGap = t), this.variableWidth = !!s, i != null && this.setPickerMaxHeight(i), o != null && this.setPickerMinWidth(o), n != null && this.setPickerMaxWidth(n);
  }
  postConstruct() {
    super.postConstruct(), this.setupAria();
    const e = `ag-${this.getCompId()}-display`;
    this.eDisplayField.setAttribute("id", e);
    const t = this.getAriaElement();
    this.addManagedElementListeners(t, { keydown: this.onKeyDown.bind(this) }), this.addManagedElementListeners(this.eLabel, { mousedown: this.onLabelOrWrapperMouseDown.bind(this) }), this.addManagedElementListeners(this.eWrapper, { mousedown: this.onLabelOrWrapperMouseDown.bind(this) });
    const { pickerIcon: i, inputWidth: s } = this.config;
    if (i) {
      const o = Ct(i, this.beans);
      o && this.eIcon.appendChild(o);
    }
    s != null && this.setInputWidth(s);
  }
  setupAria() {
    const e = this.getAriaElement();
    e.setAttribute("tabindex", this.gos.get("tabIndex").toString()), Wa(e, !1), this.ariaRole && Vi(e, this.ariaRole);
  }
  onLabelOrWrapperMouseDown(e) {
    if (e) {
      const t = this.getFocusableElement();
      if (t !== this.eWrapper && e?.target === t)
        return;
      e.preventDefault(), this.getFocusableElement().focus();
    }
    if (this.skipClick) {
      this.skipClick = !1;
      return;
    }
    this.isDisabled() || (this.isPickerDisplayed ? this.hidePicker() : this.showPicker());
  }
  onKeyDown(e) {
    switch (e.key) {
      case E.UP:
      case E.DOWN:
      case E.ENTER:
      case E.SPACE:
        e.preventDefault(), this.onLabelOrWrapperMouseDown();
        break;
      case E.ESCAPE:
        this.isPickerDisplayed && (e.preventDefault(), e.stopPropagation(), this.hideCurrentPicker && this.hideCurrentPicker());
        break;
    }
  }
  showPicker() {
    this.isPickerDisplayed = !0, this.pickerComponent || (this.pickerComponent = this.createPickerComponent());
    const e = this.pickerComponent.getGui();
    e.addEventListener("focusin", this.onPickerFocusIn), e.addEventListener("focusout", this.onPickerFocusOut), this.hideCurrentPicker = this.renderAndPositionPicker(), this.toggleExpandedStyles(!0);
  }
  renderAndPositionPicker() {
    const e = this.pickerComponent.getGui();
    this.gos.get("suppressScrollWhenPopupsAreOpen") || ([this.destroyMouseWheelFunc] = this.addManagedEventListeners({
      bodyScroll: () => {
        this.hidePicker();
      }
    }));
    const t = this.getLocaleTextFunc(), {
      config: { pickerAriaLabelKey: i, pickerAriaLabelValue: s, modalPicker: o = !0 },
      maxPickerHeight: n,
      minPickerWidth: r,
      maxPickerWidth: a,
      variableWidth: l,
      beans: c,
      eWrapper: d
    } = this, u = {
      modal: o,
      eChild: e,
      closeOnEsc: !0,
      closedCallback: () => {
        const f = af(c);
        this.beforeHidePicker(), f && this.isAlive() && this.getFocusableElement().focus();
      },
      ariaLabel: t(i, s),
      anchorToElement: d
    };
    e.style.position = "absolute";
    const h = c.popupSvc, g = h.addPopup(u);
    l ? (r && (e.style.minWidth = r), e.style.width = ac(On(d)), a && (e.style.maxWidth = a)) : Hn(e, a ?? On(d));
    const p = n ?? `${nc(h.getPopupParent())}px`;
    return e.style.setProperty("max-height", p), this.alignPickerToComponent(), g.hideFunc;
  }
  alignPickerToComponent() {
    if (!this.pickerComponent)
      return;
    const {
      pickerGap: e,
      config: { pickerType: t },
      beans: { popupSvc: i, gos: s },
      eWrapper: o,
      pickerComponent: n
    } = this, r = s.get("enableRtl") ? "right" : "left";
    i.positionPopupByComponent({
      type: t,
      eventSource: o,
      ePopup: n.getGui(),
      position: "under",
      alignSide: r,
      keepWithinBounds: !0,
      nudgeY: e
    });
  }
  beforeHidePicker() {
    this.destroyMouseWheelFunc && (this.destroyMouseWheelFunc(), this.destroyMouseWheelFunc = void 0), this.toggleExpandedStyles(!1);
    const e = this.pickerComponent.getGui();
    e.removeEventListener("focusin", this.onPickerFocusIn), e.removeEventListener("focusout", this.onPickerFocusOut), this.isPickerDisplayed = !1, this.pickerComponent = void 0, this.hideCurrentPicker = null;
  }
  toggleExpandedStyles(e) {
    if (!this.isAlive())
      return;
    const t = this.getAriaElement();
    Wa(t, e);
    const i = this.eWrapper.classList;
    i.toggle("ag-picker-expanded", e), i.toggle("ag-picker-collapsed", !e);
  }
  onPickerFocusIn() {
    this.togglePickerHasFocus(!0);
  }
  onPickerFocusOut(e) {
    this.pickerComponent?.getGui().contains(e.relatedTarget) || this.togglePickerHasFocus(!1);
  }
  togglePickerHasFocus(e) {
    this.pickerComponent && this.eWrapper.classList.toggle("ag-picker-has-focus", e);
  }
  hidePicker() {
    this.hideCurrentPicker && (this.hideCurrentPicker(), this.dispatchLocalEvent({
      type: "pickerHidden"
    }));
  }
  setInputWidth(e) {
    return Hn(this.eWrapper, e), this;
  }
  getFocusableElement() {
    return this.eWrapper;
  }
  setPickerGap(e) {
    return this.pickerGap = e, this;
  }
  setPickerMinWidth(e) {
    return typeof e == "number" && (e = `${e}px`), this.minPickerWidth = e ?? void 0, this;
  }
  setPickerMaxWidth(e) {
    return typeof e == "number" && (e = `${e}px`), this.maxPickerWidth = e ?? void 0, this;
  }
  setPickerMaxHeight(e) {
    return typeof e == "number" && (e = `${e}px`), this.maxPickerHeight = e ?? void 0, this;
  }
  destroy() {
    this.hidePicker(), super.destroy();
  }
}, E0 = (
  /*css*/
  ".ag-select{align-items:center;display:flex;&.ag-disabled{opacity:.5}}:where(.ag-select){.ag-picker-field-wrapper{cursor:default}&.ag-disabled .ag-picker-field-wrapper:focus{box-shadow:none}&:not(.ag-cell-editor,.ag-label-align-top){min-height:var(--ag-list-item-height)}.ag-picker-field-display{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ag-picker-field-icon{align-items:center;display:flex}}:where(.ag-ltr) :where(.ag-select){.ag-picker-field-wrapper{padding-left:calc(var(--ag-cell-horizontal-padding)/2);padding-right:var(--ag-spacing)}}:where(.ag-rtl) :where(.ag-select){.ag-picker-field-wrapper{padding-left:var(--ag-spacing);padding-right:calc(var(--ag-cell-horizontal-padding)/2)}}"
), Ac = class extends P0 {
  constructor(e) {
    super({
      pickerAriaLabelKey: "ariaLabelSelectField",
      pickerAriaLabelValue: "Select Field",
      pickerType: "ag-list",
      className: "ag-select",
      pickerIcon: "selectOpen",
      ariaRole: "combobox",
      ...e
    }), this.registerCSS(E0);
  }
  postConstruct() {
    this.tooltipFeature = this.createOptionalManagedBean(
      this.beans.registry.createDynamicBean("tooltipFeature", !1, {
        shouldDisplayTooltip: dn(() => this.eDisplayField),
        getGui: () => this.getGui()
      })
    ), super.postConstruct(), this.createListComponent(), this.eWrapper.tabIndex = this.gos.get("tabIndex");
    const { options: e, value: t, placeholder: i } = this.config;
    e != null && this.addOptions(e), t != null && this.setValue(t, !0), i && t == null && (this.eDisplayField.textContent = i), this.addManagedElementListeners(this.eWrapper, { focusout: this.onWrapperFocusOut.bind(this) });
  }
  onWrapperFocusOut(e) {
    this.eWrapper.contains(e.relatedTarget) || this.hidePicker();
  }
  createListComponent() {
    const e = this.createBean(new R0("select", !0));
    this.listComponent = e, e.setParentComponent(this);
    const t = e.getAriaElement(), i = `ag-select-list-${e.getCompId()}`;
    t.setAttribute("id", i), BR(this.getAriaElement(), t), e.addManagedElementListeners(e.getGui(), {
      mousedown: (s) => {
        s?.preventDefault();
      }
    }), e.addManagedListeners(e, {
      selectedItem: () => {
        this.hidePicker(), this.dispatchLocalEvent({ type: "selectedItem" });
      },
      fieldValueChanged: () => {
        this.listComponent && (this.setValue(this.listComponent.getValue(), !1, !0), this.hidePicker());
      }
    });
  }
  createPickerComponent() {
    return this.listComponent;
  }
  onKeyDown(e) {
    const { key: t } = e;
    switch (t === E.TAB && this.hidePicker(), t) {
      case E.ENTER:
      case E.UP:
      case E.DOWN:
      case E.PAGE_UP:
      case E.PAGE_DOWN:
      case E.PAGE_HOME:
      case E.PAGE_END:
        e.preventDefault(), this.isPickerDisplayed ? this.listComponent?.handleKeyDown(e) : super.onKeyDown(e);
        break;
      case E.ESCAPE:
        super.onKeyDown(e);
        break;
      case E.SPACE:
        this.isPickerDisplayed ? e.preventDefault() : super.onKeyDown(e);
        break;
    }
  }
  showPicker() {
    const e = this.listComponent;
    e && (super.showPicker(), e.refreshHighlighted());
  }
  addOptions(e) {
    return e.forEach((t) => this.addOption(t)), this;
  }
  addOption(e) {
    return this.listComponent.addOption(e), this;
  }
  clearOptions() {
    return this.listComponent?.clearOptions(), this.setValue(void 0, !0), this;
  }
  setValue(e, t, i) {
    const {
      listComponent: s,
      config: { placeholder: o },
      eDisplayField: n,
      tooltipFeature: r
    } = this;
    if (this.value === e || !s)
      return this;
    if (i || s.setValue(e, !0), s.getValue() === this.getValue())
      return this;
    let l = s.getDisplayValue();
    return l == null && o && (l = o), n.textContent = l, r?.setTooltipAndRefresh(l ?? null), super.setValue(e, t);
  }
  destroy() {
    this.listComponent = this.destroyBean(this.listComponent), super.destroy();
  }
}, D0 = {
  selector: "AG-SELECT",
  component: Ac
}, vs = {
  TAB_GUARD: "ag-tab-guard",
  TAB_GUARD_TOP: "ag-tab-guard-top",
  TAB_GUARD_BOTTOM: "ag-tab-guard-bottom"
}, ym = class extends T {
  constructor(e) {
    super(), this.skipTabGuardFocus = !1, this.forcingFocusOut = !1, this.allowFocus = !1;
    const {
      comp: t,
      eTopGuard: i,
      eBottomGuard: s,
      focusTrapActive: o,
      forceFocusOutWhenTabGuardsAreEmpty: n,
      isFocusableContainer: r,
      focusInnerElement: a,
      onFocusIn: l,
      onFocusOut: c,
      shouldStopEventPropagation: d,
      onTabKeyDown: u,
      handleKeyDown: h,
      isEmpty: g,
      eFocusableElement: p
    } = e;
    this.comp = t, this.eTopGuard = i, this.eBottomGuard = s, this.providedFocusInnerElement = a, this.eFocusableElement = p, this.focusTrapActive = !!o, this.forceFocusOutWhenTabGuardsAreEmpty = !!n, this.isFocusableContainer = !!r, this.providedFocusIn = l, this.providedFocusOut = c, this.providedShouldStopEventPropagation = d, this.providedOnTabKeyDown = u, this.providedHandleKeyDown = h, this.providedIsEmpty = g;
  }
  postConstruct() {
    this.createManagedBean(
      new Vs(this.eFocusableElement, {
        shouldStopEventPropagation: () => this.shouldStopEventPropagation(),
        onTabKeyDown: (e) => this.onTabKeyDown(e),
        handleKeyDown: (e) => this.handleKeyDown(e),
        onFocusIn: (e) => this.onFocusIn(e),
        onFocusOut: (e) => this.onFocusOut(e)
      })
    ), this.activateTabGuards(), [this.eTopGuard, this.eBottomGuard].forEach(
      (e) => this.addManagedElementListeners(e, { focus: this.onFocus.bind(this) })
    );
  }
  handleKeyDown(e) {
    this.providedHandleKeyDown && this.providedHandleKeyDown(e);
  }
  tabGuardsAreActive() {
    return !!this.eTopGuard && this.eTopGuard.hasAttribute("tabIndex");
  }
  shouldStopEventPropagation() {
    return this.providedShouldStopEventPropagation ? this.providedShouldStopEventPropagation() : !1;
  }
  activateTabGuards() {
    if (this.forcingFocusOut)
      return;
    const e = this.gos.get("tabIndex");
    this.comp.setTabIndex(e.toString());
  }
  deactivateTabGuards() {
    this.comp.setTabIndex();
  }
  onFocus(e) {
    if (this.isFocusableContainer && !this.eFocusableElement.contains(e.relatedTarget) && !this.allowFocus) {
      this.findNextElementOutsideAndFocus(e.target === this.eBottomGuard);
      return;
    }
    if (this.skipTabGuardFocus) {
      this.skipTabGuardFocus = !1;
      return;
    }
    if (this.forceFocusOutWhenTabGuardsAreEmpty && (this.providedIsEmpty ? this.providedIsEmpty() : ms(this.eFocusableElement, ".ag-tab-guard").length === 0)) {
      this.findNextElementOutsideAndFocus(e.target === this.eBottomGuard);
      return;
    }
    if (this.isFocusableContainer && this.eFocusableElement.contains(e.relatedTarget))
      return;
    const t = e.target === this.eBottomGuard;
    !(this.providedFocusInnerElement ? this.providedFocusInnerElement(t) : this.focusInnerElement(t)) && this.forceFocusOutWhenTabGuardsAreEmpty && this.findNextElementOutsideAndFocus(e.target === this.eBottomGuard);
  }
  findNextElementOutsideAndFocus(e) {
    const t = He(this.beans), i = ms(t.body, null, !0), s = i.indexOf(e ? this.eTopGuard : this.eBottomGuard);
    if (s === -1)
      return;
    let o, n;
    e ? (o = 0, n = s) : (o = s + 1, n = i.length);
    const r = i.slice(o, n), a = this.gos.get("tabIndex");
    r.sort((l, c) => {
      const d = parseInt(l.getAttribute("tabindex") || "0"), u = parseInt(c.getAttribute("tabindex") || "0");
      return u === a ? 1 : d === a ? -1 : d === 0 ? 1 : u === 0 ? -1 : d - u;
    }), r[e ? r.length - 1 : 0]?.focus();
  }
  onFocusIn(e) {
    this.focusTrapActive || this.forcingFocusOut || (this.providedFocusIn && this.providedFocusIn(e), this.isFocusableContainer || this.deactivateTabGuards());
  }
  onFocusOut(e) {
    this.focusTrapActive || (this.providedFocusOut && this.providedFocusOut(e), this.eFocusableElement.contains(e.relatedTarget) || this.activateTabGuards());
  }
  onTabKeyDown(e) {
    if (this.providedOnTabKeyDown) {
      this.providedOnTabKeyDown(e);
      return;
    }
    if (this.focusTrapActive || e.defaultPrevented)
      return;
    const t = this.tabGuardsAreActive();
    t && this.deactivateTabGuards();
    const i = this.getNextFocusableElement(e.shiftKey);
    t && setTimeout(() => this.activateTabGuards(), 0), i && (i.focus(), e.preventDefault());
  }
  focusInnerElement(e = !1) {
    const t = ms(this.eFocusableElement);
    return this.tabGuardsAreActive() && (t.splice(0, 1), t.splice(t.length - 1, 1)), t.length ? (t[e ? t.length - 1 : 0].focus({ preventScroll: !0 }), !0) : !1;
  }
  getNextFocusableElement(e) {
    return qi(this.beans, this.eFocusableElement, !1, e);
  }
  forceFocusOutOfContainer(e = !1) {
    if (this.forcingFocusOut)
      return;
    const t = e ? this.eTopGuard : this.eBottomGuard;
    this.activateTabGuards(), this.skipTabGuardFocus = !0, this.forcingFocusOut = !0, t.focus(), window.setTimeout(() => {
      this.forcingFocusOut = !1, this.activateTabGuards();
    });
  }
  isTabGuard(e, t) {
    return e === this.eTopGuard && !t || e === this.eBottomGuard && (t ?? !0);
  }
  setAllowFocus(e) {
    this.allowFocus = e;
  }
}, T0 = class extends T {
  constructor(e) {
    super(), this.comp = e;
  }
  initialiseTabGuard(e) {
    this.eTopGuard = this.createTabGuard("top"), this.eBottomGuard = this.createTabGuard("bottom"), this.eFocusableElement = this.comp.getFocusableElement();
    const { eTopGuard: t, eBottomGuard: i, eFocusableElement: s } = this, o = [t, i], n = {
      setTabIndex: (m) => {
        o.forEach(
          (C) => m != null ? C.setAttribute("tabindex", m) : C.removeAttribute("tabindex")
        );
      }
    };
    this.addTabGuards(t, i);
    const {
      focusTrapActive: r = !1,
      onFocusIn: a,
      onFocusOut: l,
      focusInnerElement: c,
      handleKeyDown: d,
      onTabKeyDown: u,
      shouldStopEventPropagation: h,
      isEmpty: g,
      forceFocusOutWhenTabGuardsAreEmpty: p,
      isFocusableContainer: f
    } = e;
    this.tabGuardCtrl = this.createManagedBean(
      new ym({
        comp: n,
        focusTrapActive: r,
        eTopGuard: t,
        eBottomGuard: i,
        eFocusableElement: s,
        onFocusIn: a,
        onFocusOut: l,
        focusInnerElement: c,
        handleKeyDown: d,
        onTabKeyDown: u,
        shouldStopEventPropagation: h,
        isEmpty: g,
        forceFocusOutWhenTabGuardsAreEmpty: p,
        isFocusableContainer: f
      })
    );
  }
  getTabGuardCtrl() {
    return this.tabGuardCtrl;
  }
  createTabGuard(e) {
    const t = He(this.beans).createElement("div"), i = e === "top" ? vs.TAB_GUARD_TOP : vs.TAB_GUARD_BOTTOM;
    return t.classList.add(vs.TAB_GUARD, i), Vi(t, "presentation"), t;
  }
  addTabGuards(e, t) {
    const i = this.eFocusableElement;
    i.insertAdjacentElement("afterbegin", e), i.insertAdjacentElement("beforeend", t);
  }
  removeAllChildrenExceptTabGuards() {
    const e = [this.eTopGuard, this.eBottomGuard];
    ct(this.comp.getFocusableElement()), this.addTabGuards(...e);
  }
  forceFocusOutOfContainer(e = !1) {
    this.tabGuardCtrl.forceFocusOutOfContainer(e);
  }
  appendChild(e, t, i) {
    lc(t) || (t = t.getGui());
    const { eBottomGuard: s } = this;
    s ? s.insertAdjacentElement("beforebegin", t) : e(t, i);
  }
  destroy() {
    const { eTopGuard: e, eBottomGuard: t } = this;
    Xt(e), Xt(t), super.destroy();
  }
}, M0 = class extends pe {
  initialiseTabGuard(t) {
    this.tabGuardFeature = this.createManagedBean(new T0(this)), this.tabGuardFeature.initialiseTabGuard(t);
  }
  forceFocusOutOfContainer(t = !1) {
    this.tabGuardFeature.forceFocusOutOfContainer(t);
  }
  appendChild(t, i) {
    this.tabGuardFeature.appendChild(super.appendChild.bind(this), t, i);
  }
}, Si = class {
  constructor(e, t = !1) {
    this.DOUBLE_TAP_MILLIS = 500, this.destroyFuncs = [], this.touching = !1, this.localEventService = new Oi(), this.preventMouseClick = t;
    const i = this.onTouchStart.bind(this), s = this.onTouchMove.bind(this), o = this.onTouchEnd.bind(this);
    e.addEventListener("touchstart", i, { passive: !0 }), e.addEventListener("touchmove", s, { passive: !0 }), e.addEventListener("touchend", o, { passive: !1 }), this.destroyFuncs.push(() => {
      e.removeEventListener("touchstart", i, { passive: !0 }), e.removeEventListener("touchmove", s, { passive: !0 }), e.removeEventListener("touchend", o, { passive: !1 });
    });
  }
  getActiveTouch(e) {
    for (let t = 0; t < e.length; t++)
      if (e[t].identifier === this.touchStart.identifier)
        return e[t];
    return null;
  }
  addEventListener(e, t) {
    this.localEventService.addEventListener(e, t);
  }
  removeEventListener(e, t) {
    this.localEventService.removeEventListener(e, t);
  }
  onTouchStart(e) {
    if (this.touching)
      return;
    this.touchStart = e.touches[0], this.touching = !0, this.moved = !1;
    const t = this.touchStart;
    window.setTimeout(() => {
      const i = this.touchStart === t;
      if (this.touching && i && !this.moved) {
        this.moved = !0;
        const s = {
          type: "longTap",
          touchStart: this.touchStart,
          touchEvent: e
        };
        this.localEventService.dispatchEvent(s);
      }
    }, 500);
  }
  onTouchMove(e) {
    if (!this.touching)
      return;
    const t = this.getActiveTouch(e.touches);
    if (!t)
      return;
    !Zf(t, this.touchStart, 4) && (this.moved = !0);
  }
  onTouchEnd(e) {
    if (this.touching) {
      if (!this.moved) {
        const t = {
          type: "tap",
          touchStart: this.touchStart
        };
        this.localEventService.dispatchEvent(t), this.checkForDoubleTap();
      }
      this.preventMouseClick && e.cancelable && e.preventDefault(), this.touching = !1;
    }
  }
  checkForDoubleTap() {
    const e = Date.now();
    if (this.lastTapTime && this.lastTapTime > 0)
      if (e - this.lastTapTime > this.DOUBLE_TAP_MILLIS) {
        const i = {
          type: "doubleTap",
          touchStart: this.touchStart
        };
        this.localEventService.dispatchEvent(i), this.lastTapTime = null;
      } else
        this.lastTapTime = e;
    else
      this.lastTapTime = e;
  }
  destroy() {
    this.destroyFuncs.forEach((e) => e());
  }
}, A0 = class {
  constructor(e) {
    this.tickingInterval = null, this.onScrollCallback = null, this.scrollContainer = e.scrollContainer, this.scrollHorizontally = e.scrollAxis.indexOf("x") !== -1, this.scrollVertically = e.scrollAxis.indexOf("y") !== -1, this.scrollByTick = e.scrollByTick != null ? e.scrollByTick : 20, e.onScrollCallback && (this.onScrollCallback = e.onScrollCallback), this.scrollVertically && (this.getVerticalPosition = e.getVerticalPosition, this.setVerticalPosition = e.setVerticalPosition), this.scrollHorizontally && (this.getHorizontalPosition = e.getHorizontalPosition, this.setHorizontalPosition = e.setHorizontalPosition), this.shouldSkipVerticalScroll = e.shouldSkipVerticalScroll || (() => !1), this.shouldSkipHorizontalScroll = e.shouldSkipHorizontalScroll || (() => !1);
  }
  check(e, t = !1) {
    const i = t || this.shouldSkipVerticalScroll();
    if (i && this.shouldSkipHorizontalScroll())
      return;
    const s = this.scrollContainer.getBoundingClientRect(), o = this.scrollByTick;
    this.tickLeft = e.clientX < s.left + o, this.tickRight = e.clientX > s.right - o, this.tickUp = e.clientY < s.top + o && !i, this.tickDown = e.clientY > s.bottom - o && !i, this.tickLeft || this.tickRight || this.tickUp || this.tickDown ? this.ensureTickingStarted() : this.ensureCleared();
  }
  ensureTickingStarted() {
    this.tickingInterval === null && (this.tickingInterval = window.setInterval(this.doTick.bind(this), 100), this.tickCount = 0);
  }
  doTick() {
    this.tickCount++;
    const e = this.tickCount > 20 ? 200 : this.tickCount > 10 ? 80 : 40;
    if (this.scrollVertically) {
      const t = this.getVerticalPosition();
      this.tickUp && this.setVerticalPosition(t - e), this.tickDown && this.setVerticalPosition(t + e);
    }
    if (this.scrollHorizontally) {
      const t = this.getHorizontalPosition();
      this.tickLeft && this.setHorizontalPosition(t - e), this.tickRight && this.setHorizontalPosition(t + e);
    }
    this.onScrollCallback && this.onScrollCallback();
  }
  ensureCleared() {
    this.tickingInterval && (window.clearInterval(this.tickingInterval), this.tickingInterval = null);
  }
}, bm = class {
  constructor(e = "javascript") {
    this.frameworkName = e, this.renderingEngine = "vanilla", this.batchFrameworkComps = !1, this.wrapIncoming = (t) => t(), this.wrapOutgoing = (t) => t(), this.baseDocLink = `${Zp}/${this.frameworkName}-data-grid`, YR(this.baseDocLink);
  }
  setInterval(e, t) {
    return new re((i) => {
      i(window.setInterval(e, t));
    });
  }
  // for Vanilla JS, we just add the event to the element
  addEventListener(e, t, i, s) {
    let o = {};
    if (typeof s == "object" ? o = s : typeof s == "boolean" && (o = { capture: s }), o.passive == null) {
      const n = vf(t);
      n != null && (o.passive = n);
    }
    e.addEventListener(t, i, o);
  }
  frameworkComponent(e) {
    return null;
  }
  isFrameworkComponent(e) {
    return !1;
  }
  getDocLink(e) {
    return `${this.baseDocLink}${e ? `/${e}` : ""}`;
  }
};
function I0(e) {
  return {
    beanName: "gridApi",
    bean: e.getBean("apiFunctionSvc").api
  };
}
var k0 = [
  // Validate license first
  "licenseManager",
  // core beans only
  "environment",
  "eventSvc",
  "gos",
  "paginationAutoPageSizeSvc",
  "apiFunctionSvc",
  "gridApi",
  "registry",
  "agCompUtils",
  "userCompFactory",
  "rowContainerHeight",
  "horizontalResizeSvc",
  "localeSvc",
  "pinnedRowModel",
  "dragSvc",
  "colGroupSvc",
  "visibleCols",
  "popupSvc",
  "selectionSvc",
  "colFilter",
  "quickFilter",
  "filterManager",
  "colModel",
  "headerNavigation",
  "pageBounds",
  "pagination",
  "pageBoundsListener",
  "rowSpanSvc",
  "stickyRowSvc",
  "rowRenderer",
  "expressionSvc",
  "alignedGridsSvc",
  "navigation",
  "valueCache",
  "valueSvc",
  "autoWidthCalc",
  "filterMenuFactory",
  "dragAndDrop",
  "focusSvc",
  "cellNavigation",
  "cellStyles",
  "scrollVisibleSvc",
  "sortSvc",
  "colHover",
  "colAnimation",
  "autoColSvc",
  "selectionColSvc",
  "changeDetectionSvc",
  "animationFrameSvc",
  "undoRedo",
  "colDefFactory",
  "rowStyleSvc",
  "rowNodeBlockLoader",
  "rowNodeSorter",
  "ctrlsSvc",
  "pinnedCols",
  "dataTypeSvc",
  "syncSvc",
  "overlays",
  "stateSvc",
  "expansionSvc",
  "apiEventSvc",
  "ariaAnnounce",
  "menuSvc",
  "colMoves",
  "colAutosize",
  "colFlex",
  "colResize",
  "pivotColsSvc",
  "valueColsSvc",
  "rowGroupColsSvc",
  "funcColsSvc",
  "colNames",
  "colViewport",
  "pivotResultCols",
  "showRowGroupCols",
  "validation"
  // Have validations run last
], Yu = Object.fromEntries(
  k0.map((e, t) => [e, t])
);
function L0(e, t) {
  const i = (e.beanName ? Yu[e.beanName] : void 0) ?? Number.MAX_SAFE_INTEGER, s = (t.beanName ? Yu[t.beanName] : void 0) ?? Number.MAX_SAFE_INTEGER;
  return i - s;
}
function O0(e, t) {
  return e?.beanName === "gridDestroySvc" ? -1 : t?.beanName === "gridDestroySvc" ? 1 : 0;
}
var V0 = class extends T {
  constructor() {
    super(...arguments), this.additionalFocusableContainers = /* @__PURE__ */ new Set();
  }
  setComp(e, t, i) {
    this.view = e, this.eGridHostDiv = t, this.eGui = i, this.eGui.setAttribute("grid-id", this.beans.context.getGridId());
    const { dragAndDrop: s, ctrlsSvc: o } = this.beans;
    s?.registerGridDropTarget(() => this.eGui, this), em(this.gos, t), this.createManagedBean(new Sc(this.view)), this.view.setRtlClass(this.gos.get("enableRtl") ? "ag-rtl" : "ag-ltr");
    const n = Qt(this.beans, this.eGridHostDiv, this.onGridSizeChanged.bind(this));
    this.addDestroyFunc(() => n()), o.register("gridCtrl", this);
  }
  isDetailGrid() {
    return Xf(this.getGui())?.getAttribute("row-id")?.startsWith("detail") || !1;
  }
  getOptionalSelectors() {
    const e = this.beans;
    return {
      paginationSelector: e.pagination?.getPaginationSelector(),
      gridHeaderDropZonesSelector: e.registry?.getSelector("AG-GRID-HEADER-DROP-ZONES"),
      sideBarSelector: e.sideBar?.getSelector(),
      statusBarSelector: e.registry?.getSelector("AG-STATUS-BAR"),
      watermarkSelector: e.licenseManager?.getWatermarkSelector()
    };
  }
  onGridSizeChanged() {
    this.eventSvc.dispatchEvent({
      type: "gridSizeChanged",
      clientWidth: this.eGridHostDiv.clientWidth,
      clientHeight: this.eGridHostDiv.clientHeight
    });
  }
  destroyGridUi() {
    this.view.destroyGridUi();
  }
  getGui() {
    return this.eGui;
  }
  setResizeCursor(e) {
    const { view: t } = this;
    if (e === !1)
      t.setCursor(null);
    else {
      const i = e === 1 ? "ew-resize" : "ns-resize";
      t.setCursor(i);
    }
  }
  disableUserSelect(e) {
    this.view.setUserSelect(e ? "none" : null);
  }
  focusNextInnerContainer(e) {
    const t = this.getFocusableContainers(), { indexWithFocus: i, nextIndex: s } = this.getNextFocusableIndex(t, e);
    if (s < 0 || s >= t.length)
      return !1;
    if (s === 0) {
      if (i > 0) {
        const { visibleCols: o, focusSvc: n } = this.beans, r = o.allCols, a = ue(r);
        if (n.focusGridView({ column: a, backwards: !0 }))
          return !0;
      }
      return !1;
    }
    return this.focusContainer(t[s], e);
  }
  focusInnerElement(e) {
    const t = this.gos.getCallback("focusGridInnerElement");
    if (t && t({ fromBottom: !!e }))
      return !0;
    const i = this.getFocusableContainers(), { focusSvc: s, visibleCols: o } = this.beans, n = o.allCols;
    if (e) {
      if (i.length > 1)
        return this.focusContainer(ue(i), e);
      const r = ue(n);
      if (s.focusGridView({ column: r, backwards: e }))
        return !0;
    }
    if (this.gos.get("headerHeight") === 0 || ki(this.beans)) {
      if (s.focusGridView({ column: n[0], backwards: e }))
        return !0;
      for (let r = 1; r < i.length; r++)
        if (Wi(i[r].getGui(), e))
          return !0;
      return !1;
    }
    return s.focusFirstHeader();
  }
  forceFocusOutOfContainer(e = !1) {
    this.view.forceFocusOutOfContainer(e);
  }
  addFocusableContainer(e) {
    this.additionalFocusableContainers.add(e);
  }
  removeFocusableContainer(e) {
    this.additionalFocusableContainers.delete(e);
  }
  allowFocusForNextCoreContainer(e) {
    const t = this.view.getFocusableContainers(), { nextIndex: i, indexWithFocus: s } = this.getNextFocusableIndex(t, e);
    if (s === -1 || i < 0 || i >= t.length)
      return;
    const o = t[i];
    o.setAllowFocus?.(!0), setTimeout(() => {
      o.setAllowFocus?.(!1);
    });
  }
  isFocusable() {
    const e = this.beans;
    return !hr(e) || !ki(e) || !!e.sideBar?.comp?.isDisplayed();
  }
  getNextFocusableIndex(e, t) {
    const i = Fe(this.beans), s = e.findIndex((n) => n.getGui().contains(i)), o = s + (t ? -1 : 1);
    return {
      indexWithFocus: s,
      nextIndex: o
    };
  }
  focusContainer(e, t) {
    e.setAllowFocus?.(!0);
    const i = Wi(e.getGui(), t, !1, !0);
    return e.setAllowFocus?.(!1), i;
  }
  getFocusableContainers() {
    return [...this.view.getFocusableContainers(), ...this.additionalFocusableContainers];
  }
  destroy() {
    this.additionalFocusableContainers.clear(), super.destroy();
  }
}, J = (e, t) => {
  for (const i of Object.keys(t))
    t[i] = e;
  return t;
}, qu = {
  dispatchEvent: "CommunityCore",
  // this is always registered
  ...J("CommunityCore", {
    destroy: 0,
    getGridId: 0,
    getGridOption: 0,
    isDestroyed: 0,
    setGridOption: 0,
    updateGridOptions: 0,
    isModuleRegistered: 0
  }),
  ...J("GridState", {
    getState: 0,
    setState: 0
  }),
  ...J("SharedRowSelection", {
    setNodesSelected: 0,
    selectAll: 0,
    deselectAll: 0,
    selectAllFiltered: 0,
    deselectAllFiltered: 0,
    selectAllOnCurrentPage: 0,
    deselectAllOnCurrentPage: 0,
    getSelectedNodes: 0,
    getSelectedRows: 0
  }),
  ...J("RowApi", {
    redrawRows: 0,
    setRowNodeExpanded: 0,
    getRowNode: 0,
    addRenderedRowListener: 0,
    getRenderedNodes: 0,
    forEachNode: 0,
    getFirstDisplayedRowIndex: 0,
    getLastDisplayedRowIndex: 0,
    getDisplayedRowAtIndex: 0,
    getDisplayedRowCount: 0
  }),
  ...J("ScrollApi", {
    getVerticalPixelRange: 0,
    getHorizontalPixelRange: 0,
    ensureColumnVisible: 0,
    ensureIndexVisible: 0,
    ensureNodeVisible: 0
  }),
  ...J("KeyboardNavigation", {
    getFocusedCell: 0,
    clearFocusedCell: 0,
    setFocusedCell: 0,
    tabToNextCell: 0,
    tabToPreviousCell: 0,
    setFocusedHeader: 0
  }),
  ...J("EventApi", {
    addEventListener: 0,
    addGlobalListener: 0,
    removeEventListener: 0,
    removeGlobalListener: 0
  }),
  ...J("ValueCache", {
    expireValueCache: 0
  }),
  ...J("CellApi", {
    getCellValue: 0
  }),
  ...J("SharedMenu", {
    showColumnMenu: 0,
    hidePopupMenu: 0
  }),
  ...J("Sort", {
    onSortChanged: 0
  }),
  ...J("PinnedRow", {
    getPinnedTopRowCount: 0,
    getPinnedBottomRowCount: 0,
    getPinnedTopRow: 0,
    getPinnedBottomRow: 0,
    forEachPinnedRow: 0
  }),
  ...J("Overlay", {
    showLoadingOverlay: 0,
    showNoRowsOverlay: 0,
    hideOverlay: 0
  }),
  ...J("RenderApi", {
    setGridAriaProperty: 0,
    refreshCells: 0,
    refreshHeader: 0,
    isAnimationFrameQueueEmpty: 0,
    flushAllAnimationFrames: 0,
    getSizesForCurrentTheme: 0,
    getCellRendererInstances: 0
  }),
  ...J("HighlightChanges", {
    flashCells: 0
  }),
  ...J("RowDrag", {
    addRowDropZone: 0,
    removeRowDropZone: 0,
    getRowDropZoneParams: 0,
    getRowDropPositionIndicator: 0,
    setRowDropPositionIndicator: 0
  }),
  ...J("ColumnApi", {
    getColumnDefs: 0,
    getColumnDef: 0,
    getDisplayNameForColumn: 0,
    getColumn: 0,
    getColumns: 0,
    applyColumnState: 0,
    getColumnState: 0,
    resetColumnState: 0,
    isPinning: 0,
    isPinningLeft: 0,
    isPinningRight: 0,
    getDisplayedColAfter: 0,
    getDisplayedColBefore: 0,
    setColumnsVisible: 0,
    setColumnsPinned: 0,
    getAllGridColumns: 0,
    getDisplayedLeftColumns: 0,
    getDisplayedCenterColumns: 0,
    getDisplayedRightColumns: 0,
    getAllDisplayedColumns: 0,
    getAllDisplayedVirtualColumns: 0
  }),
  ...J("ColumnAutoSize", {
    sizeColumnsToFit: 0,
    autoSizeColumns: 0,
    autoSizeAllColumns: 0
  }),
  ...J("ColumnGroup", {
    setColumnGroupOpened: 0,
    getColumnGroup: 0,
    getProvidedColumnGroup: 0,
    getDisplayNameForColumnGroup: 0,
    getColumnGroupState: 0,
    setColumnGroupState: 0,
    resetColumnGroupState: 0,
    getLeftDisplayedColumnGroups: 0,
    getCenterDisplayedColumnGroups: 0,
    getRightDisplayedColumnGroups: 0,
    getAllDisplayedColumnGroups: 0
  }),
  ...J("ColumnMove", {
    moveColumnByIndex: 0,
    moveColumns: 0
  }),
  ...J("ColumnResize", {
    setColumnWidths: 0
  }),
  ...J("ColumnHover", {
    isColumnHovered: 0
  }),
  ...J("EditCore", {
    getCellEditorInstances: 0,
    getEditingCells: 0,
    stopEditing: 0,
    startEditingCell: 0,
    isEditing: 0,
    validateEdit: 0
  }),
  ...J("BatchEdit", {
    startBatchEdit: 0,
    cancelBatchEdit: 0,
    commitBatchEdit: 0,
    isBatchEditing: 0
  }),
  ...J("UndoRedoEdit", {
    undoCellEditing: 0,
    redoCellEditing: 0,
    getCurrentUndoSize: 0,
    getCurrentRedoSize: 0
  }),
  ...J("FilterCore", {
    isAnyFilterPresent: 0,
    onFilterChanged: 0
  }),
  ...J("ColumnFilter", {
    isColumnFilterPresent: 0,
    getColumnFilterInstance: 0,
    destroyFilter: 0,
    setFilterModel: 0,
    getFilterModel: 0,
    getColumnFilterModel: 0,
    setColumnFilterModel: 0,
    showColumnFilter: 0,
    hideColumnFilter: 0,
    getColumnFilterHandler: 0,
    doFilterAction: 0
  }),
  ...J("QuickFilter", {
    isQuickFilterPresent: 0,
    getQuickFilter: 0,
    resetQuickFilter: 0
  }),
  ...J("Find", {
    findGetActiveMatch: 0,
    findGetTotalMatches: 0,
    findGoTo: 0,
    findNext: 0,
    findPrevious: 0,
    findGetNumMatches: 0,
    findGetParts: 0,
    findClearActive: 0,
    findRefresh: 0
  }),
  ...J("Pagination", {
    paginationIsLastPageFound: 0,
    paginationGetPageSize: 0,
    paginationGetCurrentPage: 0,
    paginationGetTotalPages: 0,
    paginationGetRowCount: 0,
    paginationGoToNextPage: 0,
    paginationGoToPreviousPage: 0,
    paginationGoToFirstPage: 0,
    paginationGoToLastPage: 0,
    paginationGoToPage: 0
  }),
  ...J("CsrmSsrmSharedApi", {
    expandAll: 0,
    collapseAll: 0,
    onRowHeightChanged: 0
  }),
  ...J("SsrmInfiniteSharedApi", {
    setRowCount: 0,
    getCacheBlockState: 0,
    isLastRowIndexKnown: 0
  }),
  ...J("ClientSideRowModelApi", {
    onGroupExpandedOrCollapsed: 0,
    refreshClientSideRowModel: 0,
    isRowDataEmpty: 0,
    forEachLeafNode: 0,
    forEachNodeAfterFilter: 0,
    forEachNodeAfterFilterAndSort: 0,
    resetRowHeights: 0,
    applyTransaction: 0,
    applyTransactionAsync: 0,
    flushAsyncTransactions: 0,
    getBestCostNodeSelection: 0
  }),
  ...J("CsvExport", {
    getDataAsCsv: 0,
    exportDataAsCsv: 0
  }),
  ...J("InfiniteRowModel", {
    refreshInfiniteCache: 0,
    purgeInfiniteCache: 0,
    getInfiniteRowCount: 0
  }),
  ...J("AdvancedFilter", {
    getAdvancedFilterModel: 0,
    setAdvancedFilterModel: 0,
    showAdvancedFilterBuilder: 0,
    hideAdvancedFilterBuilder: 0
  }),
  ...J("IntegratedCharts", {
    getChartModels: 0,
    getChartRef: 0,
    getChartImageDataURL: 0,
    downloadChart: 0,
    openChartToolPanel: 0,
    closeChartToolPanel: 0,
    createRangeChart: 0,
    createPivotChart: 0,
    createCrossFilterChart: 0,
    updateChart: 0,
    restoreChart: 0
  }),
  ...J("Clipboard", {
    copyToClipboard: 0,
    cutToClipboard: 0,
    copySelectedRowsToClipboard: 0,
    copySelectedRangeToClipboard: 0,
    copySelectedRangeDown: 0,
    pasteFromClipboard: 0
  }),
  ...J("ExcelExport", {
    getDataAsExcel: 0,
    exportDataAsExcel: 0,
    getSheetDataForExcel: 0,
    getMultipleSheetsAsExcel: 0,
    exportMultipleSheetsAsExcel: 0
  }),
  ...J("SharedMasterDetail", {
    addDetailGridInfo: 0,
    removeDetailGridInfo: 0,
    getDetailGridInfo: 0,
    forEachDetailGridInfo: 0
  }),
  ...J("ContextMenu", {
    showContextMenu: 0
  }),
  ...J("ColumnMenu", {
    showColumnChooser: 0,
    hideColumnChooser: 0
  }),
  ...J("CellSelection", {
    getCellRanges: 0,
    addCellRange: 0,
    clearRangeSelection: 0,
    clearCellSelection: 0
  }),
  ...J("SharedRowGrouping", {
    setRowGroupColumns: 0,
    removeRowGroupColumns: 0,
    addRowGroupColumns: 0,
    getRowGroupColumns: 0,
    moveRowGroupColumn: 0
  }),
  ...J("SharedAggregation", {
    addAggFuncs: 0,
    clearAggFuncs: 0,
    setColumnAggFunc: 0
  }),
  ...J("SharedPivot", {
    isPivotMode: 0,
    getPivotResultColumn: 0,
    setValueColumns: 0,
    getValueColumns: 0,
    removeValueColumns: 0,
    addValueColumns: 0,
    setPivotColumns: 0,
    removePivotColumns: 0,
    addPivotColumns: 0,
    getPivotColumns: 0,
    setPivotResultColumns: 0,
    getPivotResultColumns: 0
  }),
  ...J("ServerSideRowModelApi", {
    getServerSideSelectionState: 0,
    setServerSideSelectionState: 0,
    applyServerSideTransaction: 0,
    applyServerSideTransactionAsync: 0,
    applyServerSideRowData: 0,
    retryServerSideLoads: 0,
    flushServerSideAsyncTransactions: 0,
    refreshServerSide: 0,
    getServerSideGroupLevelState: 0
  }),
  ...J("SideBar", {
    isSideBarVisible: 0,
    setSideBarVisible: 0,
    setSideBarPosition: 0,
    openToolPanel: 0,
    closeToolPanel: 0,
    getOpenedToolPanel: 0,
    refreshToolPanel: 0,
    isToolPanelShowing: 0,
    getToolPanelInstance: 0,
    getSideBar: 0
  }),
  ...J("StatusBar", {
    getStatusPanel: 0
  })
}, ta = {
  isDestroyed: () => !0,
  destroy() {
  },
  preConstruct() {
  },
  postConstruct() {
  },
  preWireBeans() {
  },
  wireBeans() {
  }
}, G0 = (e, t) => e.eventSvc.dispatchEvent(t), Rm = class {
};
Reflect.defineProperty(Rm, "name", { value: "GridApi" });
var H0 = class extends T {
  constructor() {
    super(), this.beanName = "apiFunctionSvc", this.api = new Rm(), this.fns = {
      ...ta,
      // dispatchEvent is used by frameworks, also used by aligned grids to identify a grid api instance
      dispatchEvent: G0
    }, this.preDestroyLink = "";
    const { api: e } = this;
    for (const t of Object.keys(qu))
      e[t] = this.makeApi(t)[t];
  }
  postConstruct() {
    this.preDestroyLink = this.beans.frameworkOverrides.getDocLink("grid-lifecycle/#grid-pre-destroyed");
  }
  addFunction(e, t) {
    const { fns: i, beans: s } = this;
    i !== ta && (i[e] = s?.validation?.validateApiFunction(e, t) ?? t);
  }
  makeApi(e) {
    return {
      [e]: (...t) => {
        const {
          beans: i,
          fns: { [e]: s }
        } = this;
        return s ? s(i, ...t) : this.apiNotFound(e);
      }
    };
  }
  apiNotFound(e) {
    const { beans: t, gos: i, preDestroyLink: s } = this;
    if (!t)
      B(26, { fnName: e, preDestroyLink: s });
    else {
      const o = qu[e];
      i.assertModuleRegistered(o, `api.${e}`) && B(27, { fnName: e, module: o });
    }
  }
  destroy() {
    super.destroy(), this.fns = ta, this.beans = null;
  }
};
function B0(e) {
  return e.context.getGridId();
}
function N0(e) {
  e.gridDestroySvc.destroy();
}
function W0(e) {
  return e.gridDestroySvc.destroyCalled;
}
function z0(e, t) {
  return e.gos.get(t);
}
function _0(e, t, i) {
  xm(e, { [t]: i });
}
function xm(e, t) {
  e.gos.updateGridOptions({ options: t });
}
function U0(e, t) {
  const i = t.replace(/Module$/, "");
  return e.gos.isModuleRegistered(i);
}
var j0 = { tag: "div", cls: "ag-drag-handle ag-row-drag", attrs: { draggable: "true" } }, $0 = class extends pe {
  constructor(e, t, i) {
    super(j0), this.rowNode = e, this.column = t, this.eCell = i;
  }
  postConstruct() {
    this.getGui().appendChild(Ct("rowDrag", this.beans, null)), this.addGuiEventListener("mousedown", (t) => {
      t.stopPropagation();
    }), this.addDragSource(), this.checkVisibility();
  }
  addDragSource() {
    this.addGuiEventListener("dragstart", this.onDragStart.bind(this));
  }
  onDragStart(e) {
    const { rowNode: t, column: i, eCell: s, gos: o } = this, n = i.getColDef().dndSourceOnRowDrag, r = e.dataTransfer;
    if (r.setDragImage(s, 0, 0), n) {
      const a = Z(o, {
        rowNode: t,
        dragEvent: e
      });
      n(a);
    } else
      try {
        const a = JSON.stringify(t.data);
        r.setData("application/json", a), r.setData("text/plain", a);
      } catch {
      }
  }
  checkVisibility() {
    const e = this.column.isDndSource(this.rowNode);
    this.setDisplayed(e);
  }
};
function K0(e, t) {
  e.rowDragSvc?.rowDragFeature?.addRowDropZone(t);
}
function Y0(e, t) {
  const i = e.dragAndDrop?.findExternalZone(t);
  i && e.dragAndDrop?.removeDropTarget(i);
}
function q0(e, t) {
  return e.rowDragSvc?.rowDragFeature?.getRowDropZone(t);
}
function X0(e) {
  const t = e.rowDropHighlightSvc;
  return t ? { row: t.row, dropIndicatorPosition: t.position } : { row: null, dropIndicatorPosition: "none" };
}
function Z0(e, t) {
  const i = e.rowDropHighlightSvc;
  if (!i)
    return;
  const s = t?.row;
  let o = t?.dropIndicatorPosition;
  o !== "above" && o !== "below" && o !== "inside" && (o = "none");
  const n = s?.rowIndex;
  n == null || o === "none" ? i.clear() : i.set(s, o);
}
var Q0 = class extends T {
  constructor() {
    super(...arguments), this.beanName = "horizontalResizeSvc";
  }
  addResizeBar(e) {
    const t = {
      dragStartPixels: e.dragStartPixels || 0,
      eElement: e.eResizeBar,
      onDragStart: this.onDragStart.bind(this, e),
      onDragStop: this.onDragStop.bind(this, e),
      onDragging: this.onDragging.bind(this, e),
      onDragCancel: this.onDragStop.bind(this, e),
      includeTouch: !0,
      stopPropagationForTouch: !0
    }, { dragSvc: i } = this.beans;
    return i.addDragSource(t), () => i.removeDragSource(t);
  }
  onDragStart(e, t) {
    this.dragStartX = t.clientX, this.setResizeIcons();
    const i = t instanceof MouseEvent && t.shiftKey === !0;
    e.onResizeStart(i);
  }
  setResizeIcons() {
    const e = this.beans.ctrlsSvc.get("gridCtrl");
    e.setResizeCursor(
      1
      /* Horizontal */
    ), e.disableUserSelect(!0);
  }
  onDragStop(e) {
    e.onResizeEnd(this.resizeAmount), this.resetIcons();
  }
  resetIcons() {
    const e = this.beans.ctrlsSvc.get("gridCtrl");
    e.setResizeCursor(!1), e.disableUserSelect(!1);
  }
  onDragging(e, t) {
    this.resizeAmount = t.clientX - this.dragStartX, e.onResizing(this.resizeAmount);
  }
}, J0 = {
  tag: "div",
  cls: "ag-drag-handle ag-row-drag",
  attrs: { "aria-hidden": "true" }
}, eD = class extends pe {
  constructor(e, t, i, s, o, n) {
    super(), this.cellValueFn = e, this.rowNode = t, this.column = i, this.customGui = s, this.dragStartPixels = o, this.suppressVisibilityChange = n, this.dragSource = null;
  }
  isCustomGui() {
    return this.customGui != null;
  }
  postConstruct() {
    const { beans: e, rowNode: t, column: i, gos: s } = this;
    if (this.customGui ? this.setDragElement(this.customGui, this.dragStartPixels) : (this.setTemplate(J0), this.getGui().appendChild(Ct("rowDrag", e, null)), this.addDragSource()), !this.suppressVisibilityChange) {
      const o = s.get("rowDragManaged") ? new iD(this, t, i) : new tD(this, t, i);
      this.createManagedBean(o, this.beans.context);
    }
  }
  setDragElement(e, t) {
    this.setTemplateFromElement(e, void 0, void 0, !0), this.addDragSource(t);
  }
  getSelectedNodes() {
    const e = this.rowNode;
    if (!this.gos.get("rowDragMultiRow"))
      return [e];
    const i = this.beans.selectionSvc?.getSelectedNodes() ?? [];
    return i.indexOf(e) !== -1 ? i : [e];
  }
  getDragItem() {
    const { column: e, rowNode: t } = this;
    return {
      rowNode: t,
      rowNodes: this.getSelectedNodes(),
      columns: e ? [e] : void 0,
      defaultTextValue: this.cellValueFn()
    };
  }
  getRowDragText(e) {
    if (e) {
      const t = e.getColDef();
      if (t.rowDragText)
        return t.rowDragText;
    }
    return this.gos.get("rowDragText");
  }
  addDragSource(e = 4) {
    if (this.dragSource && this.removeDragSource(), this.gos.get("rowDragManaged") && this.rowNode.footer)
      return;
    const t = this.getGui();
    this.gos.get("enableCellTextSelection") && (this.removeMouseDownListener(), this.mouseDownListener = this.addManagedElementListeners(t, {
      mousedown: (s) => {
        s?.preventDefault();
      }
    })[0]);
    const i = this.getLocaleTextFunc();
    this.dragSource = {
      type: 2,
      eElement: t,
      dragItemName: () => {
        const s = this.getDragItem(), o = s.rowNodes?.length || 1, n = this.getRowDragText(this.column);
        return n ? n(s, o) : o === 1 ? this.cellValueFn() : `${o} ${i("rowDragRows", "rows")}`;
      },
      getDragItem: () => this.getDragItem(),
      dragStartPixels: e,
      dragSourceDomDataKey: this.gos.getDomDataKey()
    }, this.beans.dragAndDrop.addDragSource(this.dragSource, !0);
  }
  destroy() {
    this.removeDragSource(), this.removeMouseDownListener(), super.destroy();
  }
  removeDragSource() {
    this.dragSource && (this.beans.dragAndDrop.removeDragSource(this.dragSource), this.dragSource = null);
  }
  removeMouseDownListener() {
    this.mouseDownListener && (this.mouseDownListener(), this.mouseDownListener = void 0);
  }
}, Fm = class extends T {
  constructor(e, t, i) {
    super(), this.parent = e, this.rowNode = t, this.column = i;
  }
  setDisplayedOrVisible(e, t = !1) {
    const i = { skipAriaHidden: !0 };
    if (e)
      this.parent.setDisplayed(!1, i);
    else {
      let s = !t, o = !1;
      const { column: n, rowNode: r, parent: a } = this;
      if (n) {
        const l = n.getColDef().rowDrag;
        o = typeof l == "function", s = (t ? !!l : n.isRowDrag(r)) || a.isCustomGui();
      }
      o ? (a.setDisplayed(!0, i), a.setVisible(s && !t, i)) : (a.setDisplayed(s, i), a.setVisible(!t, i));
    }
  }
}, tD = class extends Fm {
  postConstruct() {
    this.addManagedPropertyListener("suppressRowDrag", this.onSuppressRowDrag.bind(this));
    const e = this.workOutVisibility.bind(this);
    this.addManagedListeners(this.rowNode, {
      dataChanged: e,
      cellChanged: e
    }), this.addManagedListeners(this.beans.eventSvc, { newColumnsLoaded: e }), this.workOutVisibility();
  }
  onSuppressRowDrag() {
    this.workOutVisibility();
  }
  workOutVisibility() {
    const e = this.gos.get("suppressRowDrag");
    this.setDisplayedOrVisible(e);
  }
}, iD = class extends Fm {
  postConstruct() {
    const e = this.workOutVisibility.bind(this);
    this.addManagedListeners(this.beans.eventSvc, {
      sortChanged: e,
      filterChanged: e,
      columnRowGroupChanged: e,
      newColumnsLoaded: e
    }), this.addManagedListeners(this.rowNode, {
      dataChanged: e,
      cellChanged: e
    }), this.addManagedPropertyListener("suppressRowDrag", this.onSuppressRowDrag.bind(this)), this.workOutVisibility();
  }
  onSuppressRowDrag() {
    this.workOutVisibility();
  }
  workOutVisibility() {
    const { rowDragSvc: e, dragAndDrop: t, gos: i } = this.beans, s = e.rowDragFeature, o = s && s.shouldPreventRowMove(), n = i.get("suppressRowDrag"), r = t.hasExternalDropZones(), a = o && !r || n;
    this.setDisplayedOrVisible(a, this.rowNode.footer);
  }
}, Po = class {
  constructor(e, t) {
    this.active = !0, this.nodeIdsToColumns = {}, this.mapToItems = {}, this.keepingColumns = e, this.pathRoot = {
      rowNode: t,
      children: null
    }, this.mapToItems[t.id] = this.pathRoot;
  }
  depthFirstSearchChangedPath(e, t) {
    const { rowNode: i, children: s } = e;
    if (s)
      for (let o = 0; o < s.length; ++o)
        this.depthFirstSearchChangedPath(s[o], t);
    t(i);
  }
  depthFirstSearchEverything(e, t, i) {
    const s = e.childrenAfterGroup;
    if (s)
      for (let o = 0, n = s.length; o < n; ++o) {
        const r = s[o];
        r.childrenAfterGroup ? this.depthFirstSearchEverything(r, t, i) : i && t(r);
      }
    t(e);
  }
  // traverseLeafNodes -> used when NOT doing changed path, ie traversing everything. the callback
  // will be called for child nodes in addition to parent nodes.
  forEachChangedNodeDepthFirst(e, t = !1, i = !1) {
    this.active && !i ? this.depthFirstSearchChangedPath(this.pathRoot, e) : this.depthFirstSearchEverything(this.pathRoot.rowNode, e, t);
  }
  executeFromRootNode(e) {
    e(this.pathRoot.rowNode);
  }
  createPathItems(e) {
    let t = e, i = 0;
    for (; !this.mapToItems[t.id]; ) {
      const s = {
        rowNode: t,
        children: null
      };
      this.mapToItems[t.id] = s, i++, t = t.parent;
    }
    return i;
  }
  populateColumnsMap(e, t) {
    if (!this.keepingColumns || !t)
      return;
    let i = e;
    for (; i; )
      this.nodeIdsToColumns[i.id] || (this.nodeIdsToColumns[i.id] = {}), t.forEach((s) => this.nodeIdsToColumns[i.id][s.getId()] = !0), i = i.parent;
  }
  linkPathItems(e, t) {
    let i = e;
    for (let s = 0; s < t; s++) {
      const o = this.mapToItems[i.id], n = this.mapToItems[i.parent.id];
      n.children || (n.children = []), n.children.push(o), i = i.parent;
    }
  }
  // called by
  // 1) change detection (provides cols) and
  // 2) groupStage if doing transaction update (doesn't provide cols)
  addParentNode(e, t) {
    if (!e || e.isRowPinned())
      return;
    const i = this.createPathItems(e);
    this.linkPathItems(e, i), this.populateColumnsMap(e, t);
  }
  canSkip(e) {
    return this.active && !this.mapToItems[e.id];
  }
  getValueColumnsForNode(e, t) {
    if (!this.keepingColumns)
      return t;
    const i = this.nodeIdsToColumns[e.id];
    return t.filter((o) => i[o.getId()]);
  }
  getNotValueColumnsForNode(e, t) {
    if (!this.keepingColumns)
      return null;
    const i = this.nodeIdsToColumns[e.id];
    return t.filter((o) => !i[o.getId()]);
  }
}, sD = class extends T {
  constructor(e) {
    super(), this.eContainer = null, this.lastDraggingEvent = null, this.autoScrollService = null, this.makeGroupThrottleTimer = null, this.makeGroupThrottleTarget = null, this.makeGroupThrottled = !1, this.makeGroupThrottleCallback = () => {
      this.makeGroupThrottleTimer = null;
      const t = this.lastDraggingEvent;
      t && (this.makeGroupThrottled = !0, this.doManagedDrag(t, !1), this.makeGroupExpanded(this.makeGroupThrottleTarget));
    }, this.eContainer = e;
  }
  postConstruct() {
    const { rowModel: e, gos: t, ctrlsSvc: i } = this.beans;
    Oe(t) && (this.clientSideRowModel = e), i.whenReady(this, (s) => {
      const o = s.gridBodyCtrl;
      let n = 0;
      const r = () => o.scrollFeature.getVScrollPosition().top;
      this.autoScrollService = new A0({
        scrollContainer: o.eBodyViewport,
        scrollAxis: "y",
        getVerticalPosition: r,
        setVerticalPosition: (a) => o.scrollFeature.setVerticalScrollPosition(a),
        onScrollCallback: () => {
          const a = r();
          if (n !== a) {
            n = a;
            const l = this.lastDraggingEvent;
            l && this.onDragging(l);
          }
        }
      });
    });
  }
  destroy() {
    super.destroy(), this.eContainer = null, this.lastDraggingEvent = null, this.makeGroupThrottleClear();
    const e = this.autoScrollService;
    e && (this.autoScrollService = null, e?.ensureCleared());
  }
  getContainer() {
    return this.eContainer;
  }
  isInterestedIn(e) {
    return e === 2;
  }
  getIconName() {
    return this.gos.get("rowDragManaged") && this.shouldPreventRowMove() ? "notAllowed" : "move";
  }
  shouldPreventRowMove() {
    const { rowGroupColsSvc: e, filterManager: t, sortSvc: i } = this.beans;
    return !!((e?.columns ?? []).length || t?.isAnyFilterPresent() || i?.isSortActive());
  }
  getRowNodes(e) {
    if (!this.isFromThisGrid(e))
      return e.dragItem.rowNodes || [];
    const t = e.dragItem.rowNode;
    if (this.gos.get("rowDragMultiRow")) {
      const s = [...this.beans.selectionSvc?.getSelectedNodes() ?? []].sort((o, n) => o.rowIndex == null || n.rowIndex == null ? 0 : this.getRowIndexNumber(o) - this.getRowIndexNumber(n));
      if (s.indexOf(t) !== -1)
        return s;
    }
    return [t];
  }
  onDragEnter(e) {
    e.dragItem.rowNodes = this.getRowNodes(e), this.dispatchGridEvent("rowDragEnter", e), this.getRowNodes(e).forEach((t) => {
      this.setRowNodeDragging(t, !0);
    }), this.onEnterOrDragging(e);
  }
  onDragging(e) {
    this.onEnterOrDragging(e);
  }
  isFromThisGrid(e) {
    const { dragSourceDomDataKey: t } = e.dragSource;
    return t === this.gos.getDomDataKey();
  }
  onEnterOrDragging(e) {
    this.autoScrollService && (this.dispatchGridEvent("rowDragMove", e), this.lastDraggingEvent = e, this.gos.get("rowDragManaged") && this.doManagedDrag(e, !0), this.autoScrollService.check(e.event));
  }
  doManagedDrag(e, t) {
    const { dragAndDrop: i, gos: s } = this.beans, o = this.isFromThisGrid(e);
    if (!(s.get("rowDragManaged") && this.shouldPreventRowMove()))
      if (s.get("suppressMoveWhenRowDragging") || !o) {
        if (i.isDropZoneWithinThisGrid(e)) {
          const r = this.managedRowsDrop(e, t), a = r?.target, l = this.beans.rowDropHighlightSvc;
          a && r.rows.length ? l.set(a, r.position) : l.clear();
        }
      } else {
        const r = this.managedRowsDrop(e, t);
        r && this.dropRows(r);
      }
  }
  getRowIndexNumber(e) {
    const t = e.getRowIndexString();
    return parseInt(ue(t.split("-")), 10);
  }
  managedRowsDrop(e, t) {
    const { rowNode: i, rowNodes: s } = e.dragItem, n = s?.length && (i ?? s[0]);
    if (!n)
      return this.makeGroupThrottleClear(), null;
    const { beans: r, gos: a, clientSideRowModel: l } = this, c = l.rootNode, d = Au(r, e).y;
    let u = l.getRowIndexAtPixel(d), h = l.getRow(u) ?? null;
    const g = n !== h;
    let p = h ? (d - h.rowTop - h.rowHeight / 2) / h.rowHeight || 0 : 1;
    const f = this.isFromThisGrid(e), C = (
      // We don't yet support drag and drop with grouping
      pf(a) !== "group" && // We don't yet support moving tree rows from a different grid in a structured way
      f
    );
    let v = null;
    if (C && h?.footer) {
      v = h.sibling ?? c;
      const F = oo(l, -1, h) ?? oo(l, 1, h);
      p = F && F.rowIndex > h.rowIndex ? -0.5 : 0.5, h = F ?? null;
    }
    let w = p < 0, y = !1;
    if (f && h) {
      if (g) {
        if (y = s.indexOf(h) >= 0, y) {
          const F = oD(l, u < n.rowIndex, s);
          F?.parent === h.parent && (h = F, u = h.rowIndex);
        }
      } else {
        if (Math.abs(p) <= 0.5)
          return this.makeGroupThrottleClear(), null;
        y = !0;
      }
      (y || !C && Math.abs(u - n.rowIndex) === 1) && (w = u < n.rowIndex);
    }
    const S = this.makeGroupThrottleTarget;
    S !== null && S !== h && this.makeGroupThrottleClear(), h?.expanded && h.childrenAfterSort?.length && (this.makeGroupThrottled = !0, this.makeGroupThrottleTarget = h), v === null && C && (!h || p >= 0.5 && h.rowIndex === r.pageBounds.getLastRow() ? v = c : this.targetShouldBeParent(h, p, y, s) && (this.makeGroupThrottled && (v = h), t && (v === null || !h.expanded) && (this.makeGroupThrottleTarget = h, this.makeGroupThrottleStart())), v ?? (v = h?.parent ?? c));
    let x = !1;
    if (v !== null) {
      if (v === h && v !== c) {
        x = !0;
        const F = v.expanded ? oo(l, 1, h) : null;
        F?.parent === v && (h = F, x = !1, w = !0);
      }
      if (h && !x) {
        let F = h;
        for (; F && F !== c && F !== v; )
          h = F, F = F.parent;
      }
      rD(s, v) && (v = null);
    }
    if (!v && y && (C || n === h))
      return null;
    const D = x ? "inside" : w ? "above" : "below", M = {
      api: this.beans.gridApi,
      context: this.beans.gridOptions.context,
      draggingEvent: e,
      sameGrid: f,
      position: D,
      source: n,
      target: h,
      newParent: v,
      rows: s
    };
    let k = !1;
    const P = a.get("isRowValidDropPosition");
    if (P) {
      const F = P(M);
      F ? typeof F == "object" && (F.rows !== void 0 && (M.rows = F.rows ?? Un), F.newParent !== void 0 && (M.newParent = F.newParent), F.target !== void 0 && (M.target = F.target), F.position && (k = !0, M.position = F.position)) : M.rows = Un;
    }
    return (!M.newParent || !M.rows.length) && !k && (M.position = w ? "above" : "below"), M;
  }
  makeGroupThrottleStart() {
    this.makeGroupThrottleTimer === null && (this.makeGroupThrottleTimer = window.setTimeout(
      this.makeGroupThrottleCallback,
      this.gos.get("rowDragInsertDelay")
    ));
  }
  makeGroupExpanded(e) {
    e && !e.expanded && e.childrenAfterSort?.length && e.isExpandable() && e.setExpanded(!0, this.lastDraggingEvent?.event, !0);
  }
  makeGroupThrottleClear() {
    this.makeGroupThrottled = !1, this.makeGroupThrottleTarget = null;
    const e = this.makeGroupThrottleTimer;
    e !== null && (this.makeGroupThrottleTimer = null, clearTimeout(e));
  }
  targetShouldBeParent(e, t, i, s) {
    const o = e?.rowIndex;
    if (i || o === null)
      return !1;
    const n = 0.25;
    if (t < -0.5 + n)
      return !1;
    if (t < 0.5 - n)
      return !0;
    let r, a = o + 1;
    const l = this.clientSideRowModel;
    do
      r = l.getRow(a++);
    while (r && r.footer);
    const c = e.childrenAfterGroup;
    if (r && r.parent === e && c?.length) {
      const d = new Set(s);
      for (const u of c)
        if (u.rowIndex !== null && !d.has(u))
          return !0;
    }
    return !1;
  }
  addRowDropZone(e) {
    if (!e.getContainer()) {
      B(55);
      return;
    }
    const t = this.beans.dragAndDrop;
    if (t.findExternalZone(e)) {
      B(56);
      return;
    }
    let i = {
      getContainer: e.getContainer
    };
    e.fromGrid ? i = e : (e.onDragEnter && (i.onDragEnter = (o) => {
      e.onDragEnter(this.draggingToRowDragEvent("rowDragEnter", o));
    }), e.onDragLeave && (i.onDragLeave = (o) => {
      e.onDragLeave(this.draggingToRowDragEvent("rowDragLeave", o));
    }), e.onDragging && (i.onDragging = (o) => {
      e.onDragging(this.draggingToRowDragEvent("rowDragMove", o));
    }), e.onDragStop && (i.onDragStop = (o) => {
      e.onDragStop(this.draggingToRowDragEvent("rowDragEnd", o));
    }), e.onDragCancel && (i.onDragCancel = (o) => {
      e.onDragCancel(this.draggingToRowDragEvent("rowDragCancel", o));
    }));
    const s = {
      isInterestedIn: (o) => o === 2,
      getIconName: () => "move",
      external: !0,
      ...i
    };
    t.addDropTarget(s), this.addDestroyFunc(() => t.removeDropTarget(s));
  }
  getRowDropZone(e) {
    const t = this.getContainer.bind(this), i = this.onDragEnter.bind(this), s = this.onDragLeave.bind(this), o = this.onDragging.bind(this), n = this.onDragStop.bind(this), r = this.onDragCancel.bind(this);
    let a;
    return e ? a = {
      getContainer: t,
      onDragEnter: e.onDragEnter ? (l) => {
        i(l), e.onDragEnter(this.draggingToRowDragEvent("rowDragEnter", l));
      } : i,
      onDragLeave: e.onDragLeave ? (l) => {
        s(l), e.onDragLeave(this.draggingToRowDragEvent("rowDragLeave", l));
      } : s,
      onDragging: e.onDragging ? (l) => {
        o(l), e.onDragging(this.draggingToRowDragEvent("rowDragMove", l));
      } : o,
      onDragStop: e.onDragStop ? (l) => {
        n(l), e.onDragStop(this.draggingToRowDragEvent("rowDragEnd", l));
      } : n,
      onDragCancel: e.onDragCancel ? (l) => {
        r(l), e.onDragCancel(this.draggingToRowDragEvent("rowDragCancel", l));
      } : r,
      fromGrid: !0
    } : a = {
      getContainer: t,
      onDragEnter: i,
      onDragLeave: s,
      onDragging: o,
      onDragStop: n,
      onDragCancel: r,
      /* @private */
      fromGrid: !0
    }, a;
  }
  draggingToRowDragEvent(e, t) {
    const i = this.beans, { pageBounds: s, rowModel: o, gos: n } = i, r = Au(this.beans, t).y, a = r > s.getCurrentPagePixelRange().pageLastPixel;
    let l = -1, c;
    return a || (l = o.getRowIndexAtPixel(r), c = o.getRow(l)), Z(n, {
      type: e,
      event: t.event,
      node: t.dragItem.rowNode,
      nodes: t.dragItem.rowNodes,
      overIndex: l,
      overNode: c,
      y: r,
      vDirection: t.vDirection
    });
  }
  dispatchGridEvent(e, t) {
    const i = this.draggingToRowDragEvent(e, t);
    this.eventSvc.dispatchEvent(i);
  }
  onDragLeave(e) {
    this.dispatchGridEvent("rowDragLeave", e), this.stopDragging(e), this.gos.get("rowDragManaged") && this.beans.rowDropHighlightSvc.clear(), this.makeGroupThrottleClear();
  }
  onDragStop(e) {
    this.dispatchGridEvent("rowDragEnd", e), this.stopDragging(e);
    const { dragAndDrop: t, gos: i } = this.beans;
    if (i.get("rowDragManaged") && (i.get("suppressMoveWhenRowDragging") || !this.isFromThisGrid(e)) && t.isDropZoneWithinThisGrid(e)) {
      const s = this.managedRowsDrop(e, !1);
      s && this.dropRows(s), this.beans.rowDropHighlightSvc.clear();
    }
    this.makeGroupThrottleClear();
  }
  onDragCancel(e) {
    this.dispatchGridEvent("rowDragCancel", e), this.stopDragging(e);
    const { dragAndDrop: t, gos: i } = this.beans;
    i.get("rowDragManaged") && (i.get("suppressMoveWhenRowDragging") || !this.isFromThisGrid(e)) && t.isDropZoneWithinThisGrid(e) && this.beans.rowDropHighlightSvc.clear(), this.makeGroupThrottleClear();
  }
  stopDragging(e) {
    this.autoScrollService?.ensureCleared(), this.getRowNodes(e).forEach((t) => {
      this.setRowNodeDragging(t, !1);
    });
  }
  setRowNodeDragging(e, t) {
    e.dragging !== t && (e.dragging = t, e.dispatchRowEvent("draggingChanged"));
  }
  /** Drag and drop. Returns false if at least a row was moved, otherwise true */
  dropRows(e) {
    return e.sameGrid ? this.moveRows(e) : this.addRows(e);
  }
  addRows({ position: e, target: t, rows: i }) {
    const s = Fs(this.gos), o = this.clientSideRowModel, n = i.filter(
      ({ data: a, rowPinned: l }) => !o.getRowNode(s?.({ data: a, level: 0, rowPinned: l }) ?? a.id)
    ).map(({ data: a }) => a);
    if (n.length === 0)
      return !1;
    const r = t ? Xu(t) + (e === "above" ? 0 : 1) : void 0;
    return o.updateRowData({ add: n, addIndex: r }), !0;
  }
  refreshModelAfterDrop() {
    this.clientSideRowModel.refreshModel({
      step: "group",
      keepRenderedRows: !0,
      animate: !this.gos.get("suppressAnimationFrame"),
      changedPath: new Po(!1, this.clientSideRowModel.rootNode),
      rowNodesOrderChanged: !0
    });
  }
  moveRows({ position: e, target: t, rows: i, newParent: s }) {
    let o = !1;
    const n = this.clientSideRowModel, r = /* @__PURE__ */ new Set();
    for (const d of i) {
      if (d.footer || d.rowTop === null && d !== n.getRowNode(d.id))
        continue;
      if (s && d.parent !== s) {
        if (nD(d, s))
          continue;
        d.treeParent = s, o = !0;
      }
      const u = Pm(d);
      u && r.add(u);
    }
    if (!o && r.size === 0)
      return !1;
    const a = this.beans.focusSvc, l = a.getFocusedCell(), c = l && qs(this.beans, l);
    return r.size && this.reorderLeafChildren(r, ...this.getMoveRowsBounds(r, t, e === "above")) && (o = !0), o ? (this.refreshModelAfterDrop(), c ? c.focusCell() : a.clearFocusedCell(), !0) : !1;
  }
  /** For reorderLeafChildren, returns min index of the rows to move, the target index and the max index of the rows to move. */
  getMoveRowsBounds(e, t, i) {
    const s = this.clientSideRowModel.rootNode?.allLeafChildren.length ?? 0;
    let o = Xu(t);
    o < 0 || o >= s ? o = s : i || ++o;
    let n = o, r = Math.min(o, s - 1);
    for (const a of e) {
      const l = a.sourceRowIndex;
      l < n && (n = l), l > r && (r = l);
    }
    return [n, o, r];
  }
  /** Reorders the children of the root node, so that the rows to move are in the correct order.
   * @param leafs The valid set of rows to move, as returned by getValidRowsToMove
   * @param firstAffectedLeafIdx The first index of the rows to move
   * @param targetPositionIdx The target index, where the rows will be moved
   * @param lastAffectedLeafIndex The last index of the rows to move
   * @returns True if the order of the rows changed, false otherwise
   */
  reorderLeafChildren(e, t, i, s) {
    let o = !1;
    const n = this.clientSideRowModel.rootNode?.allLeafChildren;
    if (!e.size || !n)
      return !1;
    let r = t;
    for (let l = t; l < i; ++l) {
      const c = n[l];
      e.has(c) || (c.sourceRowIndex !== r && (c.sourceRowIndex = r, n[r] = c, o = !0), ++r);
    }
    let a = s;
    for (let l = s; l >= i; --l) {
      const c = n[l];
      e.has(c) || (c.sourceRowIndex !== a && (c.sourceRowIndex = a, n[a] = c, o = !0), --a);
    }
    for (const l of e)
      l.sourceRowIndex !== r && (l.sourceRowIndex = r, n[r] = l, o = !0), ++r;
    return o;
  }
}, oD = (e, t, i) => t ? oo(e, -1, i[0]) : oo(e, 1, ue(i)), oo = (e, t, i) => {
  if (i) {
    const s = e.getRowCount();
    let o = i.rowIndex + t;
    for (; o >= 0 && o < s; ) {
      const n = e.getRow(o);
      if (!n || !n.footer)
        return n;
      o += t;
    }
  }
}, nD = (e, t) => {
  let i = t;
  for (; i; ) {
    if (i === e)
      return !0;
    i = i.parent;
  }
  return !1;
}, rD = (e, t) => {
  for (let i = 0, s = e.length; i < s; ++i)
    if (e[i].parent !== t)
      return !1;
  return !0;
}, Xu = (e) => {
  const t = Pm(e);
  return t !== void 0 ? t.sourceRowIndex : -1;
}, Pm = (e) => {
  for (; e; ) {
    if (e.sourceRowIndex >= 0)
      return e;
    const t = e.childrenAfterGroup;
    if (!t?.length)
      return;
    e = t[0];
  }
}, aD = class extends T {
  constructor() {
    super(...arguments), this.beanName = "rowDragSvc";
  }
  setupRowDrag(e, t) {
    const i = t.createManagedBean(new sD(e)), s = this.beans.dragAndDrop;
    s.addDropTarget(i), t.addDestroyFunc(() => s.removeDropTarget(i)), this.rowDragFeature = i;
  }
  createRowDragComp(e, t, i, s, o, n) {
    return new eD(e, t, i, s, o, n);
  }
  createRowDragCompForRow(e, t) {
    if (hi(this.gos))
      return;
    const i = this.getLocaleTextFunc();
    return this.createRowDragComp(
      () => `1 ${i("rowDragRow", "row")}`,
      e,
      void 0,
      t,
      void 0,
      !0
    );
  }
  createRowDragCompForCell(e, t, i, s, o, n) {
    const r = this.gos;
    return r.get("rowDragManaged") && (!Oe(r) || r.get("pagination")) ? void 0 : this.createRowDragComp(
      i,
      e,
      t,
      s,
      o,
      n
    );
  }
}, lD = class extends T {
  constructor() {
    super(...arguments), this.beanName = "rowDropHighlightSvc", this.uiLevel = 0, this.row = null, this.position = "none";
  }
  postConstruct() {
    this.addManagedEventListeners({
      modelUpdated: this.onModelUpdated.bind(this)
    });
  }
  onModelUpdated() {
    const e = this.row;
    !e || e.rowIndex === null || this.position === "none" ? this.clear() : this.set(e, this.position);
  }
  destroy() {
    this.clear(), super.destroy();
  }
  clear() {
    const e = this.row;
    e && (this.uiLevel = 0, this.position = "none", this.row = null, e.dispatchRowEvent("rowHighlightChanged"));
  }
  set(e, t) {
    const i = e !== this.row, s = e.uiLevel, o = t !== this.position, n = s !== this.uiLevel;
    (i || o || n) && (i && this.clear(), this.uiLevel = s, this.position = t, this.row = e, e.dispatchRowEvent("rowHighlightChanged"));
  }
}, Em = {
  moduleName: "Drag",
  version: Y,
  beans: [TP]
}, cD = {
  moduleName: "DragAndDrop",
  version: Y,
  dynamicBeans: {
    dndSourceComp: $0
  },
  icons: {
    // drag handle used to pick up draggable rows
    rowDrag: "grip"
  }
}, Dm = {
  moduleName: "SharedDragAndDrop",
  version: Y,
  beans: [DP],
  dependsOn: [Em],
  userComponents: {
    agDragAndDropImage: XE
  },
  icons: {
    // shown on drag and drop image component icon while dragging column to the side of the grid to pin
    columnMovePin: "pin",
    // shown on drag and drop image component icon while dragging over part of the page that is not a drop zone
    columnMoveHide: "eye-slash",
    // shown on drag and drop image component icon while dragging columns to reorder
    columnMoveMove: "arrows",
    // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling
    columnMoveLeft: "left",
    // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling
    columnMoveRight: "right",
    // shown on drag and drop image component icon while dragging over Row Groups drop zone
    columnMoveGroup: "group",
    // shown on drag and drop image component icon while dragging over Values drop zone
    columnMoveValue: "aggregation",
    // shown on drag and drop image component icon while dragging over pivot drop zone
    columnMovePivot: "pivot",
    // shown on drag and drop image component icon while dragging over drop zone that doesn't support it, e.g.
    // string column over aggregation drop zone
    dropNotAllowed: "not-allowed",
    // drag handle used to pick up draggable rows
    rowDrag: "grip"
  }
}, dD = {
  moduleName: "RowDrag",
  version: Y,
  beans: [lD, aD],
  apiFunctions: {
    addRowDropZone: K0,
    removeRowDropZone: Y0,
    getRowDropZoneParams: q0,
    getRowDropPositionIndicator: X0,
    setRowDropPositionIndicator: Z0
  },
  dependsOn: [Dm]
}, uD = {
  moduleName: "HorizontalResize",
  version: Y,
  beans: [Q0],
  dependsOn: [Em]
}, hD = (
  /*css*/
  ":where(.ag-ltr) :where(.ag-column-moving){.ag-cell,.ag-header-cell,.ag-spanned-cell-wrapper{transition:left .2s}.ag-header-group-cell{transition:left .2s,width .2s}}:where(.ag-rtl) :where(.ag-column-moving){.ag-cell,.ag-header-cell,.ag-spanned-cell-wrapper{transition:right .2s}.ag-header-group-cell{transition:right .2s,width .2s}}"
), gD = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colAnimation", this.executeNextFuncs = [], this.executeLaterFuncs = [], this.active = !1, this.activeNext = !1, this.suppressAnimation = !1, this.animationThreadCount = 0;
  }
  postConstruct() {
    this.beans.ctrlsSvc.whenReady(this, (e) => this.gridBodyCtrl = e.gridBodyCtrl);
  }
  isActive() {
    return this.active && !this.suppressAnimation;
  }
  setSuppressAnimation(e) {
    this.suppressAnimation = e;
  }
  start() {
    if (this.active)
      return;
    const { gos: e } = this;
    e.get("suppressColumnMoveAnimation") || e.get("enableRtl") || (this.ensureAnimationCssClassPresent(), this.active = !0, this.activeNext = !0);
  }
  finish() {
    this.active && this.flush(
      () => this.activeNext = !1,
      () => this.active = !1
    );
  }
  executeNextVMTurn(e) {
    this.activeNext ? this.executeNextFuncs.push(e) : e();
  }
  executeLaterVMTurn(e) {
    this.active ? this.executeLaterFuncs.push(e) : e();
  }
  ensureAnimationCssClassPresent() {
    this.animationThreadCount++;
    const e = this.animationThreadCount, { gridBodyCtrl: t } = this;
    t.setColumnMovingCss(!0), this.executeLaterFuncs.push(() => {
      this.animationThreadCount === e && t.setColumnMovingCss(!1);
    });
  }
  flush(e, t) {
    const { executeNextFuncs: i, executeLaterFuncs: s } = this;
    if (i.length === 0 && s.length === 0) {
      e(), t();
      return;
    }
    const o = (n) => {
      for (; n.length; ) {
        const r = n.pop();
        r && r();
      }
    };
    this.beans.frameworkOverrides.wrapIncoming(() => {
      window.setTimeout(() => {
        e(), o(i);
      }, 0), window.setTimeout(() => {
        t(), o(s);
      }, 200);
    });
  }
};
function pD(e, t, i) {
  e.colMoves?.moveColumnByIndex(t, i, "api");
}
function fD(e, t, i) {
  e.colMoves?.moveColumns(t, i, "api");
}
var mD = class extends T {
  constructor(e) {
    super(), this.pinned = e, this.columnsToAggregate = [], this.columnsToGroup = [], this.columnsToPivot = [];
  }
  /** Callback for when drag enters */
  onDragEnter(e) {
    if (this.clearColumnsList(), this.gos.get("functionsReadOnly"))
      return;
    const t = e.dragItem.columns;
    t && t.forEach((i) => {
      i.isPrimary() && (i.isAnyFunctionActive() || (i.isAllowValue() ? this.columnsToAggregate.push(i) : i.isAllowRowGroup() ? this.columnsToGroup.push(i) : i.isAllowPivot() && this.columnsToPivot.push(i)));
    });
  }
  getIconName() {
    return this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length > 0 ? this.pinned ? "pinned" : "move" : null;
  }
  /** Callback for when drag leaves */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onDragLeave(e) {
    this.clearColumnsList();
  }
  clearColumnsList() {
    this.columnsToAggregate.length = 0, this.columnsToGroup.length = 0, this.columnsToPivot.length = 0;
  }
  /** Callback for when dragging */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onDragging(e) {
  }
  /** Callback for when drag stops */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onDragStop(e) {
    const { valueColsSvc: t, rowGroupColsSvc: i, pivotColsSvc: s } = this.beans;
    this.columnsToAggregate.length > 0 && t?.addColumns(this.columnsToAggregate, "toolPanelDragAndDrop"), this.columnsToGroup.length > 0 && i?.addColumns(this.columnsToGroup, "toolPanelDragAndDrop"), this.columnsToPivot.length > 0 && s?.addColumns(this.columnsToPivot, "toolPanelDragAndDrop");
  }
  onDragCancel() {
    this.clearColumnsList();
  }
};
function CD(e, t) {
  !t || t.length <= 1 || t.filter((s) => e.indexOf(s) < 0).length > 0 || t.sort((s, o) => {
    const n = e.indexOf(s), r = e.indexOf(o);
    return n - r;
  });
}
function vD(e) {
  const t = [...e];
  return e.forEach((i) => {
    let s = null, o = i.getParent();
    for (; o != null && o.getDisplayedLeafColumns().length === 1; )
      s = o, o = o.getParent();
    s != null && (!!s.getColGroupDef()?.marryChildren ? (
      // when marry children is true, we also have to move hidden
      // columns within the group, so grab them from the `providedColumnGroup`
      s.getProvidedColumnGroup().getLeafColumns()
    ) : s.getLeafColumns()).forEach((a) => {
      t.includes(a) || t.push(a);
    });
  }), t;
}
function wD(e, t, i, s) {
  const o = s.allCols;
  let n = null, r = null;
  for (let a = 0; a < e.length; a++) {
    const l = e[a], c = i.getProposedColumnOrder(t, l);
    if (!i.doesOrderPassRules(c))
      continue;
    const d = c.filter((h) => o.includes(h));
    if (r === null)
      r = d;
    else if (!Yi(d, r))
      break;
    const u = yD(c);
    (n === null || u < n.fragCount) && (n = { move: l, fragCount: u });
  }
  return n;
}
function Tm(e) {
  const { isFromHeader: t, fromLeft: i, xPosition: s, fromEnter: o, fakeEvent: n, pinned: r, gos: a, colModel: l, colMoves: c, visibleCols: d } = e;
  let { allMovingColumns: u } = e;
  t && (u = vD(u));
  const h = u.slice();
  CD(l.getCols(), h);
  const g = RD({
    movingCols: h,
    draggingRight: i,
    xPosition: s,
    pinned: r,
    gos: a,
    colModel: l,
    visibleCols: d
  }), p = SD(h, l);
  if (g.length === 0)
    return;
  const f = g[0];
  if (p !== null && (t || !o) && !n && (!i && f >= p || i && f <= p))
    return;
  const C = wD(g, h, c, d);
  if (!C)
    return;
  const v = C.move;
  if (!(v > l.getCols().length - h.length))
    return { columns: h, toIndex: v };
}
function Mm(e) {
  const { columns: t, toIndex: i } = Tm(e) || {}, { finished: s, colMoves: o } = e;
  return !t || i == null ? null : (o.moveColumns(t, i, "uiColumnMoved", s), s ? null : { columns: t, toIndex: i });
}
function SD(e, t) {
  const i = t.getCols(), s = e.map((l) => i.indexOf(l)).sort((l, c) => l - c), o = s[0];
  return ue(s) - o !== s.length - 1 ? null : o;
}
function yD(e) {
  function t(s) {
    const o = [];
    let n = s.getOriginalParent();
    for (; n != null; )
      o.push(n), n = n.getOriginalParent();
    return o;
  }
  let i = 0;
  for (let s = 0; s < e.length - 1; s++) {
    let o = t(e[s]), n = t(e[s + 1]);
    [o, n] = o.length > n.length ? [o, n] : [n, o], o.forEach((r) => {
      n.indexOf(r) === -1 && i++;
    });
  }
  return i;
}
function bD(e, t) {
  switch (t) {
    case "left":
      return e.leftCols;
    case "right":
      return e.rightCols;
    default:
      return e.centerCols;
  }
}
function RD(e) {
  const { movingCols: t, draggingRight: i, xPosition: s, pinned: o, gos: n, colModel: r, visibleCols: a } = e;
  if (n.get("suppressMovableColumns") || t.some((w) => w.getColDef().suppressMovable))
    return [];
  const c = bD(a, o), d = r.getCols(), u = c.filter((w) => t.includes(w)), h = c.filter((w) => !t.includes(w)), g = d.filter((w) => !t.includes(w));
  let p = 0, f = s;
  if (i) {
    let w = 0;
    u.forEach((y) => w += y.getActualWidth()), f -= w;
  }
  if (f > 0) {
    for (let w = 0; w < h.length; w++) {
      const y = h[w];
      if (f -= y.getActualWidth(), f < 0)
        break;
      p++;
    }
    i && p++;
  }
  let m;
  if (p > 0) {
    const w = h[p - 1];
    m = g.indexOf(w) + 1;
  } else
    m = g.indexOf(h[0]), m === -1 && (m = 0);
  const C = [m], v = (w, y) => w - y;
  if (i) {
    let w = m + 1;
    const y = d.length - 1;
    for (; w <= y; )
      C.push(w), w++;
    C.sort(v);
  } else {
    let w = m;
    const y = d.length - 1;
    let S = d[w];
    for (; w <= y && c.indexOf(S) < 0; )
      w++, C.push(w), S = d[w];
    w = m - 1;
    const x = 0;
    for (; w >= x; )
      C.push(w), w--;
    C.sort(v).reverse();
  }
  return C;
}
function cl(e) {
  const { pinned: t, fromKeyboard: i, gos: s, ctrlsSvc: o, useHeaderRow: n, skipScrollPadding: r } = e;
  let a = o.getHeaderRowContainerCtrl(t)?.eViewport, { x: l } = e;
  return a ? (i && (l -= a.getBoundingClientRect().left), s.get("enableRtl") && (n && (a = a.querySelector(".ag-header-row")), l = a.clientWidth - l), t == null && !r && (l += o.get("center").getCenterViewportScrollLeft()), l) : 0;
}
function ia(e, t) {
  for (const i of e)
    i.moving = t, i.dispatchColEvent("movingChanged", "uiColumnMoved");
}
var Zu = 7, dl = 100, en = dl / 2, xD = 5, FD = 100, PD = class extends T {
  constructor(e) {
    super(), this.pinned = e, this.needToMoveLeft = !1, this.needToMoveRight = !1, this.lastMovedInfo = null, this.isCenterContainer = !$(e);
  }
  postConstruct() {
    this.beans.ctrlsSvc.whenReady(this, (e) => {
      this.gridBodyCon = e.gridBodyCtrl;
    });
  }
  getIconName() {
    const { pinned: e, lastDraggingEvent: t } = this, { dragItem: i } = t || {}, s = i?.columns ?? [];
    for (const o of s) {
      const n = o.getPinned();
      if (o.getColDef().lockPinned) {
        if (n == e)
          return "move";
        continue;
      }
      const r = i?.containerType;
      if (r === e || !e)
        return "move";
      if (e && (!n || r !== e))
        return "pinned";
    }
    return "notAllowed";
  }
  onDragEnter(e) {
    const t = e.dragItem, i = t.columns;
    if (e.dragSource.type === 0)
      this.setColumnsVisible(i, !0, "uiColumnDragged");
    else {
      const o = t.visibleState, n = (i || []).filter(
        (r) => o[r.getId()] && !r.isVisible()
      );
      this.setColumnsVisible(n, !0, "uiColumnDragged");
    }
    this.gos.get("suppressMoveWhenColumnDragging") || this.attemptToPinColumns(i, this.pinned), this.onDragging(e, !0, !0);
  }
  onDragging(e = this.lastDraggingEvent, t = !1, i = !1, s = !1) {
    const { gos: o, ctrlsSvc: n } = this.beans, r = o.get("suppressMoveWhenColumnDragging");
    if (s && !r) {
      this.finishColumnMoving();
      return;
    }
    if (this.lastDraggingEvent = e, !e || !s && Ce(e.hDirection))
      return;
    const a = cl({
      x: e.x,
      pinned: this.pinned,
      gos: o,
      ctrlsSvc: n
    });
    t || this.checkCenterForScrolling(a), r ? this.handleColumnDragWhileSuppressingMovement(e, t, i, a, s) : this.handleColumnDragWhileAllowingMovement(e, t, i, a, s);
  }
  onDragLeave() {
    this.ensureIntervalCleared(), this.clearHighlighted(), this.updateDragItemContainerType(), this.lastMovedInfo = null;
  }
  onDragStop() {
    this.onDragging(this.lastDraggingEvent, !1, !0, !0), this.ensureIntervalCleared(), this.lastMovedInfo = null;
  }
  onDragCancel() {
    this.clearHighlighted(), this.ensureIntervalCleared(), this.lastMovedInfo = null;
  }
  setColumnsVisible(e, t, i) {
    if (!e?.length)
      return;
    const s = e.filter((o) => !o.getColDef().lockVisible);
    s.length && this.beans.colModel.setColsVisible(s, t, i);
  }
  finishColumnMoving() {
    this.clearHighlighted();
    const e = this.lastMovedInfo;
    if (!e)
      return;
    const { columns: t, toIndex: i } = e;
    this.beans.colMoves.moveColumns(t, i, "uiColumnMoved", !0);
  }
  updateDragItemContainerType() {
    const { lastDraggingEvent: e } = this;
    if (this.gos.get("suppressMoveWhenColumnDragging") || !e)
      return;
    const t = e.dragItem;
    t && (t.containerType = this.pinned);
  }
  handleColumnDragWhileSuppressingMovement(e, t, i, s, o) {
    const n = this.getAllMovingColumns(e, !0);
    if (o) {
      const r = this.isAttemptingToPin(n);
      r && this.attemptToPinColumns(n, void 0, !0);
      const { fromLeft: a, xPosition: l } = this.getNormalisedXPositionInfo(n, r) || {};
      if (a == null || l == null) {
        this.finishColumnMoving();
        return;
      }
      this.moveColumnsAfterHighlight({
        allMovingColumns: n,
        xPosition: l,
        fromEnter: t,
        fakeEvent: i,
        fromLeft: a
      });
    } else {
      if (!this.beans.dragAndDrop.isDropZoneWithinThisGrid(e))
        return;
      this.highlightHoveredColumn(n, s);
    }
  }
  handleColumnDragWhileAllowingMovement(e, t, i, s, o) {
    const n = this.getAllMovingColumns(e), r = this.normaliseDirection(e.hDirection) === "right", a = e.dragSource.type === 1, l = this.getMoveColumnParams({
      allMovingColumns: n,
      isFromHeader: a,
      xPosition: s,
      fromLeft: r,
      fromEnter: t,
      fakeEvent: i
    }), c = Mm({ ...l, finished: o });
    c && (this.lastMovedInfo = c);
  }
  getAllMovingColumns(e, t = !1) {
    const i = e.dragSource.getDragItem();
    let s = null;
    t ? (s = i.columnsInSplit, s || (s = i.columns)) : s = i.columns;
    const o = (n) => n.getColDef().lockPinned ? n.getPinned() == this.pinned : !0;
    return s ? s.filter(o) : [];
  }
  getMoveColumnParams(e) {
    const { allMovingColumns: t, isFromHeader: i, xPosition: s, fromLeft: o, fromEnter: n, fakeEvent: r } = e, { gos: a, colModel: l, colMoves: c, visibleCols: d } = this.beans;
    return {
      allMovingColumns: t,
      isFromHeader: i,
      fromLeft: o,
      xPosition: s,
      pinned: this.pinned,
      fromEnter: n,
      fakeEvent: r,
      gos: a,
      colModel: l,
      colMoves: c,
      visibleCols: d
    };
  }
  highlightHoveredColumn(e, t) {
    const { gos: i, colModel: s } = this.beans, o = i.get("enableRtl"), n = s.getCols().filter((d) => d.isVisible() && d.getPinned() === this.pinned);
    let r = null, a = null, l = null;
    for (const d of n) {
      if (a = d.getActualWidth(), r = this.getNormalisedColumnLeft(d, 0, o), r != null) {
        const u = r + a;
        if (r <= t && u >= t) {
          l = d;
          break;
        }
      }
      r = null, a = null;
    }
    if (l)
      e.indexOf(l) !== -1 && (l = null);
    else {
      for (let d = n.length - 1; d >= 0; d--) {
        const u = n[d], h = n[d].getParent();
        if (!h) {
          l = u;
          break;
        }
        const g = h?.getDisplayedLeafColumns();
        if (g.length) {
          l = ue(g);
          break;
        }
      }
      if (!l)
        return;
      r = this.getNormalisedColumnLeft(l, 0, o), a = l.getActualWidth();
    }
    if (this.lastHighlightedColumn?.column !== l && this.clearHighlighted(), l == null || r == null || a == null)
      return;
    let c;
    t - r < a / 2 !== o ? c = 0 : c = 1, Qu(l, c), this.lastHighlightedColumn = { column: l, position: c };
  }
  getNormalisedXPositionInfo(e, t) {
    const { gos: i, visibleCols: s } = this.beans, o = i.get("enableRtl"), { firstMovingCol: n, column: r, position: a } = this.getColumnMoveAndTargetInfo(
      e,
      t,
      o
    );
    if (!n || !r || a == null)
      return;
    const l = s.allCols, c = l.indexOf(n), d = l.indexOf(r), u = a === 0 !== o, h = c < d || c === d && !u;
    let g = 0;
    if (u ? h && (g -= 1) : h || (g += 1), d + g === c)
      return;
    const p = l[d + g];
    if (!p)
      return;
    const f = this.getNormalisedColumnLeft(p, 20, o);
    return { fromLeft: h, xPosition: f };
  }
  getColumnMoveAndTargetInfo(e, t, i) {
    const s = this.lastHighlightedColumn || {}, { firstMovingCol: o, lastMovingCol: n } = ED(e);
    if (!o || !n || s.column || !t)
      return {
        firstMovingCol: o,
        ...s
      };
    const a = this.getPinDirection() === "left";
    return {
      firstMovingCol: o,
      position: a ? 1 : 0,
      column: a !== i ? o : n
    };
  }
  normaliseDirection(e) {
    if (this.gos.get("enableRtl"))
      switch (e) {
        case "left":
          return "right";
        case "right":
          return "left";
      }
    return e;
  }
  getNormalisedColumnLeft(e, t, i) {
    const { gos: s, ctrlsSvc: o } = this.beans, n = e.getLeft();
    if (n == null)
      return null;
    const r = e.getActualWidth();
    return cl({
      x: i ? n + r - t : n + t,
      pinned: e.getPinned(),
      useHeaderRow: i,
      skipScrollPadding: !0,
      gos: s,
      ctrlsSvc: o
    });
  }
  isAttemptingToPin(e) {
    const t = this.needToMoveLeft || this.needToMoveRight, i = this.failedMoveAttempts > Zu;
    return t && i || e.some((s) => s.getPinned() !== this.pinned);
  }
  moveColumnsAfterHighlight(e) {
    const { allMovingColumns: t, xPosition: i, fromEnter: s, fakeEvent: o, fromLeft: n } = e, r = this.getMoveColumnParams({
      allMovingColumns: t,
      isFromHeader: !0,
      xPosition: i,
      fromLeft: n,
      fromEnter: s,
      fakeEvent: o
    }), { columns: a, toIndex: l } = Tm(r) || {};
    a && l != null && (this.lastMovedInfo = {
      columns: a,
      toIndex: l
    }), this.finishColumnMoving();
  }
  clearHighlighted() {
    const { lastHighlightedColumn: e } = this;
    e && (Qu(e.column, null), this.lastHighlightedColumn = null);
  }
  checkCenterForScrolling(e) {
    if (!this.isCenterContainer)
      return;
    const t = this.beans.ctrlsSvc.get("center"), i = t.getCenterViewportScrollLeft(), s = i + t.getCenterWidth();
    let o, n;
    this.gos.get("enableRtl") ? (o = e < i + en, n = e > s - en) : (n = e < i + en, o = e > s - en), this.needToMoveRight = o, this.needToMoveLeft = n, n || o ? this.ensureIntervalStarted() : this.ensureIntervalCleared();
  }
  ensureIntervalStarted() {
    this.movingIntervalId || (this.intervalCount = 0, this.failedMoveAttempts = 0, this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), FD), this.beans.dragAndDrop.getDragAndDropImageComponent()?.setIcon(this.needToMoveLeft ? "left" : "right", !0));
  }
  ensureIntervalCleared() {
    this.movingIntervalId && (window.clearInterval(this.movingIntervalId), this.movingIntervalId = null, this.failedMoveAttempts = 0, this.beans.dragAndDrop.getDragAndDropImageComponent()?.setIcon(this.getIconName(), !1));
  }
  moveInterval() {
    let e;
    this.intervalCount++, e = 10 + this.intervalCount * xD, e > dl && (e = dl);
    let t = null;
    const i = this.gridBodyCon.scrollFeature;
    if (this.needToMoveLeft ? t = i.scrollHorizontally(-e) : this.needToMoveRight && (t = i.scrollHorizontally(e)), t !== 0)
      this.onDragging(this.lastDraggingEvent), this.failedMoveAttempts = 0;
    else {
      this.failedMoveAttempts++;
      const { pinnedCols: s, dragAndDrop: o, gos: n } = this.beans;
      if (this.failedMoveAttempts <= Zu + 1 || !s)
        return;
      if (o.getDragAndDropImageComponent()?.setIcon("pinned", !1), !n.get("suppressMoveWhenColumnDragging")) {
        const r = this.lastDraggingEvent?.dragItem.columns;
        this.attemptToPinColumns(r, void 0, !0);
      }
    }
  }
  getPinDirection() {
    if (this.needToMoveLeft || this.pinned === "left")
      return "left";
    if (this.needToMoveRight || this.pinned === "right")
      return "right";
  }
  attemptToPinColumns(e, t, i = !1) {
    const s = (e || []).filter((r) => !r.getColDef().lockPinned);
    if (!s.length)
      return 0;
    i && (t = this.getPinDirection());
    const { pinnedCols: o, dragAndDrop: n } = this.beans;
    return o?.setColsPinned(s, t, "uiColumnDragged"), i && n.nudge(), s.length;
  }
  destroy() {
    super.destroy(), this.lastDraggingEvent = null, this.clearHighlighted(), this.lastMovedInfo = null;
  }
};
function Qu(e, t) {
  e.highlighted !== t && (e.highlighted = t, e.dispatchColEvent("headerHighlightChanged", "uiColumnMoved"));
}
function ED(e) {
  const t = e.length;
  let i, s;
  for (let o = 0; o < t; o++) {
    if (!i) {
      const n = e[o];
      n.getLeft() != null && (i = n);
    }
    if (!s) {
      const n = e[t - 1 - o];
      n.getLeft() != null && (s = n);
    }
    if (i && s)
      break;
  }
  return { firstMovingCol: i, lastMovingCol: s };
}
var DD = class extends T {
  constructor(e, t) {
    super(), this.pinned = e, this.eContainer = t;
  }
  postConstruct() {
    const { ctrlsSvc: e, dragAndDrop: t } = this.beans, i = this.pinned;
    e.whenReady(this, (s) => {
      let o;
      const n = s.gridBodyCtrl.eBodyViewport;
      switch (i) {
        case "left":
          o = [
            [n, s.left.eContainer],
            [s.bottomLeft.eContainer],
            [s.topLeft.eContainer]
          ];
          break;
        case "right":
          o = [
            [n, s.right.eContainer],
            [s.bottomRight.eContainer],
            [s.topRight.eContainer]
          ];
          break;
        default:
          o = [
            [n, s.center.eViewport],
            [s.bottomCenter.eViewport],
            [s.topCenter.eViewport]
          ];
          break;
      }
      this.eSecondaryContainers = o;
    }), this.moveColumnFeature = this.createManagedBean(new PD(i)), this.bodyDropPivotTarget = this.createManagedBean(new mD(i)), t.addDropTarget(this), this.addDestroyFunc(() => t.removeDropTarget(this));
  }
  isInterestedIn(e) {
    return e === 1 || e === 0 && this.gos.get("allowDragFromColumnsToolPanel");
  }
  getSecondaryContainers() {
    return this.eSecondaryContainers;
  }
  getContainer() {
    return this.eContainer;
  }
  getIconName() {
    return this.currentDropListener.getIconName();
  }
  // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel
  // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when
  // dropped into the grid's body.
  isDropColumnInPivotMode(e) {
    return this.beans.colModel.isPivotMode() && e.dragSource.type === 0;
  }
  onDragEnter(e) {
    this.currentDropListener = this.isDropColumnInPivotMode(e) ? this.bodyDropPivotTarget : this.moveColumnFeature, this.currentDropListener.onDragEnter(e);
  }
  onDragLeave(e) {
    this.currentDropListener.onDragLeave(e);
  }
  onDragging(e) {
    this.currentDropListener.onDragging(e);
  }
  onDragStop(e) {
    this.currentDropListener.onDragStop(e);
  }
  onDragCancel() {
    this.currentDropListener.onDragCancel();
  }
}, TD = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colMoves";
  }
  moveColumnByIndex(e, t, i) {
    const s = this.beans.colModel.getCols();
    if (!s)
      return;
    const o = s[e];
    this.moveColumns([o], t, i);
  }
  moveColumns(e, t, i, s = !0) {
    const { colModel: o, colAnimation: n, visibleCols: r, eventSvc: a } = this.beans, l = o.getCols();
    if (!l)
      return;
    if (t > l.length - e.length) {
      B(30, { toIndex: t });
      return;
    }
    n?.start();
    const c = o.getColsForKeys(e);
    this.doesMovePassRules(c, t) && (xu(o.getCols(), c, t), r.refresh(i), a.dispatchEvent({
      type: "columnMoved",
      columns: c,
      column: c.length === 1 ? c[0] : null,
      toIndex: t,
      finished: s,
      source: i
    })), n?.finish();
  }
  doesMovePassRules(e, t) {
    const i = this.getProposedColumnOrder(e, t);
    return this.doesOrderPassRules(i);
  }
  doesOrderPassRules(e) {
    const { colModel: t, gos: i } = this.beans;
    return !(!Ef(e, t.getColTree()) || !((o) => {
      const n = (c) => c ? c === "left" || c === !0 ? -1 : 1 : 0, r = i.get("enableRtl");
      let a = r ? 1 : -1, l = !0;
      return o.forEach((c) => {
        const d = n(c.getColDef().lockPosition);
        r ? d > a && (l = !1) : d < a && (l = !1), a = d;
      }), l;
    })(e));
  }
  getProposedColumnOrder(e, t) {
    const s = this.beans.colModel.getCols().slice();
    return xu(s, e, t), s;
  }
  createBodyDropTarget(e, t) {
    return new DD(e, t);
  }
  moveHeader(e, t, i, s, o) {
    const { ctrlsSvc: n, gos: r, colModel: a, visibleCols: l, focusSvc: c } = this.beans, d = t.getBoundingClientRect(), u = d.left, h = De(i), g = h ? d.width : i.getActualWidth(), p = e === "left" !== r.get("enableRtl"), f = cl({
      x: p ? u - 20 : u + g + 20,
      pinned: s,
      fromKeyboard: !0,
      gos: r,
      ctrlsSvc: n
    }), m = c.focusedHeader;
    Mm({
      allMovingColumns: h ? i.getLeafColumns() : [i],
      isFromHeader: !0,
      fromLeft: e === "right",
      xPosition: f,
      pinned: s,
      fromEnter: !1,
      fakeEvent: !1,
      gos: r,
      colModel: a,
      colMoves: this,
      visibleCols: l,
      finished: !0
    });
    let C;
    if (h) {
      const v = i.getDisplayedLeafColumns();
      C = p ? v[0] : ue(v);
    } else
      C = i;
    if (n.getScrollFeature().ensureColumnVisible(C, "auto"), (!o.isAlive() || r.get("ensureDomOrder")) && m) {
      let v;
      if (h) {
        const w = i.getGroupId(), y = i.getLeafColumns();
        if (!y.length)
          return;
        const S = y[0].getParent();
        if (!S)
          return;
        v = MD(S, w);
      } else
        v = i;
      v && c.focusHeaderPosition({
        headerPosition: {
          ...m,
          column: v
        }
      });
    }
  }
  setDragSourceForHeader(e, t, i) {
    const { gos: s, colModel: o, dragAndDrop: n, visibleCols: r } = this.beans;
    let a = !s.get("suppressDragLeaveHidesColumns");
    const l = De(t), c = l ? t.getProvidedColumnGroup().getLeafColumns() : [t], u = {
      type: 1,
      eElement: e,
      getDefaultIconName: () => a ? "hide" : "notAllowed",
      getDragItem: l ? () => ID(t, r.allCols) : () => AD(t),
      dragItemName: i,
      onDragStarted: () => {
        a = !s.get("suppressDragLeaveHidesColumns"), ia(c, !0);
      },
      onDragStopped: () => ia(c, !1),
      onDragCancelled: () => ia(c, !1),
      onGridEnter: (h) => {
        if (a) {
          const { columns: g = [], visibleState: p } = h ?? {}, f = l ? (C) => !p || p[C.getColId()] : () => !0, m = g.filter(
            (C) => !C.getColDef().lockVisible && f(C)
          );
          o.setColsVisible(m, !0, "uiColumnMoved");
        }
      },
      onGridExit: (h) => {
        if (a) {
          const g = h?.columns?.filter((p) => !p.getColDef().lockVisible) || [];
          o.setColsVisible(g, !1, "uiColumnMoved");
        }
      }
    };
    return n.addDragSource(u, !0), u;
  }
};
function MD(e, t) {
  for (; e; ) {
    if (e.getGroupId() === t)
      return e;
    e = e.getParent();
  }
}
function AD(e) {
  const t = {};
  return t[e.getId()] = e.isVisible(), {
    columns: [e],
    visibleState: t,
    containerType: e.pinned
  };
}
function ID(e, t) {
  const i = e.getProvidedColumnGroup().getLeafColumns(), s = {};
  i.forEach((a) => s[a.getId()] = a.isVisible());
  const o = [];
  t.forEach((a) => {
    i.indexOf(a) >= 0 && (o.push(a), St(i, a));
  }), i.forEach((a) => o.push(a));
  const n = [], r = e.getLeafColumns();
  for (const a of o)
    r.indexOf(a) !== -1 && n.push(a);
  return {
    columns: o,
    columnsInSplit: n,
    visibleState: s,
    containerType: n[0]?.pinned
  };
}
var kD = {
  moduleName: "ColumnMove",
  version: Y,
  beans: [TD, gD],
  apiFunctions: {
    moveColumnByIndex: pD,
    moveColumns: fD
  },
  dependsOn: [Dm],
  css: [hD]
}, LD = class extends T {
  constructor() {
    super(...arguments), this.beanName = "autoWidthCalc";
  }
  postConstruct() {
    this.beans.ctrlsSvc.whenReady(this, (e) => {
      this.centerRowContainerCtrl = e.center;
    });
  }
  // this is the trick: we create a dummy container and clone all the cells
  // into the dummy, then check the dummy's width. then destroy the dummy
  // as we don't need it any more.
  // drawback: only the cells visible on the screen are considered
  getPreferredWidthForColumn(e, t) {
    const i = this.getHeaderCellForColumn(e);
    if (!i)
      return -1;
    const s = this.beans.rowRenderer.getAllCellsNotSpanningForColumn(e);
    return t || s.push(i), this.getPreferredWidthForElements(s);
  }
  getPreferredWidthForColumnGroup(e) {
    const t = this.getHeaderCellForColumn(e);
    return t ? this.getPreferredWidthForElements([t]) : -1;
  }
  getPreferredWidthForElements(e, t) {
    const i = document.createElement("form");
    i.style.position = "fixed";
    const s = this.centerRowContainerCtrl.eContainer;
    e.forEach((n) => this.cloneItemIntoDummy(n, i)), s.appendChild(i);
    const o = i.offsetWidth;
    return s.removeChild(i), t = t ?? this.gos.get("autoSizePadding"), o + t;
  }
  getHeaderCellForColumn(e) {
    let t = null;
    return this.beans.ctrlsSvc.getHeaderRowContainerCtrls().forEach((i) => {
      const s = i.getHtmlElementForColumnHeader(e);
      s != null && (t = s);
    }), t;
  }
  cloneItemIntoDummy(e, t) {
    const i = e.cloneNode(!0);
    i.style.width = "", i.style.position = "static", i.style.left = "";
    const s = document.createElement("div"), o = s.classList;
    ["ag-header-cell", "ag-header-group-cell"].some((a) => i.classList.contains(a)) ? (o.add("ag-header", "ag-header-row"), s.style.position = "static") : o.add("ag-row");
    let r = e.parentElement;
    for (; r; ) {
      if (["ag-header-row", "ag-row"].some((l) => r.classList.contains(l))) {
        for (let l = 0; l < r.classList.length; l++) {
          const c = r.classList[l];
          c != "ag-row-position-absolute" && o.add(c);
        }
        break;
      }
      r = r.parentElement;
    }
    s.appendChild(i), t.appendChild(s);
  }
}, Am = {
  moduleName: "AutoWidth",
  version: Y,
  beans: [LD]
};
function OD(e, t, i = !0, s = "api") {
  e.colResize?.setColumnWidths(t, !1, i, s);
}
var VD = class extends T {
  constructor(e, t, i, s) {
    super(), this.comp = e, this.eResize = t, this.pinned = i, this.columnGroup = s;
  }
  postConstruct() {
    if (!this.columnGroup.isResizable()) {
      this.comp.setResizableDisplayed(!1);
      return;
    }
    const { horizontalResizeSvc: e, gos: t, colAutosize: i } = this.beans, s = e.addResizeBar({
      eResizeBar: this.eResize,
      onResizeStart: this.onResizeStart.bind(this),
      onResizing: this.onResizing.bind(this, !1),
      onResizeEnd: this.onResizing.bind(this, !0)
    });
    this.addDestroyFunc(s), !t.get("suppressAutoSize") && i && this.addDestroyFunc(
      i.addColumnGroupResize(
        this.eResize,
        this.columnGroup,
        () => this.resizeLeafColumnsToFit("uiColumnResized")
      )
    );
  }
  onResizeStart(e) {
    const {
      columnsToResize: t,
      resizeStartWidth: i,
      resizeRatios: s,
      groupAfterColumns: o,
      groupAfterStartWidth: n,
      groupAfterRatios: r
    } = this.getInitialValues(e);
    this.resizeCols = t, this.resizeStartWidth = i, this.resizeRatios = s, this.resizeTakeFromCols = o, this.resizeTakeFromStartWidth = n, this.resizeTakeFromRatios = r, this.toggleColumnResizing(!0);
  }
  onResizing(e, t, i = "uiColumnResized") {
    const s = this.normaliseDragChange(t), o = this.resizeStartWidth + s;
    this.resizeColumnsFromLocalValues(o, i, e);
  }
  getInitialValues(e) {
    const t = (l) => l.reduce((c, d) => c + d.getActualWidth(), 0), i = (l, c) => l.map((d) => d.getActualWidth() / c), s = this.getColumnsToResize(), o = t(s), n = i(s, o), r = {
      columnsToResize: s,
      resizeStartWidth: o,
      resizeRatios: n
    };
    let a = null;
    if (e && (a = this.beans.colGroupSvc?.getGroupAtDirection(this.columnGroup, "After") ?? null), a) {
      const l = a.getDisplayedLeafColumns(), c = r.groupAfterColumns = l.filter(
        (u) => u.isResizable()
      ), d = r.groupAfterStartWidth = t(c);
      r.groupAfterRatios = i(c, d);
    } else
      r.groupAfterColumns = void 0, r.groupAfterStartWidth = void 0, r.groupAfterRatios = void 0;
    return r;
  }
  resizeLeafColumnsToFit(e) {
    const t = this.beans.autoWidthCalc.getPreferredWidthForColumnGroup(this.columnGroup), i = this.getInitialValues();
    t > i.resizeStartWidth && this.resizeColumns(i, t, e, !0);
  }
  resizeColumnsFromLocalValues(e, t, i = !0) {
    if (!this.resizeCols || !this.resizeRatios)
      return;
    const s = {
      columnsToResize: this.resizeCols,
      resizeStartWidth: this.resizeStartWidth,
      resizeRatios: this.resizeRatios,
      groupAfterColumns: this.resizeTakeFromCols,
      groupAfterStartWidth: this.resizeTakeFromStartWidth,
      groupAfterRatios: this.resizeTakeFromRatios
    };
    this.resizeColumns(s, e, t, i);
  }
  resizeColumns(e, t, i, s = !0) {
    const {
      columnsToResize: o,
      resizeStartWidth: n,
      resizeRatios: r,
      groupAfterColumns: a,
      groupAfterStartWidth: l,
      groupAfterRatios: c
    } = e, d = [];
    if (d.push({
      columns: o,
      ratios: r,
      width: t
    }), a) {
      const u = t - n;
      d.push({
        columns: a,
        ratios: c,
        width: l - u
      });
    }
    this.beans.colResize?.resizeColumnSets({
      resizeSets: d,
      finished: s,
      source: i
    }), s && this.toggleColumnResizing(!1);
  }
  toggleColumnResizing(e) {
    this.comp.toggleCss("ag-column-resizing", e);
  }
  getColumnsToResize() {
    return this.columnGroup.getDisplayedLeafColumns().filter((t) => t.isResizable());
  }
  // optionally inverts the drag, depending on pinned and RTL
  // note - this method is duplicated in RenderedHeaderCell - should refactor out?
  normaliseDragChange(e) {
    let t = e;
    return this.gos.get("enableRtl") ? this.pinned !== "left" && (t *= -1) : this.pinned === "right" && (t *= -1), t;
  }
  destroy() {
    super.destroy(), this.resizeCols = void 0, this.resizeRatios = void 0, this.resizeTakeFromCols = void 0, this.resizeTakeFromRatios = void 0;
  }
}, GD = class extends T {
  constructor(e, t, i, s, o) {
    super(), this.pinned = e, this.column = t, this.eResize = i, this.comp = s, this.ctrl = o;
  }
  postConstruct() {
    const e = [];
    let t, i;
    const s = () => {
      if (Re(this.eResize, t), !t)
        return;
      const { horizontalResizeSvc: r, colAutosize: a } = this.beans, l = r.addResizeBar({
        eResizeBar: this.eResize,
        onResizeStart: this.onResizeStart.bind(this),
        onResizing: this.onResizing.bind(this, !1),
        onResizeEnd: this.onResizing.bind(this, !0)
      });
      e.push(l), i && a && e.push(a.addColumnAutosize(this.eResize, this.column));
    }, o = () => {
      e.forEach((r) => r()), e.length = 0;
    }, n = () => {
      const r = this.column.isResizable(), a = !this.gos.get("suppressAutoSize") && !this.column.getColDef().suppressAutoSize;
      (r !== t || a !== i) && (t = r, i = a, o(), s());
    };
    n(), this.addDestroyFunc(o), this.ctrl.setRefreshFunction("resize", n);
  }
  onResizing(e, t) {
    const { column: i, lastResizeAmount: s, resizeStartWidth: o, beans: n } = this, r = this.normaliseResizeAmount(t), a = o + r, l = [{ key: i, newWidth: a }], { pinnedCols: c, ctrlsSvc: d, colResize: u } = n;
    if (this.column.getPinned()) {
      const h = c?.leftWidth ?? 0, g = c?.rightWidth ?? 0, p = wo(d.getGridBodyCtrl().eBodyViewport) - 50;
      if (h + g + (r - s) > p)
        return;
    }
    this.lastResizeAmount = r, u?.setColumnWidths(l, this.resizeWithShiftKey, e, "uiColumnResized"), e && this.toggleColumnResizing(!1);
  }
  onResizeStart(e) {
    this.resizeStartWidth = this.column.getActualWidth(), this.lastResizeAmount = 0, this.resizeWithShiftKey = e, this.toggleColumnResizing(!0);
  }
  toggleColumnResizing(e) {
    this.column.resizing = e, this.comp.toggleCss("ag-column-resizing", e);
  }
  // optionally inverts the drag, depending on pinned and RTL
  // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?
  normaliseResizeAmount(e) {
    let t = e;
    const i = this.pinned !== "left", s = this.pinned === "right";
    return this.gos.get("enableRtl") ? i && (t *= -1) : s && (t *= -1), t;
  }
}, HD = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colResize";
  }
  setColumnWidths(e, t, i, s) {
    const o = [], { colModel: n, gos: r, visibleCols: a } = this.beans;
    e.forEach((l) => {
      const c = n.getColDefCol(l.key) || n.getCol(l.key);
      if (!c)
        return;
      if (o.push({
        width: l.newWidth,
        ratios: [1],
        columns: [c]
      }), r.get("colResizeDefault") === "shift" && (t = !t), t) {
        const u = a.getColAfter(c);
        if (!u)
          return;
        const h = c.getActualWidth() - l.newWidth, g = u.getActualWidth() + h;
        o.push({
          width: g,
          ratios: [1],
          columns: [u]
        });
      }
    }), o.length !== 0 && this.resizeColumnSets({
      resizeSets: o,
      finished: i,
      source: s
    });
  }
  // method takes sets of columns and resizes them. either all sets will be resized, or nothing
  // be resized. this is used for example when user tries to resize a group and holds shift key,
  // then both the current group (grows), and the adjacent group (shrinks), will get resized,
  // so that's two sets for this method.
  resizeColumnSets(e) {
    const { resizeSets: t, finished: i, source: s } = e;
    if (!(!t || t.every((d) => BD(d)))) {
      if (i) {
        const d = t && t.length > 0 ? t[0].columns : null;
        Ps(this.eventSvc, d, i, s);
      }
      return;
    }
    const n = [], r = [];
    t.forEach((d) => {
      const { width: u, columns: h, ratios: g } = d, p = {}, f = {};
      h.forEach((v) => r.push(v));
      let m = !0, C = 0;
      for (; m; ) {
        if (C++, C > 1e3) {
          he(31);
          break;
        }
        m = !1;
        const v = [];
        let w = 0, y = u;
        h.forEach((x, D) => {
          if (f[x.getId()])
            y -= p[x.getId()];
          else {
            v.push(x);
            const k = g[D];
            w += k;
          }
        });
        const S = 1 / w;
        v.forEach((x, D) => {
          const M = D === v.length - 1;
          let k;
          M ? k = y : (k = Math.round(g[D] * u * S), y -= k);
          const P = x.getMinWidth(), F = x.getMaxWidth();
          k < P ? (k = P, f[x.getId()] = !0, m = !0) : F > 0 && k > F && (k = F, f[x.getId()] = !0, m = !0), p[x.getId()] = k;
        });
      }
      h.forEach((v) => {
        const w = p[v.getId()];
        v.getActualWidth() !== w && (v.setActualWidth(w, s), n.push(v));
      });
    });
    const a = n.length > 0;
    let l = [];
    if (a) {
      const { colFlex: d, visibleCols: u, colViewport: h } = this.beans;
      l = d?.refreshFlexedColumns({
        resizingCols: r,
        skipSetLeft: !0
      }) ?? [], u.setLeftValues(s), u.updateBodyWidths(), h.checkViewportColumns();
    }
    const c = r.concat(l);
    (a || i) && Ps(this.eventSvc, c, i, s, l);
  }
  resizeHeader(e, t, i) {
    if (!e.isResizable())
      return;
    const s = e.getActualWidth(), o = e.getMinWidth(), n = e.getMaxWidth(), r = Math.min(Math.max(s + t, o), n);
    this.setColumnWidths([{ key: e, newWidth: r }], i, !0, "uiColumnResized");
  }
  createResizeFeature(e, t, i, s, o) {
    return new GD(e, t, i, s, o);
  }
  createGroupResizeFeature(e, t, i, s) {
    return new VD(e, t, i, s);
  }
};
function BD(e) {
  const { columns: t, width: i } = e;
  let s = 0, o = 0, n = !0;
  t.forEach((l) => {
    const c = l.getMinWidth();
    s += c || 0;
    const d = l.getMaxWidth();
    d > 0 ? o += d : n = !1;
  });
  const r = i >= s, a = !n || i <= o;
  return r && a;
}
var ND = {
  moduleName: "ColumnResize",
  version: Y,
  beans: [HD],
  apiFunctions: {
    setColumnWidths: OD
  },
  dependsOn: [uD, Am]
}, WD = class extends T {
  constructor(e, t) {
    super(), this.removeChildListenersFuncs = [], this.columnGroup = t, this.comp = e;
  }
  postConstruct() {
    this.addListenersToChildrenColumns(), this.addManagedListeners(this.columnGroup, {
      displayedChildrenChanged: this.onDisplayedChildrenChanged.bind(this)
    }), this.onWidthChanged(), this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));
  }
  addListenersToChildrenColumns() {
    this.removeListenersOnChildrenColumns();
    const e = this.onWidthChanged.bind(this);
    this.columnGroup.getLeafColumns().forEach((t) => {
      t.__addEventListener("widthChanged", e), t.__addEventListener("visibleChanged", e), this.removeChildListenersFuncs.push(() => {
        t.__removeEventListener("widthChanged", e), t.__removeEventListener("visibleChanged", e);
      });
    });
  }
  removeListenersOnChildrenColumns() {
    this.removeChildListenersFuncs.forEach((e) => e()), this.removeChildListenersFuncs = [];
  }
  onDisplayedChildrenChanged() {
    this.addListenersToChildrenColumns(), this.onWidthChanged();
  }
  onWidthChanged() {
    const e = this.columnGroup.getActualWidth();
    this.comp.setWidth(`${e}px`), this.comp.toggleCss("ag-hidden", e === 0);
  }
}, zD = class extends Pc {
  constructor() {
    super(...arguments), this.onSuppressColMoveChange = () => {
      !this.isAlive() || this.isSuppressMoving() ? this.removeDragSource() : this.dragSource || this.setDragSource(this.eGui);
    };
  }
  setComp(e, t, i, s, o) {
    const { column: n, beans: r } = this, { context: a, colNames: l, colHover: c, rangeSvc: d, colResize: u } = r;
    this.comp = e, o = Vo(this, a, o), this.setGui(t, o), this.displayName = l.getDisplayNameForColumnGroup(n, "header"), this.refreshHeaderStyles(), this.addClasses(), this.setupMovingCss(o), this.setupExpandable(o), this.setupTooltip(), this.setupAutoHeight({
      wrapperElement: s,
      compBean: o
    }), this.setupUserComp(), this.addHeaderMouseListeners(o), this.addManagedPropertyListener("groupHeaderHeight", this.refreshMaxHeaderHeight.bind(this)), this.refreshMaxHeaderHeight();
    const h = this.rowCtrl.pinned, g = n.getProvidedColumnGroup().getLeafColumns();
    c?.createHoverFeature(o, g, t), d?.createRangeHighlightFeature(o, n, e), o.createManagedBean(new Fc(n, t, r)), o.createManagedBean(new WD(e, n)), u ? this.resizeFeature = o.createManagedBean(
      u.createGroupResizeFeature(e, i, h, n)
    ) : e.setResizableDisplayed(!1), o.createManagedBean(
      new Vs(t, {
        shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),
        onTabKeyDown: () => {
        },
        handleKeyDown: this.handleKeyDown.bind(this),
        onFocusIn: this.onFocusIn.bind(this)
      })
    ), this.addHighlightListeners(o, g), o.addManagedPropertyListener("suppressMovableColumns", this.onSuppressColMoveChange), this.addResizeAndMoveKeyboardListeners(o), o.addDestroyFunc(() => this.clearComponent());
  }
  getHeaderClassParams() {
    const { column: e, beans: t } = this, i = e.getDefinition();
    return Z(t.gos, {
      colDef: i,
      columnGroup: e,
      floatingFilter: !1
    });
  }
  refreshMaxHeaderHeight() {
    const { gos: e, comp: t } = this, i = e.get("groupHeaderHeight");
    i != null ? i === 0 ? t.setHeaderWrapperHidden(!0) : t.setHeaderWrapperMaxHeight(i) : (t.setHeaderWrapperHidden(!1), t.setHeaderWrapperMaxHeight(null));
  }
  addHighlightListeners(e, t) {
    if (this.beans.gos.get("suppressMoveWhenColumnDragging"))
      for (const i of t)
        e.addManagedListeners(i, {
          headerHighlightChanged: this.onLeafColumnHighlightChanged.bind(this, i)
        });
  }
  onLeafColumnHighlightChanged(e) {
    const t = this.column.getDisplayedLeafColumns(), i = t[0] === e, s = ue(t) === e;
    if (!i && !s)
      return;
    const o = e.getHighlighted(), n = !!this.rowCtrl.getHeaderCellCtrls().find((l) => l.column.isMoving());
    let r = !1, a = !1;
    if (n) {
      const l = this.beans.gos.get("enableRtl"), c = o === 1, d = o === 0;
      i && (l ? a = c : r = d), s && (l ? r = d : a = c);
    }
    this.comp.toggleCss("ag-header-highlight-before", r), this.comp.toggleCss("ag-header-highlight-after", a);
  }
  resizeHeader(e, t) {
    const { resizeFeature: i } = this;
    if (!i)
      return;
    const s = i.getInitialValues(t);
    i.resizeColumns(s, s.resizeStartWidth + e, "uiColumnResized", !0);
  }
  resizeLeafColumnsToFit(e) {
    this.resizeFeature?.resizeLeafColumnsToFit(e);
  }
  setupUserComp() {
    const { colGroupSvc: e, userCompFactory: t, gos: i, enterpriseMenuFactory: s } = this.beans, o = this.column, n = o.getProvidedColumnGroup(), r = Z(i, {
      displayName: this.displayName,
      columnGroup: o,
      setExpanded: (l) => {
        e.setColumnGroupOpened(n, l, "gridInitializing");
      },
      setTooltip: (l, c) => {
        i.assertModuleRegistered("Tooltip", 3), this.setupTooltip(l, c);
      },
      showColumnMenu: (l, c) => s?.showMenuAfterButtonClick(
        n,
        l,
        "columnMenu",
        c
      ),
      showColumnMenuAfterMouseClick: (l, c) => s?.showMenuAfterMouseEvent(
        n,
        l,
        "columnMenu",
        c
      ),
      eGridHeader: this.eGui
    }), a = CF(t, r);
    a && this.comp.setUserCompDetails(a);
  }
  addHeaderMouseListeners(e) {
    const t = (o) => this.handleMouseOverChange(o.type === "mouseenter"), i = () => this.dispatchColumnMouseEvent("columnHeaderClicked", this.column.getProvidedColumnGroup()), s = (o) => this.handleContextMenuMouseEvent(o, void 0, this.column.getProvidedColumnGroup());
    e.addManagedListeners(this.eGui, {
      mouseenter: t,
      mouseleave: t,
      click: i,
      contextmenu: s
    });
  }
  handleMouseOverChange(e) {
    this.eventSvc.dispatchEvent({
      type: e ? "columnHeaderMouseOver" : "columnHeaderMouseLeave",
      column: this.column.getProvidedColumnGroup()
    });
  }
  setupTooltip(e, t) {
    this.tooltipFeature = this.beans.tooltipSvc?.setupHeaderGroupTooltip(
      this.tooltipFeature,
      this,
      e,
      t
    );
  }
  setupExpandable(e) {
    const t = this.column.getProvidedColumnGroup();
    this.refreshExpanded();
    const i = this.refreshExpanded.bind(this);
    e.addManagedListeners(t, {
      expandedChanged: i,
      expandableChanged: i
    });
  }
  refreshExpanded() {
    const { column: e } = this;
    this.expandable = e.isExpandable();
    const t = e.isExpanded();
    this.expandable ? this.comp.setAriaExpanded(t ? "true" : "false") : this.comp.setAriaExpanded(void 0), this.refreshHeaderStyles();
  }
  addClasses() {
    const { column: e } = this, t = e.getColGroupDef(), i = Yf(t, this.gos, null, e);
    e.isPadding() ? (i.push("ag-header-group-cell-no-group"), e.getLeafColumns().every((o) => o.isSpanHeaderHeight()) && i.push("ag-header-span-height")) : (i.push("ag-header-group-cell-with-group"), t?.wrapHeaderText && i.push("ag-header-cell-wrap-text")), i.forEach((s) => this.comp.toggleCss(s, !0));
  }
  setupMovingCss(e) {
    const { column: t } = this, s = t.getProvidedColumnGroup().getLeafColumns(), o = () => this.comp.toggleCss("ag-header-cell-moving", t.isMoving());
    s.forEach((n) => {
      e.addManagedListeners(n, { movingChanged: o });
    }), o();
  }
  onFocusIn(e) {
    this.eGui.contains(e.relatedTarget) || this.focusThis();
  }
  handleKeyDown(e) {
    super.handleKeyDown(e);
    const t = this.getWrapperHasFocus();
    if (!(!this.expandable || !t) && e.key === E.ENTER) {
      const i = this.column, s = !i.isExpanded();
      this.beans.colGroupSvc.setColumnGroupOpened(
        i.getProvidedColumnGroup(),
        s,
        "uiColumnExpanded"
      );
    }
  }
  // unlike columns, this will only get called once, as we don't react on props on column groups
  // (we will always destroy and recreate this comp if something changes)
  setDragSource(e) {
    !this.isAlive() || this.isSuppressMoving() || (this.removeDragSource(), e && (this.dragSource = this.beans.colMoves?.setDragSourceForHeader(e, this.column, this.displayName) ?? null));
  }
  isSuppressMoving() {
    return this.gos.get("suppressMovableColumns") || this.column.getLeafColumns().some((e) => e.getColDef().suppressMovable || e.getColDef().lockPosition);
  }
  destroy() {
    this.tooltipFeature = this.destroyBean(this.tooltipFeature), super.destroy();
  }
};
function _D(e, t, i) {
  e.colGroupSvc?.setColumnGroupOpened(t, i, "api");
}
function UD(e, t, i) {
  return e.colGroupSvc?.getColumnGroup(t, i) ?? null;
}
function jD(e, t) {
  return e.colGroupSvc?.getProvidedColGroup(t) ?? null;
}
function $D(e, t, i) {
  return e.colNames.getDisplayNameForColumnGroup(t, i) || "";
}
function KD(e) {
  return e.colGroupSvc?.getColumnGroupState() ?? [];
}
function YD(e, t) {
  e.colGroupSvc?.setColumnGroupState(t, "api");
}
function qD(e) {
  e.colGroupSvc?.resetColumnGroupState("api");
}
function XD(e) {
  return e.visibleCols.treeLeft;
}
function ZD(e) {
  return e.visibleCols.treeCenter;
}
function QD(e) {
  return e.visibleCols.treeRight;
}
function JD(e) {
  return e.visibleCols.getAllTrees();
}
function eT(e, t) {
  for (let i = 0; i < t.length; i++) {
    const s = e.indexOf(t[i]);
    s >= 0 && (e[s] = e[e.length - 1], e.pop());
  }
}
var tT = class extends T {
  constructor() {
    super(...arguments), this.beanName = "visibleCols", this.colsAndGroupsMap = {}, this.leftCols = [], this.rightCols = [], this.centerCols = [], this.allCols = [], this.headerGroupRowCount = 0, this.bodyWidth = 0, this.leftWidth = 0, this.rightWidth = 0, this.isBodyWidthDirty = !0;
  }
  refresh(e, t = !1) {
    const { colFlex: i, colModel: s, colGroupSvc: o, colViewport: n, selectionColSvc: r } = this.beans;
    t || this.buildTrees(s, o), o?.updateOpenClosedVisibility(), this.leftCols = sa(this.treeLeft), this.centerCols = sa(this.treeCenter), this.rightCols = sa(this.treeRight), r?.refreshVisibility(this.leftCols, this.centerCols, this.rightCols), this.joinColsAriaOrder(s), this.joinCols(), this.headerGroupRowCount = this.getHeaderRowCount(), this.setLeftValues(e), this.autoHeightCols = this.allCols.filter((a) => a.isAutoHeight()), i?.refreshFlexedColumns(), this.updateBodyWidths(), this.setFirstRightAndLastLeftPinned(s, this.leftCols, this.rightCols, e), n.checkViewportColumns(!1), this.eventSvc.dispatchEvent({
      type: "displayedColumnsChanged",
      source: e
    });
  }
  getHeaderRowCount() {
    if (!this.gos.get("hidePaddedHeaderRows"))
      return this.beans.colModel.cols.treeDepth;
    let e = 0;
    for (const t of this.allCols) {
      let i = t.getParent();
      for (; i; ) {
        if (!i.isPadding()) {
          const s = i.getProvidedColumnGroup().getLevel() + 1;
          s > e && (e = s);
          break;
        }
        i = i.getParent();
      }
    }
    return e;
  }
  // after setColumnWidth or updateGroupsAndPresentedCols
  updateBodyWidths() {
    const e = zt(this.centerCols), t = zt(this.leftCols), i = zt(this.rightCols);
    this.isBodyWidthDirty = this.bodyWidth !== e, (this.bodyWidth !== e || this.leftWidth !== t || this.rightWidth !== i) && (this.bodyWidth = e, this.leftWidth = t, this.rightWidth = i, this.eventSvc.dispatchEvent({
      type: "columnContainerWidthChanged"
    }), this.eventSvc.dispatchEvent({
      type: "displayedColumnsWidthChanged"
    }));
  }
  // sets the left pixel position of each column
  setLeftValues(e) {
    this.setLeftValuesOfCols(e), this.setLeftValuesOfGroups();
  }
  setFirstRightAndLastLeftPinned(e, t, i, s) {
    let o, n;
    this.gos.get("enableRtl") ? (o = t ? t[0] : null, n = i ? ue(i) : null) : (o = t ? ue(t) : null, n = i ? i[0] : null), e.getCols().forEach((r) => {
      r.setLastLeftPinned(r === o, s), r.setFirstRightPinned(r === n, s);
    });
  }
  buildTrees(e, t) {
    const i = e.getColsToShow(), s = i.filter((l) => l.getPinned() == "left"), o = i.filter((l) => l.getPinned() == "right"), n = i.filter((l) => l.getPinned() != "left" && l.getPinned() != "right"), r = new If(), a = (l) => t ? t.createColumnGroups(l) : l.columns;
    this.treeLeft = a({
      columns: s,
      idCreator: r,
      pinned: "left",
      oldDisplayedGroups: this.treeLeft
    }), this.treeRight = a({
      columns: o,
      idCreator: r,
      pinned: "right",
      oldDisplayedGroups: this.treeRight
    }), this.treeCenter = a({
      columns: n,
      idCreator: r,
      pinned: null,
      oldDisplayedGroups: this.treeCenter
    }), this.updateColsAndGroupsMap();
  }
  clear() {
    this.leftCols = [], this.rightCols = [], this.centerCols = [], this.allCols = [], this.ariaOrderColumns = [];
  }
  joinColsAriaOrder(e) {
    const t = e.getCols(), i = [], s = [], o = [];
    for (const n of t) {
      const r = n.getPinned();
      r ? r === !0 || r === "left" ? i.push(n) : o.push(n) : s.push(n);
    }
    this.ariaOrderColumns = i.concat(s).concat(o);
  }
  getAriaColIndex(e) {
    let t;
    return De(e) ? t = e.getLeafColumns()[0] : t = e, this.ariaOrderColumns.indexOf(t) + 1;
  }
  setLeftValuesOfGroups() {
    [this.treeLeft, this.treeRight, this.treeCenter].forEach((e) => {
      e.forEach((t) => {
        De(t) && t.checkLeft();
      });
    });
  }
  setLeftValuesOfCols(e) {
    const { colModel: t } = this.beans;
    if (!t.getColDefCols())
      return;
    const s = t.getCols().slice(0), o = this.gos.get("enableRtl");
    [this.leftCols, this.rightCols, this.centerCols].forEach((n) => {
      if (o) {
        let r = zt(n);
        n.forEach((a) => {
          r -= a.getActualWidth(), a.setLeft(r, e);
        });
      } else {
        let r = 0;
        n.forEach((a) => {
          a.setLeft(r, e), r += a.getActualWidth();
        });
      }
      eT(s, n);
    }), s.forEach((n) => {
      n.setLeft(null, e);
    });
  }
  joinCols() {
    this.gos.get("enableRtl") ? this.allCols = this.rightCols.concat(this.centerCols).concat(this.leftCols) : this.allCols = this.leftCols.concat(this.centerCols).concat(this.rightCols);
  }
  getAllTrees() {
    return this.treeLeft && this.treeRight && this.treeCenter ? this.treeLeft.concat(this.treeCenter).concat(this.treeRight) : null;
  }
  // gridPanel -> ensureColumnVisible
  isColDisplayed(e) {
    return this.allCols.indexOf(e) >= 0;
  }
  getLeftColsForRow(e) {
    const {
      leftCols: t,
      beans: { colModel: i }
    } = this;
    return i.colSpanActive ? this.getColsForRow(e, t) : t;
  }
  getRightColsForRow(e) {
    const {
      rightCols: t,
      beans: { colModel: i }
    } = this;
    return i.colSpanActive ? this.getColsForRow(e, t) : t;
  }
  getColsForRow(e, t, i, s) {
    const o = [];
    let n = null;
    for (let r = 0; r < t.length; r++) {
      const a = t[r], l = t.length - r, c = Math.min(a.getColSpan(e), l), d = [a];
      if (c > 1) {
        const h = c - 1;
        for (let g = 1; g <= h; g++)
          d.push(t[r + g]);
        r += h;
      }
      let u;
      i ? (u = !1, d.forEach((h) => {
        i(h) && (u = !0);
      })) : u = !0, u && (o.length === 0 && n && (s && s(a)) && o.push(n), o.push(a)), n = a;
    }
    return o;
  }
  getContainerWidth(e) {
    switch (e) {
      case "left":
        return this.leftWidth;
      case "right":
        return this.rightWidth;
      default:
        return this.bodyWidth;
    }
  }
  getColBefore(e) {
    const t = this.allCols, i = t.indexOf(e);
    return i > 0 ? t[i - 1] : null;
  }
  isPinningLeft() {
    return this.leftCols.length > 0;
  }
  isPinningRight() {
    return this.rightCols.length > 0;
  }
  updateColsAndGroupsMap() {
    this.colsAndGroupsMap = {};
    const e = (t) => {
      this.colsAndGroupsMap[t.getUniqueId()] = t;
    };
    Li(this.treeCenter, !1, e), Li(this.treeLeft, !1, e), Li(this.treeRight, !1, e);
  }
  isVisible(e) {
    return this.colsAndGroupsMap[e.getUniqueId()] === e;
  }
  getFirstColumn() {
    const e = this.gos.get("enableRtl"), t = ["leftCols", "centerCols", "rightCols"];
    e && t.reverse();
    for (let i = 0; i < t.length; i++) {
      const s = this[t[i]];
      if (s.length)
        return e ? ue(s) : s[0];
    }
    return null;
  }
  // used by:
  // + rowRenderer -> for navigation
  getColAfter(e) {
    const t = this.allCols, i = t.indexOf(e);
    return i < t.length - 1 ? t[i + 1] : null;
  }
  // used by:
  // + angularGrid -> setting pinned body width
  // note: this should be cached
  getColsLeftWidth() {
    return zt(this.leftCols);
  }
  // note: this should be cached
  getDisplayedColumnsRightWidth() {
    return zt(this.rightCols);
  }
  isColAtEdge(e, t) {
    const i = this.allCols;
    if (!i.length)
      return !1;
    const s = t === "first";
    let o;
    if (De(e)) {
      const n = e.getDisplayedLeafColumns();
      if (!n.length)
        return !1;
      o = s ? n[0] : ue(n);
    } else
      o = e;
    return (s ? i[0] : ue(i)) === o;
  }
};
function Li(e, t, i) {
  if (e)
    for (let s = 0; s < e.length; s++) {
      const o = e[s];
      if (De(o)) {
        const n = t ? o.getDisplayedChildren() : o.getChildren();
        Li(n, t, i);
      }
      i(o);
    }
}
function sa(e) {
  const t = [];
  return Li(e, !0, (i) => {
    gi(i) && t.push(i);
  }), t;
}
var iT = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colGroupSvc";
  }
  getColumnGroupState() {
    const e = [], t = this.beans.colModel.getColTree();
    return $t(null, t, (i) => {
      Ke(i) && e.push({
        groupId: i.getGroupId(),
        open: i.isExpanded()
      });
    }), e;
  }
  resetColumnGroupState(e) {
    const t = this.beans.colModel.getColDefColTree();
    if (!t)
      return;
    const i = [];
    $t(null, t, (s) => {
      if (Ke(s)) {
        const o = s.getColGroupDef(), n = {
          groupId: s.getGroupId(),
          open: o ? o.openByDefault : void 0
        };
        i.push(n);
      }
    }), this.setColumnGroupState(i, e);
  }
  setColumnGroupState(e, t) {
    const { colModel: i, colAnimation: s, visibleCols: o, eventSvc: n } = this.beans;
    if (!i.getColTree().length)
      return;
    s?.start();
    const a = [];
    e.forEach((l) => {
      const c = l.groupId, d = l.open, u = this.getProvidedColGroup(c);
      u && u.isExpanded() !== d && (u.setExpanded(d), a.push(u));
    }), o.refresh(t, !0), a.length && n.dispatchEvent({
      type: "columnGroupOpened",
      columnGroup: a.length === 1 ? a[0] : void 0,
      columnGroups: a
    }), s?.finish();
  }
  // called by headerRenderer - when a header is opened or closed
  setColumnGroupOpened(e, t, i) {
    let s;
    Ke(e) ? s = e.getId() : s = e || "", this.setColumnGroupState([{ groupId: s, open: t }], i);
  }
  getProvidedColGroup(e) {
    let t = null;
    return $t(null, this.beans.colModel.getColTree(), (i) => {
      Ke(i) && i.getId() === e && (t = i);
    }), t;
  }
  getGroupAtDirection(e, t) {
    const i = e.getProvidedColumnGroup().getLevel() + e.getPaddingLevel(), s = e.getDisplayedLeafColumns(), o = t === "After" ? ue(s) : s[0], n = `getCol${t}`;
    for (; ; ) {
      const r = this.beans.visibleCols[n](o);
      if (!r)
        return null;
      const a = this.getColGroupAtLevel(r, i);
      if (a !== e)
        return a;
    }
  }
  getColGroupAtLevel(e, t) {
    let i = e.getParent(), s, o;
    for (; s = i.getProvidedColumnGroup().getLevel(), o = i.getPaddingLevel(), !(s + o <= t); )
      i = i.getParent();
    return i;
  }
  updateOpenClosedVisibility() {
    const e = this.beans.visibleCols.getAllTrees();
    Li(e, !1, (t) => {
      De(t) && t.calculateDisplayedColumns();
    });
  }
  // returns the group with matching colId and instanceId. If instanceId is missing,
  // matches only on the colId.
  getColumnGroup(e, t) {
    if (!e)
      return null;
    if (De(e))
      return e;
    const i = this.beans.visibleCols.getAllTrees(), s = typeof t == "number";
    let o = null;
    return Li(i, !1, (n) => {
      if (De(n)) {
        const r = n;
        let a;
        s ? a = e === r.getGroupId() && t === r.getPartId() : a = e === r.getGroupId(), a && (o = r);
      }
    }), o;
  }
  createColumnGroups(e) {
    const { columns: t, idCreator: i, pinned: s, oldDisplayedGroups: o, isStandaloneStructure: n } = e, r = this.mapOldGroupsById(o), a = [];
    let l = t;
    for (; l.length; ) {
      const c = l;
      l = [];
      let d = 0;
      const u = (h) => {
        const g = d;
        d = h;
        const p = c[g], m = (De(p) ? p.getProvidedColumnGroup() : p).getOriginalParent();
        if (m == null) {
          for (let v = g; v < h; v++)
            a.push(c[v]);
          return;
        }
        const C = this.createColumnGroup(
          m,
          i,
          r,
          s,
          n
        );
        for (let v = g; v < h; v++)
          C.addChild(c[v]);
        l.push(C);
      };
      for (let h = 1; h < c.length; h++) {
        const g = c[h], f = (De(g) ? g.getProvidedColumnGroup() : g).getOriginalParent(), m = c[d], v = (De(m) ? m.getProvidedColumnGroup() : m).getOriginalParent();
        f !== v && u(h);
      }
      d < c.length && u(c.length);
    }
    return n || this.setupParentsIntoCols(a, null), a;
  }
  createProvidedColumnGroup(e, t, i, s, o, n, r) {
    const a = o.getUniqueKey(t.groupId || null, null), l = Ru(this.beans, t, a), c = new pn(l, a, !1, i);
    this.createBean(c);
    const d = this.findExistingGroup(t, n);
    d && n.splice(d.idx, 1);
    const u = d?.group;
    u && c.setExpanded(u.isExpanded());
    const h = xf(
      this.beans,
      l.children,
      i + 1,
      e,
      s,
      o,
      n,
      r
    );
    return c.setChildren(h), c;
  }
  balanceColumnTree(e, t, i, s) {
    const o = [];
    for (let n = 0; n < e.length; n++) {
      const r = e[n];
      if (Ke(r)) {
        const a = r, l = this.balanceColumnTree(
          a.getChildren(),
          t + 1,
          i,
          s
        );
        a.setChildren(l), o.push(a);
      } else {
        let a, l;
        for (let c = t; c < i; c++) {
          const d = s.getUniqueKey(null, null), u = Ru(this.beans, null, d), h = new pn(u, d, !0, c);
          this.createBean(h), l && l.setChildren([h]), l = h, a || (a = l);
        }
        if (a && l)
          if (o.push(a), e.some((d) => Ke(d))) {
            l.setChildren([r]);
            continue;
          } else {
            l.setChildren(e);
            break;
          }
        o.push(r);
      }
    }
    return o;
  }
  findDepth(e) {
    let t = 0, i = e;
    for (; i && i[0] && Ke(i[0]); )
      t++, i = i[0].getChildren();
    return t;
  }
  findMaxDepth(e, t) {
    let i = t;
    for (let s = 0; s < e.length; s++) {
      const o = e[s];
      if (Ke(o)) {
        const n = o, r = this.findMaxDepth(n.getChildren(), t + 1);
        i < r && (i = r);
      }
    }
    return i;
  }
  /**
   * Inserts dummy group columns in the hierarchy above auto-generated columns
   * in order to ensure auto-generated columns are leaf nodes (and therefore are
   * displayed correctly)
   */
  balanceTreeForAutoCols(e, t) {
    const i = [];
    return e.forEach((s) => {
      let o = s;
      for (let n = t - 1; n >= 0; n--) {
        const r = new pn(null, `FAKE_PATH_${s.getId()}}_${n}`, !0, n);
        this.createBean(r), r.setChildren([o]), o.originalParent = r, o = r;
      }
      t === 0 && (s.originalParent = null), i.push(o);
    }), i;
  }
  findExistingGroup(e, t) {
    if (e.groupId != null)
      for (let s = 0; s < t.length; s++) {
        const o = t[s];
        if (o.getColGroupDef() && o.getId() === e.groupId)
          return { idx: s, group: o };
      }
  }
  createColumnGroup(e, t, i, s, o) {
    const n = e.getGroupId(), r = t.getInstanceIdForKey(n), a = im(n, r);
    let l = i[a];
    return l && l.getProvidedColumnGroup() !== e && (l = null), $(l) ? l.reset() : (l = new Fo(e, n, r, s), o || this.createBean(l)), l;
  }
  // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup
  mapOldGroupsById(e) {
    const t = {}, i = (s) => {
      s.forEach((o) => {
        if (De(o)) {
          const n = o;
          t[o.getUniqueId()] = n, i(n.getChildren());
        }
      });
    };
    return e && i(e), t;
  }
  setupParentsIntoCols(e, t) {
    e.forEach((i) => {
      if (i.parent !== t && (this.beans.colViewport.colsWithinViewportHash = ""), i.parent = t, De(i)) {
        const s = i;
        this.setupParentsIntoCols(s.getChildren(), s);
      }
    });
  }
}, sT = {
  moduleName: "ColumnGroup",
  version: Y,
  dynamicBeans: { headerGroupCellCtrl: zD },
  beans: [iT],
  apiFunctions: {
    getAllDisplayedColumnGroups: JD,
    getCenterDisplayedColumnGroups: ZD,
    getColumnGroup: UD,
    getColumnGroupState: KD,
    getDisplayNameForColumnGroup: $D,
    getLeftDisplayedColumnGroups: XD,
    getProvidedColumnGroup: jD,
    getRightDisplayedColumnGroups: QD,
    resetColumnGroupState: qD,
    setColumnGroupOpened: _D,
    setColumnGroupState: YD
  }
}, oT = { tag: "div", cls: "ag-skeleton-container" }, nT = class extends pe {
  constructor() {
    super(oT);
  }
  init(t) {
    const i = `ag-cell-skeleton-renderer-${this.getCompId()}`;
    this.getGui().setAttribute("id", i), this.addDestroyFunc(() => Co(t.eParentOfValue)), Co(t.eParentOfValue, i), t.deferRender ? this.setupLoading(t) : t.node.failedLoad ? this.setupFailed() : this.setupLoading(t);
  }
  setupFailed() {
    const t = this.getLocaleTextFunc();
    this.getGui().textContent = t("loadingError", "ERR");
    const i = t("ariaSkeletonCellLoadingFailed", "Row failed to load");
    xs(this.getGui(), i);
  }
  setupLoading(t) {
    const i = Ae({
      tag: "div",
      cls: "ag-skeleton-effect"
    }), s = t.node.rowIndex;
    if (s != null) {
      const r = 75 + 25 * (s % 2 === 0 ? Math.sin(s) : Math.cos(s));
      i.style.width = `${r}%`;
    }
    this.getGui().appendChild(i);
    const o = this.getLocaleTextFunc(), n = t.deferRender ? o("ariaDeferSkeletonCellLoading", "Cell is loading") : o("ariaSkeletonCellLoading", "Row data is loading");
    xs(this.getGui(), n);
  }
  refresh(t) {
    return !1;
  }
}, rT = {
  moduleName: "CheckboxCellRenderer",
  version: Y,
  userComponents: {
    agCheckboxCellRenderer: i0
  }
}, aT = {
  moduleName: "SkeletonCellRenderer",
  version: Y,
  userComponents: {
    agSkeletonCellRenderer: nT
  }
};
function lT(e, t) {
  const i = e.colModel.getColDefCol(t);
  return i ? i.getColDef() : null;
}
function cT(e) {
  return e.colModel.getColumnDefs();
}
function dT(e, t, i) {
  return e.colNames.getDisplayNameForColumn(t, i) || "";
}
function uT(e, t) {
  return e.colModel.getColDefCol(t);
}
function hT(e) {
  return e.colModel.getColDefCols();
}
function gT(e, t) {
  return Ft(e, t, "api");
}
function pT(e) {
  return Kn(e);
}
function fT(e) {
  _x(e, "api");
}
function mT(e) {
  return e.visibleCols.isPinningLeft() || e.visibleCols.isPinningRight();
}
function CT(e) {
  return e.visibleCols.isPinningLeft();
}
function vT(e) {
  return e.visibleCols.isPinningRight();
}
function wT(e, t) {
  return e.visibleCols.getColAfter(t);
}
function ST(e, t) {
  return e.visibleCols.getColBefore(t);
}
function yT(e, t, i) {
  e.colModel.setColsVisible(t, i, "api");
}
function bT(e, t, i) {
  e.pinnedCols?.setColsPinned(t, i, "api");
}
function RT(e) {
  return e.colModel.getCols();
}
function xT(e) {
  return e.visibleCols.leftCols;
}
function FT(e) {
  return e.visibleCols.centerCols;
}
function PT(e) {
  return e.visibleCols.rightCols;
}
function ET(e) {
  return e.visibleCols.allCols;
}
function DT(e) {
  return e.colViewport.getViewportColumns();
}
function ul(e, t) {
  if (!e)
    return;
  const i = e, s = {};
  return Object.keys(i).forEach((o) => {
    if (t && t.indexOf(o) >= 0 || Ap.has(o))
      return;
    const n = i[o];
    typeof n == "object" && n !== null && n.constructor === Object ? s[o] = ul(n) : s[o] = n;
  }), s;
}
var TT = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colDefFactory";
  }
  wireBeans(e) {
    this.rowGroupColsSvc = e.rowGroupColsSvc, this.pivotColsSvc = e.pivotColsSvc;
  }
  getColumnDefs(e, t, i, s) {
    const o = e.slice();
    t ? o.sort((a, l) => i.indexOf(a) - i.indexOf(l)) : i && o.sort((a, l) => s.indexOf(a) - s.indexOf(l));
    const n = this.rowGroupColsSvc?.columns, r = this.pivotColsSvc?.columns;
    return this.buildColumnDefs(o, n, r);
  }
  buildColumnDefs(e, t = [], i = []) {
    const s = [], o = {};
    return e.forEach((n) => {
      const r = this.createDefFromColumn(n, t, i);
      let a = !0, l = r, c = n.getOriginalParent(), d = null;
      for (; c; ) {
        let u = null;
        if (c.isPadding()) {
          c = c.getOriginalParent();
          continue;
        }
        const h = o[c.getGroupId()];
        if (h) {
          h.children.push(l), a = !1;
          break;
        }
        if (u = this.createDefFromGroup(c), u && (u.children = [l], o[u.groupId] = u, l = u, c = c.getOriginalParent()), c != null && d === c) {
          a = !1;
          break;
        }
        d = c;
      }
      a && s.push(l);
    }), s;
  }
  createDefFromGroup(e) {
    const t = ul(e.getColGroupDef(), ["children"]);
    return t && (t.groupId = e.getGroupId()), t;
  }
  createDefFromColumn(e, t, i) {
    const s = ul(e.getColDef());
    return s.colId = e.getColId(), s.width = e.getActualWidth(), s.rowGroup = e.isRowGroupActive(), s.rowGroupIndex = e.isRowGroupActive() ? t.indexOf(e) : null, s.pivot = e.isPivotActive(), s.pivotIndex = e.isPivotActive() ? i.indexOf(e) : null, s.aggFunc = e.isValueActive() ? e.getAggFunc() : null, s.hide = e.isVisible() ? void 0 : !0, s.pinned = e.isPinned() ? e.getPinned() : null, s.sort = e.getSort() ? e.getSort() : null, s.sortIndex = e.getSortIndex() != null ? e.getSortIndex() : null, s;
  }
}, MT = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colFlex";
  }
  refreshFlexedColumns(e = {}) {
    const t = e.source ?? "flex";
    e.viewportWidth != null && (this.flexViewportWidth = e.viewportWidth);
    const i = this.flexViewportWidth;
    if (!i)
      return [];
    const { visibleCols: s } = this.beans, o = s.centerCols;
    let n = -1;
    if (e.resizingCols) {
      const p = new Set(e.resizingCols);
      for (let f = o.length - 1; f >= 0; f--)
        if (p.has(o[f])) {
          n = f;
          break;
        }
    }
    let r = !1;
    const a = o.map((p, f) => {
      const m = p.getFlex(), C = m != null && m > 0 && f > n;
      return r || (r = C), {
        col: p,
        isFlex: C,
        flex: Math.max(0, m ?? 0),
        initialSize: p.getActualWidth(),
        min: p.getMinWidth(),
        max: p.getMaxWidth(),
        targetSize: 0
      };
    });
    if (!r)
      return [];
    let l = a.length, c = a.reduce((p, f) => p + f.flex, 0), d = i;
    const u = (p, f) => {
      p.frozenSize = f, p.col.setActualWidth(f, t), d -= f, c -= p.flex, l -= 1;
    }, h = (p) => p.frozenSize != null;
    for (const p of a)
      p.isFlex || u(p, p.initialSize);
    for (; l > 0; ) {
      const p = Math.round(c < 1 ? d * c : d);
      let f, m = 0, C = 0;
      for (const y of a) {
        if (h(y))
          continue;
        f = y, C += p * (y.flex / c);
        const S = C - m, x = Math.round(S);
        y.targetSize = x, m += x;
      }
      f && (f.targetSize += p - m);
      let v = 0;
      for (const y of a) {
        if (h(y))
          continue;
        const S = y.targetSize, x = Math.min(Math.max(S, y.min), y.max);
        v += x - S, y.violationType = x === S ? void 0 : x < S ? "max" : "min", y.targetSize = x;
      }
      const w = v === 0 ? "all" : v > 0 ? "min" : "max";
      for (const y of a)
        h(y) || (w === "all" || y.violationType === w) && u(y, y.targetSize);
    }
    e.skipSetLeft || s.setLeftValues(t), e.updateBodyWidths && s.updateBodyWidths();
    const g = a.filter((p) => p.isFlex && !p.violationType).map((p) => p.col);
    if (e.fireResizedEvent) {
      const p = a.filter((m) => m.initialSize !== m.frozenSize).map((m) => m.col), f = a.filter((m) => m.flex).map((m) => m.col);
      Ps(this.eventSvc, p, !0, t, f);
    }
    return g;
  }
  initCol(e) {
    const { flex: t, initialFlex: i } = e.colDef;
    t !== void 0 ? e.flex = t : i !== void 0 && (e.flex = i);
  }
  // this method should only be used by the colModel to
  // change flex when required by the applyColumnState method.
  setColFlex(e, t) {
    e.flex = t ?? null, e.dispatchStateUpdatedEvent("flex");
  }
}, AT = [
  "dateTimeString",
  "dateString",
  "text",
  "number",
  "boolean",
  "date"
], IT = class extends T {
  constructor() {
    super(...arguments), this.beanName = "dataTypeSvc", this.dataTypeDefinitions = {}, this.isPendingInference = !1, this.isColumnTypeOverrideInDataTypeDefinitions = !1, this.columnStateUpdatesPendingInference = {}, this.columnStateUpdateListenerDestroyFuncs = [], this.columnDefinitionPropsPerDataType = {
      number() {
        return { cellEditor: "agNumberCellEditor" };
      },
      boolean() {
        return {
          cellEditor: "agCheckboxCellEditor",
          cellRenderer: "agCheckboxCellRenderer",
          getFindText: () => null,
          suppressKeyboardEvent: (e) => !!e.colDef.editable && e.event.key === E.SPACE
        };
      },
      date({ formatValue: e }) {
        return { cellEditor: "agDateCellEditor", keyCreator: e };
      },
      dateString({ formatValue: e }) {
        return { cellEditor: "agDateStringCellEditor", keyCreator: e };
      },
      dateTime(e) {
        return this.date(e);
      },
      dateTimeString(e) {
        return this.dateString(e);
      },
      object({ formatValue: e, colModel: t, colId: i }) {
        return {
          cellEditorParams: {
            useFormatter: !0
          },
          comparator: (s, o) => {
            const n = t.getColDefCol(i), r = n?.getColDef();
            if (!n || !r)
              return 0;
            const a = s == null ? "" : e({ column: n, node: null, value: s }), l = o == null ? "" : e({ column: n, node: null, value: o });
            return a === l ? 0 : a > l ? 1 : -1;
          },
          keyCreator: e
        };
      },
      text() {
        return {};
      }
    };
  }
  wireBeans(e) {
    this.colModel = e.colModel;
  }
  postConstruct() {
    this.processDataTypeDefinitions(), this.addManagedPropertyListener("dataTypeDefinitions", (e) => {
      this.processDataTypeDefinitions(), this.colModel.recreateColumnDefs(e);
    });
  }
  processDataTypeDefinitions() {
    const e = this.getDefaultDataTypes(), t = {}, i = {}, s = (d) => (u) => {
      const { column: h, node: g, value: p } = u;
      let f = h.getColDef().valueFormatter;
      return f === d.groupSafeValueFormatter && (f = d.valueFormatter), this.beans.valueSvc.formatValue(h, g, p, f);
    };
    for (const d of Object.keys(e)) {
      const u = e[d], h = {
        ...u,
        groupSafeValueFormatter: th(u, this.gos)
      };
      t[d] = h, i[d] = s(h);
    }
    const o = this.gos.get("dataTypeDefinitions") ?? {}, n = {};
    for (const d of Object.keys(o)) {
      const u = o[d], h = this.processDataTypeDefinition(
        u,
        o,
        [d],
        e
      );
      h && (t[d] = h, u.dataTypeMatcher && (n[d] = u.dataTypeMatcher), i[d] = s(h));
    }
    const { valueParser: r, valueFormatter: a } = e.object, { valueParser: l, valueFormatter: c } = t.object;
    this.hasObjectValueParser = l !== r, this.hasObjectValueFormatter = c !== a, this.formatValueFuncs = i, this.dataTypeDefinitions = t, this.dataTypeMatchers = this.sortKeysInMatchers(n, e);
  }
  /**
   * Sorts the keys in the matchers object.
   * Does not mutate the original object, creates a copy of it with sorted keys instead.
   */
  sortKeysInMatchers(e, t) {
    const i = { ...e };
    for (const s of AT)
      delete i[s], i[s] = e[s] ?? t[s].dataTypeMatcher;
    return i;
  }
  processDataTypeDefinition(e, t, i, s) {
    let o;
    const n = e.extendsDataType;
    if (e.columnTypes && (this.isColumnTypeOverrideInDataTypeDefinitions = !0), e.extendsDataType === e.baseDataType) {
      let r = s[n];
      const a = t[n];
      if (r && a && (r = a), !eh(e, r, n))
        return;
      o = Ju(r, e);
    } else {
      if (i.includes(n)) {
        B(44);
        return;
      }
      const r = t[n];
      if (!eh(e, r, n))
        return;
      const a = this.processDataTypeDefinition(
        r,
        t,
        [...i, n],
        s
      );
      if (!a)
        return;
      o = Ju(a, e);
    }
    return {
      ...o,
      groupSafeValueFormatter: th(o, this.gos)
    };
  }
  updateColDefAndGetColumnType(e, t, i) {
    let { cellDataType: s } = t;
    const { field: o } = t;
    if (s === void 0 && (s = e.cellDataType), (s == null || s === !0) && (s = this.canInferCellDataType(e, t) ? this.inferCellDataType(o, i) : !1), !s) {
      e.cellDataType = !1;
      return;
    }
    const n = this.dataTypeDefinitions[s];
    if (!n) {
      B(47, { cellDataType: s });
      return;
    }
    return e.cellDataType = s, n.groupSafeValueFormatter && (e.valueFormatter = n.groupSafeValueFormatter), n.valueParser && (e.valueParser = n.valueParser), n.suppressDefaultProperties || this.setColDefPropertiesForBaseDataType(e, s, n, i), n.columnTypes;
  }
  addColumnListeners(e) {
    if (!this.isPendingInference)
      return;
    const t = this.columnStateUpdatesPendingInference[e.getColId()];
    if (!t)
      return;
    const i = (s) => {
      t.add(s.key);
    };
    e.__addEventListener("columnStateUpdated", i), this.columnStateUpdateListenerDestroyFuncs.push(
      () => e.__removeEventListener("columnStateUpdated", i)
    );
  }
  canInferCellDataType(e, t) {
    const { gos: i } = this;
    if (!Oe(i))
      return !1;
    const s = { cellRenderer: !0, valueGetter: !0, valueParser: !0, refData: !0 };
    if (oa(t, s))
      return !1;
    const o = t.type === null ? e.type : t.type;
    if (o) {
      const n = i.get("columnTypes") ?? {};
      if ($n(o).some((a) => {
        const l = n[a.trim()];
        return l && oa(l, s);
      }))
        return !1;
    }
    return !oa(e, s);
  }
  inferCellDataType(e, t) {
    if (!e)
      return;
    let i;
    const s = this.getInitialData();
    if (s) {
      const n = e.indexOf(".") >= 0 && !this.gos.get("suppressFieldDotNotation");
      i = eo(s, e, n);
    } else
      this.initWaitForRowData(t);
    return i == null ? void 0 : Object.keys(this.dataTypeMatchers).find(
      (n) => this.dataTypeMatchers[n](i)
    ) ?? "object";
  }
  getInitialData() {
    const e = this.gos.get("rowData");
    if (e?.length)
      return e[0];
    if (this.initialData)
      return this.initialData;
    {
      const t = this.beans.rowModel.rootNode?.allLeafChildren;
      if (t?.length)
        return t[0].data;
    }
    return null;
  }
  initWaitForRowData(e) {
    if (this.columnStateUpdatesPendingInference[e] = /* @__PURE__ */ new Set(), this.isPendingInference)
      return;
    this.isPendingInference = !0;
    const t = this.isColumnTypeOverrideInDataTypeDefinitions, { colAutosize: i, eventSvc: s } = this.beans;
    t && i && (i.shouldQueueResizeOperations = !0);
    const [o] = this.addManagedEventListeners({
      rowDataUpdateStarted: (n) => {
        const { firstRowData: r } = n;
        r && (o?.(), this.isPendingInference = !1, this.processColumnsPendingInference(r, t), this.columnStateUpdatesPendingInference = {}, t && i?.processResizeOperations(), s.dispatchEvent({
          type: "dataTypesInferred"
        }));
      }
    });
  }
  processColumnsPendingInference(e, t) {
    this.initialData = e;
    const i = [];
    this.destroyColumnStateUpdateListeners();
    const s = {}, o = {};
    for (const n of Object.keys(this.columnStateUpdatesPendingInference)) {
      const r = this.columnStateUpdatesPendingInference[n], a = this.colModel.getCol(n);
      if (!a)
        return;
      const l = a.getColDef();
      if (!this.resetColDefIntoCol(a, "cellDataTypeInferred"))
        return;
      const c = a.getColDef();
      if (t && c.type && c.type !== l.type) {
        const d = LT(a, r);
        d.rowGroup && d.rowGroupIndex == null && (s[n] = d), d.pivot && d.pivotIndex == null && (o[n] = d), i.push(d);
      }
    }
    t && i.push(
      ...this.generateColumnStateForRowGroupAndPivotIndexes(
        s,
        o
      )
    ), i.length && Ft(this.beans, { state: i }, "cellDataTypeInferred"), this.initialData = null;
  }
  generateColumnStateForRowGroupAndPivotIndexes(e, t) {
    const i = {}, { rowGroupColsSvc: s, pivotColsSvc: o } = this.beans;
    return s?.restoreColumnOrder(i, e), o?.restoreColumnOrder(i, t), Object.values(i);
  }
  resetColDefIntoCol(e, t) {
    const i = e.getUserProvidedColDef();
    if (!i)
      return !1;
    const s = Za(this.beans, i, e.getColId());
    return e.setColDef(s, i, t), !0;
  }
  getDateStringTypeDefinition(e) {
    const { dateString: t } = this.dataTypeDefinitions;
    return e ? this.getDataTypeDefinition(e) ?? t : t;
  }
  getDateParserFunction(e) {
    return this.getDateStringTypeDefinition(e).dateParser;
  }
  getDateFormatterFunction(e) {
    return this.getDateStringTypeDefinition(e).dateFormatter;
  }
  getDateIncludesTimeFlag(e) {
    return e === "dateTime" || e === "dateTimeString";
  }
  getDataTypeDefinition(e) {
    const t = e.getColDef();
    if (t.cellDataType)
      return this.dataTypeDefinitions[t.cellDataType];
  }
  getBaseDataType(e) {
    return this.getDataTypeDefinition(e)?.baseDataType;
  }
  checkType(e, t) {
    if (t == null)
      return !0;
    const i = this.getDataTypeDefinition(e)?.dataTypeMatcher;
    return i ? i(t) : !0;
  }
  validateColDef(e) {
    const t = (i) => B(48, { property: i });
    if (e.cellDataType === "object") {
      const { object: i } = this.dataTypeDefinitions;
      e.valueFormatter === i.groupSafeValueFormatter && !this.hasObjectValueFormatter && t("Formatter"), e.editable && e.valueParser === i.valueParser && !this.hasObjectValueParser && t("Parser");
    }
  }
  postProcess(e) {
    const t = e.cellDataType;
    if (!t || typeof t != "string")
      return;
    const { dataTypeDefinitions: i, beans: s, formatValueFuncs: o } = this, n = i[t];
    s.colFilter?.setColDefPropsForDataType(e, n, o[t]);
  }
  // noinspection JSUnusedGlobalSymbols
  getFormatValue(e) {
    return this.formatValueFuncs[e];
  }
  isColPendingInference(e) {
    return this.isPendingInference && !!this.columnStateUpdatesPendingInference[e];
  }
  setColDefPropertiesForBaseDataType(e, t, i, s) {
    const o = this.formatValueFuncs[t], n = this.columnDefinitionPropsPerDataType[i.baseDataType]({
      colDef: e,
      cellDataType: t,
      colModel: this.colModel,
      dataTypeDefinition: i,
      colId: s,
      formatValue: o
    });
    Object.assign(e, n);
  }
  getDateObjectTypeDef(e) {
    const t = this.getLocaleTextFunc(), i = this.getDateIncludesTimeFlag(e);
    return {
      baseDataType: e,
      valueParser: (s) => st(s.newValue && String(s.newValue)),
      valueFormatter: (s) => s.value == null ? "" : !(s.value instanceof Date) || isNaN(s.value.getTime()) ? t("invalidDate", "Invalid Date") : lt(s.value, i) ?? "",
      dataTypeMatcher: (s) => s instanceof Date
    };
  }
  getDateStringTypeDef(e) {
    const t = this.getDateIncludesTimeFlag(e);
    return {
      baseDataType: e,
      dateParser: (i) => st(i) ?? void 0,
      dateFormatter: (i) => lt(i ?? null, t) ?? void 0,
      valueParser: (i) => Cn(String(i.newValue)) ? i.newValue : null,
      valueFormatter: (i) => Cn(String(i.value)) ? String(i.value) : "",
      dataTypeMatcher: (i) => typeof i == "string" && Cn(i)
    };
  }
  getDefaultDataTypes() {
    const e = this.getLocaleTextFunc();
    return {
      number: {
        baseDataType: "number",
        // can be empty space with legacy copy
        valueParser: (t) => t.newValue?.trim?.() === "" ? null : Number(t.newValue),
        valueFormatter: (t) => t.value == null ? "" : typeof t.value != "number" || isNaN(t.value) ? e("invalidNumber", "Invalid Number") : String(t.value),
        dataTypeMatcher: (t) => typeof t == "number"
      },
      text: {
        baseDataType: "text",
        valueParser: (t) => t.newValue === "" ? null : Na(t.newValue),
        dataTypeMatcher: (t) => typeof t == "string"
      },
      boolean: {
        baseDataType: "boolean",
        valueParser: (t) => t.newValue == null ? t.newValue : t.newValue?.trim?.() === "" ? null : String(t.newValue).toLowerCase() === "true",
        valueFormatter: (t) => t.value == null ? "" : String(t.value),
        dataTypeMatcher: (t) => typeof t == "boolean"
      },
      date: this.getDateObjectTypeDef("date"),
      dateString: this.getDateStringTypeDef("dateString"),
      dateTime: this.getDateObjectTypeDef("dateTime"),
      dateTimeString: {
        ...this.getDateStringTypeDef("dateTimeString"),
        dataTypeMatcher: (t) => typeof t == "string" && _P(t)
      },
      object: {
        baseDataType: "object",
        valueParser: () => null,
        valueFormatter: (t) => Na(t.value) ?? ""
      }
    };
  }
  destroyColumnStateUpdateListeners() {
    this.columnStateUpdateListenerDestroyFuncs.forEach((e) => e()), this.columnStateUpdateListenerDestroyFuncs = [];
  }
  destroy() {
    this.dataTypeDefinitions = {}, this.dataTypeMatchers = {}, this.formatValueFuncs = {}, this.columnStateUpdatesPendingInference = {}, this.destroyColumnStateUpdateListeners(), super.destroy();
  }
};
function Ju(e, t) {
  const i = {
    ...e,
    ...t
  };
  return e.columnTypes && t.columnTypes && t.appendColumnTypes && (i.columnTypes = [
    ...$n(e.columnTypes),
    ...$n(t.columnTypes)
  ]), i;
}
function eh(e, t, i) {
  return t ? t.baseDataType !== e.baseDataType ? (B(46), !1) : !0 : (B(45, { parentCellDataType: i }), !1);
}
function th(e, t) {
  if (e.valueFormatter)
    return (i) => {
      if (i.node?.group) {
        const s = (i.colDef.pivotValueColumn ?? i.column).getAggFunc();
        if (s) {
          if (s === "first" || s === "last")
            return e.valueFormatter(i);
          if (e.baseDataType === "number" && s !== "count") {
            if (typeof i.value == "number")
              return e.valueFormatter(i);
            if (typeof i.value == "object") {
              if (!i.value)
                return;
              if ("toNumber" in i.value)
                return e.valueFormatter({
                  ...i,
                  value: i.value.toNumber()
                });
              if ("value" in i.value)
                return e.valueFormatter({
                  ...i,
                  value: i.value.value
                });
            }
          }
          return;
        }
      } else if (t.get("groupHideOpenParents") && i.column.isRowGroupActive() && typeof i.value == "string" && !e.dataTypeMatcher?.(i.value))
        return;
      return e.valueFormatter(i);
    };
}
function kT(e, t, i, s) {
  if (!t[i])
    return !1;
  const o = e[i];
  return o === null ? (t[i] = !1, !1) : s === void 0 ? !!o : o === s;
}
function oa(e, t) {
  return [
    ["cellRenderer", "agSparklineCellRenderer"],
    ["valueGetter", void 0],
    ["valueParser", void 0],
    ["refData", void 0]
  ].some(
    ([i, s]) => kT(e, t, i, s)
  );
}
function LT(e, t) {
  const i = Af(e);
  return t.forEach((s) => {
    delete i[s], s === "rowGroup" ? delete i.rowGroupIndex : s === "pivot" && delete i.pivotIndex;
  }), i;
}
var OT = {
  moduleName: "DataType",
  version: Y,
  beans: [IT],
  dependsOn: [rT]
}, VT = {
  moduleName: "ColumnFlex",
  version: Y,
  beans: [MT]
}, Im = {
  moduleName: "ColumnApi",
  version: Y,
  beans: [TT],
  apiFunctions: {
    getColumnDef: lT,
    getDisplayNameForColumn: dT,
    getColumn: uT,
    getColumns: hT,
    applyColumnState: gT,
    getColumnState: pT,
    resetColumnState: fT,
    isPinning: mT,
    isPinningLeft: CT,
    isPinningRight: vT,
    getDisplayedColAfter: wT,
    getDisplayedColBefore: ST,
    setColumnsVisible: yT,
    setColumnsPinned: bT,
    getAllGridColumns: RT,
    getDisplayedLeftColumns: xT,
    getDisplayedCenterColumns: FT,
    getDisplayedRightColumns: PT,
    getAllDisplayedColumns: ET,
    getAllDisplayedVirtualColumns: DT,
    getColumnDefs: cT
  }
};
function GT(e) {
  if (!e || e == null)
    return null;
  const t = /([a-z])([A-Z])/g, i = /([A-Z]+)([A-Z])([a-z])/g;
  return e.replace(t, "$1 $2").replace(i, "$1 $2$3").replace(/\./g, " ").split(" ").map((o) => o.substring(0, 1).toUpperCase() + (o.length > 1 ? o.substring(1, o.length) : "")).join(" ");
}
var HT = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colNames";
  }
  getDisplayNameForColumn(e, t, i = !1) {
    if (!e)
      return null;
    const s = this.getHeaderName(e.getColDef(), e, null, null, t), { aggColNameSvc: o } = this.beans;
    return i && o ? o.getHeaderName(e, s) : s;
  }
  getDisplayNameForProvidedColumnGroup(e, t, i) {
    const s = t?.getColGroupDef();
    return s ? this.getHeaderName(s, null, e, t, i) : null;
  }
  getDisplayNameForColumnGroup(e, t) {
    return this.getDisplayNameForProvidedColumnGroup(e, e.getProvidedColumnGroup(), t);
  }
  // location is where the column is going to appear, ie who is calling us
  getHeaderName(e, t, i, s, o) {
    const n = e.headerValueGetter;
    if (n) {
      const r = Z(this.gos, {
        colDef: e,
        column: t,
        columnGroup: i,
        providedColumnGroup: s,
        location: o
      });
      return typeof n == "function" ? n(r) : typeof n == "string" ? this.beans.expressionSvc?.evaluate(n, r) ?? null : "";
    } else {
      if (e.headerName != null)
        return e.headerName;
      if (e.field)
        return GT(e.field);
    }
    return "";
  }
}, BT = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colViewport", this.colsWithinViewport = [], this.headerColsWithinViewport = [], this.colsWithinViewportHash = "", this.rowsOfHeadersToRenderLeft = {}, this.rowsOfHeadersToRenderRight = {}, this.rowsOfHeadersToRenderCenter = {}, this.columnsToRenderLeft = [], this.columnsToRenderRight = [], this.columnsToRenderCenter = [];
  }
  wireBeans(e) {
    this.visibleCols = e.visibleCols, this.colModel = e.colModel;
  }
  postConstruct() {
    this.suppressColumnVirtualisation = this.gos.get("suppressColumnVirtualisation");
  }
  setScrollPosition(e, t, i = !1) {
    const { visibleCols: s } = this, o = s.isBodyWidthDirty;
    if (!(e === this.scrollWidth && t === this.scrollPosition && !o)) {
      if (this.scrollWidth = e, this.scrollPosition = t, s.isBodyWidthDirty = !0, this.gos.get("enableRtl")) {
        const r = s.bodyWidth;
        this.viewportLeft = r - t - e, this.viewportRight = r - t;
      } else
        this.viewportLeft = t, this.viewportRight = e + t;
      this.colModel.ready && this.checkViewportColumns(i);
    }
  }
  /**
   * Returns the columns that are currently rendered in the viewport.
   */
  getColumnHeadersToRender(e) {
    switch (e) {
      case "left":
        return this.columnsToRenderLeft;
      case "right":
        return this.columnsToRenderRight;
      default:
        return this.columnsToRenderCenter;
    }
  }
  /**
   * Returns the column groups that are currently rendered in the viewport at a specific header row index.
   */
  getHeadersToRender(e, t) {
    let i;
    switch (e) {
      case "left":
        i = this.rowsOfHeadersToRenderLeft[t];
        break;
      case "right":
        i = this.rowsOfHeadersToRenderRight[t];
        break;
      default:
        i = this.rowsOfHeadersToRenderCenter[t];
        break;
    }
    return i ?? [];
  }
  extractViewportColumns() {
    const e = this.visibleCols.centerCols;
    this.isColumnVirtualisationSuppressed() ? (this.colsWithinViewport = e, this.headerColsWithinViewport = e) : (this.colsWithinViewport = e.filter(this.isColumnInRowViewport.bind(this)), this.headerColsWithinViewport = e.filter(this.isColumnInHeaderViewport.bind(this)));
  }
  isColumnVirtualisationSuppressed() {
    return this.suppressColumnVirtualisation || this.viewportRight === 0;
  }
  clear() {
    this.rowsOfHeadersToRenderLeft = {}, this.rowsOfHeadersToRenderRight = {}, this.rowsOfHeadersToRenderCenter = {}, this.colsWithinViewportHash = "";
  }
  isColumnInHeaderViewport(e) {
    return e.isAutoHeaderHeight() || NT(e) ? !0 : this.isColumnInRowViewport(e);
  }
  isColumnInRowViewport(e) {
    if (e.isAutoHeight())
      return !0;
    const t = e.getLeft() || 0, i = t + e.getActualWidth(), s = this.viewportLeft - 200, o = this.viewportRight + 200, n = t < s && i < s, r = t > o && i > o;
    return !n && !r;
  }
  // used by Grid API only
  getViewportColumns() {
    const { leftCols: e, rightCols: t } = this.visibleCols;
    return this.colsWithinViewport.concat(e).concat(t);
  }
  // + rowRenderer
  // if we are not column spanning, this just returns back the virtual centre columns,
  // however if we are column spanning, then different rows can have different virtual
  // columns, so we have to work out the list for each individual row.
  getColsWithinViewport(e) {
    if (!this.colModel.colSpanActive)
      return this.colsWithinViewport;
    const t = (n) => {
      const r = n.getLeft();
      return $(r) && r > this.viewportLeft;
    }, i = this.isColumnVirtualisationSuppressed() ? void 0 : this.isColumnInRowViewport.bind(this), { visibleCols: s } = this, o = s.centerCols;
    return s.getColsForRow(e, o, i, t);
  }
  // checks what columns are currently displayed due to column virtualisation. dispatches an event
  // if the list of columns has changed.
  // + setColumnWidth(), setViewportPosition(), setColumnDefs(), sizeColumnsToFit()
  checkViewportColumns(e = !1) {
    this.extractViewport() && this.eventSvc.dispatchEvent({
      type: "virtualColumnsChanged",
      afterScroll: e
    });
  }
  calculateHeaderRows() {
    const { leftCols: e, rightCols: t } = this.visibleCols;
    this.columnsToRenderLeft = e, this.columnsToRenderRight = t, this.columnsToRenderCenter = this.colsWithinViewport;
    const i = (s) => {
      const o = /* @__PURE__ */ new Set(), n = {};
      for (const r of s) {
        let a = r.getParent();
        const l = r.isSpanHeaderHeight();
        for (; a && !o.has(a); ) {
          if (l && a.isPadding()) {
            a = a.getParent();
            continue;
          }
          const d = a.getProvidedColumnGroup().getLevel();
          n[d] ?? (n[d] = []), n[d].push(a), o.add(a), a = a.getParent();
        }
      }
      return n;
    };
    this.rowsOfHeadersToRenderLeft = i(e), this.rowsOfHeadersToRenderRight = i(t), this.rowsOfHeadersToRenderCenter = i(this.headerColsWithinViewport);
  }
  extractViewport() {
    const e = (s) => `${s.getId()}-${s.getPinned() || "normal"}`;
    this.extractViewportColumns();
    const t = this.getViewportColumns().map(e).join("#"), i = this.colsWithinViewportHash !== t;
    return i && (this.colsWithinViewportHash = t, this.calculateHeaderRows()), i;
  }
};
function NT(e) {
  for (; e; ) {
    if (e.isAutoHeaderHeight())
      return !0;
    e = e.getParent();
  }
  return !1;
}
var WT = class extends T {
  constructor() {
    super(...arguments), this.beanName = "agCompUtils";
  }
  adaptFunction(e, t) {
    if (!e.cellRenderer)
      return null;
    class i {
      refresh() {
        return !1;
      }
      getGui() {
        return this.eGui;
      }
      init(o) {
        const n = t(o), r = typeof n;
        if (r === "string" || r === "number" || r === "boolean") {
          this.eGui = rc("<span>" + n + "</span>");
          return;
        }
        if (n == null) {
          this.eGui = Ae({ tag: "span" });
          return;
        }
        this.eGui = n;
      }
    }
    return i;
  }
}, zT = {
  moduleName: "CellRendererFunction",
  version: Y,
  beans: [WT]
}, _T = class extends T {
  constructor() {
    super(...arguments), this.beanName = "registry", this.agGridDefaults = {}, this.agGridDefaultOverrides = {}, this.jsComps = {}, this.selectors = {}, this.icons = {};
  }
  postConstruct() {
    const e = this.gos.get("components");
    if (e != null)
      for (const t of Object.keys(e))
        this.jsComps[t] = e[t];
  }
  registerModule(e) {
    const { icons: t, userComponents: i, dynamicBeans: s, selectors: o } = e;
    if (i) {
      const n = (r, a, l, c) => {
        this.agGridDefaults[r] = a, (l || c) && (this.agGridDefaultOverrides[r] = { params: l, processParams: c });
      };
      for (const r of Object.keys(i)) {
        let a = i[r];
        if (NF(a) && (a = a.getComp(this.beans)), typeof a == "object") {
          const { classImp: l, params: c, processParams: d } = a;
          n(r, l, c, d);
        } else
          n(r, a);
      }
    }
    if (s) {
      this.dynamicBeans ?? (this.dynamicBeans = {});
      for (const n of Object.keys(s))
        this.dynamicBeans[n] = s[n];
    }
    if (o?.forEach((n) => {
      this.selectors[n.selector] = n;
    }), t)
      for (const n of Object.keys(t))
        this.icons[n] = t[n];
  }
  getUserComponent(e, t) {
    const i = (a, l, c, d) => ({
      componentFromFramework: l,
      component: a,
      params: c,
      processParams: d
    }), { frameworkOverrides: s } = this.beans, o = s.frameworkComponent(t, this.gos.get("components"));
    if (o != null)
      return i(o, !0);
    const n = this.jsComps[t];
    if (n) {
      const a = s.isFrameworkComponent(n);
      return i(n, a);
    }
    const r = this.agGridDefaults[t];
    if (r) {
      const a = this.agGridDefaultOverrides[t];
      return i(r, !1, a?.params, a?.processParams);
    }
    return this.beans.validation?.missingUserComponent(e, t, this.agGridDefaults, this.jsComps), null;
  }
  createDynamicBean(e, t, ...i) {
    if (!this.dynamicBeans)
      throw new Error(Gt(279, { name: e }));
    const s = this.dynamicBeans[e];
    if (s == null) {
      if (t)
        throw new Error(this.beans.validation?.missingDynamicBean(e) ?? Gt(256));
      return;
    }
    return new s(...i);
  }
  getSelector(e) {
    return this.selectors[e];
  }
  getIcon(e) {
    return this.icons[e];
  }
}, UT = 23, jT = class extends T {
  constructor() {
    super(...arguments), this.beanName = "ctrlsSvc", this.params = {}, this.ready = !1, this.readyCallbacks = [];
  }
  postConstruct() {
    this.addEventListener(
      "ready",
      () => {
        this.updateReady(), this.ready && (this.readyCallbacks.forEach((e) => e(this.params)), this.readyCallbacks.length = 0);
      },
      this.beans.frameworkOverrides.runWhenReadyAsync?.() ?? !1
    );
  }
  updateReady() {
    const e = Object.values(this.params);
    this.ready = e.length === UT && e.every((t) => t?.isAlive() ?? !1);
  }
  whenReady(e, t) {
    this.ready ? t(this.params) : this.readyCallbacks.push(t), e.addDestroyFunc(() => {
      const i = this.readyCallbacks.indexOf(t);
      i >= 0 && this.readyCallbacks.splice(i, 1);
    });
  }
  register(e, t) {
    this.params[e] = t, this.updateReady(), this.ready && this.dispatchLocalEvent({ type: "ready" }), t.addDestroyFunc(() => {
      this.updateReady();
    });
  }
  get(e) {
    return this.params[e];
  }
  getGridBodyCtrl() {
    return this.params.gridBodyCtrl;
  }
  getHeaderRowContainerCtrls() {
    const { leftHeader: e, centerHeader: t, rightHeader: i } = this.params;
    return [e, i, t];
  }
  getHeaderRowContainerCtrl(e) {
    const t = this.params;
    switch (e) {
      case "left":
        return t.leftHeader;
      case "right":
        return t.rightHeader;
      default:
        return t.centerHeader;
    }
  }
  getScrollFeature() {
    return this.getGridBodyCtrl().scrollFeature;
  }
}, $T = (
  /*css*/
  ':where(.ag-root-wrapper,.ag-popup,.ag-dnd-ghost,.ag-chart),:where(.ag-root-wrapper,.ag-popup,.ag-dnd-ghost,.ag-chart) :where([class^=ag-]){box-sizing:border-box;&:after,&:before{box-sizing:border-box}&:where(div,span,label):focus-visible{box-shadow:inset var(--ag-focus-shadow);outline:none;&:where(.invalid){box-shadow:inset var(--ag-focus-error-shadow)}}&:where(button){color:inherit}}:where(.ag-root-wrapper,.ag-popup,.ag-dnd-ghost,.ag-chart) :where([class^=ag-]) ::-ms-clear{display:none}.ag-aria-description-container{border:0;z-index:9999;clip:rect(1px,1px,1px,1px);height:1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.ag-hidden{display:none!important}.ag-invisible{visibility:hidden!important}.ag-unselectable{-webkit-user-select:none;-moz-user-select:none;user-select:none}.ag-selectable{-webkit-user-select:text;-moz-user-select:text;user-select:text}.ag-tab-guard{display:block;height:0;position:absolute;width:0}:where(.ag-virtual-list-viewport) .ag-tab-guard{position:sticky}.ag-tab-guard-top{top:1px}.ag-tab-guard-bottom{bottom:1px}.ag-shake-left-to-right{animation-direction:alternate;animation-duration:.2s;animation-iteration-count:infinite;animation-name:ag-shake-left-to-right}@keyframes ag-shake-left-to-right{0%{padding-left:6px;padding-right:2px}to{padding-left:2px;padding-right:6px}}.ag-body-horizontal-scroll-viewport,.ag-body-vertical-scroll-viewport,.ag-body-viewport,.ag-center-cols-viewport,.ag-floating-bottom-viewport,.ag-floating-top-viewport,.ag-header-viewport,.ag-sticky-bottom-viewport,.ag-sticky-top-viewport,.ag-virtual-list-viewport{flex:1 1 auto;height:100%;min-width:0;overflow:hidden;position:relative}.ag-viewport{position:relative}.ag-spanning-container{position:absolute;top:0;z-index:1}.ag-body-viewport,.ag-center-cols-viewport,.ag-floating-bottom-viewport,.ag-floating-top-viewport,.ag-header-viewport,.ag-sticky-bottom-viewport,.ag-sticky-top-viewport{overflow-x:auto;-ms-overflow-style:none!important;scrollbar-width:none!important;&::-webkit-scrollbar{display:none!important}}.ag-body-viewport{display:flex;overflow-x:hidden;&:where(.ag-layout-normal){overflow-y:auto;-webkit-overflow-scrolling:touch}}.ag-floating-bottom-container,.ag-floating-top-container,.ag-sticky-bottom-container,.ag-sticky-top-container{min-height:1px}.ag-center-cols-viewport{min-height:100%;width:100%}.ag-body-horizontal-scroll-viewport{overflow-x:scroll}.ag-body-vertical-scroll-viewport{overflow-y:scroll}.ag-virtual-list-viewport{overflow:auto;width:100%}.ag-body-container,.ag-body-horizontal-scroll-container,.ag-body-vertical-scroll-container,.ag-center-cols-container,.ag-floating-bottom-container,.ag-floating-bottom-full-width-container,.ag-floating-top-container,.ag-full-width-container,.ag-header-container,.ag-pinned-left-cols-container,.ag-pinned-right-cols-container,.ag-sticky-bottom-container,.ag-sticky-top-container,.ag-virtual-list-container{position:relative}.ag-floating-bottom-container,.ag-floating-top-container,.ag-header-container,.ag-pinned-left-floating-bottom,.ag-pinned-left-floating-top,.ag-pinned-right-floating-bottom,.ag-pinned-right-floating-top,.ag-sticky-bottom-container,.ag-sticky-top-container{height:100%;white-space:nowrap}.ag-center-cols-container,.ag-pinned-right-cols-container{display:block}.ag-body-horizontal-scroll-container{height:100%}.ag-body-vertical-scroll-container{width:100%}.ag-floating-bottom-full-width-container,.ag-floating-top-full-width-container,.ag-full-width-container,.ag-sticky-bottom-full-width-container,.ag-sticky-top-full-width-container{pointer-events:none;position:absolute;top:0}:where(.ag-ltr) .ag-floating-bottom-full-width-container,:where(.ag-ltr) .ag-floating-top-full-width-container,:where(.ag-ltr) .ag-full-width-container,:where(.ag-ltr) .ag-sticky-bottom-full-width-container,:where(.ag-ltr) .ag-sticky-top-full-width-container{left:0}:where(.ag-rtl) .ag-floating-bottom-full-width-container,:where(.ag-rtl) .ag-floating-top-full-width-container,:where(.ag-rtl) .ag-full-width-container,:where(.ag-rtl) .ag-sticky-bottom-full-width-container,:where(.ag-rtl) .ag-sticky-top-full-width-container{right:0}.ag-full-width-container{width:100%}.ag-floating-bottom-full-width-container,.ag-floating-top-full-width-container{display:inline-block;height:100%;overflow:hidden;width:100%}.ag-virtual-list-container{overflow:hidden}.ag-body{display:flex;flex:1 1 auto;flex-direction:row!important;min-height:0;position:relative}.ag-body-horizontal-scroll,.ag-body-vertical-scroll{display:flex;min-height:0;min-width:0;position:relative;&:where(.ag-scrollbar-invisible){bottom:0;position:absolute;&:where(.ag-apple-scrollbar){opacity:0;transition:opacity .4s;visibility:hidden;&:where(.ag-scrollbar-scrolling,.ag-scrollbar-active){opacity:1;visibility:visible}}}}.ag-body-horizontal-scroll{width:100%;&:where(.ag-scrollbar-invisible){left:0;right:0}}.ag-body-vertical-scroll{height:100%;&:where(.ag-scrollbar-invisible){top:0;z-index:10}}:where(.ag-ltr) .ag-body-vertical-scroll{&:where(.ag-scrollbar-invisible){right:0}}:where(.ag-rtl) .ag-body-vertical-scroll{&:where(.ag-scrollbar-invisible){left:0}}.ag-force-vertical-scroll{overflow-y:scroll!important}.ag-horizontal-left-spacer,.ag-horizontal-right-spacer{height:100%;min-width:0;overflow-x:scroll;&:where(.ag-scroller-corner){overflow-x:hidden}}:where(.ag-row-animation) .ag-row{transition:transform .4s,top .4s,opacity .2s;&:where(.ag-after-created){transition:transform .4s,top .4s,height .4s,opacity .2s}}:where(.ag-row-animation.ag-prevent-animation) .ag-row{transition:none!important;&:where(.ag-row.ag-after-created){transition:none!important}}:where(.ag-row-no-animation) .ag-row{transition:none}.ag-row-loading{align-items:center;display:flex}.ag-row-position-absolute{position:absolute}.ag-row-position-relative{position:relative}.ag-full-width-row{overflow:hidden;pointer-events:all}.ag-row-inline-editing{z-index:1}.ag-row-dragging{z-index:2}.ag-stub-cell{align-items:center;display:flex}.ag-cell{display:inline-block;height:100%;position:absolute;white-space:nowrap;&:focus-visible{box-shadow:none}}.ag-cell-value{flex:1 1 auto}.ag-cell-value,.ag-group-value{overflow:hidden;text-overflow:ellipsis}.ag-cell-wrap-text{white-space:normal;word-break:break-word}:where(.ag-cell) .ag-icon{display:inline-block;vertical-align:middle}.ag-floating-top{display:flex;overflow:hidden;position:relative;white-space:nowrap;width:100%}:where(.ag-floating-top:not(.ag-invisible)){border-bottom:var(--ag-pinned-row-border)}.ag-floating-bottom{display:flex;overflow:hidden;position:relative;white-space:nowrap;width:100%}:where(.ag-floating-bottom:not(.ag-invisible)){border-top:var(--ag-pinned-row-border)}.ag-sticky-bottom,.ag-sticky-top{background-color:var(--ag-background-color);display:flex;height:0;overflow:hidden;position:absolute;width:100%;z-index:1}.ag-opacity-zero{opacity:0!important}.ag-cell-label-container{align-items:center;display:flex;flex-direction:row-reverse;height:100%;justify-content:space-between;width:100%}:where(.ag-right-aligned-header){.ag-cell-label-container{flex-direction:row}.ag-header-cell-text{text-align:end}}.ag-column-group-icons{display:block;>*{cursor:pointer}}:where(.ag-ltr){direction:ltr;.ag-body,.ag-body-horizontal-scroll,.ag-body-viewport,.ag-floating-bottom,.ag-floating-top,.ag-header,.ag-sticky-bottom,.ag-sticky-top{flex-direction:row}}:where(.ag-rtl){direction:rtl;text-align:right;.ag-body,.ag-body-horizontal-scroll,.ag-body-viewport,.ag-floating-bottom,.ag-floating-top,.ag-header,.ag-sticky-bottom,.ag-sticky-top{flex-direction:row-reverse}.ag-icon-contracted,.ag-icon-expanded,.ag-icon-tree-closed{display:block}}:where(.ag-rtl){.ag-icon-contracted,.ag-icon-expanded,.ag-icon-tree-closed{transform:rotate(180deg)}}:where(.ag-rtl){.ag-icon-contracted,.ag-icon-expanded,.ag-icon-tree-closed{transform:rotate(-180deg)}}.ag-measurement-container{height:0;overflow:hidden;visibility:hidden;width:0}.ag-measurement-element-border{display:inline-block;&:before{border-left:var(--ag-internal-measurement-border);content:"";display:block}}.ag-group{position:relative;width:100%}.ag-group-title-bar{align-items:center;display:flex;padding:var(--ag-spacing)}.ag-group-title{display:inline;min-width:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:where(.ag-group-title-bar) .ag-group-title{cursor:default}.ag-group-toolbar{align-items:center;display:flex;padding:var(--ag-spacing)}.ag-group-container{display:flex}.ag-disabled .ag-group-container{pointer-events:none}.ag-disabled-group-container,.ag-disabled-group-title-bar{opacity:.5}.ag-group-container-horizontal{flex-flow:row wrap}.ag-group-container-vertical{flex-direction:column}.ag-group-title-bar-icon{cursor:pointer;flex:none}:where(.ag-ltr) .ag-group-title-bar-icon{margin-right:var(--ag-spacing)}:where(.ag-rtl) .ag-group-title-bar-icon{margin-left:var(--ag-spacing)}:where(.ag-group-item-alignment-stretch) .ag-group-item{align-items:stretch}:where(.ag-group-item-alignment-start) .ag-group-item{align-items:flex-start}:where(.ag-group-item-alignment-end) .ag-group-item{align-items:flex-end}.ag-popup-child{top:0;z-index:5;&:where(:not(.ag-tooltip-custom)){box-shadow:var(--ag-popup-shadow)}}.ag-popup-editor{position:absolute;-webkit-user-select:none;-moz-user-select:none;user-select:none}.ag-large-text-input{display:block}:where(.ag-ltr) .ag-row:not(.ag-row-level-0) .ag-pivot-leaf-group{margin-left:var(--ag-row-group-indent-size)}:where(.ag-rtl) .ag-row:not(.ag-row-level-0) .ag-pivot-leaf-group{margin-right:var(--ag-row-group-indent-size)}:where(.ag-ltr) .ag-row-group-leaf-indent{margin-left:calc(var(--ag-cell-widget-spacing) + var(--ag-icon-size))}:where(.ag-rtl) .ag-row-group-leaf-indent{margin-right:calc(var(--ag-cell-widget-spacing) + var(--ag-icon-size))}.ag-value-change-delta{padding:0 2px}.ag-value-change-delta-up{color:var(--ag-value-change-delta-up-color)}.ag-value-change-delta-down{color:var(--ag-value-change-delta-down-color)}.ag-value-change-value{background-color:transparent;border-radius:1px;padding-left:1px;padding-right:1px;transition:background-color 1s}.ag-value-change-value-highlight{background-color:var(--ag-value-change-value-highlight-background-color);transition:background-color .1s}.ag-cell-data-changed{background-color:var(--ag-value-change-value-highlight-background-color)!important}.ag-cell-data-changed-animation{background-color:transparent}.ag-cell-highlight{background-color:var(--ag-range-selection-highlight-color)!important}.ag-row,.ag-spanned-row{color:var(--ag-cell-text-color);font-family:var(--ag-cell-font-family);font-size:var(--ag-data-font-size);white-space:nowrap;--ag-internal-content-line-height:calc(min(var(--ag-row-height), var(--ag-line-height, 1000px)) - var(--ag-internal-row-border-width, 1px) - 2px)}.ag-row{background-color:var(--ag-background-color);border-bottom:var(--ag-row-border);height:var(--ag-row-height);width:100%;&.ag-row-editing-invalid{background-color:var(--ag-full-row-edit-invalid-background-color)}}:where(.ag-body-vertical-content-no-gap>div>div>div,.ag-body-vertical-content-no-gap>div>div>div>div)>.ag-row-last{border-bottom-color:transparent}.ag-sticky-bottom{border-top:var(--ag-row-border);box-sizing:content-box!important}.ag-group-contracted,.ag-group-expanded{cursor:pointer}.ag-cell,.ag-full-width-row .ag-cell-wrapper.ag-row-group{border:1px solid transparent;line-height:var(--ag-internal-content-line-height);-webkit-font-smoothing:subpixel-antialiased}:where(.ag-ltr) .ag-cell{border-right:var(--ag-column-border)}:where(.ag-rtl) .ag-cell{border-left:var(--ag-column-border)}.ag-spanned-cell-wrapper{background-color:var(--ag-background-color);position:absolute}.ag-spanned-cell-wrapper>.ag-spanned-cell{display:block;position:relative}:where(.ag-ltr) :where(.ag-body-horizontal-content-no-gap) .ag-column-last{border-right-color:transparent}:where(.ag-rtl) :where(.ag-body-horizontal-content-no-gap) .ag-column-last{border-left-color:transparent}.ag-cell-wrapper{align-items:center;display:flex;>:where(:not(.ag-cell-value,.ag-group-value)){align-items:center;display:flex;height:var(--ag-internal-content-line-height)}&:where(.ag-row-group){align-items:flex-start}:where(.ag-full-width-row) &:where(.ag-row-group){align-items:center;height:100%}}:where(.ag-ltr) .ag-cell-wrapper{padding-left:calc(var(--ag-indentation-level)*var(--ag-row-group-indent-size))}:where(.ag-rtl) .ag-cell-wrapper{padding-right:calc(var(--ag-indentation-level)*var(--ag-row-group-indent-size))}:where(.ag-cell-wrap-text:not(.ag-cell-auto-height)) .ag-cell-wrapper{align-items:normal;height:100%;:where(.ag-cell-value){height:100%}}:where(.ag-ltr) .ag-row>.ag-cell-wrapper.ag-row-group{padding-left:calc(var(--ag-cell-horizontal-padding) + var(--ag-row-group-indent-size)*var(--ag-indentation-level))}:where(.ag-rtl) .ag-row>.ag-cell-wrapper.ag-row-group{padding-right:calc(var(--ag-cell-horizontal-padding) + var(--ag-row-group-indent-size)*var(--ag-indentation-level))}.ag-cell-focus:not(.ag-cell-range-selected):focus-within,.ag-cell-range-single-cell,.ag-cell-range-single-cell.ag-cell-range-handle,.ag-context-menu-open .ag-cell-focus:not(.ag-cell-range-selected),.ag-context-menu-open .ag-full-width-row.ag-row-focus .ag-cell-wrapper.ag-row-group,.ag-full-width-row.ag-row-focus:focus .ag-cell-wrapper.ag-row-group{border:1px solid;border-color:var(--ag-range-selection-border-color);border-style:var(--ag-range-selection-border-style);outline:initial}.ag-full-width-row.ag-row-focus:focus{box-shadow:none}:where(.ag-ltr) .ag-group-contracted,:where(.ag-ltr) .ag-group-expanded,:where(.ag-ltr) .ag-row-drag,:where(.ag-ltr) .ag-selection-checkbox{margin-right:var(--ag-cell-widget-spacing)}:where(.ag-rtl) .ag-group-contracted,:where(.ag-rtl) .ag-group-expanded,:where(.ag-rtl) .ag-row-drag,:where(.ag-rtl) .ag-selection-checkbox{margin-left:var(--ag-cell-widget-spacing)}:where(.ag-ltr) .ag-group-child-count{margin-left:3px}:where(.ag-rtl) .ag-group-child-count{margin-right:3px}.ag-row-highlight-above:after,.ag-row-highlight-below:after,.ag-row-highlight-inside:after{background-color:var(--ag-range-selection-border-color);content:"";height:1px;pointer-events:none;position:absolute;width:calc(100% - 1px)}:where(.ag-ltr) .ag-row-highlight-above:after,:where(.ag-ltr) .ag-row-highlight-below:after,:where(.ag-ltr) .ag-row-highlight-inside:after{left:1px}:where(.ag-rtl) .ag-row-highlight-above:after,:where(.ag-rtl) .ag-row-highlight-below:after,:where(.ag-rtl) .ag-row-highlight-inside:after{right:1px}.ag-row-highlight-above:after{top:0}.ag-row-highlight-below:after{bottom:0}.ag-row-highlight-indent:after{display:block;width:auto}:where(.ag-ltr) .ag-row-highlight-indent:after{left:calc((var(--ag-cell-widget-spacing) + var(--ag-icon-size))*2 + var(--ag-cell-horizontal-padding) + var(--ag-row-highlight-level)*var(--ag-row-group-indent-size));right:1px}:where(.ag-rtl) .ag-row-highlight-indent:after{left:1px;right:calc((var(--ag-cell-widget-spacing) + var(--ag-icon-size))*2 + var(--ag-cell-horizontal-padding) + var(--ag-row-highlight-level)*var(--ag-row-group-indent-size))}.ag-row-highlight-inside:after{background-color:var(--ag-selected-row-background-color);border:1px solid var(--ag-range-selection-border-color);display:block;height:auto;inset:0;width:auto}.ag-row-odd{background-color:var(--ag-odd-row-background-color)}.ag-row-selected:before{background-color:var(--ag-selected-row-background-color);content:"";display:block;inset:0;pointer-events:none;position:absolute}.ag-row-hover.ag-full-width-row.ag-row-group:before,.ag-row-hover:not(.ag-full-width-row):before{background-color:var(--ag-row-hover-color);content:"";display:block;inset:0;pointer-events:none;position:absolute}.ag-row-hover.ag-row-selected:before{background-color:var(--ag-row-hover-color);background-image:linear-gradient(var(--ag-selected-row-background-color),var(--ag-selected-row-background-color))}.ag-row.ag-full-width-row.ag-row-group>*{position:relative}.ag-column-hover{background-color:var(--ag-column-hover-color)}.ag-header-range-highlight{background-color:var(--ag-range-header-highlight-color)}.ag-right-aligned-cell{font-variant-numeric:tabular-nums}:where(.ag-ltr) .ag-right-aligned-cell{text-align:right}:where(.ag-rtl) .ag-right-aligned-cell{text-align:left}.ag-right-aligned-cell .ag-cell-value,.ag-right-aligned-cell .ag-group-value{margin-left:auto}:where(.ag-ltr) .ag-cell:not(.ag-cell-inline-editing),:where(.ag-ltr) .ag-full-width-row .ag-cell-wrapper.ag-row-group{padding-left:calc(var(--ag-cell-horizontal-padding) - 1px + var(--ag-row-group-indent-size)*var(--ag-indentation-level));padding-right:calc(var(--ag-cell-horizontal-padding) - 1px)}:where(.ag-rtl) .ag-cell:not(.ag-cell-inline-editing),:where(.ag-rtl) .ag-full-width-row .ag-cell-wrapper.ag-row-group{padding-left:calc(var(--ag-cell-horizontal-padding) - 1px);padding-right:calc(var(--ag-cell-horizontal-padding) - 1px + var(--ag-row-group-indent-size)*var(--ag-indentation-level))}.ag-row>.ag-cell-wrapper{padding-left:calc(var(--ag-cell-horizontal-padding) - 1px);padding-right:calc(var(--ag-cell-horizontal-padding) - 1px)}.ag-row-dragging{cursor:move;opacity:.5}.ag-details-row{background-color:var(--ag-background-color);padding:calc(var(--ag-spacing)*3.75)}.ag-layout-auto-height,.ag-layout-print{.ag-center-cols-container,.ag-center-cols-viewport{min-height:150px}}.ag-overlay-loading-wrapper{background-color:var(--ag-modal-overlay-background-color)}.ag-skeleton-container{align-content:center;height:100%;width:100%}.ag-skeleton-effect{animation:ag-skeleton-loading 1.5s ease-in-out .5s infinite;background-color:var(--ag-row-loading-skeleton-effect-color);border-radius:.25rem;height:1em;width:100%}:where(.ag-ltr) .ag-right-aligned-cell .ag-skeleton-effect{margin-left:auto}:where(.ag-rtl) .ag-right-aligned-cell .ag-skeleton-effect{margin-right:auto}@keyframes ag-skeleton-loading{0%{background-color:var(--ag-row-loading-skeleton-effect-color)}50%{background-color:color-mix(in srgb,transparent,var(--ag-row-loading-skeleton-effect-color) 40%)}to{background-color:var(--ag-row-loading-skeleton-effect-color)}}.ag-loading{align-items:center;display:flex;height:100%}:where(.ag-ltr) .ag-loading{padding-left:var(--ag-cell-horizontal-padding)}:where(.ag-rtl) .ag-loading{padding-right:var(--ag-cell-horizontal-padding)}:where(.ag-ltr) .ag-loading-icon{padding-right:var(--ag-cell-widget-spacing)}:where(.ag-rtl) .ag-loading-icon{padding-left:var(--ag-cell-widget-spacing)}.ag-icon-loading{animation-duration:1s;animation-iteration-count:infinite;animation-name:spin;animation-timing-function:linear}@keyframes spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}.ag-input-wrapper,.ag-picker-field-wrapper{align-items:center;display:flex;flex:1 1 auto;line-height:normal;position:relative}.ag-input-field{align-items:center;display:flex;flex-direction:row}.ag-input-field-input:where(:not([type=checkbox],[type=radio])){flex:1 1 auto;min-width:0;width:100%}.ag-header{background-color:var(--ag-header-background-color);border-bottom:var(--ag-header-row-border);color:var(--ag-header-text-color);display:flex;font-family:var(--ag-header-font-family);font-size:var(--ag-header-font-size);font-weight:var(--ag-header-font-weight);overflow:hidden;white-space:nowrap;width:100%}.ag-header-row{height:var(--ag-header-height);position:absolute}.ag-floating-filter-button-button,.ag-header-cell-filter-button,.ag-header-cell-menu-button,.ag-header-expand-icon,.ag-panel-title-bar-button,:where(.ag-header-cell-sortable) .ag-header-cell-label{cursor:pointer}:where(.ag-ltr) .ag-header-expand-icon{margin-left:4px}:where(.ag-rtl) .ag-header-expand-icon{margin-right:4px}.ag-header-row:where(:not(:first-child)){:where(.ag-header-cell:not(.ag-header-span-height.ag-header-span-total,.ag-header-parent-hidden),.ag-header-group-cell.ag-header-group-cell-with-group){border-top:var(--ag-header-row-border)}}.ag-header-row:where(:not(.ag-header-row-column-group)){overflow:hidden}:where(.ag-header.ag-header-allow-overflow) .ag-header-row{overflow:visible}.ag-header-cell{display:inline-flex;overflow:hidden}.ag-header-group-cell{contain:paint;display:flex}.ag-header-cell,.ag-header-group-cell{align-items:center;gap:var(--ag-cell-widget-spacing);height:100%;padding:0 var(--ag-cell-horizontal-padding);position:absolute}@property --ag-internal-moving-color{syntax:"<color>";inherits:false;initial-value:transparent}@property --ag-internal-hover-color{syntax:"<color>";inherits:false;initial-value:transparent}.ag-header-cell:where(:not(.ag-floating-filter)),.ag-header-group-cell{&:before{background-image:linear-gradient(var(--ag-internal-hover-color),var(--ag-internal-hover-color)),linear-gradient(var(--ag-internal-moving-color),var(--ag-internal-moving-color));content:"";inset:0;position:absolute;--ag-internal-moving-color:transparent;--ag-internal-hover-color:transparent;transition:--ag-internal-moving-color var(--ag-header-cell-background-transition-duration),--ag-internal-hover-color var(--ag-header-cell-background-transition-duration)}&:where(:hover):before{--ag-internal-hover-color:var(--ag-header-cell-hover-background-color)}&:where(.ag-header-cell-moving):before{--ag-internal-moving-color:var(--ag-header-cell-moving-background-color);--ag-internal-hover-color:var(--ag-header-cell-hover-background-color)}}:where(.ag-header-cell:not(.ag-floating-filter) *,.ag-header-group-cell *){position:relative;z-index:1}.ag-header-cell-menu-button:where(:not(.ag-header-menu-always-show)){opacity:0;transition:opacity .2s}.ag-header-cell-filter-button,:where(.ag-header-cell.ag-header-active) .ag-header-cell-menu-button{opacity:1}.ag-header-cell-label,.ag-header-group-cell-label{align-items:center;align-self:stretch;display:flex;flex:1 1 auto;overflow:hidden;padding:5px 0}:where(.ag-ltr) .ag-sort-indicator-icon{padding-left:var(--ag-spacing)}:where(.ag-rtl) .ag-sort-indicator-icon{padding-right:var(--ag-spacing)}.ag-header-cell-label{text-overflow:ellipsis}.ag-header-group-cell-label.ag-sticky-label{flex:none;max-width:100%;overflow:visible;position:sticky}:where(.ag-ltr) .ag-header-group-cell-label.ag-sticky-label{left:var(--ag-cell-horizontal-padding)}:where(.ag-rtl) .ag-header-group-cell-label.ag-sticky-label{right:var(--ag-cell-horizontal-padding)}.ag-header-cell-text,.ag-header-group-text{overflow:hidden;text-overflow:ellipsis}.ag-header-cell-text{word-break:break-word}.ag-header-cell-comp-wrapper{width:100%}:where(.ag-header-group-cell) .ag-header-cell-comp-wrapper{display:flex}:where(.ag-header-cell:not(.ag-header-cell-auto-height)) .ag-header-cell-comp-wrapper{align-items:center;display:flex;height:100%}.ag-header-cell-wrap-text .ag-header-cell-comp-wrapper{white-space:normal}.ag-header-cell-comp-wrapper-limited-height>*{overflow:hidden}:where(.ag-right-aligned-header) .ag-header-cell-label{flex-direction:row-reverse}:where(.ag-ltr) :where(.ag-header-cell:not(.ag-right-aligned-header)){.ag-header-label-icon,.ag-header-menu-icon{margin-left:var(--ag-spacing)}}:where(.ag-rtl) :where(.ag-header-cell:not(.ag-right-aligned-header)){.ag-header-label-icon,.ag-header-menu-icon{margin-right:var(--ag-spacing)}}:where(.ag-ltr) :where(.ag-header-cell.ag-right-aligned-header){.ag-header-label-icon,.ag-header-menu-icon{margin-right:var(--ag-spacing)}}:where(.ag-rtl) :where(.ag-header-cell.ag-right-aligned-header){.ag-header-label-icon,.ag-header-menu-icon{margin-left:var(--ag-spacing)}}.ag-header-cell:after,.ag-header-group-cell:where(:not(.ag-header-span-height.ag-header-group-cell-no-group)):after{content:"";height:var(--ag-header-column-border-height);position:absolute;top:calc(50% - var(--ag-header-column-border-height)*.5);z-index:1}:where(.ag-ltr) .ag-header-cell:after,:where(.ag-ltr) .ag-header-group-cell:where(:not(.ag-header-span-height.ag-header-group-cell-no-group)):after{border-right:var(--ag-header-column-border);right:0}:where(.ag-rtl) .ag-header-cell:after,:where(.ag-rtl) .ag-header-group-cell:where(:not(.ag-header-span-height.ag-header-group-cell-no-group)):after{border-left:var(--ag-header-column-border);left:0}.ag-header-highlight-after:after,.ag-header-highlight-before:after{background-color:var(--ag-accent-color);content:"";height:100%;position:absolute;width:1px}:where(.ag-ltr) .ag-header-highlight-before:after{left:0}:where(.ag-rtl) .ag-header-highlight-before:after{right:0}:where(.ag-ltr) .ag-header-highlight-after:after{right:0;:where(.ag-pinned-left-header) &{right:1px}}:where(.ag-rtl) .ag-header-highlight-after:after{left:0;:where(.ag-pinned-left-header) &{left:1px}}.ag-header-cell-resize{align-items:center;cursor:ew-resize;display:flex;height:100%;position:absolute;top:0;width:8px;z-index:2;&:after{background-color:var(--ag-header-column-resize-handle-color);content:"";height:var(--ag-header-column-resize-handle-height);position:absolute;top:calc(50% - var(--ag-header-column-resize-handle-height)*.5);width:var(--ag-header-column-resize-handle-width);z-index:1}}:where(.ag-ltr) .ag-header-cell-resize{right:-3px;&:after{left:calc(50% - var(--ag-header-column-resize-handle-width))}}:where(.ag-rtl) .ag-header-cell-resize{left:-3px;&:after{right:calc(50% - var(--ag-header-column-resize-handle-width))}}:where(.ag-header-cell.ag-header-span-height) .ag-header-cell-resize:after{height:calc(100% - var(--ag-spacing)*4);top:calc(var(--ag-spacing)*2)}.ag-header-group-cell-no-group:where(.ag-header-span-height){display:none}.ag-sort-indicator-container{display:flex;gap:var(--ag-spacing)}.ag-layout-print{&.ag-body{display:block;height:unset}&.ag-root-wrapper{display:inline-block}.ag-body-horizontal-scroll,.ag-body-vertical-scroll{display:none}&.ag-force-vertical-scroll{overflow-y:visible!important}}@media print{.ag-root-wrapper.ag-layout-print{display:table;.ag-body-horizontal-scroll-viewport,.ag-body-viewport,.ag-center-cols-container,.ag-center-cols-viewport,.ag-root,.ag-root-wrapper-body,.ag-virtual-list-viewport{display:block!important;height:auto!important;overflow:hidden!important}.ag-cell,.ag-row{-moz-column-break-inside:avoid;break-inside:avoid}}}ag-grid,ag-grid-angular{display:block}.ag-chart,.ag-dnd-ghost,.ag-popup,.ag-root-wrapper{cursor:default;line-height:normal;white-space:normal;-webkit-font-smoothing:antialiased;background-color:var(--ag-background-color);color:var(--ag-text-color);color-scheme:var(--ag-browser-color-scheme);font-family:var(--ag-font-family);font-size:var(--ag-font-size);--ag-indentation-level:0}.ag-root-wrapper{border:var(--ag-wrapper-border);border-radius:var(--ag-wrapper-border-radius);display:flex;flex-direction:column;overflow:hidden;position:relative;&.ag-layout-normal{height:100%}}.ag-root-wrapper-body{display:flex;flex-direction:row;&.ag-layout-normal{flex:1 1 auto;height:0;min-height:0}}.ag-root{display:flex;flex-direction:column;position:relative;&.ag-layout-auto-height,&.ag-layout-normal{flex:1 1 auto;overflow:hidden;width:0}&.ag-layout-normal{height:100%}}.ag-list-item,.ag-virtual-list-item{height:var(--ag-list-item-height)}.ag-virtual-list-item{position:absolute;width:100%}.ag-select-list{background-color:var(--ag-picker-list-background-color);border:var(--ag-picker-list-border);border-radius:var(--ag-border-radius);box-shadow:var(--ag-dropdown-shadow);overflow:hidden auto}.ag-list-item{align-items:center;display:flex;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;&.ag-active-item{background-color:var(--ag-row-hover-color)}}.ag-select-list-item{cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none;:where(span){overflow:hidden;text-overflow:ellipsis;white-space:nowrap}}:where(.ag-ltr) .ag-select-list-item{padding-left:calc(var(--ag-cell-horizontal-padding)/2)}:where(.ag-rtl) .ag-select-list-item{padding-right:calc(var(--ag-cell-horizontal-padding)/2)}.ag-list-item-hovered:after{background-color:var(--ag-accent-color);content:"";height:1px;left:0;position:absolute;right:0}.ag-item-highlight-top:after{top:0}.ag-item-highlight-bottom:after{bottom:0}:where(.ag-icon):before{align-items:center;background-color:currentcolor;color:inherit;content:"";display:flex;font-family:inherit;font-size:var(--ag-icon-size);font-style:normal;font-variant:normal;height:var(--ag-icon-size);justify-content:center;line-height:var(--ag-icon-size);-webkit-mask-size:contain;mask-size:contain;text-transform:none;width:var(--ag-icon-size)}.ag-icon{background-position:50%;background-repeat:no-repeat;background-size:contain;color:var(--ag-icon-color);display:block;height:var(--ag-icon-size);position:relative;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:var(--ag-icon-size)}.ag-column-select-column-group-readonly,.ag-column-select-column-readonly,.ag-disabled,[disabled]{.ag-icon{opacity:.5}&.ag-icon-grip{opacity:.35}}.ag-column-select-column-readonly{&.ag-icon-grip,.ag-icon-grip{opacity:.35}}.ag-drag-handle{color:var(--ag-drag-handle-color);cursor:grab;:where(.ag-icon){color:var(--ag-drag-handle-color)}}.ag-chart-menu-icon,.ag-chart-settings-next,.ag-chart-settings-prev,.ag-column-group-icons,.ag-column-select-header-icon,.ag-filter-toolpanel-expand,.ag-floating-filter-button-button,.ag-group-title-bar-icon,.ag-header-cell-filter-button,.ag-header-cell-menu-button,.ag-header-expand-icon,.ag-panel-title-bar-button,.ag-panel-title-bar-button-icon,.ag-set-filter-group-icons,:where(.ag-group-contracted) .ag-icon,:where(.ag-group-expanded) .ag-icon{background-color:var(--ag-icon-button-background-color);border-radius:var(--ag-icon-button-border-radius);box-shadow:0 0 0 var(--ag-icon-button-background-spread) var(--ag-icon-button-background-color);color:var(--ag-icon-button-color);&:hover{background-color:var(--ag-icon-button-hover-background-color);box-shadow:0 0 0 var(--ag-icon-button-background-spread) var(--ag-icon-button-hover-background-color);color:var(--ag-icon-button-hover-color)}}.ag-filter-active{background-image:linear-gradient(var(--ag-icon-button-active-background-color),var(--ag-icon-button-active-background-color));border-radius:1px;outline:solid var(--ag-icon-button-background-spread) var(--ag-icon-button-active-background-color);position:relative;&:after{background-color:var(--ag-icon-button-active-indicator-color);border-radius:50%;content:"";height:6px;position:absolute;top:-1px;width:6px}:where(.ag-icon-filter){clip-path:path("M8,0C8,4.415 11.585,8 16,8L16,16L0,16L0,0L8,0Z");color:var(--ag-icon-button-active-color)}}:where(.ag-ltr) .ag-filter-active{&:after{right:-1px}}:where(.ag-rtl) .ag-filter-active{&:after{left:-1px}}.ag-menu{background-color:var(--ag-menu-background-color);border:var(--ag-menu-border);border-radius:var(--ag-border-radius);box-shadow:var(--ag-menu-shadow);color:var(--ag-menu-text-color);max-height:100%;overflow-y:auto}.ag-menu,.ag-resizer{position:absolute;-webkit-user-select:none;-moz-user-select:none;user-select:none}.ag-resizer{pointer-events:none;z-index:1}:where(.ag-resizer){&.ag-resizer-topLeft{cursor:nwse-resize;height:5px;left:0;top:0;width:5px}&.ag-resizer-top{cursor:ns-resize;height:5px;left:5px;right:5px;top:0}&.ag-resizer-topRight{cursor:nesw-resize;height:5px;right:0;top:0;width:5px}&.ag-resizer-right{bottom:5px;cursor:ew-resize;right:0;top:5px;width:5px}&.ag-resizer-bottomRight{bottom:0;cursor:nwse-resize;height:5px;right:0;width:5px}&.ag-resizer-bottom{bottom:0;cursor:ns-resize;height:5px;left:5px;right:5px}&.ag-resizer-bottomLeft{bottom:0;cursor:nesw-resize;height:5px;left:0;width:5px}&.ag-resizer-left{bottom:5px;cursor:ew-resize;left:0;top:5px;width:5px}}'
), Ic = typeof window != "object" || !window?.document?.fonts?.forEach, Ts = (e, t, i, s, o, n) => {
  if (Ic)
    return;
  s && (e = `@layer ${CSS.escape(s)} { ${e} }`);
  let r = ws.map.get(t);
  if (r || (r = [], ws.map.set(t, r)), r.find((d) => d.css === e))
    return;
  const a = document.createElement("style");
  n && a.setAttribute("nonce", n), a.dataset.agGlobalCss = i, a.textContent = e;
  const l = { css: e, el: a, priority: o };
  let c;
  for (const d of r) {
    if (d.priority > o)
      break;
    c = d;
  }
  if (c) {
    c.el.insertAdjacentElement("afterend", a);
    const d = r.indexOf(c);
    r.splice(d + 1, 0, l);
  } else
    t.insertBefore(a, t.querySelector(":not(title, meta)")), r.push(l);
}, km = (e, t, i) => {
  Ts($T, e, "core", t, 0, i), Array.from(LF()).sort((s, o) => s.moduleName.localeCompare(o.moduleName)).forEach(
    (s) => s.css?.forEach(
      (o) => Ts(o, e, `module-${s.moduleName}`, t, 0, i)
    )
  );
}, KT = (e) => {
  ws.grids.add(e);
}, YT = (e) => {
  if (ws.grids.delete(e), ws.grids.size === 0) {
    ws.map = /* @__PURE__ */ new WeakMap();
    for (const t of document.head.querySelectorAll("style[data-ag-global-css]"))
      t.remove();
  }
}, ih, ws = (ih = typeof window == "object" ? window : {}).agStyleInjectionState ?? (ih.agStyleInjectionState = {
  map: /* @__PURE__ */ new WeakMap(),
  grids: /* @__PURE__ */ new Set()
}), bt = (e) => new Lm(e), oi = "$default", qT = 0, Lm = class {
  constructor({ feature: e, params: t, modeParams: i = {}, css: s, cssImports: o }) {
    this.feature = e, this.css = s, this.cssImports = o, this.modeParams = {
      // NOTE: it's important that default is defined first, putting it
      // first in iteration order, because when merging params the default
      // params override any prior modal params, so modal params in this
      // part need to come after default params to prevent them from being
      // immediately overridden.
      [oi]: {
        ...i[oi] ?? {},
        ...t ?? {}
      },
      ...i
    };
  }
  use(e, t, i) {
    let s = this._inject;
    if (s == null) {
      let { css: o } = this;
      if (o) {
        const n = `ag-theme-${this.feature ?? "part"}-${++qT}`;
        typeof o == "function" && (o = o()), o = `:where(.${n}) {
${o}
}
`;
        for (const r of this.cssImports ?? [])
          o = `@import url(${JSON.stringify(r)});
${o}`;
        s = { css: o, class: n };
      } else
        s = !1;
      this._inject = s;
    }
    return s && e && Ts(s.css, e, s.class, t, 1, i), s ? s.class : !1;
  }
}, XT = (e) => e.replace(/[A-Z]/g, (t) => `-${t}`).toLowerCase(), Om = (e) => `--ag-${XT(e)}`, Bt = (e) => `var(${Om(e)})`, ZT = (e, t, i) => Math.max(t, Math.min(i, e)), QT = (e) => {
  const t = /* @__PURE__ */ new Map();
  return (i) => {
    const s = i;
    return t.has(s) || t.set(s, e(i)), t.get(s);
  };
}, Tt = (e) => ({ ref: "accentColor", mix: e }), pt = (e) => ({ ref: "foregroundColor", mix: e }), mt = (e) => ({
  ref: "foregroundColor",
  mix: e,
  onto: "backgroundColor"
}), JT = (e) => ({
  ref: "foregroundColor",
  mix: e,
  onto: "headerBackgroundColor"
}), tt = { ref: "backgroundColor" }, es = { ref: "foregroundColor" }, _t = { ref: "accentColor" }, Eo = {
  backgroundColor: "#fff",
  foregroundColor: "#181d1f",
  borderColor: pt(0.15),
  chromeBackgroundColor: mt(0.02),
  browserColorScheme: "light"
}, eM = {
  ...Eo,
  textColor: es,
  accentColor: "#2196f3",
  invalidColor: "#e02525",
  wrapperBorder: !0,
  rowBorder: !0,
  headerRowBorder: !0,
  footerRowBorder: {
    ref: "rowBorder"
  },
  columnBorder: {
    style: "solid",
    width: 1,
    color: "transparent"
  },
  headerColumnBorder: !1,
  headerColumnBorderHeight: "100%",
  pinnedColumnBorder: !0,
  pinnedRowBorder: !0,
  sidePanelBorder: !0,
  sideBarPanelWidth: 250,
  sideBarBackgroundColor: {
    ref: "chromeBackgroundColor"
  },
  sideButtonBarBackgroundColor: {
    ref: "sideBarBackgroundColor"
  },
  sideButtonBarTopPadding: 0,
  sideButtonSelectedUnderlineWidth: 2,
  sideButtonSelectedUnderlineColor: "transparent",
  sideButtonSelectedUnderlineTransitionDuration: 0,
  sideButtonBackgroundColor: "transparent",
  sideButtonTextColor: { ref: "textColor" },
  sideButtonHoverBackgroundColor: { ref: "sideButtonBackgroundColor" },
  sideButtonHoverTextColor: { ref: "sideButtonTextColor" },
  sideButtonSelectedBackgroundColor: tt,
  sideButtonSelectedTextColor: { ref: "sideButtonTextColor" },
  sideButtonBorder: "solid 1px transparent",
  sideButtonSelectedBorder: !0,
  sideButtonLeftPadding: { ref: "spacing" },
  sideButtonRightPadding: { ref: "spacing" },
  sideButtonVerticalPadding: { calc: "spacing * 3" },
  fontFamily: [
    "-apple-system",
    "BlinkMacSystemFont",
    "Segoe UI",
    "Roboto",
    "Oxygen-Sans",
    "Ubuntu",
    "Cantarell",
    "Helvetica Neue",
    "sans-serif"
  ],
  headerBackgroundColor: {
    ref: "chromeBackgroundColor"
  },
  headerFontFamily: {
    ref: "fontFamily"
  },
  cellFontFamily: {
    ref: "fontFamily"
  },
  headerFontWeight: 500,
  headerFontSize: {
    ref: "fontSize"
  },
  dataFontSize: {
    ref: "fontSize"
  },
  headerTextColor: {
    ref: "textColor"
  },
  headerCellHoverBackgroundColor: "transparent",
  headerCellMovingBackgroundColor: { ref: "headerCellHoverBackgroundColor" },
  headerCellBackgroundTransitionDuration: "0.2s",
  cellTextColor: {
    ref: "textColor"
  },
  subtleTextColor: {
    ref: "textColor",
    mix: 0.5
  },
  rangeSelectionBorderStyle: "solid",
  rangeSelectionBorderColor: _t,
  rangeSelectionBackgroundColor: Tt(0.2),
  rangeSelectionChartBackgroundColor: "#0058FF1A",
  rangeSelectionChartCategoryBackgroundColor: "#00FF841A",
  rangeSelectionHighlightColor: Tt(0.5),
  rangeHeaderHighlightColor: JT(0.08),
  rowNumbersSelectedColor: Tt(0.5),
  rowHoverColor: Tt(0.08),
  columnHoverColor: Tt(0.05),
  selectedRowBackgroundColor: Tt(0.12),
  modalOverlayBackgroundColor: {
    ref: "backgroundColor",
    mix: 0.66
  },
  oddRowBackgroundColor: tt,
  borderWidth: 1,
  borderRadius: 4,
  wrapperBorderRadius: 8,
  cellHorizontalPadding: {
    calc: "spacing * 2 * cellHorizontalPaddingScale"
  },
  cellWidgetSpacing: {
    calc: "spacing * 1.5"
  },
  cellHorizontalPaddingScale: 1,
  rowGroupIndentSize: {
    calc: "cellWidgetSpacing + iconSize"
  },
  valueChangeDeltaUpColor: "#43a047",
  valueChangeDeltaDownColor: "#e53935",
  valueChangeValueHighlightBackgroundColor: "#16a08580",
  spacing: 8,
  fontSize: 14,
  rowHeight: {
    calc: "max(iconSize, dataFontSize) + spacing * 3.25 * rowVerticalPaddingScale"
  },
  rowVerticalPaddingScale: 1,
  headerHeight: {
    calc: "max(iconSize, dataFontSize) + spacing * 4 * headerVerticalPaddingScale"
  },
  headerVerticalPaddingScale: 1,
  paginationPanelHeight: {
    ref: "rowHeight",
    calc: "max(rowHeight, 22px)"
  },
  popupShadow: "0 0 16px #00000026",
  cardShadow: "0 1px 4px 1px #00000018",
  dropdownShadow: { ref: "cardShadow" },
  dragAndDropImageBackgroundColor: tt,
  dragAndDropImageBorder: !0,
  dragAndDropImageShadow: {
    ref: "popupShadow"
  },
  dragHandleColor: pt(0.7),
  focusShadow: {
    spread: 3,
    color: Tt(0.5)
  },
  focusErrorShadow: {
    spread: 3,
    color: {
      ref: "invalidColor",
      onto: "backgroundColor",
      mix: 0.5
    }
  },
  headerColumnResizeHandleHeight: "30%",
  headerColumnResizeHandleWidth: 2,
  headerColumnResizeHandleColor: {
    ref: "borderColor"
  },
  widgetContainerHorizontalPadding: {
    calc: "spacing * 1.5"
  },
  widgetContainerVerticalPadding: {
    calc: "spacing * 1.5"
  },
  widgetHorizontalSpacing: {
    calc: "spacing * 1.5"
  },
  widgetVerticalSpacing: {
    ref: "spacing"
  },
  listItemHeight: {
    calc: "max(iconSize, dataFontSize) + widgetVerticalSpacing"
  },
  iconSize: 16,
  iconColor: "inherit",
  iconButtonColor: { ref: "iconColor" },
  iconButtonBackgroundColor: "transparent",
  iconButtonBackgroundSpread: 4,
  iconButtonBorderRadius: 1,
  iconButtonHoverColor: { ref: "iconButtonColor" },
  iconButtonHoverBackgroundColor: pt(0.1),
  iconButtonActiveColor: _t,
  iconButtonActiveBackgroundColor: Tt(0.28),
  iconButtonActiveIndicatorColor: _t,
  toggleButtonWidth: 28,
  toggleButtonHeight: 18,
  toggleButtonOnBackgroundColor: _t,
  toggleButtonOffBackgroundColor: mt(0.3),
  toggleButtonSwitchBackgroundColor: tt,
  toggleButtonSwitchInset: 2,
  menuBorder: {
    color: pt(0.2)
  },
  menuBackgroundColor: mt(0.03),
  menuTextColor: mt(0.95),
  menuShadow: {
    ref: "popupShadow"
  },
  menuSeparatorColor: {
    ref: "borderColor"
  },
  setFilterIndentSize: {
    ref: "iconSize"
  },
  chartMenuPanelWidth: 260,
  chartMenuLabelColor: pt(0.8),
  dialogShadow: {
    ref: "popupShadow"
  },
  cellEditingBorder: {
    color: _t
  },
  cellEditingShadow: { ref: "cardShadow" },
  fullRowEditInvalidBackgroundColor: {
    ref: "invalidColor",
    onto: "backgroundColor",
    mix: 0.25
  },
  dialogBorder: {
    color: pt(0.2)
  },
  panelBackgroundColor: tt,
  panelTitleBarBackgroundColor: {
    ref: "headerBackgroundColor"
  },
  panelTitleBarIconColor: {
    ref: "headerTextColor"
  },
  panelTitleBarTextColor: {
    ref: "headerTextColor"
  },
  panelTitleBarFontWeight: {
    ref: "headerFontWeight"
  },
  panelTitleBarBorder: !0,
  columnSelectIndentSize: {
    ref: "iconSize"
  },
  toolPanelSeparatorBorder: !0,
  tooltipBackgroundColor: {
    ref: "chromeBackgroundColor"
  },
  tooltipErrorBackgroundColor: {
    ref: "invalidColor",
    onto: "backgroundColor",
    mix: 0.1
  },
  tooltipTextColor: {
    ref: "textColor"
  },
  tooltipErrorTextColor: {
    ref: "invalidColor"
  },
  tooltipBorder: !0,
  tooltipErrorBorder: {
    color: {
      ref: "invalidColor",
      onto: "backgroundColor",
      mix: 0.25
    }
  },
  columnDropCellBackgroundColor: pt(0.07),
  columnDropCellTextColor: {
    ref: "textColor"
  },
  columnDropCellDragHandleColor: {
    ref: "textColor"
  },
  columnDropCellBorder: {
    color: pt(0.13)
  },
  selectCellBackgroundColor: pt(0.07),
  selectCellBorder: {
    color: pt(0.13)
  },
  advancedFilterBuilderButtonBarBorder: !0,
  advancedFilterBuilderIndentSize: {
    calc: "spacing * 2 + iconSize"
  },
  advancedFilterBuilderJoinPillColor: "#f08e8d",
  advancedFilterBuilderColumnPillColor: "#a6e194",
  advancedFilterBuilderOptionPillColor: "#f3c08b",
  advancedFilterBuilderValuePillColor: "#85c0e4",
  filterPanelApplyButtonColor: tt,
  filterPanelApplyButtonBackgroundColor: _t,
  filterPanelCardSubtleColor: {
    ref: "textColor",
    mix: 0.7
  },
  filterPanelCardSubtleHoverColor: { ref: "textColor" },
  findMatchColor: es,
  findMatchBackgroundColor: "#ffff00",
  findActiveMatchColor: es,
  findActiveMatchBackgroundColor: "#ffa500",
  filterToolPanelGroupIndent: {
    ref: "spacing"
  },
  rowLoadingSkeletonEffectColor: pt(0.15),
  statusBarLabelColor: es,
  statusBarLabelFontWeight: 500,
  statusBarValueColor: es,
  statusBarValueFontWeight: 500,
  pinnedSourceRowTextColor: {
    ref: "textColor"
  },
  pinnedSourceRowBackgroundColor: {
    ref: "backgroundColor"
  },
  pinnedSourceRowFontWeight: 600,
  pinnedRowFontWeight: 600,
  pinnedRowBackgroundColor: {
    ref: "backgroundColor"
  },
  pinnedRowTextColor: {
    ref: "textColor"
  }
}, tM = (
  /*css*/
  ".ag-cell-batch-edit{background-color:var(--ag-cell-batch-edit-background-color);color:var(--ag-cell-batch-edit-text-color);display:inherit}.ag-row-batch-edit{background-color:var(--ag-row-batch-edit-background-color);color:var(--ag-row-batch-edit-text-color)}"
), Vm = {
  cellBatchEditBackgroundColor: "rgba(220 181 139 / 16%)",
  cellBatchEditTextColor: "#422f00",
  rowBatchEditBackgroundColor: {
    ref: "cellBatchEditBackgroundColor"
  },
  rowBatchEditTextColor: {
    ref: "cellBatchEditTextColor"
  }
}, iM = {
  ...Vm,
  cellBatchEditTextColor: "#f3d0b3"
}, sM = () => bt({
  feature: "batchEditStyle",
  params: Vm,
  css: tM
}), oM = /* @__PURE__ */ sM(), nM = (
  /*css*/
  ":where(.ag-button){background:none;border:none;color:inherit;cursor:pointer;font-family:inherit;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;margin:0;padding:0;text-indent:inherit;text-shadow:inherit;text-transform:inherit;word-spacing:inherit;&:disabled{cursor:default}&:focus-visible{box-shadow:var(--ag-focus-shadow);outline:none}}.ag-standard-button{-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:var(--ag-button-background-color);border:var(--ag-button-border);border-radius:var(--ag-button-border-radius);color:var(--ag-button-text-color);cursor:pointer;font-weight:var(--ag-button-font-weight);padding:var(--ag-button-vertical-padding) var(--ag-button-horizontal-padding);&:hover{background-color:var(--ag-button-hover-background-color);border:var(--ag-button-hover-border);color:var(--ag-button-hover-text-color)}&:active{background-color:var(--ag-button-active-background-color);border:var(--ag-button-active-border);color:var(--ag-button-active-text-color)}&:disabled{background-color:var(--ag-button-disabled-background-color);border:var(--ag-button-disabled-border);color:var(--ag-button-disabled-text-color)}}"
), rM = {
  buttonTextColor: "inherit",
  buttonFontWeight: "normal",
  buttonBackgroundColor: "transparent",
  buttonBorder: !1,
  buttonBorderRadius: { ref: "borderRadius" },
  buttonHorizontalPadding: { calc: "spacing * 2" },
  buttonVerticalPadding: { ref: "spacing" },
  buttonHoverTextColor: { ref: "buttonTextColor" },
  buttonHoverBackgroundColor: { ref: "buttonBackgroundColor" },
  buttonHoverBorder: { ref: "buttonBorder" },
  buttonActiveTextColor: { ref: "buttonHoverTextColor" },
  buttonActiveBackgroundColor: { ref: "buttonHoverBackgroundColor" },
  buttonActiveBorder: { ref: "buttonHoverBorder" },
  buttonDisabledTextColor: { ref: "inputDisabledTextColor" },
  buttonDisabledBackgroundColor: { ref: "inputDisabledBackgroundColor" },
  buttonDisabledBorder: { ref: "inputDisabledBorder" }
}, aM = () => bt({
  feature: "buttonStyle",
  params: {
    ...rM,
    buttonBackgroundColor: tt,
    buttonBorder: !0,
    buttonHoverBackgroundColor: { ref: "rowHoverColor" },
    buttonActiveBorder: { color: _t }
  },
  css: nM
}), lM = /* @__PURE__ */ aM(), cM = (
  /*css*/
  ".ag-column-drop-vertical-empty-message{align-items:center;border:dashed var(--ag-border-width);border-color:var(--ag-border-color);display:flex;inset:0;justify-content:center;margin:calc(var(--ag-spacing)*1.5) calc(var(--ag-spacing)*2);overflow:hidden;padding:calc(var(--ag-spacing)*2);position:absolute}"
), dM = () => bt({
  feature: "columnDropStyle",
  css: cM
}), Gm = /* @__PURE__ */ dM(), uM = [
  "colorScheme",
  "color",
  "length",
  "scale",
  "borderStyle",
  "border",
  "shadow",
  "image",
  "fontFamily",
  "fontWeight",
  "duration"
], hM = QT((e) => (e = e.toLowerCase(), uM.find((t) => e.endsWith(t.toLowerCase())) ?? "length")), mr = (e) => typeof e == "object" && e?.ref ? Bt(e.ref) : typeof e == "string" ? e : typeof e == "number" ? String(e) : !1, kc = (e) => {
  if (typeof e == "string")
    return e;
  if (e && "ref" in e) {
    const t = Bt(e.ref);
    return e.mix == null ? t : `color-mix(in srgb, ${e.onto ? Bt(e.onto) : "transparent"}, ${t} ${ZT(e.mix * 100, 0, 100)}%)`;
  }
  return !1;
}, gM = mr, ls = (e) => typeof e == "string" ? e : typeof e == "number" ? `${e}px` : e && "calc" in e ? `calc(${e.calc.replace(/ ?[*/+] ?/g, " $& ").replace(/-?\b[a-z][a-z0-9]*\b(?![-(])/gi, (i) => i[0] === "-" ? i : ` ${Bt(i)} `)})` : e && "ref" in e ? Bt(e.ref) : !1, pM = mr, hl = (e, t) => typeof e == "string" ? e : e === !0 ? hl({}, t) : e === !1 ? t === "columnBorder" ? hl({ color: "transparent" }, t) : "none" : e && "ref" in e ? Bt(e.ref) : Hm(e.style ?? "solid") + " " + ls(e.width ?? { ref: "borderWidth" }) + " " + kc(e.color ?? { ref: "borderColor" }), fM = (e) => typeof e == "string" ? e : e === !1 ? "none" : e && "ref" in e ? Bt(e.ref) : [
  ls(e.offsetX ?? 0),
  ls(e.offsetY ?? 0),
  ls(e.radius ?? 0),
  ls(e.spread ?? 0),
  kc(e.color ?? { ref: "foregroundColor" })
].join(" "), Hm = mr, Bm = (e) => typeof e == "string" ? e.includes(",") ? e : sh(e) : e && "googleFont" in e ? Bm(e.googleFont) : e && "ref" in e ? Bt(e.ref) : Array.isArray(e) ? e.map((t) => (typeof t == "object" && "googleFont" in t && (t = t.googleFont), sh(t))).join(", ") : !1, sh = (e) => (
  // don't quote var() expressions or quote safe identifier names, so that
  // people can specify fonts like sans-serif which are keywords not strings,
  // or var(--my-var)
  /^[\w-]+$|\w\(/.test(e) ? e : JSON.stringify(e)
), mM = mr, Nm = (e) => typeof e == "string" ? e : e && "url" in e ? `url(${JSON.stringify(e.url)})` : e && "svg" in e ? Nm({ url: `data:image/svg+xml,${encodeURIComponent(e.svg)}` }) : e && "ref" in e ? Bt(e.ref) : !1, CM = (e, t) => typeof e == "string" ? e : typeof e == "number" ? (e >= 10 && he(104, { value: e, param: t }), `${e}s`) : e && "ref" in e ? Bt(e.ref) : !1, vM = {
  color: kc,
  colorScheme: gM,
  length: ls,
  scale: pM,
  border: hl,
  borderStyle: Hm,
  shadow: fM,
  image: Nm,
  fontFamily: Bm,
  fontWeight: mM,
  duration: CM
}, wM = (e, t) => {
  const i = hM(e);
  return vM[i](t, e);
}, SM = () => new Wm().withPart(lM).withPart(Gm).withPart(oM), Wm = class zm {
  constructor(t = []) {
    this.parts = t;
  }
  withPart(t) {
    return typeof t == "function" && (t = t()), t instanceof Lm ? new zm([...this.parts, t]) : (Ks(259, { part: t }, "Invalid part"), this);
  }
  withoutPart(t) {
    return this.withPart(bt({ feature: t }));
  }
  withParams(t, i = oi) {
    return this.withPart(
      bt({
        modeParams: { [i]: t }
      })
    );
  }
  /**
   * Called by a grid instance when it starts using the theme. This installs
   * the theme's parts into document head, or the shadow DOM if the provided
   * container is within a shadow root.
   */
  _startUse({ styleContainer: t, cssLayer: i, nonce: s, loadThemeGoogleFonts: o }) {
    if (Ic)
      return;
    bM(), km(t, i, s);
    const n = yM(this);
    if (n.length > 0)
      for (const r of n)
        o && xM(r, s);
    for (const r of this.parts)
      r.use(t, i, s);
  }
  /**
   * Return CSS that that applies the params of this theme to elements with
   * the provided class name
   */
  _getCssClass() {
    return this._cssClassCache ?? (this._cssClassCache = oh(this.parts).map((t) => t.use(void 0, void 0, void 0)).filter(Boolean).join(" "));
  }
  _getModeParams() {
    let t = this._paramsCache;
    if (!t) {
      const i = {
        // NOTE: defining the default mode here is important, it ensures
        // that the default mode is first in iteration order, which puts
        // it first in outputted CSS, allowing other modes to override it
        [oi]: { ...eM }
      };
      for (const s of oh(this.parts))
        for (const o of Object.keys(s.modeParams)) {
          const n = s.modeParams[o];
          if (n) {
            const r = i[o] ?? (i[o] = {}), a = /* @__PURE__ */ new Set();
            for (const l of Object.keys(n)) {
              const c = n[l];
              c !== void 0 && (r[l] = c, a.add(l));
            }
            if (o === oi)
              for (const l of Object.keys(i)) {
                const c = i[l];
                if (l !== oi)
                  for (const d of a)
                    delete c[d];
              }
          }
        }
      this._paramsCache = t = i;
    }
    return t;
  }
  /**
   * Return the CSS chunk that is inserted into the grid DOM, and will
   * therefore be removed automatically when the grid is destroyed or it
   * starts to use a new theme.
   *
   * @param className a unique class name on the grid wrapper used to scope the returned CSS to the grid instance
   */
  _getPerGridCss(t) {
    const i = "##SELECTOR##";
    let s = this._paramsCssCache;
    if (!s) {
      let o = "", n = "";
      const r = this._getModeParams();
      for (const l of Object.keys(r)) {
        const c = r[l];
        if (l !== oi) {
          const u = `:where([data-ag-theme-mode="${typeof CSS == "object" ? CSS.escape(l) : l}"]) & {
`;
          o += u, n += u;
        }
        for (const d of Object.keys(c).sort()) {
          const u = c[d], h = wM(d, u);
          if (h === !1)
            he(107, { key: d, value: u });
          else {
            const g = Om(d), p = g.replace("--ag-", "--ag-inherited-");
            o += `	${g}: var(${p}, ${h});
`, n += `	${p}: var(${g});
`;
          }
        }
        l !== oi && (o += `}
`, n += `}
`);
      }
      let a = `${i} {
${o}}
`;
      a += `:has(> ${i}):not(${i}) {
${n}}
`, this._paramsCssCache = s = a;
    }
    return s.replaceAll(i, `:where(.${t})`);
  }
}, oh = (e) => {
  const t = /* @__PURE__ */ new Map();
  for (const s of e)
    t.set(s.feature, s);
  const i = [];
  for (const s of e)
    (!s.feature || t.get(s.feature) === s) && i.push(s);
  return i;
}, yM = (e) => {
  const t = /* @__PURE__ */ new Set(), i = (n) => {
    if (Array.isArray(n))
      n.forEach(i);
    else {
      const r = n?.googleFont;
      typeof r == "string" && t.add(r);
    }
  };
  return Object.values(e._getModeParams()).flatMap((n) => Object.values(n)).forEach(i), Array.from(t).sort();
}, nh = !1, bM = () => {
  if (!nh) {
    nh = !0;
    for (const e of Array.from(document.head.querySelectorAll('style[data-ag-scope="legacy"]')))
      e.remove();
  }
}, RM = /* @__PURE__ */ new Set(), xM = async (e, t) => {
  RM.add(e);
  const i = `@import url('https://${FM}/css2?family=${encodeURIComponent(e)}:wght@100;200;300;400;500;600;700;800;900&display=swap');
`;
  Ts(i, document.head, `googleFont:${e}`, void 0, 0, t);
}, FM = "fonts.googleapis.com", PM = (
  /*css*/
  '.ag-checkbox-input-wrapper,.ag-radio-button-input-wrapper{background-color:var(--ag-checkbox-unchecked-background-color);border:solid var(--ag-checkbox-border-width) var(--ag-checkbox-unchecked-border-color);flex:none;height:var(--ag-icon-size);position:relative;width:var(--ag-icon-size);:where(input){-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;display:block;height:var(--ag-icon-size);margin:0;opacity:0;width:var(--ag-icon-size)}&:after{content:"";display:block;inset:0;-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;pointer-events:none;position:absolute}&:where(.ag-checked){background-color:var(--ag-checkbox-checked-background-color);border-color:var(--ag-checkbox-checked-border-color);&:after{background-color:var(--ag-checkbox-checked-shape-color)}}&:where(:focus-within,:active){box-shadow:var(--ag-focus-shadow)}&:where(.ag-disabled){filter:grayscale();opacity:.5}}.ag-checkbox-input-wrapper{border-radius:var(--ag-checkbox-border-radius);&:where(.ag-checked):after{-webkit-mask-image:var(--ag-checkbox-checked-shape-image);mask-image:var(--ag-checkbox-checked-shape-image)}&:where(.ag-indeterminate){background-color:var(--ag-checkbox-indeterminate-background-color);border-color:var(--ag-checkbox-indeterminate-border-color);&:after{background-color:var(--ag-checkbox-indeterminate-shape-color);-webkit-mask-image:var(--ag-checkbox-indeterminate-shape-image);mask-image:var(--ag-checkbox-indeterminate-shape-image)}}}.ag-cell-editing-error .ag-checkbox-input-wrapper:focus-within{box-shadow:var(--ag-focus-error-shadow)}.ag-radio-button-input-wrapper{border-radius:100%;&:where(.ag-checked):after{-webkit-mask-image:var(--ag-radio-checked-shape-image);mask-image:var(--ag-radio-checked-shape-image)}}'
), EM = () => bt({
  feature: "checkboxStyle",
  params: {
    checkboxBorderWidth: 1,
    checkboxBorderRadius: {
      ref: "borderRadius"
    },
    checkboxUncheckedBackgroundColor: tt,
    checkboxUncheckedBorderColor: mt(0.3),
    checkboxCheckedBackgroundColor: _t,
    checkboxCheckedBorderColor: { ref: "checkboxCheckedBackgroundColor" },
    checkboxCheckedShapeImage: {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="10" height="7" fill="none"><path stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.75" d="M1 3.5 3.5 6l5-5"/></svg>'
    },
    checkboxCheckedShapeColor: tt,
    checkboxIndeterminateBackgroundColor: mt(0.3),
    checkboxIndeterminateBorderColor: { ref: "checkboxIndeterminateBackgroundColor" },
    checkboxIndeterminateShapeImage: {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="10" height="2" fill="none"><rect width="10" height="2" fill="#000" rx="1"/></svg>'
    },
    checkboxIndeterminateShapeColor: tt,
    radioCheckedShapeImage: {
      svg: '<svg xmlns="http://www.w3.org/2000/svg" width="6" height="6" fill="none"><circle cx="3" cy="3" r="3" fill="#000"/></svg>'
    }
  },
  css: PM
}), DM = /* @__PURE__ */ EM(), TM = () => bt({
  feature: "colorScheme",
  params: {
    ...Eo,
    foregroundColor: "#000",
    chromeBackgroundColor: "#f3f8f8"
  }
}), MM = /* @__PURE__ */ TM(), _m = () => ({
  ...Eo,
  ...iM,
  backgroundColor: "hsl(217, 0%, 17%)",
  foregroundColor: "#FFF",
  chromeBackgroundColor: mt(0.05),
  rowHoverColor: Tt(0.15),
  selectedRowBackgroundColor: Tt(0.2),
  menuBackgroundColor: mt(0.1),
  browserColorScheme: "dark",
  popupShadow: "0 0px 20px #000A",
  cardShadow: "0 1px 4px 1px #000A",
  advancedFilterBuilderJoinPillColor: "#7a3a37",
  advancedFilterBuilderColumnPillColor: "#355f2d",
  advancedFilterBuilderOptionPillColor: "#5a3168",
  advancedFilterBuilderValuePillColor: "#374c86",
  filterPanelApplyButtonColor: es,
  findMatchColor: tt,
  findActiveMatchColor: tt,
  checkboxUncheckedBorderColor: mt(0.4),
  toggleButtonOffBackgroundColor: mt(0.4),
  rowBatchEditBackgroundColor: mt(0.1)
}), Um = () => ({
  ..._m(),
  backgroundColor: "#1f2836"
}), AM = () => bt({
  feature: "colorScheme",
  params: Um()
}), IM = /* @__PURE__ */ AM(), kM = () => bt({
  feature: "colorScheme",
  params: Eo,
  modeParams: {
    light: Eo,
    dark: _m(),
    "dark-blue": Um()
  }
}), LM = /* @__PURE__ */ kM(), jm = {
  aggregation: '<path d="M18 7V4H6l6 8-6 8h12v-3"/>',
  arrows: '<polyline points="5 9 2 12 5 15"/><polyline points="9 5 12 2 15 5"/><polyline points="15 19 12 22 9 19"/><polyline points="19 9 22 12 19 15"/><line x1="2" x2="22" y1="12" y2="12"/><line x1="12" x2="12" y1="2" y2="22"/>',
  asc: '<path d="m5 12 7-7 7 7"/><path d="M12 19V5"/>',
  cancel: '<path d="m18 6-12 12"/><path d="m6 6 12 12"/>',
  chart: '<line x1="18" x2="18" y1="20" y2="10"/><line x1="12" x2="12" y1="20" y2="4"/><line x1="6" x2="6" y1="20" y2="14"/>',
  "color-picker": '<path d="m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z"/><path d="m5 2 5 5"/><path d="M2 13h15"/><path d="M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z"/>',
  columns: '<path d="M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18"/>',
  contracted: '<path d="m9 18 6-6-6-6"/>',
  copy: '<rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>',
  cross: '<path d="M18 6 6 18"/><path d="m6 6 12 12"/>',
  csv: '<path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><path d="M8 13h2"/><path d="M8 17h2"/><path d="M14 13h2"/><path d="M14 17h2"/>',
  cut: '<circle cx="6" cy="6" r="3"/><path d="M8.12 8.12 12 12"/><path d="M20 4 8.12 15.88"/><circle cx="6" cy="18" r="3"/><path d="M14.8 14.8 20 20"/>',
  desc: '<path d="M12 5v14"/><path d="m19 12-7 7-7-7"/>',
  down: '<path d="M12 5v14"/><path d="m19 12-7 7-7-7"/>',
  excel: '<path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><path d="M8 13h2"/><path d="M8 17h2"/><path d="M14 13h2"/><path d="M14 17h2"/>',
  expanded: '<path d="m15 18-6-6 6-6"/>',
  "eye-slash": '<path d="M9.88 9.88a3 3 0 1 0 4.24 4.24"/><path d="M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68"/><path d="M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61"/><line x1="2" x2="22" y1="2" y2="22"/>',
  eye: '<path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/>',
  filter: '<path d="M3 6h18"/><path d="M7 12h10"/><path d="M10 18h4"/>',
  first: '<path d="m17 18-6-6 6-6"/><path d="M7 6v12"/>',
  group: '<path d="M16 12H3"/><path d="M16 18H3"/><path d="M10 6H3"/><path d="M21 18V8a2 2 0 0 0-2-2h-5"/><path d="m16 8-2-2 2-2"/>',
  last: '<path d="m7 18 6-6-6-6"/><path d="M17 6v12"/>',
  left: '<path d="m12 19-7-7 7-7"/><path d="M19 12H5"/>',
  linked: '<path d="M9 17H7A5 5 0 0 1 7 7h2"/><path d="M15 7h2a5 5 0 1 1 0 10h-2"/><line x1="8" x2="16" y1="12" y2="12"/>',
  loading: '<line x1="12" x2="12" y1="2" y2="6"/><line x1="12" x2="12" y1="18" y2="22"/><line x1="4.93" x2="7.76" y1="4.93" y2="7.76"/><line x1="16.24" x2="19.07" y1="16.24" y2="19.07"/><line x1="2" x2="6" y1="12" y2="12"/><line x1="18" x2="22" y1="12" y2="12"/><line x1="4.93" x2="7.76" y1="19.07" y2="16.24"/><line x1="16.24" x2="19.07" y1="7.76" y2="4.93"/>',
  maximize: '<polyline points="15 3 21 3 21 9"/><polyline points="9 21 3 21 3 15"/><line x1="21" x2="14" y1="3" y2="10"/><line x1="3" x2="10" y1="21" y2="14"/>',
  menu: '<line x1="4" x2="20" y1="12" y2="12"/><line x1="4" x2="20" y1="6" y2="6"/><line x1="4" x2="20" y1="18" y2="18"/>',
  "menu-alt": '<circle cx="12" cy="5" r="0.75" fill="#D9D9D9"/><circle cx="12" cy="12" r="0.75" fill="#D9D9D9"/><circle cx="12" cy="19" r="0.75" fill="#D9D9D9"/>',
  minimize: '<polyline points="4 14 10 14 10 20"/><polyline points="20 10 14 10 14 4"/><line x1="14" x2="21" y1="10" y2="3"/><line x1="3" x2="10" y1="21" y2="14"/>',
  minus: '<circle cx="12" cy="12" r="10"/><path d="M8 12h8"/>',
  next: '<path d="m9 18 6-6-6-6"/>',
  none: '<path d="m7 15 5 5 5-5"/><path d="m7 9 5-5 5 5"/>',
  "not-allowed": '<circle cx="12" cy="12" r="10"/><path d="m4.9 4.9 14.2 14.2"/>',
  paste: '<path d="M15 2H9a1 1 0 0 0-1 1v2c0 .6.4 1 1 1h6c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1Z"/><path d="M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2M16 4h2a2 2 0 0 1 2 2v2M11 14h10"/><path d="m17 10 4 4-4 4"/>',
  pin: '<line x1="12" x2="12" y1="17" y2="22"/><path d="M5 17h14v-1.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V6h1a2 2 0 0 0 0-4H8a2 2 0 0 0 0 4h1v4.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24Z"/>',
  pivot: '<path d="M15 3v18"/><rect width="18" height="18" x="3" y="3" rx="2"/><path d="M21 9H3"/><path d="M21 15H3"/>',
  plus: '<circle cx="12" cy="12" r="10"/><path d="M8 12h8"/><path d="M12 8v8"/>',
  previous: '<path d="m15 18-6-6 6-6"/>',
  right: '<path d="M5 12h14"/><path d="m12 5 7 7-7 7"/>',
  save: '<path d="M12 17V3"/><path d="m6 11 6 6 6-6"/><path d="M19 21H5"/>',
  "small-left": '<path d="m15 18-6-6 6-6"/>',
  "small-right": '<path d="m9 18 6-6-6-6"/>',
  tick: '<path d="M20 6 9 17l-5-5"/>',
  "tree-closed": '<path d="m9 18 6-6-6-6"/>',
  "tree-indeterminate": '<path d="M5 12h14"/>',
  "tree-open": '<path d="m6 9 6 6 6-6"/>',
  unlinked: '<path d="M9 17H7A5 5 0 0 1 7 7"/><path d="M15 7h2a5 5 0 0 1 4 8"/><line x1="8" x2="12" y1="12" y2="12"/><line x1="2" x2="22" y1="2" y2="22"/>',
  up: '<path d="m5 12 7-7 7 7"/><path d="M12 19V5"/>',
  grip: '<circle cx="5" cy="8" r="0.5"/><circle cx="12" cy="8" r="0.5"/><circle cx="19" cy="8" r="0.5"/><circle cx="5" cy="16" r="0.5"/><circle cx="12" cy="16" r="0.5"/><circle cx="19" cy="16" r="0.5"/><g stroke="none" fill="currentColor"><circle cx="5" cy="8" r="1"/><circle cx="12" cy="8" r="1"/><circle cx="19" cy="8" r="1"/><circle cx="5" cy="16" r="1"/><circle cx="12" cy="16" r="1"/><circle cx="19" cy="16" r="1"/></g>',
  settings: '<path d="M20 7h-9"/><path d="M14 17H5"/><circle cx="17" cy="17" r="3"/><circle cx="7" cy="7" r="3"/>'
}, $m = {
  "column-arrow": '<svg xmlns="http://www.w3.org/2000/svg" class="ag-icon" fill="none" viewBox="0 0 32 32"><path fill-rule="evenodd" clip-rule="evenodd" d="M0 26C0 28.2092 1.79086 30 4 30H14C16.2091 30 18 28.2092 18 26V15H25.8786L24.4394 16.4393C23.8536 17.0251 23.8536 17.9749 24.4394 18.5607C25.0252 19.1464 25.9748 19.1464 26.5606 18.5607L30.5606 14.5607C31.1464 13.9749 31.1464 13.0251 30.5606 12.4393L26.5606 8.43934C25.9748 7.85356 25.0252 7.85356 24.4394 8.43934C23.8536 9.02512 23.8536 9.97488 24.4394 10.5607L25.8786 12H18V6C18 3.79086 16.2091 2 14 2H4C1.79086 2 0 3.79086 0 6V26ZM14 5H10.5V12H15V6C15 5.44772 14.5523 5 14 5ZM4 5H7.5V12H3V6C3 5.44772 3.44772 5 4 5ZM10.5 15H15V26C15 26.5522 14.5523 27 14 27H10.5V15ZM4 27H7.5V15H3V26C3 26.5522 3.44772 27 4 27Z" fill="currentColor"/></svg>',
  "small-down": '<svg xmlns="http://www.w3.org/2000/svg" class="ag-icon" fill="black" stroke="none" viewBox="0 0 32 32"><path d="M7.334 10.667 16 21.334l8.667-10.667H7.334Z"/></svg>',
  "small-up": '<svg xmlns="http://www.w3.org/2000/svg" class="ag-icon" fill="black" stroke="none" viewBox="0 0 32 32"><path d="M7.334 21.333 16 10.666l8.667 10.667H7.334Z"/></svg>',
  "pinned-top": '<svg xmlns="http://www.w3.org/2000/svg" class="ag-icon" fill="none" viewBox="0 0 16 16"><path fill="currentColor" d="M12.53 3.72A.75.75 0 0 1 12 5H4a.75.75 0 0 1 0-1.5h8a.75.75 0 0 1 .53.22ZM3.269 10.744a.75.75 0 0 1 .2-.524l4-4a.75.75 0 0 1 1.06 0l4 4a.75.75 0 1 1-1.06 1.06L8.75 8.56V14a.75.75 0 0 1-1.5 0V8.56l-2.72 2.72a.75.75 0 0 1-1.26-.536Z"/></svg>',
  "pinned-bottom": '<svg xmlns="http://www.w3.org/2000/svg" fill="none" class="ag-icon" viewBox="0 0 16 16"><path fill="currentColor" d="M3.47 12.28A.75.75 0 0 1 4 11h8a.75.75 0 0 1 0 1.5H4a.75.75 0 0 1-.53-.22ZM12.731 5.256a.75.75 0 0 1-.2.524l-4 4a.75.75 0 0 1-1.06 0l-4-4a.75.75 0 1 1 1.06-1.06l2.72 2.72V2a.75.75 0 0 1 1.5 0v5.44l2.72-2.72a.75.75 0 0 1 1.26.536Z"/></svg>',
  "un-pin": '<svg xmlns="http://www.w3.org/2000/svg" fill="none" class="ag-icon" viewBox="0 0 16 16"><path fill="currentColor" d="M8 11a.75.75 0 0 0-.75.75v3.333a.75.75 0 1 0 1.5 0V11.75A.75.75 0 0 0 8 11Z"/><path fill="currentColor" d="M13.11 1.436a.75.75 0 0 0-1.22-.872l-10 14a.75.75 0 1 0 1.22.872L5.207 12.5h7.376a.75.75 0 0 0 .75-.75v-1.174a2.08 2.08 0 0 0-1.153-1.863l-1.185-.599-.005-.002a.58.58 0 0 1-.323-.522V5.165a2.083 2.083 0 0 0 1.854-2.904l.589-.825Zm-3.943 5.52v.634a2.08 2.08 0 0 0 1.153 1.863l1.185.6.005.002a.58.58 0 0 1 .323.522V11H6.28l2.887-4.044ZM9.277 1H5.25a2.084 2.084 0 0 0-.083 4.165v1.676l1.5-2.132v-.292a.75.75 0 0 0-.75-.75H5.25a.584.584 0 0 1 0-1.167h2.972L9.277 1Z"/></svg>',
  "chevron-down": '<svg width="16" height="16" viewBox="0 0 16 16" class="ag-icon" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 6L8 10L4 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
  "chevron-up": '<svg width="16" height="16" viewBox="0 0 16 16" class="ag-icon" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4 10L8 6L12 10" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
  "chevron-left": '<svg width="16" height="16" viewBox="0 0 16 16" class="ag-icon" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10 12L6 8L10 4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
  "chevron-right": '<svg width="16" height="16" viewBox="0 0 16 16" class="ag-icon" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 12L10 8L6 4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>',
  "filter-add": '<svg width="16" height="16" viewBox="0 0 16 16" class="ag-icon" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M5.12126 7.75L10.8517 7.75" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/><path d="M6.65934 11.748L9.32778 11.748" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/><path d="M12.2943 1.04872V6.19184M14.9886 3.74341H9.68478" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/><path d="M8.25488 3C8.04799 3.18323 7.91706 3.45099 7.91699 3.74902C7.91713 4.04868 8.04988 4.31681 8.25879 4.5H2C1.58579 4.5 1.25 4.16421 1.25 3.75C1.25 3.33579 1.58579 3 2 3H8.25488Z" fill="currentColor"/></svg>',
  edit: '<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3.5 10.6262V12.5012H5.375L10.905 6.97122L9.03 5.09622L3.5 10.6262ZM12.355 5.52122C12.4014 5.47497 12.4381 5.42002 12.4632 5.35953C12.4883 5.29905 12.5012 5.23421 12.5012 5.16872C12.5012 5.10324 12.4883 5.0384 12.4632 4.97791C12.4381 4.91742 12.4014 4.86248 12.355 4.81622L11.185 3.64622C11.1387 3.59987 11.0838 3.5631 11.0233 3.53801C10.9628 3.51291 10.898 3.5 10.8325 3.5C10.767 3.5 10.7022 3.51291 10.6417 3.53801C10.5812 3.5631 10.5263 3.59987 10.48 3.64622L9.565 4.56122L11.44 6.43622L12.355 5.52122Z" fill="currentColor"/></svg>'
}, OM = (e = {}) => {
  let t = "";
  for (const i of [...Object.keys(jm), ...Object.keys($m)]) {
    const s = VM(i, e.strokeWidth);
    t += `.ag-icon-${i}::before { mask-image: url('data:image/svg+xml,${encodeURIComponent(s)}'); }
`;
  }
  return t;
}, VM = (e, t = 1.5) => {
  const i = $m[e];
  if (i)
    return i;
  const s = jm[e];
  if (!s)
    throw new Error(`Missing icon data for ${e}`);
  return `<svg xmlns="http://www.w3.org/2000/svg" class="ag-icon" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke="black" stroke-width="${t}" viewBox="0 0 24 24"><style>* { vector-effect: non-scaling-stroke; }</style>` + s + "</svg>";
}, GM = (e = {}) => bt({
  feature: "iconSet",
  css: () => OM(e)
}), HM = /* @__PURE__ */ GM(), BM = (
  /*css*/
  ':where(.ag-input-field-input[type=number]:not(.ag-number-field-input-stepper)){-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield;&::-webkit-inner-spin-button,&::-webkit-outer-spin-button{-webkit-appearance:none;appearance:none;margin:0}}.ag-input-field-input:where(input:not([type]),input[type=text],input[type=number],input[type=tel],input[type=date],input[type=datetime-local],textarea){background-color:var(--ag-input-background-color);border:var(--ag-input-border);border-radius:var(--ag-input-border-radius);color:var(--ag-input-text-color);font-family:inherit;font-size:inherit;line-height:inherit;margin:0;min-height:var(--ag-input-height);padding:0;&:where(:disabled){background-color:var(--ag-input-disabled-background-color);border:var(--ag-input-disabled-border);color:var(--ag-input-disabled-text-color)}&:where(:focus){background-color:var(--ag-input-focus-background-color);border:var(--ag-input-focus-border);box-shadow:var(--ag-input-focus-shadow);color:var(--ag-input-focus-text-color);outline:none}&:where(:invalid){background-color:var(--ag-input-invalid-background-color);border:var(--ag-input-invalid-border);color:var(--ag-input-invalid-text-color)}&:where(.invalid){background-color:var(--ag-input-invalid-background-color);border:var(--ag-input-invalid-border);color:var(--ag-input-invalid-text-color)}&::-moz-placeholder{color:var(--ag-input-placeholder-text-color)}&::placeholder{color:var(--ag-input-placeholder-text-color)}}:where(.ag-ltr) .ag-input-field-input:where(input:not([type]),input[type=text],input[type=number],input[type=tel],input[type=date],input[type=datetime-local],textarea){padding-left:var(--ag-input-padding-start)}:where(.ag-rtl) .ag-input-field-input:where(input:not([type]),input[type=text],input[type=number],input[type=tel],input[type=date],input[type=datetime-local],textarea){padding-right:var(--ag-input-padding-start)}:where(.ag-column-select-header-filter-wrapper,.ag-filter-toolpanel-search,.ag-mini-filter,.ag-filter-filter,.ag-filter-add-select){.ag-input-wrapper:before{background-color:currentcolor;color:var(--ag-input-icon-color);content:"";display:block;height:12px;-webkit-mask-image:url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxMiIgaGVpZ2h0PSIxMiIgZmlsbD0ibm9uZSIgc3Ryb2tlPSIjMDAwIiBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS13aWR0aD0iMS41Ij48cGF0aCBkPSJNNS4zIDlhMy43IDMuNyAwIDEgMCAwLTcuNSAzLjcgMy43IDAgMCAwIDAgNy41Wk0xMC41IDEwLjUgOC4zIDguMiIvPjwvc3ZnPg==");mask-image:url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxMiIgaGVpZ2h0PSIxMiIgZmlsbD0ibm9uZSIgc3Ryb2tlPSIjMDAwIiBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS13aWR0aD0iMS41Ij48cGF0aCBkPSJNNS4zIDlhMy43IDMuNyAwIDEgMCAwLTcuNSAzLjcgMy43IDAgMCAwIDAgNy41Wk0xMC41IDEwLjUgOC4zIDguMiIvPjwvc3ZnPg==");-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;opacity:.5;position:absolute;width:12px}}:where(.ag-ltr) :where(.ag-column-select-header-filter-wrapper,.ag-filter-toolpanel-search,.ag-mini-filter,.ag-filter-filter,.ag-filter-add-select){.ag-input-wrapper:before{margin-left:var(--ag-spacing)}.ag-number-field-input,.ag-text-field-input{padding-left:calc(var(--ag-spacing)*1.5 + 12px)}}:where(.ag-rtl) :where(.ag-column-select-header-filter-wrapper,.ag-filter-toolpanel-search,.ag-mini-filter,.ag-filter-filter,.ag-filter-add-select){.ag-input-wrapper:before{margin-right:var(--ag-spacing)}.ag-number-field-input,.ag-text-field-input{padding-right:calc(var(--ag-spacing)*1.5 + 12px)}}'
), NM = (
  /*css*/
  ".ag-input-field-input:where(input:not([type]),input[type=text],input[type=number],input[type=tel],input[type=date],input[type=datetime-local],textarea){&:focus{box-shadow:var(--ag-focus-shadow);&:where(.invalid),&:where(:invalid){box-shadow:var(--ag-focus-error-shadow)}}}"
), WM = {
  inputBackgroundColor: "transparent",
  inputBorder: !1,
  inputBorderRadius: 0,
  inputTextColor: {
    ref: "textColor"
  },
  inputPlaceholderTextColor: {
    ref: "inputTextColor",
    mix: 0.5
  },
  inputPaddingStart: 0,
  inputHeight: {
    calc: "max(iconSize, fontSize) + spacing * 2"
  },
  inputFocusBackgroundColor: {
    ref: "inputBackgroundColor"
  },
  inputFocusBorder: {
    ref: "inputBorder"
  },
  inputFocusShadow: "none",
  inputFocusTextColor: {
    ref: "inputTextColor"
  },
  inputDisabledBackgroundColor: {
    ref: "inputBackgroundColor"
  },
  inputDisabledBorder: {
    ref: "inputBorder"
  },
  inputDisabledTextColor: {
    ref: "inputTextColor"
  },
  inputInvalidBackgroundColor: {
    ref: "inputBackgroundColor"
  },
  inputInvalidBorder: {
    ref: "inputBorder"
  },
  inputInvalidTextColor: {
    ref: "inputTextColor"
  },
  inputIconColor: {
    ref: "inputTextColor"
  },
  pickerButtonBorder: !1,
  pickerButtonFocusBorder: { ref: "inputFocusBorder" },
  pickerButtonBackgroundColor: { ref: "backgroundColor" },
  pickerButtonFocusBackgroundColor: { ref: "backgroundColor" },
  pickerListBorder: !1,
  pickerListBackgroundColor: { ref: "backgroundColor" },
  colorPickerThumbSize: 18,
  colorPickerTrackSize: 12,
  colorPickerThumbBorderWidth: 3,
  colorPickerTrackBorderRadius: 12,
  colorPickerColorBorderRadius: 4
}, zM = () => bt({
  feature: "inputStyle",
  params: {
    ...WM,
    inputBackgroundColor: tt,
    inputBorder: !0,
    inputBorderRadius: {
      ref: "borderRadius"
    },
    inputPaddingStart: {
      ref: "spacing"
    },
    inputFocusBorder: {
      color: _t
    },
    inputFocusShadow: {
      ref: "focusShadow"
    },
    inputDisabledBackgroundColor: mt(0.06),
    inputDisabledTextColor: {
      ref: "textColor",
      mix: 0.5
    },
    inputInvalidBorder: {
      color: { ref: "invalidColor" }
    },
    pickerButtonBorder: !0,
    pickerListBorder: !0
  },
  css: () => BM + NM
}), _M = /* @__PURE__ */ zM(), UM = (
  /*css*/
  '.ag-tabs-header{background-color:var(--ag-tab-bar-background-color);border-bottom:var(--ag-tab-bar-border);display:flex;flex:1;gap:var(--ag-tab-spacing);padding:var(--ag-tab-bar-top-padding) var(--ag-tab-bar-horizontal-padding) 0}.ag-tabs-header-wrapper{display:flex}.ag-tabs-close-button-wrapper{align-items:center;border:0;display:flex;padding:var(--ag-spacing)}:where(.ag-ltr) .ag-tabs-close-button-wrapper{border-right:solid var(--ag-border-width) var(--ag-border-color)}:where(.ag-rtl) .ag-tabs-close-button-wrapper{border-left:solid var(--ag-border-width) var(--ag-border-color)}.ag-tabs-close-button{background-color:unset;border:0;cursor:pointer;padding:0}.ag-tab{align-items:center;background-color:var(--ag-tab-background-color);border-left:var(--ag-tab-selected-border-width) solid transparent;border-right:var(--ag-tab-selected-border-width) solid transparent;color:var(--ag-tab-text-color);cursor:pointer;display:flex;flex:1;justify-content:center;padding:var(--ag-tab-top-padding) var(--ag-tab-horizontal-padding) var(--ag-tab-bottom-padding);position:relative;&:hover{background-color:var(--ag-tab-hover-background-color);color:var(--ag-tab-hover-text-color)}&.ag-tab-selected{background-color:var(--ag-tab-selected-background-color);color:var(--ag-tab-selected-text-color)}&:after{background-color:var(--ag-tab-selected-underline-color);bottom:0;content:"";display:block;height:var(--ag-tab-selected-underline-width);left:0;opacity:0;position:absolute;right:0;transition:opacity var(--ag-tab-selected-underline-transition-duration)}&.ag-tab-selected:after{opacity:1}}:where(.ag-ltr) .ag-tab{&.ag-tab-selected{&:where(:not(:first-of-type)){border-left-color:var(--ag-tab-selected-border-color)}&:where(:not(:last-of-type)){border-right-color:var(--ag-tab-selected-border-color)}}}:where(.ag-rtl) .ag-tab{&.ag-tab-selected{&:where(:not(:first-of-type)){border-right-color:var(--ag-tab-selected-border-color)}&:where(:not(:last-of-type)){border-left-color:var(--ag-tab-selected-border-color)}}}'
), jM = {
  tabBarBackgroundColor: "transparent",
  tabBarHorizontalPadding: 0,
  tabBarTopPadding: 0,
  tabBackgroundColor: "transparent",
  tabTextColor: {
    ref: "textColor"
  },
  tabHorizontalPadding: {
    ref: "spacing"
  },
  tabTopPadding: {
    ref: "spacing"
  },
  tabBottomPadding: {
    ref: "spacing"
  },
  tabSpacing: "0",
  tabHoverBackgroundColor: {
    ref: "tabBackgroundColor"
  },
  tabHoverTextColor: {
    ref: "tabTextColor"
  },
  tabSelectedBackgroundColor: {
    ref: "tabBackgroundColor"
  },
  tabSelectedTextColor: {
    ref: "tabTextColor"
  },
  tabSelectedBorderWidth: { ref: "borderWidth" },
  tabSelectedBorderColor: "transparent",
  tabSelectedUnderlineColor: "transparent",
  tabSelectedUnderlineWidth: 0,
  tabSelectedUnderlineTransitionDuration: 0,
  tabBarBorder: !1
}, $M = () => bt({
  feature: "tabStyle",
  params: {
    ...jM,
    tabBarBorder: !0,
    tabBarBackgroundColor: pt(0.05),
    tabTextColor: {
      ref: "textColor",
      mix: 0.7
    },
    tabSelectedTextColor: {
      ref: "textColor"
    },
    tabHoverTextColor: {
      ref: "textColor"
    },
    tabSelectedBorderColor: {
      ref: "borderColor"
    },
    tabSelectedBackgroundColor: tt
  },
  css: UM
}), KM = /* @__PURE__ */ $M(), YM = () => SM().withPart(DM).withPart(LM).withPart(HM).withPart(KM).withPart(_M).withPart(Gm).withParams({
  fontFamily: [
    { googleFont: "IBM Plex Sans" },
    "-apple-system",
    "BlinkMacSystemFont",
    "Segoe UI",
    "Roboto",
    "Oxygen-Sans",
    "Ubuntu"
  ]
}), Lc = /* @__PURE__ */ YM(), qM = {
  cssName: "--ag-cell-horizontal-padding",
  changeKey: "cellHorizontalPaddingChanged",
  defaultValue: 16
}, XM = {
  cssName: "--ag-indentation-level",
  changeKey: "indentationLevelChanged",
  defaultValue: 0,
  noWarn: !0,
  cacheDefault: !0
}, ZM = {
  cssName: "--ag-row-group-indent-size",
  changeKey: "rowGroupIndentSizeChanged",
  defaultValue: 0
}, rh = {
  cssName: "--ag-row-height",
  changeKey: "rowHeightChanged",
  defaultValue: 42
}, ah = {
  cssName: "--ag-header-height",
  changeKey: "headerHeightChanged",
  defaultValue: 48
}, lh = {
  cssName: "--ag-list-item-height",
  changeKey: "listItemHeightChanged",
  defaultValue: 24
}, na = {
  cssName: "--ag-row-border",
  changeKey: "rowBorderWidthChanged",
  defaultValue: 1,
  border: !0
}, ch = {
  cssName: "--ag-pinned-row-border",
  changeKey: "pinnedRowBorderWidthChanged",
  defaultValue: 1,
  border: !0
}, QM = 0, JM = class extends T {
  constructor() {
    super(...arguments), this.beanName = "environment", this.sizeEls = /* @__PURE__ */ new Map(), this.lastKnownValues = /* @__PURE__ */ new Map(), this.sizesMeasured = !1, this.paramsClass = `ag-theme-params-${++QM}`, this.globalCSS = [];
  }
  wireBeans(e) {
    const { eGridDiv: t, gridOptions: i } = e;
    this.eGridDiv = t, this.eStyleContainer = i.themeStyleContainer ?? (t.getRootNode() === document ? document.head : t), this.cssLayer = i.themeCssLayer, this.styleNonce = i.styleNonce;
  }
  postConstruct() {
    this.addManagedPropertyListener("theme", () => this.handleThemeGridOptionChange()), this.handleThemeGridOptionChange(), this.addManagedPropertyListener("rowHeight", () => this.refreshRowHeightVariable()), this.getSizeEl(rh), this.getSizeEl(ah), this.getSizeEl(lh), this.getSizeEl(na), this.getSizeEl(ch), this.refreshRowBorderWidthVariable(), this.addDestroyFunc(() => YT(this)), this.mutationObserver = new MutationObserver(() => {
      this.fireGridStylesChangedEvent("themeChanged");
    }), this.addDestroyFunc(() => this.mutationObserver.disconnect());
  }
  getPinnedRowBorderWidth() {
    return this.getCSSVariablePixelValue(ch);
  }
  getRowBorderWidth() {
    return this.getCSSVariablePixelValue(na);
  }
  getDefaultRowHeight() {
    return this.getCSSVariablePixelValue(rh);
  }
  getDefaultHeaderHeight() {
    return this.getCSSVariablePixelValue(ah);
  }
  getDefaultCellHorizontalPadding() {
    return this.getCSSVariablePixelValue(qM);
  }
  getCellPaddingLeft() {
    const e = this.getDefaultCellHorizontalPadding(), t = this.getCSSVariablePixelValue(XM), i = this.getCSSVariablePixelValue(ZM);
    return e - 1 + i * t;
  }
  getCellPadding() {
    const e = this.getDefaultCellHorizontalPadding() - 1;
    return this.getCellPaddingLeft() + e;
  }
  getDefaultColumnMinWidth() {
    return Math.min(36, this.getDefaultRowHeight());
  }
  getDefaultListItemHeight() {
    return this.getCSSVariablePixelValue(lh);
  }
  applyThemeClasses(e) {
    const { gridTheme: t } = this;
    let i = "";
    if (t)
      i = `${this.paramsClass} ${t._getCssClass()}`;
    else {
      this.mutationObserver.disconnect();
      let s = this.eGridDiv;
      for (; s; ) {
        let o = !1;
        for (const n of Array.from(s.classList))
          n.startsWith("ag-theme-") && (o = !0, i = i ? `${i} ${n}` : n);
        o && this.mutationObserver.observe(s, {
          attributes: !0,
          attributeFilter: ["class"]
        }), s = s.parentElement;
      }
    }
    for (const s of Array.from(e.classList))
      s.startsWith("ag-theme-") && e.classList.remove(s);
    if (i) {
      const s = e.className;
      e.className = s + (s ? " " : "") + i;
    }
  }
  refreshRowHeightVariable() {
    const { eGridDiv: e } = this, t = e.style.getPropertyValue("--ag-line-height").trim(), i = this.gos.get("rowHeight");
    if (i == null || isNaN(i) || !isFinite(i))
      return t !== null && e.style.setProperty("--ag-line-height", null), -1;
    const s = `${i}px`;
    return t != s ? (e.style.setProperty("--ag-line-height", s), i) : t != "" ? parseFloat(t) : -1;
  }
  addGlobalCSS(e, t) {
    this.gridTheme ? Ts(e, this.eStyleContainer, t, this.cssLayer, 0, this.styleNonce) : this.globalCSS.push([e, t]);
  }
  getCSSVariablePixelValue(e) {
    const t = this.lastKnownValues.get(e);
    if (t != null)
      return t;
    const i = this.measureSizeEl(e);
    return i === "detached" || i === "no-styles" ? (e.cacheDefault && this.lastKnownValues.set(e, e.defaultValue), e.defaultValue) : (this.lastKnownValues.set(e, i), i);
  }
  measureSizeEl(e) {
    const t = this.getSizeEl(e);
    if (t.offsetParent == null)
      return "detached";
    const i = t.offsetWidth;
    return i === ra ? "no-styles" : (this.sizesMeasured = !0, i);
  }
  getMeasurementContainer() {
    let e = this.eMeasurementContainer;
    return e || (e = this.eMeasurementContainer = Ae({ tag: "div", cls: "ag-measurement-container" }), this.eGridDiv.appendChild(e)), e;
  }
  getSizeEl(e) {
    let t = this.sizeEls.get(e);
    if (t)
      return t;
    const i = this.getMeasurementContainer();
    t = Ae({ tag: "div" });
    const { border: s, noWarn: o } = e;
    s ? (t.className = "ag-measurement-element-border", t.style.setProperty(
      "--ag-internal-measurement-border",
      `var(${e.cssName}, solid ${ra}px)`
    )) : t.style.width = `var(${e.cssName}, ${ra}px)`, i.appendChild(t), this.sizeEls.set(e, t);
    let n = this.measureSizeEl(e);
    n === "no-styles" && !o && B(9, { variable: e });
    const r = Qt(this.beans, t, () => {
      const a = this.measureSizeEl(e);
      a === "detached" || a === "no-styles" || (this.lastKnownValues.set(e, a), a !== n && (n = a, this.fireGridStylesChangedEvent(e.changeKey)));
    });
    return this.addDestroyFunc(() => r()), t;
  }
  fireGridStylesChangedEvent(e) {
    e === "rowBorderWidthChanged" && this.refreshRowBorderWidthVariable(), this.eventSvc.dispatchEvent({
      type: "gridStylesChanged",
      [e]: !0
    });
  }
  refreshRowBorderWidthVariable() {
    const e = this.getCSSVariablePixelValue(na);
    this.eGridDiv.style.setProperty("--ag-internal-row-border-width", `${e}px`);
  }
  handleThemeGridOptionChange() {
    const { gos: e, eGridDiv: t, globalCSS: i, gridTheme: s } = this, o = e.get("theme");
    let n;
    if (o === "legacy")
      n = void 0;
    else {
      const r = o ?? Lc;
      r instanceof Wm ? n = r : he(240, { theme: r });
    }
    if (n !== s) {
      if (n) {
        KT(this), km(this.eStyleContainer, this.cssLayer, this.styleNonce);
        for (const [a, l] of i)
          Ts(a, this.eStyleContainer, l, this.cssLayer, 0, this.styleNonce);
        i.length = 0;
      }
      this.gridTheme = n, n?._startUse({
        loadThemeGoogleFonts: e.get("loadThemeGoogleFonts"),
        styleContainer: this.eStyleContainer,
        cssLayer: this.cssLayer,
        nonce: this.styleNonce
      });
      let r = this.eParamsStyle;
      if (!r) {
        r = this.eParamsStyle = Ae({ tag: "style" });
        const a = this.gos.get("styleNonce");
        a && r.setAttribute("nonce", a), t.appendChild(r);
      }
      Ic || (r.textContent = n?._getPerGridCss(this.paramsClass) || ""), this.applyThemeClasses(t), this.fireGridStylesChangedEvent("themeChanged");
    }
    n && getComputedStyle(this.getMeasurementContainer()).getPropertyValue("--ag-legacy-styles-loaded") && he(o ? 106 : 239);
  }
}, ra = 15538, eA = class extends T {
  constructor() {
    super(...arguments), this.beanName = "eventSvc", this.globalSvc = new Oi();
  }
  postConstruct() {
    const { globalListener: e, globalSyncListener: t } = this.beans;
    e && this.addGlobalListener(e, !0), t && this.addGlobalListener(t, !1);
  }
  addEventListener(e, t, i) {
    this.globalSvc.addEventListener(e, t, i);
  }
  removeEventListener(e, t, i) {
    this.globalSvc.removeEventListener(e, t, i);
  }
  addGlobalListener(e, t = !1) {
    this.globalSvc.addGlobalListener(e, t);
  }
  removeGlobalListener(e, t = !1) {
    this.globalSvc.removeGlobalListener(e, t);
  }
  /** @deprecated DO NOT FIRE LOCAL EVENTS OFF THE EVENT SERVICE */
  dispatchLocalEvent() {
  }
  dispatchEvent(e) {
    this.globalSvc.dispatchEvent(Z(this.gos, e));
  }
  dispatchEventOnce(e) {
    this.globalSvc.dispatchEventOnce(Z(this.gos, e));
  }
};
function Km(e, t, i) {
  const s = e.visibleCols.headerGroupRowCount;
  if (i >= s)
    return {
      column: t,
      headerRowIndex: i
    };
  let o = t.getParent();
  for (; o && o.getProvidedColumnGroup().getLevel() > i; )
    o = o.getParent();
  const n = t.isSpanHeaderHeight();
  return !o || n && o.isPadding() ? {
    column: t,
    headerRowIndex: s
  } : {
    column: o,
    headerRowIndex: o.getProvidedColumnGroup().getLevel()
  };
}
var tA = class extends T {
  constructor() {
    super(...arguments), this.beanName = "headerNavigation", this.currentHeaderRowWithoutSpan = -1;
  }
  postConstruct() {
    const e = this.beans;
    e.ctrlsSvc.whenReady(this, (i) => {
      this.gridBodyCon = i.gridBodyCtrl;
    });
    const t = He(e);
    this.addManagedElementListeners(t, {
      mousedown: () => {
        this.currentHeaderRowWithoutSpan = -1;
      }
    });
  }
  getHeaderPositionForColumn(e, t) {
    let i;
    const { colModel: s, colGroupSvc: o, ctrlsSvc: n } = this.beans;
    if (typeof e == "string" ? (i = s.getCol(e), i || (i = o?.getColumnGroup(e) ?? null)) : i = e, !i)
      return null;
    const a = n.getHeaderRowContainerCtrl()?.getAllCtrls(), l = ue(a || []).type === "filter", c = It(this.beans) - 1;
    let d = -1, u = i;
    for (; u; )
      d++, u = u.getParent();
    let h = d;
    return t && l && h === c - 1 && h++, h === -1 ? null : {
      headerRowIndex: h,
      column: i
    };
  }
  /*
   * This method navigates grid header vertically
   * @return {boolean} true to preventDefault on the event that caused this navigation.
   */
  navigateVertically(e, t) {
    const { focusSvc: i, visibleCols: s } = this.beans, { focusedHeader: o } = i;
    if (!o)
      return !1;
    const { headerRowIndex: n } = o, r = o.column, a = It(this.beans), l = this.getHeaderRowType(n), c = s.headerGroupRowCount;
    let {
      headerRowIndex: d,
      column: u,
      headerRowIndexWithoutSpan: h
    } = e === "UP" ? iA(l, r, n) : sA(r, n, c), g = !1;
    return d < 0 && (d = 0, u = r, g = !0), d >= a ? (d = -1, this.currentHeaderRowWithoutSpan = -1) : h !== void 0 && (this.currentHeaderRowWithoutSpan = h), !g && !u ? !1 : i.focusHeaderPosition({
      headerPosition: { headerRowIndex: d, column: u },
      allowUserOverride: !0,
      event: t
    });
  }
  /*
   * This method navigates grid header horizontally
   * @returns {boolean} true to preventDefault on the event that caused this navigation.
   */
  navigateHorizontally(e, t = !1, i) {
    const { focusSvc: s, gos: o } = this.beans, n = { ...s.focusedHeader };
    let r, a;
    this.currentHeaderRowWithoutSpan !== -1 ? n.headerRowIndex = this.currentHeaderRowWithoutSpan : this.currentHeaderRowWithoutSpan = n.headerRowIndex, e === "LEFT" !== o.get("enableRtl") ? (a = "Before", r = this.findHeader(n, a)) : (a = "After", r = this.findHeader(n, a));
    const l = o.getCallback("tabToNextHeader");
    if (t && l) {
      const c = s.focusHeaderPositionFromUserFunc({
        userFunc: l,
        headerPosition: r,
        direction: a
      });
      if (c) {
        const { headerRowIndex: d } = s.focusedHeader || {};
        d != null && d != n.headerRowIndex && (this.currentHeaderRowWithoutSpan = d);
      }
      return c;
    }
    return r || !t ? s.focusHeaderPosition({
      headerPosition: r,
      direction: a,
      fromTab: t,
      allowUserOverride: !0,
      event: i
    }) : this.focusNextHeaderRow(n, a, i);
  }
  focusNextHeaderRow(e, t, i) {
    const s = this.beans, o = e.headerRowIndex;
    let n = null, r;
    const a = It(s), l = this.beans.visibleCols.allCols;
    if (t === "Before") {
      if (o <= 0)
        return !1;
      n = ue(l), r = o - 1, this.currentHeaderRowWithoutSpan -= 1;
    } else
      n = l[0], r = o + 1, this.currentHeaderRowWithoutSpan < a ? this.currentHeaderRowWithoutSpan += 1 : this.currentHeaderRowWithoutSpan = -1;
    let { column: c, headerRowIndex: d } = Km(this.beans, n, r);
    return d >= a && (d = -1), s.focusSvc.focusHeaderPosition({
      headerPosition: { column: c, headerRowIndex: d },
      direction: t,
      fromTab: !0,
      allowUserOverride: !0,
      event: i
    });
  }
  scrollToColumn(e, t = "After") {
    if (e.getPinned())
      return;
    let i;
    if (De(e)) {
      const s = e.getDisplayedLeafColumns();
      i = t === "Before" ? ue(s) : s[0];
    } else
      i = e;
    this.gridBodyCon.scrollFeature.ensureColumnVisible(i);
  }
  findHeader(e, t) {
    const { colGroupSvc: i, visibleCols: s } = this.beans;
    let o = e.column;
    if (o instanceof Fo) {
      const l = o.getDisplayedLeafColumns();
      o = t === "Before" ? l[0] : l[l.length - 1];
    }
    const n = t === "Before" ? s.getColBefore(o) : s.getColAfter(o);
    if (!n)
      return;
    const r = s.headerGroupRowCount;
    if (e.headerRowIndex >= r)
      return {
        headerRowIndex: e.headerRowIndex,
        column: n
      };
    const a = i?.getColGroupAtLevel(n, e.headerRowIndex);
    return a ? a.isPadding() && n.isSpanHeaderHeight() ? {
      headerRowIndex: s.headerGroupRowCount,
      column: n
    } : {
      headerRowIndex: e.headerRowIndex,
      column: a ?? n
    } : {
      headerRowIndex: n instanceof Ki && n.isSpanHeaderHeight() ? s.headerGroupRowCount : e.headerRowIndex,
      column: n
    };
  }
  getHeaderRowType(e) {
    const t = this.beans.ctrlsSvc.getHeaderRowContainerCtrl();
    if (t)
      return t.getRowType(e);
  }
};
function iA(e, t, i) {
  const s = i - 1;
  if (e !== "filter") {
    const o = t instanceof Ki && t.isSpanHeaderHeight();
    let n = t.getParent();
    for (; n && // skip if row isn't visible or col is padding and spanned
    (n.getProvidedColumnGroup().getLevel() > s || o && n.isPadding()); )
      n = n.getParent();
    if (n)
      return o ? {
        column: n,
        headerRowIndex: n.getProvidedColumnGroup().getLevel(),
        headerRowIndexWithoutSpan: s
      } : {
        column: n,
        headerRowIndex: s,
        headerRowIndexWithoutSpan: s
      };
  }
  return {
    column: t,
    headerRowIndex: s,
    headerRowIndexWithoutSpan: s
  };
}
function sA(e, t, i) {
  const s = t + 1, o = {
    column: e,
    headerRowIndex: s,
    headerRowIndexWithoutSpan: s
  };
  if (e instanceof Fo) {
    if (s >= i)
      return {
        column: e.getDisplayedLeafColumns()[0],
        headerRowIndex: i,
        headerRowIndexWithoutSpan: s
      };
    let r = e.getDisplayedChildren()[0];
    if (r instanceof Fo && r.isPadding()) {
      const l = r.getDisplayedLeafColumns()[0];
      l.isSpanHeaderHeight() && (r = l);
    }
    o.column = r, r instanceof Ki && r.isSpanHeaderHeight() && (o.headerRowIndex = i, o.headerRowIndexWithoutSpan = s);
  }
  return o;
}
var oA = class extends T {
  constructor() {
    super(...arguments), this.beanName = "focusSvc", this.focusFallbackTimeout = null, this.needsFocusRestored = !1;
  }
  wireBeans(e) {
    this.colModel = e.colModel, this.visibleCols = e.visibleCols, this.rowRenderer = e.rowRenderer, this.navigation = e.navigation, this.filterManager = e.filterManager, this.overlays = e.overlays;
  }
  postConstruct() {
    const e = this.clearFocusedCell.bind(this);
    this.addManagedEventListeners({
      columnPivotModeChanged: e,
      newColumnsLoaded: this.onColumnEverythingChanged.bind(this),
      columnGroupOpened: e,
      columnRowGroupChanged: e
    }), this.addDestroyFunc(cP(this.beans));
  }
  attemptToRecoverFocus() {
    this.needsFocusRestored = !0, this.focusFallbackTimeout != null && clearTimeout(this.focusFallbackTimeout), this.focusFallbackTimeout = window.setTimeout(this.setFocusRecovered.bind(this), 100);
  }
  setFocusRecovered() {
    this.needsFocusRestored = !1, this.focusFallbackTimeout != null && (clearTimeout(this.focusFallbackTimeout), this.focusFallbackTimeout = null);
  }
  /**
   * Specifies whether to take focus, as grid either already has focus, or lost it due
   * to a destroyed cell
   * @returns true if the grid should re-take focus, otherwise false
   */
  shouldTakeFocus() {
    return this.gos.get("suppressFocusAfterRefresh") ? (this.setFocusRecovered(), !1) : this.needsFocusRestored ? (this.setFocusRecovered(), !0) : this.doesRowOrCellHaveBrowserFocus();
  }
  onColumnEverythingChanged() {
    if (!this.focusedCell)
      return;
    const e = this.focusedCell.column, t = this.colModel.getCol(e.getId());
    e !== t && this.clearFocusedCell();
  }
  // we check if the browser is focusing something, and if it is, and
  // it's the cell we think is focused, then return the cell. so this
  // methods returns the cell if a) we think it has focus and b) the
  // browser thinks it has focus. this then returns nothing if we
  // first focus a cell, then second click outside the grid, as then the
  // grid cell will still be focused as far as the grid is concerned,
  // however the browser focus will have moved somewhere else.
  getFocusCellToUseAfterRefresh() {
    const { gos: e, focusedCell: t } = this;
    return e.get("suppressFocusAfterRefresh") || e.get("suppressCellFocus") || !t || !this.doesRowOrCellHaveBrowserFocus() ? null : t;
  }
  getFocusHeaderToUseAfterRefresh() {
    return this.gos.get("suppressFocusAfterRefresh") || !this.focusedHeader || !this.isDomDataPresentInHierarchy(Fe(this.beans), fm) ? null : this.focusedHeader;
  }
  /**
   * Check for both cells and rows, as a row might be destroyed and the dom data removed before the cell if the
   * row is animating out.
   */
  doesRowOrCellHaveBrowserFocus() {
    const e = Fe(this.beans);
    return this.isDomDataPresentInHierarchy(e, Jn) ? !0 : this.isDomDataPresentInHierarchy(e, er);
  }
  isDomDataPresentInHierarchy(e, t) {
    let i = e;
    for (; i; ) {
      if (nf(this.gos, i, t))
        return !0;
      i = i.parentNode;
    }
    return !1;
  }
  getFocusedCell() {
    return this.focusedCell;
  }
  getFocusEventParams(e) {
    const { rowIndex: t, rowPinned: i, column: s } = e, o = {
      rowIndex: t,
      rowPinned: i,
      column: s,
      isFullWidthCell: !1
    }, n = this.rowRenderer.getRowByPosition({ rowIndex: t, rowPinned: i });
    return n && (o.isFullWidthCell = n.isFullWidth()), o;
  }
  clearFocusedCell() {
    if (this.focusedCell == null)
      return;
    const e = this.getFocusEventParams(this.focusedCell);
    this.focusedCell = null, this.eventSvc.dispatchEvent({
      type: "cellFocusCleared",
      ...e
    });
  }
  setFocusedCell(e) {
    this.setFocusRecovered();
    const {
      column: t,
      rowIndex: i,
      rowPinned: s,
      forceBrowserFocus: o = !1,
      preventScrollOnBrowserFocus: n = !1,
      sourceEvent: r
    } = e, a = this.colModel.getCol(t);
    if (!a) {
      this.focusedCell = null;
      return;
    }
    this.focusedCell = {
      rowIndex: i,
      rowPinned: Ut(s),
      column: a
    };
    const l = this.getFocusEventParams(this.focusedCell);
    this.eventSvc.dispatchEvent({
      type: "cellFocused",
      ...l,
      ...this.previousCellFocusParams && { previousParams: this.previousCellFocusParams },
      forceBrowserFocus: o,
      preventScrollOnBrowserFocus: n,
      sourceEvent: r
    }), this.previousCellFocusParams = l;
  }
  isCellFocused(e) {
    return this.focusedCell == null ? !1 : zf(e, this.focusedCell);
  }
  isHeaderWrapperFocused(e) {
    if (this.focusedHeader == null)
      return !1;
    const {
      column: t,
      rowCtrl: { rowIndex: i, pinned: s }
    } = e, { column: o, headerRowIndex: n } = this.focusedHeader;
    return t === o && i === n && s == o.getPinned();
  }
  focusHeaderPosition(e) {
    if (this.setFocusRecovered(), ki(this.beans))
      return !1;
    const { direction: t, fromTab: i, allowUserOverride: s, event: o, fromCell: n, rowWithoutSpanValue: r } = e;
    let { headerPosition: a } = e;
    if (n && this.filterManager?.isAdvFilterHeaderActive())
      return this.focusAdvancedFilter(a);
    if (s) {
      const l = this.focusedHeader, c = It(this.beans);
      if (i) {
        const d = this.gos.getCallback("tabToNextHeader");
        d && (a = this.getHeaderPositionFromUserFunc({
          userFunc: d,
          direction: t,
          currentPosition: l,
          headerPosition: a,
          headerRowCount: c
        }));
      } else {
        const d = this.gos.getCallback("navigateToNextHeader");
        if (d && o) {
          const u = {
            key: o.key,
            previousHeaderPosition: l,
            nextHeaderPosition: a,
            headerRowCount: c,
            event: o
          };
          a = d(u);
        }
      }
    }
    return a ? this.focusProvidedHeaderPosition({
      headerPosition: a,
      direction: t,
      event: o,
      fromCell: n,
      rowWithoutSpanValue: r
    }) : !1;
  }
  focusHeaderPositionFromUserFunc(e) {
    if (ki(this.beans))
      return !1;
    const { userFunc: t, headerPosition: i, direction: s, event: o } = e, n = this.focusedHeader, r = It(this.beans), a = this.getHeaderPositionFromUserFunc({
      userFunc: t,
      direction: s,
      currentPosition: n,
      headerPosition: i,
      headerRowCount: r
    });
    return !!a && this.focusProvidedHeaderPosition({
      headerPosition: a,
      direction: s,
      event: o
    });
  }
  getHeaderPositionFromUserFunc(e) {
    const { userFunc: t, direction: i, currentPosition: s, headerPosition: o, headerRowCount: n } = e, a = t({
      backwards: i === "Before",
      previousHeaderPosition: s,
      nextHeaderPosition: o,
      headerRowCount: n
    });
    return a === !0 ? s : a === !1 ? null : a;
  }
  focusProvidedHeaderPosition(e) {
    const { headerPosition: t, direction: i, fromCell: s, rowWithoutSpanValue: o, event: n } = e, { column: r, headerRowIndex: a } = t, { filterManager: l, ctrlsSvc: c, headerNavigation: d } = this.beans;
    if (a === -1)
      return l?.isAdvFilterHeaderActive() ? this.focusAdvancedFilter(t) : this.focusGridView({ column: r, event: n });
    d?.scrollToColumn(r, i);
    const h = c.getHeaderRowContainerCtrl(r.getPinned())?.focusHeader(t.headerRowIndex, r, n) || !1;
    return d && h && (o != null || s) && (d.currentHeaderRowWithoutSpan = o ?? -1), h;
  }
  focusFirstHeader() {
    if (this.overlays?.isExclusive() && this.focusOverlay())
      return !0;
    const e = this.visibleCols.allCols[0];
    if (!e)
      return !1;
    const t = Km(this.beans, e, 0);
    return this.focusHeaderPosition({
      headerPosition: t,
      rowWithoutSpanValue: 0
    });
  }
  focusLastHeader(e) {
    if (this.overlays?.isExclusive() && this.focusOverlay(!0))
      return !0;
    const t = It(this.beans) - 1, i = ue(this.visibleCols.allCols);
    return this.focusHeaderPosition({
      headerPosition: { headerRowIndex: t, column: i },
      rowWithoutSpanValue: -1,
      event: e
    });
  }
  focusPreviousFromFirstCell(e) {
    return this.filterManager?.isAdvFilterHeaderActive() ? this.focusAdvancedFilter(null) : this.focusLastHeader(e);
  }
  isAnyCellFocused() {
    return !!this.focusedCell;
  }
  isRowFocused(e, t) {
    return this.focusedCell == null ? !1 : this.focusedCell.rowIndex === e && this.focusedCell.rowPinned === Ut(t);
  }
  focusOverlay(e) {
    const t = this.overlays?.isVisible() && this.overlays.eWrapper?.getGui();
    return !!t && Wi(t, e);
  }
  focusGridView(e) {
    const { backwards: t = !1, canFocusOverlay: i = !0, event: s } = e;
    if (this.overlays?.isExclusive())
      return i && this.focusOverlay(t);
    if (hr(this.beans))
      return t && !ki(this.beans) ? this.focusLastHeader() : i && this.focusOverlay(t) ? !0 : t ? !1 : Ds(this.beans, t);
    const o = t ? KF(this.beans) : $F(this.beans);
    if (o) {
      const n = e.column ?? this.focusedHeader?.column, { rowIndex: r, rowPinned: a } = o, l = Zt(this.beans, o);
      if (!n || !l || r == null)
        return !1;
      if (n.isSuppressNavigable(l)) {
        const c = this.gos.get("enableRtl");
        let d;
        return !s || s.key === E.TAB ? d = c ? E.LEFT : E.RIGHT : d = s.key, this.beans.navigation?.navigateToNextCell(
          null,
          d,
          { rowIndex: r, column: n, rowPinned: a || null },
          !0
        ), !0;
      }
      return this.navigation?.ensureCellVisible({ rowIndex: r, column: n, rowPinned: a }), t && this.rowRenderer.getRowByPosition(o)?.isFullWidth() && this.navigation?.tryToFocusFullWidthRow(o, t) || (this.setFocusedCell({
        rowIndex: r,
        column: n,
        rowPinned: Ut(a),
        forceBrowserFocus: !0
      }), this.beans.rangeSvc?.setRangeToCell({ rowIndex: r, rowPinned: a, column: n })), !0;
    }
    return !!(i && this.focusOverlay(t) || t && this.focusLastHeader());
  }
  focusAdvancedFilter(e) {
    return this.advFilterFocusColumn = e?.column, this.beans.advancedFilter?.getCtrl().focusHeaderComp() ?? !1;
  }
  focusNextFromAdvancedFilter(e, t) {
    const i = (t ? void 0 : this.advFilterFocusColumn) ?? this.visibleCols.allCols?.[0];
    return e ? this.focusHeaderPosition({
      headerPosition: {
        column: i,
        headerRowIndex: It(this.beans) - 1
      }
    }) : this.focusGridView({ column: i });
  }
  clearAdvancedFilterColumn() {
    this.advFilterFocusColumn = void 0;
  }
}, nA = class extends T {
  constructor() {
    super(...arguments), this.beanName = "scrollVisibleSvc";
  }
  wireBeans(e) {
    this.ctrlsSvc = e.ctrlsSvc, this.colAnimation = e.colAnimation;
  }
  postConstruct() {
    this.getScrollbarWidth(), this.addManagedEventListeners({
      displayedColumnsChanged: this.updateScrollVisible.bind(this),
      displayedColumnsWidthChanged: this.updateScrollVisible.bind(this)
    });
  }
  updateScrollVisible() {
    const { colAnimation: e } = this;
    e?.isActive() ? e.executeLaterVMTurn(() => {
      e.executeLaterVMTurn(() => this.updateScrollVisibleImpl());
    }) : this.updateScrollVisibleImpl();
  }
  updateScrollVisibleImpl() {
    const e = this.ctrlsSvc.get("center");
    if (!e || this.colAnimation?.isActive())
      return;
    const t = {
      horizontalScrollShowing: e.isHorizontalScrollShowing(),
      verticalScrollShowing: this.verticalScrollShowing
    };
    this.setScrollsVisible(t), this.updateScrollGap();
  }
  updateScrollGap() {
    const e = this.ctrlsSvc.get("center"), t = e.hasHorizontalScrollGap(), i = e.hasVerticalScrollGap();
    (this.horizontalScrollGap !== t || this.verticalScrollGap !== i) && (this.horizontalScrollGap = t, this.verticalScrollGap = i, this.eventSvc.dispatchEvent({
      type: "scrollGapChanged"
    }));
  }
  setScrollsVisible(e) {
    (this.horizontalScrollShowing !== e.horizontalScrollShowing || this.verticalScrollShowing !== e.verticalScrollShowing) && (this.horizontalScrollShowing = e.horizontalScrollShowing, this.verticalScrollShowing = e.verticalScrollShowing, this.eventSvc.dispatchEvent({
      type: "scrollVisibilityChanged"
    }));
  }
  // the user might be using some non-standard scrollbar, eg a scrollbar that has zero
  // width and overlays (like the Safari scrollbar, but presented in Chrome). so we
  // allow the user to provide the scroll width before we work it out.
  getScrollbarWidth() {
    if (this.scrollbarWidth == null) {
      const e = this.gos.get("scrollbarWidth"), i = typeof e == "number" && e >= 0 ? e : WR();
      i != null && (this.scrollbarWidth = i, this.eventSvc.dispatchEvent({
        type: "scrollbarWidthChanged"
      }));
    }
    return this.scrollbarWidth;
  }
}, rA = class extends T {
  constructor() {
    super(...arguments), this.beanName = "gridDestroySvc", this.destroyCalled = !1;
  }
  destroy() {
    if (this.destroyCalled)
      return;
    const { stateSvc: e, ctrlsSvc: t, context: i } = this.beans;
    this.eventSvc.dispatchEvent({
      type: "gridPreDestroyed",
      state: e?.getState() ?? {}
    }), this.destroyCalled = !0, t.get("gridCtrl")?.destroyGridUi(), i.destroy(), super.destroy();
  }
}, Sn = /* @__PURE__ */ new Set(["gridPreDestroyed", "fillStart", "pasteStart"]), aA = [
  "columnEverythingChanged",
  "newColumnsLoaded",
  "columnPivotModeChanged",
  "pivotMaxColumnsExceeded",
  "columnRowGroupChanged",
  "expandOrCollapseAll",
  "columnPivotChanged",
  "gridColumnsChanged",
  "columnValueChanged",
  "columnMoved",
  "columnVisible",
  "columnPinned",
  "columnGroupOpened",
  "columnResized",
  "displayedColumnsChanged",
  "virtualColumnsChanged",
  "columnHeaderMouseOver",
  "columnHeaderMouseLeave",
  "columnHeaderClicked",
  "columnHeaderContextMenu",
  "asyncTransactionsFlushed",
  "rowGroupOpened",
  "rowDataUpdated",
  "pinnedRowDataChanged",
  "pinnedRowsChanged",
  "rangeSelectionChanged",
  "cellSelectionChanged",
  "chartCreated",
  "chartRangeSelectionChanged",
  "chartOptionsChanged",
  "chartDestroyed",
  "toolPanelVisibleChanged",
  "toolPanelSizeChanged",
  "modelUpdated",
  "cutStart",
  "cutEnd",
  "pasteStart",
  "pasteEnd",
  "fillStart",
  "fillEnd",
  "cellSelectionDeleteStart",
  "cellSelectionDeleteEnd",
  "rangeDeleteStart",
  "rangeDeleteEnd",
  "undoStarted",
  "undoEnded",
  "redoStarted",
  "redoEnded",
  "cellClicked",
  "cellDoubleClicked",
  "cellMouseDown",
  "cellContextMenu",
  "cellValueChanged",
  "cellEditRequest",
  "rowValueChanged",
  "headerFocused",
  "cellFocused",
  "rowSelected",
  "selectionChanged",
  "tooltipShow",
  "tooltipHide",
  "cellKeyDown",
  "cellMouseOver",
  "cellMouseOut",
  "filterChanged",
  "filterModified",
  "filterUiChanged",
  "filterOpened",
  "floatingFilterUiChanged",
  "advancedFilterBuilderVisibleChanged",
  "sortChanged",
  "virtualRowRemoved",
  "rowClicked",
  "rowDoubleClicked",
  "gridReady",
  "gridPreDestroyed",
  "gridSizeChanged",
  "viewportChanged",
  "firstDataRendered",
  "dragStarted",
  "dragStopped",
  "dragCancelled",
  "rowEditingStarted",
  "rowEditingStopped",
  "cellEditingStarted",
  "cellEditingStopped",
  "bodyScroll",
  "bodyScrollEnd",
  "paginationChanged",
  "componentStateChanged",
  "storeRefreshed",
  "stateUpdated",
  "columnMenuVisibleChanged",
  "contextMenuVisibleChanged",
  "rowDragEnter",
  "rowDragMove",
  "rowDragLeave",
  "rowDragEnd",
  "rowDragCancel",
  "findChanged",
  "rowResizeStarted",
  "rowResizeEnded",
  "columnsReset",
  "bulkEditingStarted",
  "bulkEditingStopped",
  "batchEditingStarted",
  "batchEditingStopped"
], Oc = aA.reduce(
  (e, t) => (e[t] = gx(t), e),
  {}
), _s = (e, t) => ({
  tag: "span",
  ref: `eSort${e}`,
  cls: `ag-sort-indicator-icon ag-sort-${t} ag-hidden`,
  attrs: { "aria-hidden": "true" }
}), lA = {
  tag: "span",
  cls: "ag-sort-indicator-container",
  children: [
    _s("Order", "order"),
    _s("Asc", "ascending-icon"),
    _s("Desc", "descending-icon"),
    _s("Mixed", "mixed-icon"),
    _s("None", "none-icon")
  ]
}, Vc = class extends pe {
  constructor(e) {
    super(), this.eSortOrder = q, this.eSortAsc = q, this.eSortDesc = q, this.eSortMixed = q, this.eSortNone = q, e || this.setTemplate(lA);
  }
  attachCustomElements(e, t, i, s, o) {
    this.eSortOrder = e, this.eSortAsc = t, this.eSortDesc = i, this.eSortMixed = s, this.eSortNone = o;
  }
  setupSort(e, t = !1) {
    if (this.column = e, this.suppressOrder = t, this.setupMultiSortIndicator(), !e.isSortable() && !e.getColDef().showRowGroup)
      return;
    this.addInIcon("sortAscending", this.eSortAsc, e), this.addInIcon("sortDescending", this.eSortDesc, e), this.addInIcon("sortUnSort", this.eSortNone, e);
    const i = this.updateIcons.bind(this), s = this.onSortChanged.bind(this);
    this.addManagedPropertyListener("unSortIcon", i), this.addManagedEventListeners({
      newColumnsLoaded: i,
      // Watch global events, as row group columns can effect their display column.
      sortChanged: s,
      // when grouping changes so can sort indexes and icons
      columnRowGroupChanged: s
    }), this.onSortChanged();
  }
  addInIcon(e, t, i) {
    if (t == null)
      return;
    const s = Ct(e, this.beans, i);
    s && t.appendChild(s);
  }
  onSortChanged() {
    this.updateIcons(), this.suppressOrder || this.updateSortOrder();
  }
  updateIcons() {
    const { eSortAsc: e, eSortDesc: t, eSortNone: i, column: s, gos: o, beans: n } = this, r = n.sortSvc.getDisplaySortForColumn(s);
    if (e && Re(e, r === "asc", { skipAriaHidden: !0 }), t && Re(t, r === "desc", { skipAriaHidden: !0 }), i) {
      const a = !s.getColDef().unSortIcon && !o.get("unSortIcon"), l = r == null;
      Re(i, !a && l, { skipAriaHidden: !0 });
    }
  }
  setupMultiSortIndicator() {
    const { eSortMixed: e, column: t, gos: i } = this;
    this.addInIcon("sortUnSort", e, t);
    const s = t.getColDef().showRowGroup;
    Mt(i) && s && (this.addManagedEventListeners({
      // Watch global events, as row group columns can effect their display column.
      sortChanged: this.updateMultiSortIndicator.bind(this),
      // when grouping changes so can sort indexes and icons
      columnRowGroupChanged: this.updateMultiSortIndicator.bind(this)
    }), this.updateMultiSortIndicator());
  }
  updateMultiSortIndicator() {
    const { eSortMixed: e, beans: t, column: i } = this;
    if (e) {
      const s = t.sortSvc.getDisplaySortForColumn(i) === "mixed";
      Re(e, s, { skipAriaHidden: !0 });
    }
  }
  // we listen here for global sort events, NOT column sort events, as we want to do this
  // when sorting has been set on all column (if we listened just for our col (where we
  // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.
  updateSortOrder() {
    const {
      eSortOrder: e,
      column: t,
      beans: { sortSvc: i }
    } = this;
    if (!e)
      return;
    const s = i.getColumnsWithSortingOrdered(), o = i.getDisplaySortIndexForColumn(t) ?? -1, n = s.some(
      (a) => i.getDisplaySortIndexForColumn(a) ?? !1
    ), r = o >= 0 && n;
    Re(e, r, { skipAriaHidden: !0 }), o >= 0 ? e.textContent = (o + 1).toString() : ct(e);
  }
}, cA = {
  selector: "AG-SORT-INDICATOR",
  component: Vc
}, Do = ["asc", "desc", null], dA = class extends T {
  constructor() {
    super(...arguments), this.beanName = "sortSvc";
  }
  progressSort(e, t, i) {
    const s = this.getNextSortDirection(e);
    this.setSortForColumn(e, s, t, i);
  }
  progressSortFromEvent(e, t) {
    const s = this.gos.get("multiSortKey") === "ctrl" ? t.ctrlKey || t.metaKey : t.shiftKey;
    this.progressSort(e, s, "uiColumnSorted");
  }
  setSortForColumn(e, t, i, s) {
    t !== "asc" && t !== "desc" && (t = null);
    const { gos: o, showRowGroupCols: n } = this.beans, r = Mt(o);
    let a = [e];
    if (r && e.getColDef().showRowGroup) {
      const u = n?.getSourceColumnsForGroupColumn?.(e)?.filter((h) => h.isSortable());
      u && (a = [e, ...u]);
    }
    a.forEach((d) => this.setColSort(d, t, s));
    const l = (i || o.get("alwaysMultiSort")) && !o.get("suppressMultiSort"), c = [];
    if (!l) {
      const d = this.clearSortBarTheseColumns(a, s);
      c.push(...d);
    }
    this.updateSortIndex(e), c.push(...a), this.dispatchSortChangedEvents(s, c);
  }
  updateSortIndex(e) {
    const { gos: t, colModel: i, showRowGroupCols: s } = this.beans, o = Mt(t), n = s?.getShowRowGroupCol(e.getId()), r = o && n || e, a = this.getColumnsWithSortingOrdered();
    i.forAllCols((d) => this.setColSortIndex(d, null));
    const l = a.filter((d) => o && d.getColDef().showRowGroup ? !1 : d !== r);
    (r.getSort() ? [...l, r] : l).forEach((d, u) => this.setColSortIndex(d, u));
  }
  // gets called by API, so if data changes, use can call this, which will end up
  // working out the sort order again of the rows.
  onSortChanged(e, t) {
    this.dispatchSortChangedEvents(e, t);
  }
  isSortActive() {
    let e = !1;
    return this.beans.colModel.forAllCols((t) => {
      t.getSort() && (e = !0);
    }), e;
  }
  dispatchSortChangedEvents(e, t) {
    const i = {
      type: "sortChanged",
      source: e
    };
    t && (i.columns = t), this.eventSvc.dispatchEvent(i);
  }
  clearSortBarTheseColumns(e, t) {
    const i = [];
    return this.beans.colModel.forAllCols((s) => {
      e.includes(s) || (s.getSort() && i.push(s), this.setColSort(s, void 0, t));
    }), i;
  }
  getNextSortDirection(e) {
    const t = e.getColDef().sortingOrder ?? this.gos.get("sortingOrder") ?? Do, i = t.indexOf(e.getSort()), s = i < 0, o = i == t.length - 1;
    return s || o ? t[0] : t[i + 1];
  }
  /**
   * @returns a map of sort indexes for every sorted column, if groups sort primaries then they will have equivalent indices
   */
  getIndexedSortMap() {
    const { gos: e, colModel: t, showRowGroupCols: i, rowGroupColsSvc: s } = this.beans;
    let o = [];
    if (t.forAllCols((c) => {
      c.getSort() && o.push(c);
    }), t.isPivotMode()) {
      const c = Mt(e);
      o = o.filter((d) => {
        const u = !!d.getAggFunc(), h = !d.isPrimary(), g = c ? i?.getShowRowGroupCol(d.getId()) : d.getColDef().showRowGroup;
        return u || h || g;
      });
    }
    const n = s?.columns.filter((c) => !!c.getSort()) ?? [], r = {};
    o.forEach((c, d) => r[c.getId()] = d), o.sort((c, d) => {
      const u = c.getSortIndex(), h = d.getSortIndex();
      if (u != null && h != null)
        return u - h;
      if (u == null && h == null) {
        const g = r[c.getId()], p = r[d.getId()];
        return g > p ? 1 : -1;
      } else return h == null ? -1 : 1;
    });
    const a = Mt(e) && !!n.length;
    a && (o = [
      ...new Set(
        // if linked sorting, replace all columns with the display group column for index purposes, and ensure uniqueness
        o.map((c) => i?.getShowRowGroupCol(c.getId()) ?? c)
      )
    ]);
    const l = /* @__PURE__ */ new Map();
    return o.forEach((c, d) => l.set(c, d)), a && n.forEach((c) => {
      const d = i.getShowRowGroupCol(c.getId());
      l.set(c, l.get(d));
    }), l;
  }
  getColumnsWithSortingOrdered() {
    return [...this.getIndexedSortMap().entries()].sort(([, e], [, t]) => e - t).map(([e]) => e);
  }
  // used by server side row models, to sent sort to server
  getSortModel() {
    return this.getColumnsWithSortingOrdered().filter((e) => e.getSort()).map((e) => ({
      sort: e.getSort(),
      colId: e.getId()
    }));
  }
  getSortOptions() {
    return this.getColumnsWithSortingOrdered().filter((e) => e.getSort()).map((e) => ({
      sort: e.getSort(),
      column: e
    }));
  }
  canColumnDisplayMixedSort(e) {
    const t = Mt(this.gos), i = !!e.getColDef().showRowGroup;
    return t && i;
  }
  getDisplaySortForColumn(e) {
    const t = this.beans.showRowGroupCols?.getSourceColumnsForGroupColumn(e);
    if (!this.canColumnDisplayMixedSort(e) || !t?.length)
      return e.getSort();
    const s = e.getColDef().field != null || !!e.getColDef().valueGetter ? [e, ...t] : t, o = s[0].getSort();
    return s.every((r) => r.getSort() == o) ? o : "mixed";
  }
  getDisplaySortIndexForColumn(e) {
    return this.getIndexedSortMap().get(e);
  }
  setupHeader(e, t, i) {
    let s = 0;
    e.addManagedListeners(t, {
      movingChanged: () => {
        s = Date.now();
      }
    }), i && e.addManagedElementListeners(i, {
      click: (n) => {
        const r = t.isMoving(), l = Date.now() - s < 50;
        r || l || this.progressSortFromEvent(t, n);
      }
    });
    const o = () => {
      const n = t.getSort();
      if (e.toggleCss("ag-header-cell-sorted-asc", n === "asc"), e.toggleCss("ag-header-cell-sorted-desc", n === "desc"), e.toggleCss("ag-header-cell-sorted-none", !n), t.getColDef().showRowGroup) {
        const l = !this.beans.showRowGroupCols?.getSourceColumnsForGroupColumn(t)?.every(
          (c) => t.getSort() == c.getSort()
        );
        e.toggleCss("ag-header-cell-sorted-mixed", l);
      }
    };
    e.addManagedEventListeners({
      sortChanged: o,
      columnRowGroupChanged: o
    });
  }
  initCol(e) {
    const { sort: t, initialSort: i, sortIndex: s, initialSortIndex: o } = e.colDef;
    t !== void 0 ? (t === "asc" || t === "desc") && (e.sort = t) : (i === "asc" || i === "desc") && (e.sort = i), s !== void 0 ? s !== null && (e.sortIndex = s) : o !== null && (e.sortIndex = o);
  }
  updateColSort(e, t, i) {
    t !== void 0 && (t === "desc" || t === "asc" ? this.setColSort(e, t, i) : this.setColSort(e, void 0, i));
  }
  setColSort(e, t, i) {
    e.sort !== t && (e.sort = t, e.dispatchColEvent("sortChanged", i)), e.dispatchStateUpdatedEvent("sort");
  }
  setColSortIndex(e, t) {
    e.sortIndex = t, e.dispatchStateUpdatedEvent("sortIndex");
  }
  createSortIndicator(e) {
    return new Vc(e);
  }
  getSortIndicatorSelector() {
    return cA;
  }
}, Ss = {
  agSetColumnFilter: "SetFilter",
  agSetColumnFloatingFilter: "SetFilter",
  agMultiColumnFilter: "MultiFilter",
  agMultiColumnFloatingFilter: "MultiFilter",
  agGroupColumnFilter: "GroupFilter",
  agGroupColumnFloatingFilter: "GroupFilter",
  agGroupCellRenderer: "GroupCellRenderer",
  agGroupRowRenderer: "GroupCellRenderer",
  agRichSelect: "RichSelect",
  agRichSelectCellEditor: "RichSelect",
  agDetailCellRenderer: "SharedMasterDetail",
  agSparklineCellRenderer: "Sparklines",
  agDragAndDropImage: "SharedDragAndDrop",
  agColumnHeader: "ColumnHeaderComp",
  agColumnGroupHeader: "ColumnGroupHeaderComp",
  agSortIndicator: "Sort",
  agAnimateShowChangeCellRenderer: "HighlightChanges",
  agAnimateSlideCellRenderer: "HighlightChanges",
  agLoadingCellRenderer: "LoadingCellRenderer",
  agSkeletonCellRenderer: "SkeletonCellRenderer",
  agCheckboxCellRenderer: "CheckboxCellRenderer",
  agLoadingOverlay: "Overlay",
  agNoRowsOverlay: "Overlay",
  agTooltipComponent: "Tooltip",
  agReadOnlyFloatingFilter: "CustomFilter",
  agTextColumnFilter: "TextFilter",
  agNumberColumnFilter: "NumberFilter",
  agDateColumnFilter: "DateFilter",
  agDateInput: "DateFilter",
  agTextColumnFloatingFilter: "TextFilter",
  agNumberColumnFloatingFilter: "NumberFilter",
  agDateColumnFloatingFilter: "DateFilter",
  agCellEditor: "TextEditor",
  agSelectCellEditor: "SelectEditor",
  agTextCellEditor: "TextEditor",
  agNumberCellEditor: "NumberEditor",
  agDateCellEditor: "DateEditor",
  agDateStringCellEditor: "DateEditor",
  agCheckboxCellEditor: "CheckboxEditor",
  agLargeTextCellEditor: "LargeTextEditor",
  agMenuItem: "MenuItem",
  agColumnsToolPanel: "ColumnsToolPanel",
  agFiltersToolPanel: "FiltersToolPanel",
  agNewFiltersToolPanel: "NewFiltersToolPanel",
  agAggregationComponent: "StatusBar",
  agSelectedRowCountComponent: "StatusBar",
  agTotalRowCountComponent: "StatusBar",
  agFilteredRowCountComponent: "StatusBar",
  agTotalAndFilteredRowCountComponent: "StatusBar",
  agFindCellRenderer: "Find"
}, uA = () => ({
  checkboxSelection: { version: "32.2", message: "Use `rowSelection.checkboxes` in `GridOptions` instead." },
  headerCheckboxSelection: {
    version: "32.2",
    message: "Use `rowSelection.headerCheckbox = true` in `GridOptions` instead."
  },
  headerCheckboxSelectionFilteredOnly: {
    version: "32.2",
    message: 'Use `rowSelection.selectAll = "filtered"` in `GridOptions` instead.'
  },
  headerCheckboxSelectionCurrentPageOnly: {
    version: "32.2",
    message: 'Use `rowSelection.selectAll = "currentPage"` in `GridOptions` instead.'
  },
  showDisabledCheckboxes: {
    version: "32.2",
    message: "Use `rowSelection.hideDisabledCheckboxes = true` in `GridOptions` instead."
  }
}), hA = {
  aggFunc: "SharedAggregation",
  autoHeight: "RowAutoHeight",
  cellClass: "CellStyle",
  cellClassRules: "CellStyle",
  cellEditor: ({ cellEditor: e, editable: t }) => t ? typeof e == "string" ? Ss[e] ?? "CustomEditor" : "CustomEditor" : null,
  cellRenderer: ({ cellRenderer: e }) => typeof e != "string" ? null : Ss[e],
  cellStyle: "CellStyle",
  columnChooserParams: "ColumnMenu",
  contextMenuItems: "ContextMenu",
  dndSource: "DragAndDrop",
  dndSourceOnRowDrag: "DragAndDrop",
  editable: ({ editable: e, cellEditor: t }) => e && !t ? "TextEditor" : null,
  enableCellChangeFlash: "HighlightChanges",
  enablePivot: "SharedPivot",
  enableRowGroup: "SharedRowGrouping",
  enableValue: "SharedAggregation",
  filter: ({ filter: e }) => e && typeof e != "string" && typeof e != "boolean" ? "CustomFilter" : typeof e == "string" ? Ss[e] ?? "ColumnFilter" : "ColumnFilter",
  floatingFilter: "ColumnFilter",
  getQuickFilterText: "QuickFilter",
  headerTooltip: "Tooltip",
  mainMenuItems: "ColumnMenu",
  menuTabs: (e) => {
    const t = ["columnsMenuTab", "generalMenuTab"];
    return e.menuTabs?.some((i) => t.includes(i)) ? "ColumnMenu" : null;
  },
  pivot: "SharedPivot",
  pivotIndex: "SharedPivot",
  rowDrag: "RowDrag",
  rowGroup: "SharedRowGrouping",
  rowGroupIndex: "SharedRowGrouping",
  tooltipField: "Tooltip",
  tooltipValueGetter: "Tooltip",
  spanRows: "CellSpan"
}, gA = () => ({
  autoHeight: {
    supportedRowModels: ["clientSide", "serverSide"],
    validate: (t, { paginationAutoPageSize: i }) => i ? "colDef.autoHeight is not supported with paginationAutoPageSize." : null
  },
  cellRendererParams: {
    validate: (t) => (t.rowGroup != null || t.rowGroupIndex != null || t.cellRenderer === "agGroupCellRenderer") && "checkbox" in t.cellRendererParams ? 'Since v33.0, `cellRendererParams.checkbox` has been deprecated. Use `rowSelection.checkboxLocation = "autoGroupColumn"` instead.' : null
  },
  flex: {
    validate: (t, i) => i.autoSizeStrategy ? "colDef.flex is not supported with gridOptions.autoSizeStrategy" : null
  },
  headerCheckboxSelection: {
    supportedRowModels: ["clientSide", "serverSide"],
    validate: (t, { rowSelection: i }) => i === "multiple" ? null : "headerCheckboxSelection is only supported with rowSelection=multiple"
  },
  headerCheckboxSelectionCurrentPageOnly: {
    supportedRowModels: ["clientSide"],
    validate: (t, { rowSelection: i }) => i === "multiple" ? null : "headerCheckboxSelectionCurrentPageOnly is only supported with rowSelection=multiple"
  },
  headerCheckboxSelectionFilteredOnly: {
    supportedRowModels: ["clientSide"],
    validate: (t, { rowSelection: i }) => i === "multiple" ? null : "headerCheckboxSelectionFilteredOnly is only supported with rowSelection=multiple"
  },
  headerValueGetter: {
    validate: (t) => {
      const i = t.headerValueGetter;
      return typeof i == "function" || typeof i == "string" ? null : "headerValueGetter must be a function or a valid string expression";
    }
  },
  icons: {
    validate: ({ icons: t }) => {
      if (t) {
        if (t.smallDown)
          return Gt(262);
        if (t.smallLeft)
          return Gt(263);
        if (t.smallRight)
          return Gt(264);
      }
      return null;
    }
  },
  sortingOrder: {
    validate: (t) => {
      const i = t.sortingOrder;
      if (Array.isArray(i) && i.length > 0) {
        const s = i.filter((o) => !Do.includes(o));
        if (s.length > 0)
          return `sortingOrder must be an array with elements from [${Do.map(Bn).join()}], currently it includes [${s.map(Bn).join()}]`;
      } else if (!Array.isArray(i) || i.length <= 0)
        return `sortingOrder must be an array with at least one element, currently it's ${i}`;
      return null;
    }
  },
  type: {
    validate: (t) => {
      const i = t.type;
      return i instanceof Array ? i.some((o) => typeof o != "string") ? "if colDef.type is supplied an array it should be of type 'string[]'" : null : typeof i == "string" ? null : "colDef.type should be of type 'string' | 'string[]'";
    }
  },
  rowSpan: {
    validate: (t, { suppressRowTransform: i }) => i ? null : "colDef.rowSpan requires suppressRowTransform to be enabled."
  },
  spanRows: {
    dependencies: {
      editable: { required: [!1, void 0] },
      rowDrag: { required: [!1, void 0] },
      colSpan: { required: [void 0] },
      rowSpan: { required: [void 0] }
    },
    validate: (t, {
      rowSelection: i,
      cellSelection: s,
      suppressRowTransform: o,
      enableCellSpan: n,
      rowDragEntireRow: r,
      enableCellTextSelection: a
    }) => typeof i == "object" && i?.mode === "singleRow" && i?.enableClickSelection ? "colDef.spanRows is not supported with rowSelection.clickSelection" : s ? "colDef.spanRows is not supported with cellSelection." : o ? "colDef.spanRows is not supported with suppressRowTransform." : n ? r ? "colDef.spanRows is not supported with rowDragEntireRow." : a ? "colDef.spanRows is not supported with enableCellTextSelection." : null : "colDef.spanRows requires enableCellSpan to be enabled."
  }
}), pA = {
  headerName: void 0,
  columnGroupShow: void 0,
  headerStyle: void 0,
  headerClass: void 0,
  toolPanelClass: void 0,
  headerValueGetter: void 0,
  pivotKeys: void 0,
  groupId: void 0,
  colId: void 0,
  sort: void 0,
  initialSort: void 0,
  field: void 0,
  type: void 0,
  cellDataType: void 0,
  tooltipComponent: void 0,
  tooltipField: void 0,
  headerTooltip: void 0,
  cellClass: void 0,
  showRowGroup: void 0,
  filter: void 0,
  initialAggFunc: void 0,
  defaultAggFunc: void 0,
  aggFunc: void 0,
  pinned: void 0,
  initialPinned: void 0,
  chartDataType: void 0,
  cellAriaRole: void 0,
  cellEditorPopupPosition: void 0,
  headerGroupComponent: void 0,
  headerGroupComponentParams: void 0,
  cellStyle: void 0,
  cellRenderer: void 0,
  cellRendererParams: void 0,
  cellEditor: void 0,
  cellEditorParams: void 0,
  filterParams: void 0,
  pivotValueColumn: void 0,
  headerComponent: void 0,
  headerComponentParams: void 0,
  floatingFilterComponent: void 0,
  floatingFilterComponentParams: void 0,
  tooltipComponentParams: void 0,
  refData: void 0,
  columnChooserParams: void 0,
  children: void 0,
  sortingOrder: void 0,
  allowedAggFuncs: void 0,
  menuTabs: void 0,
  pivotTotalColumnIds: void 0,
  cellClassRules: void 0,
  icons: void 0,
  sortIndex: void 0,
  initialSortIndex: void 0,
  flex: void 0,
  initialFlex: void 0,
  width: void 0,
  initialWidth: void 0,
  minWidth: void 0,
  maxWidth: void 0,
  rowGroupIndex: void 0,
  initialRowGroupIndex: void 0,
  pivotIndex: void 0,
  initialPivotIndex: void 0,
  suppressColumnsToolPanel: void 0,
  suppressFiltersToolPanel: void 0,
  openByDefault: void 0,
  marryChildren: void 0,
  suppressStickyLabel: void 0,
  hide: void 0,
  initialHide: void 0,
  rowGroup: void 0,
  initialRowGroup: void 0,
  pivot: void 0,
  initialPivot: void 0,
  checkboxSelection: void 0,
  showDisabledCheckboxes: void 0,
  headerCheckboxSelection: void 0,
  headerCheckboxSelectionFilteredOnly: void 0,
  headerCheckboxSelectionCurrentPageOnly: void 0,
  suppressHeaderMenuButton: void 0,
  suppressMovable: void 0,
  lockPosition: void 0,
  lockVisible: void 0,
  lockPinned: void 0,
  unSortIcon: void 0,
  suppressSizeToFit: void 0,
  suppressAutoSize: void 0,
  enableRowGroup: void 0,
  enablePivot: void 0,
  enableValue: void 0,
  editable: void 0,
  suppressPaste: void 0,
  suppressNavigable: void 0,
  enableCellChangeFlash: void 0,
  rowDrag: void 0,
  dndSource: void 0,
  autoHeight: void 0,
  wrapText: void 0,
  sortable: void 0,
  resizable: void 0,
  singleClickEdit: void 0,
  floatingFilter: void 0,
  cellEditorPopup: void 0,
  suppressFillHandle: void 0,
  wrapHeaderText: void 0,
  autoHeaderHeight: void 0,
  dndSourceOnRowDrag: void 0,
  valueGetter: void 0,
  valueSetter: void 0,
  filterValueGetter: void 0,
  keyCreator: void 0,
  valueFormatter: void 0,
  valueParser: void 0,
  comparator: void 0,
  equals: void 0,
  pivotComparator: void 0,
  suppressKeyboardEvent: void 0,
  suppressHeaderKeyboardEvent: void 0,
  colSpan: void 0,
  rowSpan: void 0,
  spanRows: void 0,
  getQuickFilterText: void 0,
  onCellValueChanged: void 0,
  onCellClicked: void 0,
  onCellDoubleClicked: void 0,
  onCellContextMenu: void 0,
  rowDragText: void 0,
  tooltipValueGetter: void 0,
  cellRendererSelector: void 0,
  cellEditorSelector: void 0,
  suppressSpanHeaderHeight: void 0,
  useValueFormatterForExport: void 0,
  useValueParserForImport: void 0,
  mainMenuItems: void 0,
  contextMenuItems: void 0,
  suppressFloatingFilterButton: void 0,
  suppressHeaderFilterButton: void 0,
  suppressHeaderContextMenu: void 0,
  loadingCellRenderer: void 0,
  loadingCellRendererParams: void 0,
  loadingCellRendererSelector: void 0,
  context: void 0,
  dateComponent: void 0,
  dateComponentParams: void 0,
  getFindText: void 0
}, fA = () => Object.keys(pA), mA = () => ({
  objectName: "colDef",
  allProperties: fA(),
  docsUrl: "column-properties/",
  deprecations: uA(),
  validations: gA()
}), CA = [
  "overlayLoadingTemplate",
  "overlayNoRowsTemplate",
  "gridId",
  "quickFilterText",
  "rowModelType",
  "editType",
  "domLayout",
  "clipboardDelimiter",
  "rowGroupPanelShow",
  "multiSortKey",
  "pivotColumnGroupTotals",
  "pivotRowTotals",
  "pivotPanelShow",
  "fillHandleDirection",
  "groupDisplayType",
  "treeDataDisplayType",
  "treeDataChildrenField",
  "treeDataParentIdField",
  "colResizeDefault",
  "tooltipTrigger",
  "serverSidePivotResultFieldSeparator",
  "columnMenu",
  "tooltipShowMode",
  "invalidEditValueMode",
  "grandTotalRow",
  "themeCssLayer",
  "findSearchValue",
  "styleNonce",
  "renderingMode"
], vA = [
  "components",
  "rowStyle",
  "context",
  "autoGroupColumnDef",
  "localeText",
  "icons",
  "datasource",
  "dragAndDropImageComponentParams",
  "serverSideDatasource",
  "viewportDatasource",
  "groupRowRendererParams",
  "aggFuncs",
  "fullWidthCellRendererParams",
  "defaultColGroupDef",
  "defaultColDef",
  "defaultCsvExportParams",
  "defaultExcelExportParams",
  "columnTypes",
  "rowClassRules",
  "detailCellRendererParams",
  "loadingCellRendererParams",
  "loadingOverlayComponentParams",
  "noRowsOverlayComponentParams",
  "popupParent",
  "themeStyleContainer",
  "statusBar",
  "chartThemeOverrides",
  "customChartThemes",
  "chartToolPanelsDef",
  "dataTypeDefinitions",
  "advancedFilterParent",
  "advancedFilterBuilderParams",
  "advancedFilterParams",
  "initialState",
  "autoSizeStrategy",
  "selectionColumnDef",
  "findOptions",
  "filterHandlers"
], wA = [
  "sortingOrder",
  "alignedGrids",
  "rowData",
  "columnDefs",
  "excelStyles",
  "pinnedTopRowData",
  "pinnedBottomRowData",
  "chartThemes",
  "rowClass",
  "paginationPageSizeSelector"
], Ym = [
  "rowHeight",
  "detailRowHeight",
  "rowBuffer",
  "headerHeight",
  "groupHeaderHeight",
  "groupLockGroupColumns",
  "floatingFiltersHeight",
  "pivotHeaderHeight",
  "pivotGroupHeaderHeight",
  "groupDefaultExpanded",
  "pivotDefaultExpanded",
  "viewportRowModelPageSize",
  "viewportRowModelBufferSize",
  "autoSizePadding",
  "maxBlocksInCache",
  "maxConcurrentDatasourceRequests",
  "tooltipShowDelay",
  "tooltipHideDelay",
  "cacheOverflowSize",
  "paginationPageSize",
  "cacheBlockSize",
  "infiniteInitialRowCount",
  "serverSideInitialRowCount",
  "scrollbarWidth",
  "asyncTransactionWaitMillis",
  "blockLoadDebounceMillis",
  "keepDetailRowsCount",
  "undoRedoCellEditingLimit",
  "cellFlashDuration",
  "cellFadeDuration",
  "tabIndex",
  "pivotMaxGeneratedColumns",
  "rowDragInsertDelay"
], SA = ["theme", "rowSelection"], yA = [
  "cellSelection",
  "sideBar",
  "rowNumbers",
  "suppressGroupChangesColumnVisibility",
  "groupAggFiltering",
  "suppressStickyTotalRow",
  "groupHideParentOfSingleChild",
  "enableRowPinning"
], qm = [
  "loadThemeGoogleFonts",
  "suppressMakeColumnVisibleAfterUnGroup",
  "suppressRowClickSelection",
  "suppressCellFocus",
  "suppressHeaderFocus",
  "suppressHorizontalScroll",
  "groupSelectsChildren",
  "alwaysShowHorizontalScroll",
  "alwaysShowVerticalScroll",
  "debug",
  "enableBrowserTooltips",
  "enableCellExpressions",
  "groupSuppressBlankHeader",
  "suppressMenuHide",
  "suppressRowDeselection",
  "unSortIcon",
  "suppressMultiSort",
  "alwaysMultiSort",
  "singleClickEdit",
  "suppressLoadingOverlay",
  "suppressNoRowsOverlay",
  "suppressAutoSize",
  "skipHeaderOnAutoSize",
  "suppressColumnMoveAnimation",
  "suppressMoveWhenColumnDragging",
  "suppressMovableColumns",
  "suppressFieldDotNotation",
  "enableRangeSelection",
  "enableRangeHandle",
  "enableFillHandle",
  "suppressClearOnFillReduction",
  "deltaSort",
  "suppressTouch",
  "allowContextMenuWithControlKey",
  "suppressContextMenu",
  "suppressDragLeaveHidesColumns",
  "suppressRowGroupHidesColumns",
  "suppressMiddleClickScrolls",
  "suppressPreventDefaultOnMouseWheel",
  "suppressCopyRowsToClipboard",
  "copyHeadersToClipboard",
  "copyGroupHeadersToClipboard",
  "pivotMode",
  "suppressAggFuncInHeader",
  "suppressColumnVirtualisation",
  "alwaysAggregateAtRootLevel",
  "suppressFocusAfterRefresh",
  "functionsReadOnly",
  "animateRows",
  "groupSelectsFiltered",
  "groupRemoveSingleChildren",
  "groupRemoveLowestSingleChildren",
  "enableRtl",
  "enableCellSpan",
  "suppressClickEdit",
  "rowDragEntireRow",
  "rowDragManaged",
  "suppressRowDrag",
  "suppressMoveWhenRowDragging",
  "rowDragMultiRow",
  "enableGroupEdit",
  "embedFullWidthRows",
  "suppressPaginationPanel",
  "groupHideOpenParents",
  "groupAllowUnbalanced",
  "pagination",
  "paginationAutoPageSize",
  "suppressScrollOnNewData",
  "suppressScrollWhenPopupsAreOpen",
  "purgeClosedRowNodes",
  "cacheQuickFilter",
  "includeHiddenColumnsInQuickFilter",
  "ensureDomOrder",
  "accentedSort",
  "suppressChangeDetection",
  "valueCache",
  "valueCacheNeverExpires",
  "aggregateOnlyChangedColumns",
  "suppressAnimationFrame",
  "suppressExcelExport",
  "suppressCsvExport",
  "includeHiddenColumnsInAdvancedFilter",
  "suppressMultiRangeSelection",
  "enterNavigatesVerticallyAfterEdit",
  "enterNavigatesVertically",
  "suppressPropertyNamesCheck",
  "rowMultiSelectWithClick",
  "suppressRowHoverHighlight",
  "suppressRowTransform",
  "suppressClipboardPaste",
  "suppressLastEmptyLineOnPaste",
  "enableCharts",
  "suppressMaintainUnsortedOrder",
  "enableCellTextSelection",
  "suppressBrowserResizeObserver",
  "suppressMaxRenderedRowRestriction",
  "excludeChildrenWhenTreeDataFiltering",
  "tooltipMouseTrack",
  "tooltipInteraction",
  "keepDetailRows",
  "paginateChildRows",
  "preventDefaultOnContextMenu",
  "undoRedoCellEditing",
  "allowDragFromColumnsToolPanel",
  "pivotSuppressAutoColumn",
  "suppressExpandablePivotGroups",
  "debounceVerticalScrollbar",
  "detailRowAutoHeight",
  "serverSideSortAllLevels",
  "serverSideEnableClientSideSort",
  "serverSideOnlyRefreshFilteredGroups",
  "suppressAggFilteredOnly",
  "showOpenedGroup",
  "suppressClipboardApi",
  "suppressModelUpdateAfterUpdateTransaction",
  "stopEditingWhenCellsLoseFocus",
  "groupMaintainOrder",
  "columnHoverHighlight",
  "readOnlyEdit",
  "suppressRowVirtualisation",
  "enableCellEditingOnBackspace",
  "resetRowDataOnUpdate",
  "removePivotHeaderRowWhenSingleValueColumn",
  "suppressCopySingleCellRanges",
  "suppressGroupRowsSticky",
  "suppressCutToClipboard",
  "rowGroupPanelSuppressSort",
  "allowShowChangeAfterFilter",
  "enableAdvancedFilter",
  "masterDetail",
  "treeData",
  "reactiveCustomComponents",
  "applyQuickFilterBeforePivotOrAgg",
  "suppressServerSideFullWidthLoadingRow",
  "suppressAdvancedFilterEval",
  "loading",
  "maintainColumnOrder",
  "enableStrictPivotColumnOrder",
  "suppressSetFilterByDefault",
  "enableFilterHandlers",
  "suppressStartEditOnTab",
  "hidePaddedHeaderRows"
], bA = [
  "doesExternalFilterPass",
  "processPivotResultColDef",
  "processPivotResultColGroupDef",
  "getBusinessKeyForNode",
  "isRowSelectable",
  "rowDragText",
  "groupRowRenderer",
  "dragAndDropImageComponent",
  "fullWidthCellRenderer",
  "loadingCellRenderer",
  "loadingOverlayComponent",
  "noRowsOverlayComponent",
  "detailCellRenderer",
  "quickFilterParser",
  "quickFilterMatcher",
  "getLocaleText",
  "isExternalFilterPresent",
  "getRowHeight",
  "getRowClass",
  "getRowStyle",
  "getFullRowEditValidationErrors",
  "getContextMenuItems",
  "getMainMenuItems",
  "processRowPostCreate",
  "processCellForClipboard",
  "getGroupRowAgg",
  "isFullWidthRow",
  "sendToClipboard",
  "focusGridInnerElement",
  "navigateToNextHeader",
  "tabToNextHeader",
  "navigateToNextCell",
  "tabToNextCell",
  "processCellFromClipboard",
  "getDocument",
  "postProcessPopup",
  "getChildCount",
  "getDataPath",
  "isRowMaster",
  "postSortRows",
  "processHeaderForClipboard",
  "processUnpinnedColumns",
  "processGroupHeaderForClipboard",
  "paginationNumberFormatter",
  "processDataFromClipboard",
  "getServerSideGroupKey",
  "isServerSideGroup",
  "createChartContainer",
  "getChartToolbarItems",
  "fillOperation",
  "isApplyServerSideTransaction",
  "getServerSideGroupLevelParams",
  "isServerSideGroupOpenByDefault",
  "isGroupOpenByDefault",
  "initialGroupOrderComparator",
  "loadingCellRendererSelector",
  "getRowId",
  "chartMenuItems",
  "groupTotalRow",
  "alwaysPassFilter",
  "isRowPinnable",
  "isRowPinned",
  "isRowValidDropPosition"
], RA = () => [
  ...wA,
  ...vA,
  ...CA,
  ...Ym,
  ...bA,
  ...qm,
  ...yA,
  ...SA
], xA = () => ({
  suppressLoadingOverlay: { version: "32", message: "Use `loading`=false instead." },
  enableFillHandle: { version: "32.2", message: "Use `cellSelection.handle` instead." },
  enableRangeHandle: { version: "32.2", message: "Use `cellSelection.handle` instead." },
  enableRangeSelection: { version: "32.2", message: "Use `cellSelection = true` instead." },
  suppressMultiRangeSelection: {
    version: "32.2",
    message: "Use `cellSelection.suppressMultiRanges` instead."
  },
  suppressClearOnFillReduction: {
    version: "32.2",
    message: "Use `cellSelection.handle.suppressClearOnFillReduction` instead."
  },
  fillHandleDirection: { version: "32.2", message: "Use `cellSelection.handle.direction` instead." },
  fillOperation: { version: "32.2", message: "Use `cellSelection.handle.setFillValue` instead." },
  suppressRowClickSelection: {
    version: "32.2",
    message: "Use `rowSelection.enableClickSelection` instead."
  },
  suppressRowDeselection: { version: "32.2", message: "Use `rowSelection.enableClickSelection` instead." },
  rowMultiSelectWithClick: {
    version: "32.2",
    message: "Use `rowSelection.enableSelectionWithoutKeys` instead."
  },
  groupSelectsChildren: {
    version: "32.2",
    message: 'Use `rowSelection.groupSelects = "descendants"` instead.'
  },
  groupSelectsFiltered: {
    version: "32.2",
    message: 'Use `rowSelection.groupSelects = "filteredDescendants"` instead.'
  },
  isRowSelectable: { version: "32.2", message: "Use `selectionOptions.isRowSelectable` instead." },
  suppressCopySingleCellRanges: { version: "32.2", message: "Use `rowSelection.copySelectedRows` instead." },
  suppressCopyRowsToClipboard: { version: "32.2", message: "Use `rowSelection.copySelectedRows` instead." },
  onRangeSelectionChanged: { version: "32.2", message: "Use `onCellSelectionChanged` instead." },
  onRangeDeleteStart: { version: "32.2", message: "Use `onCellSelectionDeleteStart` instead." },
  onRangeDeleteEnd: { version: "32.2", message: "Use `onCellSelectionDeleteEnd` instead." },
  suppressBrowserResizeObserver: {
    version: "32.2",
    message: "The grid always uses the browser's ResizeObserver, this grid option has no effect."
  },
  onColumnEverythingChanged: {
    version: "32.2",
    message: "Either use `onDisplayedColumnsChanged` which is fired at the same time, or use one of the more specific column events."
  },
  groupRemoveSingleChildren: {
    version: "33",
    message: "Use `groupHideParentOfSingleChild` instead."
  },
  groupRemoveLowestSingleChildren: {
    version: "33",
    message: 'Use `groupHideParentOfSingleChild: "leafGroupsOnly"` instead.'
  },
  suppressRowGroupHidesColumns: {
    version: "33",
    message: 'Use `suppressGroupChangesColumnVisibility: "suppressHideOnGroup"` instead.'
  },
  suppressMakeColumnVisibleAfterUnGroup: {
    version: "33",
    message: 'Use `suppressGroupChangesColumnVisibility: "suppressShowOnUngroup"` instead.'
  },
  unSortIcon: { version: "33", message: "Use `defaultColDef.unSortIcon` instead." },
  sortingOrder: { version: "33", message: "Use `defaultColDef.sortingOrder` instead." },
  suppressPropertyNamesCheck: {
    version: "33",
    message: "`gridOptions` and `columnDefs` both have a `context` property that should be used for arbitrary user data. This means that column definitions and gridOptions should only contain valid properties making this property redundant."
  },
  suppressAdvancedFilterEval: {
    version: "34",
    message: "Advanced filter no longer uses function evaluation, so this option has no effect."
  }
});
function Dt(e, t, i) {
  return typeof t == "number" || t == null ? t == null || t >= i ? null : `${e}: value should be greater than or equal to ${i}` : `${e}: value should be a number`;
}
var FA = {
  alignedGrids: "AlignedGrids",
  allowContextMenuWithControlKey: "ContextMenu",
  autoSizeStrategy: "ColumnAutoSize",
  cellSelection: "CellSelection",
  columnHoverHighlight: "ColumnHover",
  datasource: "InfiniteRowModel",
  doesExternalFilterPass: "ExternalFilter",
  editType: "EditCore",
  invalidEditValueMode: "EditCore",
  enableAdvancedFilter: "AdvancedFilter",
  enableCellSpan: "CellSpan",
  enableCharts: "IntegratedCharts",
  enableRangeSelection: "CellSelection",
  enableRowPinning: "PinnedRow",
  findSearchValue: "Find",
  getFullRowEditValidationErrors: "EditCore",
  getContextMenuItems: "ContextMenu",
  getLocaleText: "Locale",
  getMainMenuItems: "ColumnMenu",
  getRowClass: "RowStyle",
  getRowStyle: "RowStyle",
  groupTotalRow: "SharedRowGrouping",
  grandTotalRow: "SharedRowGrouping",
  initialState: "GridState",
  isExternalFilterPresent: "ExternalFilter",
  isRowPinnable: "PinnedRow",
  isRowPinned: "PinnedRow",
  localeText: "Locale",
  masterDetail: "SharedMasterDetail",
  pagination: "Pagination",
  pinnedBottomRowData: "PinnedRow",
  pinnedTopRowData: "PinnedRow",
  pivotMode: "SharedPivot",
  pivotPanelShow: "RowGroupingPanel",
  quickFilterText: "QuickFilter",
  rowClass: "RowStyle",
  rowClassRules: "RowStyle",
  rowData: "ClientSideRowModel",
  rowDragManaged: "RowDrag",
  rowGroupPanelShow: "RowGroupingPanel",
  rowNumbers: "RowNumbers",
  rowSelection: "SharedRowSelection",
  rowStyle: "RowStyle",
  serverSideDatasource: "ServerSideRowModel",
  sideBar: "SideBar",
  statusBar: "StatusBar",
  treeData: "SharedTreeData",
  undoRedoCellEditing: "UndoRedoEdit",
  valueCache: "ValueCache",
  viewportDatasource: "ViewportRowModel"
}, PA = () => {
  const e = {
    autoSizePadding: {
      validate({ autoSizePadding: i }) {
        return Dt("autoSizePadding", i, 0);
      }
    },
    cacheBlockSize: {
      supportedRowModels: ["serverSide", "infinite"],
      validate({ cacheBlockSize: i }) {
        return Dt("cacheBlockSize", i, 1);
      }
    },
    cacheOverflowSize: {
      validate({ cacheOverflowSize: i }) {
        return Dt("cacheOverflowSize", i, 1);
      }
    },
    datasource: {
      supportedRowModels: ["infinite"]
    },
    domLayout: {
      validate: (i) => {
        const s = i.domLayout, o = ["autoHeight", "normal", "print"];
        return s && !o.includes(s) ? `domLayout must be one of [${o.join()}], currently it's ${s}` : null;
      }
    },
    enableFillHandle: {
      dependencies: {
        enableRangeSelection: { required: [!0] }
      }
    },
    enableRangeHandle: {
      dependencies: {
        enableRangeSelection: { required: [!0] }
      }
    },
    enableRangeSelection: {
      dependencies: {
        rowDragEntireRow: { required: [!1, void 0] }
      }
    },
    enableRowPinning: {
      supportedRowModels: ["clientSide"],
      validate({ enableRowPinning: i, pinnedTopRowData: s, pinnedBottomRowData: o }) {
        return i && (s || o) ? "Manual row pinning cannot be used together with pinned row data. Either set `enableRowPinning` to `false`, or remove `pinnedTopRowData` and `pinnedBottomRowData`." : null;
      }
    },
    isRowPinnable: {
      supportedRowModels: ["clientSide"],
      validate({ enableRowPinning: i, isRowPinnable: s, pinnedTopRowData: o, pinnedBottomRowData: n }) {
        return s && (o || n) ? "Manual row pinning cannot be used together with pinned row data. Either remove `isRowPinnable`, or remove `pinnedTopRowData` and `pinnedBottomRowData`." : !i && s ? "`isRowPinnable` requires `enableRowPinning` to be set." : null;
      }
    },
    isRowPinned: {
      supportedRowModels: ["clientSide"],
      validate({ enableRowPinning: i, isRowPinned: s, pinnedTopRowData: o, pinnedBottomRowData: n }) {
        return s && (o || n) ? "Manual row pinning cannot be used together with pinned row data. Either remove `isRowPinned`, or remove `pinnedTopRowData` and `pinnedBottomRowData`." : !i && s ? "`isRowPinned` requires `enableRowPinning` to be set." : null;
      }
    },
    groupDefaultExpanded: {
      supportedRowModels: ["clientSide"]
    },
    groupHideOpenParents: {
      supportedRowModels: ["clientSide", "serverSide"],
      dependencies: {
        groupTotalRow: { required: [void 0, "bottom"] },
        treeData: {
          required: [void 0, !1],
          reason: "Tree Data has values at the group level so it doesn't make sense to hide them."
        }
      }
    },
    groupHideParentOfSingleChild: {
      dependencies: {
        groupHideOpenParents: { required: [void 0, !1] }
      }
    },
    groupRemoveLowestSingleChildren: {
      dependencies: {
        groupHideOpenParents: { required: [void 0, !1] },
        groupRemoveSingleChildren: { required: [void 0, !1] }
      }
    },
    groupRemoveSingleChildren: {
      dependencies: {
        groupHideOpenParents: { required: [void 0, !1] },
        groupRemoveLowestSingleChildren: { required: [void 0, !1] }
      }
    },
    groupSelectsChildren: {
      dependencies: {
        rowSelection: { required: ["multiple"] }
      }
    },
    icons: {
      validate: ({ icons: i }) => {
        if (i) {
          if (i.smallDown)
            return Gt(262);
          if (i.smallLeft)
            return Gt(263);
          if (i.smallRight)
            return Gt(264);
        }
        return null;
      }
    },
    infiniteInitialRowCount: {
      validate({ infiniteInitialRowCount: i }) {
        return Dt("infiniteInitialRowCount", i, 1);
      }
    },
    initialGroupOrderComparator: {
      supportedRowModels: ["clientSide"]
    },
    keepDetailRowsCount: {
      validate({ keepDetailRowsCount: i }) {
        return Dt("keepDetailRowsCount", i, 1);
      }
    },
    paginationPageSize: {
      validate({ paginationPageSize: i }) {
        return Dt("paginationPageSize", i, 1);
      }
    },
    paginationPageSizeSelector: {
      validate: (i) => {
        const s = i.paginationPageSizeSelector;
        return typeof s == "boolean" || s == null || s.length ? null : `'paginationPageSizeSelector' cannot be an empty array.
                    If you want to hide the page size selector, set paginationPageSizeSelector to false.`;
      }
    },
    pivotMode: {
      dependencies: {
        treeData: {
          required: [!1, void 0],
          reason: "Pivot Mode is not supported with Tree Data."
        }
      }
    },
    quickFilterText: {
      supportedRowModels: ["clientSide"]
    },
    rowBuffer: {
      validate({ rowBuffer: i }) {
        return Dt("rowBuffer", i, 0);
      }
    },
    rowClass: {
      validate: (i) => typeof i.rowClass == "function" ? "rowClass should not be a function, please use getRowClass instead" : null
    },
    rowData: {
      supportedRowModels: ["clientSide"]
    },
    rowDragManaged: {
      supportedRowModels: ["clientSide"],
      dependencies: {
        pagination: {
          required: [!1, void 0]
        }
      }
    },
    rowSelection: {
      validate({ rowSelection: i }) {
        return i && typeof i == "string" ? 'As of version 32.2.1, using `rowSelection` with the values "single" or "multiple" has been deprecated. Use the object value instead.' : i && typeof i != "object" ? "Expected `RowSelectionOptions` object for the `rowSelection` property." : i && i.mode !== "multiRow" && i.mode !== "singleRow" ? `Selection mode "${i.mode}" is invalid. Use one of 'singleRow' or 'multiRow'.` : null;
      }
    },
    rowStyle: {
      validate: (i) => {
        const s = i.rowStyle;
        return s && typeof s == "function" ? "rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead" : null;
      }
    },
    serverSideDatasource: {
      supportedRowModels: ["serverSide"]
    },
    serverSideInitialRowCount: {
      supportedRowModels: ["serverSide"],
      validate({ serverSideInitialRowCount: i }) {
        return Dt("serverSideInitialRowCount", i, 1);
      }
    },
    serverSideOnlyRefreshFilteredGroups: {
      supportedRowModels: ["serverSide"]
    },
    serverSideSortAllLevels: {
      supportedRowModels: ["serverSide"]
    },
    sortingOrder: {
      validate: (i) => {
        const s = i.sortingOrder;
        if (Array.isArray(s) && s.length > 0) {
          const o = s.filter((n) => !Do.includes(n));
          if (o.length > 0)
            return `sortingOrder must be an array with elements from [${Do.map(Bn).join()}], currently it includes [${o.map(Bn).join()}]`;
        } else if (!Array.isArray(s) || s.length <= 0)
          return `sortingOrder must be an array with at least one element, currently it's ${s}`;
        return null;
      }
    },
    tooltipHideDelay: {
      validate: (i) => i.tooltipHideDelay && i.tooltipHideDelay < 0 ? "tooltipHideDelay should not be lower than 0" : null
    },
    tooltipShowDelay: {
      validate: (i) => i.tooltipShowDelay && i.tooltipShowDelay < 0 ? "tooltipShowDelay should not be lower than 0" : null
    },
    treeData: {
      supportedRowModels: ["clientSide", "serverSide"],
      validate: (i) => {
        const s = i.rowModelType ?? "clientSide";
        switch (s) {
          case "clientSide": {
            const { treeDataChildrenField: o, treeDataParentIdField: n, getDataPath: r, getRowId: a } = i;
            if (!o && !n && !r)
              return "treeData requires either 'treeDataChildrenField' or 'treeDataParentIdField' or 'getDataPath' in the clientSide row model.";
            if (o) {
              if (r)
                return "Cannot use both 'treeDataChildrenField' and 'getDataPath' at the same time.";
              if (n)
                return "Cannot use both 'treeDataChildrenField' and 'treeDataParentIdField' at the same time.";
            }
            if (n) {
              if (!a)
                return "getRowId callback not provided, tree data with parent id cannot be built.";
              if (r)
                return "Cannot use both 'treeDataParentIdField' and 'getDataPath' at the same time.";
            }
            return null;
          }
          case "serverSide": {
            const o = `treeData requires 'isServerSideGroup' and 'getServerSideGroupKey' in the ${s} row model.`;
            return i.isServerSideGroup && i.getServerSideGroupKey ? null : o;
          }
        }
        return null;
      }
    },
    viewportDatasource: {
      supportedRowModels: ["viewport"]
    },
    viewportRowModelBufferSize: {
      validate({ viewportRowModelBufferSize: i }) {
        return Dt("viewportRowModelBufferSize", i, 0);
      }
    },
    viewportRowModelPageSize: {
      validate({ viewportRowModelPageSize: i }) {
        return Dt("viewportRowModelPageSize", i, 1);
      }
    },
    rowDragEntireRow: {
      dependencies: {
        cellSelection: { required: [void 0] }
      }
    },
    autoGroupColumnDef: {
      validate({ autoGroupColumnDef: i, showOpenedGroup: s }) {
        return i?.field && s ? "autoGroupColumnDef.field and showOpenedGroup are not supported when used together." : i?.valueGetter && s ? "autoGroupColumnDef.valueGetter and showOpenedGroup are not supported when used together." : null;
      }
    },
    renderingMode: {
      validate: (i) => {
        const s = i.renderingMode, o = ["default", "legacy"];
        return s && !o.includes(s) ? `renderingMode must be one of [${o.join()}], currently it's ${s}` : null;
      }
    }
  }, t = {};
  return qm.forEach((i) => {
    t[i] = { expectedType: "boolean" };
  }), Ym.forEach((i) => {
    t[i] = { expectedType: "number" };
  }), Qe(t, e), t;
}, EA = () => ({
  objectName: "gridOptions",
  allProperties: [...RA(), ...Object.values(Oc)],
  propertyExceptions: ["api"],
  docsUrl: "grid-options/",
  deprecations: xA(),
  validations: PA()
}), DA = 0, TA = 0, MA = class extends T {
  constructor() {
    super(...arguments), this.beanName = "gos", this.domDataKey = "__AG_" + Math.random().toString(), this.gridInstanceId = TA++, this.gridReadyFired = !1, this.queueEvents = [], this.propEventSvc = new Oi(), this.globalEventHandlerFactory = (e) => (t, i) => {
      if (!this.isAlive())
        return;
      const s = Sn.has(t);
      if (s && !e || !s && e || !AA(t))
        return;
      const o = (n, r) => {
        const a = Oc[n], l = this.gridOptions[a];
        typeof l == "function" && this.beans.frameworkOverrides.wrapOutgoing(() => l(r));
      };
      if (this.gridReadyFired)
        o(t, i);
      else if (t === "gridReady") {
        o(t, i), this.gridReadyFired = !0;
        for (const n of this.queueEvents)
          o(n.eventName, n.event);
        this.queueEvents = [];
      } else
        this.queueEvents.push({ eventName: t, event: i });
    };
  }
  wireBeans(e) {
    this.gridOptions = e.gridOptions, this.validation = e.validation, this.api = e.gridApi, this.gridId = e.context.getGridId();
  }
  // This is quicker then having code call gridOptionsService.get('context')
  get gridOptionsContext() {
    return this.gridOptions.context;
  }
  postConstruct() {
    this.validateGridOptions(this.gridOptions), this.eventSvc.addGlobalListener(this.globalEventHandlerFactory().bind(this), !0), this.eventSvc.addGlobalListener(this.globalEventHandlerFactory(!0).bind(this), !1), this.propEventSvc.setFrameworkOverrides(this.beans.frameworkOverrides), this.addManagedEventListeners({
      gridOptionsChanged: ({ options: e }) => {
        this.updateGridOptions({ options: e, force: !0, source: "gridOptionsUpdated" });
      }
    });
  }
  destroy() {
    super.destroy(), this.queueEvents = [];
  }
  /**
   * Get the raw value of the GridOptions property provided.
   * @param property
   */
  get(e) {
    return this.gridOptions[e] ?? kp[e];
  }
  /**
   * Get the GridOption callback but wrapped so that the common params of api and context are automatically applied to the params.
   * @param property GridOption callback properties based on the fact that this property has a callback with params extending AgGridCommon
   */
  getCallback(e) {
    return this.mergeGridCommonParams(this.gridOptions[e]);
  }
  /**
   * Returns `true` if a value has been specified for this GridOption.
   * @param property GridOption property
   */
  exists(e) {
    return $(this.gridOptions[e]);
  }
  /**
   * Wrap the user callback and attach the api and context to the params object on the way through.
   * @param callback User provided callback
   * @returns Wrapped callback where the params object not require api and context
   */
  mergeGridCommonParams(e) {
    return e && ((i) => e(this.addGridCommonParams(i)));
  }
  updateGridOptions({
    options: e,
    force: t,
    source: i = "api"
  }) {
    const s = { id: DA++, properties: [] }, o = [], { gridOptions: n, validation: r } = this;
    for (const a of Object.keys(e)) {
      const l = e[a];
      r?.warnOnInitialPropertyUpdate(i, a);
      const c = t || typeof l == "object" && i === "api", d = n[a];
      if (c || d !== l) {
        n[a] = l;
        const u = {
          type: a,
          currentValue: l,
          previousValue: d,
          changeSet: s,
          source: i
        };
        o.push(u);
      }
    }
    this.validateGridOptions(this.gridOptions), s.properties = o.map((a) => a.type), o.forEach((a) => {
      Gi(this, `Updated property ${a.type} from`, a.previousValue, " to ", a.currentValue), this.propEventSvc.dispatchEvent(a);
    });
  }
  addPropertyEventListener(e, t) {
    this.propEventSvc.addEventListener(e, t);
  }
  removePropertyEventListener(e, t) {
    this.propEventSvc.removeEventListener(e, t);
  }
  getDomDataKey() {
    return this.domDataKey;
  }
  /** Prefer _addGridCommonParams from gridOptionsUtils for bundle size savings */
  addGridCommonParams(e) {
    return e.api = this.api, e.context = this.gridOptionsContext, e;
  }
  validateOptions(e, t) {
    for (const i of Object.keys(e)) {
      const s = e[i];
      if (s == null || s === !1)
        continue;
      let o = t[i];
      typeof o == "function" && (o = o(e, this.gridOptions, this.beans)), o && this.assertModuleRegistered(o, i);
    }
  }
  validateGridOptions(e) {
    this.validateOptions(e, FA), this.validation?.processGridOptions(e);
  }
  validateColDef(e, t, i) {
    (i || !this.beans.dataTypeSvc?.isColPendingInference(t)) && (this.validateOptions(e, hA), this.validation?.validateColDef(e));
  }
  assertModuleRegistered(e, t) {
    const i = Array.isArray(e) ? e.some((s) => this.isModuleRegistered(s)) : this.isModuleRegistered(e);
    return i || he(200, {
      ...this.getModuleErrorParams(),
      moduleName: e,
      reasonOrId: t
    }), i;
  }
  getModuleErrorParams() {
    return {
      gridId: this.gridId,
      gridScoped: pc(),
      rowModelType: this.get("rowModelType"),
      isUmd: GF()
    };
  }
  isModuleRegistered(e) {
    return Qa(e, this.gridId, this.get("rowModelType"));
  }
};
function AA(e) {
  return !!Oc[e];
}
function Xm(e) {
  const t = { "aria-hidden": "true" };
  return {
    tag: "div",
    cls: "ag-cell-label-container",
    role: "presentation",
    children: [
      {
        tag: "span",
        ref: "eMenu",
        cls: "ag-header-icon ag-header-cell-menu-button",
        attrs: t
      },
      {
        tag: "span",
        ref: "eFilterButton",
        cls: "ag-header-icon ag-header-cell-filter-button",
        attrs: t
      },
      {
        tag: "div",
        ref: "eLabel",
        cls: "ag-header-cell-label",
        role: "presentation",
        children: [
          { tag: "span", ref: "eText", cls: "ag-header-cell-text" },
          {
            tag: "span",
            ref: "eFilter",
            cls: "ag-header-icon ag-header-label-icon ag-filter-icon",
            attrs: t
          },
          e ? { tag: "ag-sort-indicator", ref: "eSortIndicator" } : null
        ]
      }
    ]
  };
}
var IA = Xm(!0), kA = Xm(!1), LA = class extends pe {
  constructor() {
    super(...arguments), this.eFilter = q, this.eFilterButton = q, this.eSortIndicator = q, this.eMenu = q, this.eLabel = q, this.eText = q, this.eSortOrder = q, this.eSortAsc = q, this.eSortDesc = q, this.eSortMixed = q, this.eSortNone = q, this.isLoadingInnerComponent = !1;
  }
  refresh(e) {
    const t = this.params;
    if (this.params = e, this.workOutTemplate(e, !!this.beans?.sortSvc) != this.currentTemplate || this.workOutShowMenu() != this.currentShowMenu || e.enableSorting != this.currentSort || this.currentSuppressMenuHide != null && this.shouldSuppressMenuHide() != this.currentSuppressMenuHide || t.enableFilterButton != e.enableFilterButton || t.enableFilterIcon != e.enableFilterIcon)
      return !1;
    if (this.innerHeaderComponent) {
      const i = { ...e };
      Qe(i, e.innerHeaderComponentParams), this.innerHeaderComponent.refresh?.(i);
    } else
      this.setDisplayName(e);
    return !0;
  }
  workOutTemplate(e, t) {
    const i = e.template;
    return i ? i?.trim ? i.trim() : i : t ? IA : kA;
  }
  init(e) {
    this.params = e;
    const { sortSvc: t, touchSvc: i, rowNumbersSvc: s, userCompFactory: o } = this.beans, n = t?.getSortIndicatorSelector();
    this.currentTemplate = this.workOutTemplate(e, !!n), this.setTemplate(this.currentTemplate, n ? [n] : void 0), i?.setupForHeader(this), this.setMenu(), this.setupSort(), s?.setupForHeader(this), this.setupFilterIcon(), this.setupFilterButton(), this.workOutInnerHeaderComponent(o, e), this.setDisplayName(e);
  }
  workOutInnerHeaderComponent(e, t) {
    const i = mF(e, t, t);
    i && (this.isLoadingInnerComponent = !0, i.newAgStackInstance().then((s) => {
      this.isLoadingInnerComponent = !1, s && (this.isAlive() ? (this.innerHeaderComponent = s, this.eText && this.eText.appendChild(s.getGui())) : this.destroyBean(s));
    }));
  }
  setDisplayName(e) {
    const { displayName: t } = e, i = this.currentDisplayName;
    this.currentDisplayName = t, !(!this.eText || i === t || this.innerHeaderComponent || this.isLoadingInnerComponent) && (this.eText.textContent = Ls(t));
  }
  addInIcon(e, t, i) {
    const s = Ct(e, this.beans, i);
    s && t.appendChild(s);
  }
  workOutShowMenu() {
    return this.params.enableMenu && !!this.beans.menuSvc?.isHeaderMenuButtonEnabled();
  }
  shouldSuppressMenuHide() {
    return !!this.beans.menuSvc?.isHeaderMenuButtonAlwaysShowEnabled();
  }
  setMenu() {
    if (!this.eMenu)
      return;
    if (this.currentShowMenu = this.workOutShowMenu(), !this.currentShowMenu) {
      Xt(this.eMenu), this.eMenu = void 0;
      return;
    }
    const { gos: e, eMenu: t, params: i } = this, s = at(e);
    this.addInIcon(s ? "menu" : "menuAlt", t, i.column), t.classList.toggle("ag-header-menu-icon", !s);
    const o = this.shouldSuppressMenuHide();
    this.currentSuppressMenuHide = o, this.addManagedElementListeners(t, { click: () => this.showColumnMenu(this.eMenu) }), this.toggleMenuAlwaysShow(o);
  }
  toggleMenuAlwaysShow(e) {
    this.eMenu?.classList.toggle("ag-header-menu-always-show", e);
  }
  showColumnMenu(e) {
    const { currentSuppressMenuHide: t, params: i } = this;
    t || this.toggleMenuAlwaysShow(!0), i.showColumnMenu(e, () => {
      t || this.toggleMenuAlwaysShow(!1);
    });
  }
  onMenuKeyboardShortcut(e) {
    const { params: t, gos: i, beans: s, eMenu: o, eFilterButton: n } = this, r = t.column, a = at(i);
    if (e && !a) {
      if (s.menuSvc?.isFilterMenuInHeaderEnabled(r))
        return t.showFilter(n ?? o ?? this.getGui()), !0;
    } else if (t.enableMenu)
      return this.showColumnMenu(o ?? n ?? this.getGui()), !0;
    return !1;
  }
  setupSort() {
    const { sortSvc: e } = this.beans;
    if (!e)
      return;
    const { enableSorting: t, column: i } = this.params;
    if (this.currentSort = t, !this.eSortIndicator) {
      this.eSortIndicator = this.createBean(e.createSortIndicator(!0));
      const { eSortIndicator: s, eSortOrder: o, eSortAsc: n, eSortDesc: r, eSortMixed: a, eSortNone: l } = this;
      s.attachCustomElements(o, n, r, a, l);
    }
    this.eSortIndicator.setupSort(i), this.currentSort && e.setupHeader(this, i, this.eLabel);
  }
  setupFilterIcon() {
    const { eFilter: e, params: t } = this;
    if (!e)
      return;
    const i = () => {
      const s = t.column.isFilterActive();
      Re(e, s, { skipAriaHidden: !0 });
    };
    this.configureFilter(t.enableFilterIcon, e, i, "filterActive");
  }
  setupFilterButton() {
    const { eFilterButton: e, params: t } = this;
    if (!e)
      return;
    this.configureFilter(
      t.enableFilterButton,
      e,
      this.onFilterChangedButton.bind(this),
      "filter"
    ) ? this.addManagedElementListeners(e, {
      click: () => t.showFilter(e)
    }) : this.eFilterButton = void 0;
  }
  configureFilter(e, t, i, s) {
    if (!e)
      return Xt(t), !1;
    const o = this.params.column;
    return this.addInIcon(s, t, o), this.addManagedListeners(o, { filterChanged: i }), i(), !0;
  }
  onFilterChangedButton() {
    const e = this.params.column.isFilterActive();
    this.eFilterButton.classList.toggle("ag-filter-active", e);
  }
  getAnchorElementForMenu(e) {
    const { eFilterButton: t, eMenu: i } = this;
    return e ? t ?? i ?? this.getGui() : i ?? t ?? this.getGui();
  }
  destroy() {
    super.destroy(), this.innerHeaderComponent && (this.destroyBean(this.innerHeaderComponent), this.innerHeaderComponent = void 0);
  }
}, OA = {
  tag: "div",
  cls: "ag-header-group-cell-label",
  role: "presentation",
  children: [
    { tag: "span", ref: "agLabel", cls: "ag-header-group-text", role: "presentation" },
    { tag: "span", ref: "agOpened", cls: "ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded" },
    { tag: "span", ref: "agClosed", cls: "ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed" }
  ]
}, VA = class extends pe {
  constructor() {
    super(OA), this.agOpened = q, this.agClosed = q, this.agLabel = q, this.isLoadingInnerComponent = !1;
  }
  init(e) {
    const { userCompFactory: t, touchSvc: i } = this.beans;
    this.params = e, this.checkWarnings(), this.workOutInnerHeaderGroupComponent(t, e), this.setupLabel(e), this.addGroupExpandIcon(e), this.setupExpandIcons(), i?.setupForHeaderGroup(this);
  }
  checkWarnings() {
    this.params.template && B(89);
  }
  workOutInnerHeaderGroupComponent(e, t) {
    const i = vF(e, t, t);
    i && (this.isLoadingInnerComponent = !0, i.newAgStackInstance().then((s) => {
      this.isLoadingInnerComponent = !1, s && (this.isAlive() ? (this.innerHeaderGroupComponent = s, this.agLabel.appendChild(s.getGui())) : this.destroyBean(s));
    }));
  }
  setupExpandIcons() {
    const {
      agOpened: e,
      agClosed: t,
      params: { columnGroup: i },
      beans: s
    } = this;
    this.addInIcon("columnGroupOpened", e), this.addInIcon("columnGroupClosed", t);
    const o = (l) => {
      if (jt(l))
        return;
      const c = !i.isExpanded();
      s.colGroupSvc.setColumnGroupOpened(
        i.getProvidedColumnGroup(),
        c,
        "uiColumnExpanded"
      );
    };
    this.addTouchAndClickListeners(s, t, o), this.addTouchAndClickListeners(s, e, o);
    const n = (l) => {
      Bi(l);
    };
    this.addManagedElementListeners(t, { dblclick: n }), this.addManagedElementListeners(e, { dblclick: n }), this.addManagedElementListeners(this.getGui(), { dblclick: o }), this.updateIconVisibility();
    const r = i.getProvidedColumnGroup(), a = this.updateIconVisibility.bind(this);
    this.addManagedListeners(r, {
      expandedChanged: a,
      expandableChanged: a
    });
  }
  addTouchAndClickListeners(e, t, i) {
    e.touchSvc?.setupForHeaderGroupElement(this, t, i), this.addManagedElementListeners(t, { click: i });
  }
  updateIconVisibility() {
    const {
      agOpened: e,
      agClosed: t,
      params: { columnGroup: i }
    } = this;
    if (i.isExpandable()) {
      const s = i.isExpanded();
      Re(e, s), Re(t, !s);
    } else
      Re(e, !1), Re(t, !1);
  }
  addInIcon(e, t) {
    const i = Ct(e, this.beans, null);
    i && t.appendChild(i);
  }
  addGroupExpandIcon(e) {
    if (!e.columnGroup.isExpandable()) {
      const { agOpened: t, agClosed: i } = this;
      Re(t, !1), Re(i, !1);
      return;
    }
  }
  setupLabel(e) {
    const { displayName: t, columnGroup: i } = e, s = this.innerHeaderGroupComponent || this.isLoadingInnerComponent;
    $(t) && !s && (this.agLabel.textContent = Ls(t)), this.toggleCss("ag-sticky-label", !i.getColGroupDef()?.suppressStickyLabel);
  }
  destroy() {
    super.destroy(), this.innerHeaderGroupComponent && (this.destroyBean(this.innerHeaderGroupComponent), this.innerHeaderGroupComponent = void 0);
  }
}, GA = {
  moduleName: "ColumnHeaderComp",
  version: Y,
  userComponents: {
    agColumnHeader: LA
  },
  icons: {
    // button to launch legacy column menu
    menu: "menu",
    // button to launch new enterprise column menu
    menuAlt: "menu-alt"
  }
}, HA = {
  moduleName: "ColumnGroupHeaderComp",
  version: Y,
  userComponents: {
    agColumnGroupHeader: VA
  },
  icons: {
    // header column group shown when expanded (click to contract)
    columnGroupOpened: "expanded",
    // header column group shown when contracted (click to expand)
    columnGroupClosed: "contracted"
  }
}, BA = class extends T {
  constructor() {
    super(...arguments), this.beanName = "animationFrameSvc", this.p1 = { list: [], sorted: !1 }, this.p2 = { list: [], sorted: !1 }, this.f1 = { list: [], sorted: !1 }, this.destroyTasks = [], this.ticking = !1, this.scrollGoingDown = !0, this.lastScrollTop = 0, this.taskCount = 0;
  }
  setScrollTop(e) {
    this.scrollGoingDown = e >= this.lastScrollTop, e === 0 && (this.scrollGoingDown = !0), this.lastScrollTop = e;
  }
  postConstruct() {
    this.active = !this.gos.get("suppressAnimationFrame"), this.batchFrameworkComps = this.beans.frameworkOverrides.batchFrameworkComps;
  }
  // this method is for our AG Grid sanity only - if animation frames are turned off,
  // then no place in the code should be looking to add any work to be done in animation
  // frames. this stops bugs - where some code is asking for a frame to be executed
  // when it should not.
  verify() {
    this.active === !1 && B(92);
  }
  createTask(e, t, i, s, o = !1) {
    this.verify();
    let n = i;
    s && this.batchFrameworkComps && (n = "f1");
    const r = { task: e, index: t, createOrder: ++this.taskCount, deferred: o };
    this.addTaskToList(this[n], r), this.schedule();
  }
  addTaskToList(e, t) {
    e.list.push(t), e.sorted = !1;
  }
  sortTaskList(e) {
    if (e.sorted)
      return;
    const t = this.scrollGoingDown ? 1 : -1;
    e.list.sort((i, s) => i.deferred !== s.deferred ? i.deferred ? -1 : 1 : i.index !== s.index ? t * (s.index - i.index) : s.createOrder - i.createOrder), e.sorted = !0;
  }
  addDestroyTask(e) {
    this.verify(), this.destroyTasks.push(e), this.schedule();
  }
  executeFrame(e) {
    const { p1: t, p2: i, f1: s, destroyTasks: o, beans: n } = this, { ctrlsSvc: r, frameworkOverrides: a } = n, l = t.list, c = i.list, d = s.list, u = Date.now();
    let h = 0;
    const g = e <= 0, p = r.getScrollFeature();
    for (; g || h < e; ) {
      if (!p.scrollGridIfNeeded()) {
        let m;
        if (l.length)
          this.sortTaskList(t), m = l.pop().task;
        else if (c.length)
          this.sortTaskList(i), m = c.pop().task;
        else if (d.length)
          a.wrapOutgoing(() => {
            for (; (g || h < e) && !p.scrollGridIfNeeded(); ) {
              if (d.length)
                this.sortTaskList(s), m = d.pop().task, m();
              else
                break;
              h = Date.now() - u;
            }
          }), m = () => {
          };
        else if (o.length)
          m = o.pop();
        else
          break;
        m();
      }
      h = Date.now() - u;
    }
    l.length || c.length || d.length || o.length ? this.requestFrame() : this.ticking = !1;
  }
  flushAllFrames() {
    this.active && this.executeFrame(-1);
  }
  schedule() {
    this.active && (this.ticking || (this.ticking = !0, this.requestFrame()));
  }
  requestFrame() {
    const e = this.executeFrame.bind(this, 60);
    Jt(this.beans, e);
  }
  isQueueEmpty() {
    return !this.ticking;
  }
}, NA = {
  moduleName: "AnimationFrame",
  version: Y,
  beans: [BA]
}, WA = class extends T {
  constructor() {
    super(...arguments), this.beanName = "touchSvc";
  }
  mockBodyContextMenu(e, t) {
    this.mockContextMenu(e, e.eBodyViewport, t);
  }
  mockHeaderContextMenu(e, t) {
    this.mockContextMenu(e, e.eGui, t);
  }
  mockRowContextMenu(e) {
    if (!Di())
      return;
    const t = (i, s, o) => {
      const { rowCtrl: n, cellCtrl: r } = e.getControlsForEventTarget(o?.target ?? null);
      r?.column && r.dispatchCellContextMenuEvent(o ?? null), this.beans.contextMenuSvc?.handleContextMenuMouseEvent(void 0, o, n, r);
    };
    this.mockContextMenu(e, e.element, t);
  }
  handleCellDoubleClick(e, t) {
    return (() => {
      if (!Di() || mf("dblclick"))
        return !1;
      const s = Date.now(), o = s - e.lastIPadMouseClickEvent < 200;
      return e.lastIPadMouseClickEvent = s, o;
    })() ? (e.onCellDoubleClicked(t), t.preventDefault(), !0) : !1;
  }
  setupForHeader(e) {
    const { gos: t, sortSvc: i, menuSvc: s } = this.beans;
    if (t.get("suppressTouch"))
      return;
    const { params: o, eMenu: n, eFilterButton: r } = e, a = new Si(e.getGui(), !0), l = e.shouldSuppressMenuHide(), c = l && $(n) && o.enableMenu, d = c ? new Si(n, !0) : a;
    if (o.enableMenu || s?.isHeaderContextMenuEnabled(o.column)) {
      const u = c ? "tap" : "longTap", h = (g) => o.showColumnMenuAfterMouseClick(g.touchStart);
      e.addManagedListeners(d, { [u]: h });
    }
    if (o.enableSorting) {
      const u = (h) => {
        const g = h.touchStart.target;
        l && (n?.contains(g) || r?.contains(g)) || i?.progressSort(o.column, !1, "uiColumnSorted");
      };
      e.addManagedListeners(a, { tap: u });
    }
    if (o.enableFilterButton && r) {
      const u = new Si(r, !0);
      e.addManagedListeners(u, {
        tap: () => o.showFilter(r)
      }), e.addDestroyFunc(() => u.destroy());
    }
    e.addDestroyFunc(() => a.destroy()), c && e.addDestroyFunc(() => d.destroy());
  }
  setupForHeaderGroup(e) {
    const t = e.params;
    if (this.beans.menuSvc?.isHeaderContextMenuEnabled(
      t.columnGroup.getProvidedColumnGroup()
    )) {
      const i = new Si(t.eGridHeader, !0), s = (o) => t.showColumnMenuAfterMouseClick(o.touchStart);
      e.addManagedListeners(i, { longTap: s }), e.addDestroyFunc(() => i.destroy());
    }
  }
  setupForHeaderGroupElement(e, t, i) {
    const s = new Si(t, !0);
    e.addManagedListeners(s, { tap: i }), e.addDestroyFunc(() => s.destroy());
  }
  mockContextMenu(e, t, i) {
    if (!Di())
      return;
    const s = new Si(t), o = (n) => {
      xo(this.gos, n.touchEvent) && i(void 0, n.touchStart, n.touchEvent);
    };
    e.addManagedListeners(s, { longTap: o }), e.addDestroyFunc(() => s.destroy());
  }
}, zA = {
  moduleName: "Touch",
  version: Y,
  beans: [WA]
}, _A = class extends T {
  constructor() {
    super(...arguments), this.beanName = "cellNavigation";
  }
  wireBeans(e) {
    this.rowSpanSvc = e.rowSpanSvc;
  }
  // returns null if no cell to focus on, ie at the end of the grid
  getNextCellToFocus(e, t, i = !1) {
    return i ? this.getNextCellToFocusWithCtrlPressed(e, t) : this.getNextCellToFocusWithoutCtrlPressed(e, t);
  }
  getNextCellToFocusWithCtrlPressed(e, t) {
    const i = e === E.UP, s = e === E.DOWN, o = e === E.LEFT;
    let n, r;
    const { pageBounds: a, gos: l, visibleCols: c, pinnedRowModel: d } = this.beans, { rowPinned: u } = t;
    if (i || s)
      u && d ? i ? r = 0 : r = u === "top" ? d.getPinnedTopRowCount() - 1 : d.getPinnedBottomRowCount() - 1 : r = i ? a.getFirstRow() : a.getLastRow(), n = t.column;
    else {
      const h = l.get("enableRtl");
      r = t.rowIndex, n = (o !== h ? c.allCols : [...c.allCols].reverse()).find(
        (p) => this.isCellGoodToFocusOn({
          rowIndex: r,
          rowPinned: null,
          column: p
        })
      );
    }
    return n ? {
      rowIndex: r,
      rowPinned: u,
      column: n
    } : null;
  }
  getNextCellToFocusWithoutCtrlPressed(e, t) {
    let i = t, s = !1;
    for (; !s; ) {
      switch (e) {
        case E.UP:
          i = this.getCellAbove(i);
          break;
        case E.DOWN:
          i = this.getCellBelow(i);
          break;
        case E.RIGHT:
          i = this.gos.get("enableRtl") ? this.getCellToLeft(i) : this.getCellToRight(i);
          break;
        case E.LEFT:
          i = this.gos.get("enableRtl") ? this.getCellToRight(i) : this.getCellToLeft(i);
          break;
        default:
          i = null, B(8, { key: e });
          break;
      }
      i ? s = this.isCellGoodToFocusOn(i) : s = !0;
    }
    return i;
  }
  isCellGoodToFocusOn(e) {
    const t = e.column;
    let i;
    const { pinnedRowModel: s, rowModel: o } = this.beans;
    switch (e.rowPinned) {
      case "top":
        i = s?.getPinnedTopRow(e.rowIndex);
        break;
      case "bottom":
        i = s?.getPinnedBottomRow(e.rowIndex);
        break;
      default:
        i = o.getRow(e.rowIndex);
        break;
    }
    return i ? !this.isSuppressNavigable(t, i) : !1;
  }
  getCellToLeft(e) {
    if (!e)
      return null;
    const t = this.beans.visibleCols.getColBefore(e.column);
    return t ? {
      rowIndex: e.rowIndex,
      column: t,
      rowPinned: e.rowPinned
    } : null;
  }
  getCellToRight(e) {
    if (!e)
      return null;
    const t = this.beans.visibleCols.getColAfter(e.column);
    return t ? {
      rowIndex: e.rowIndex,
      column: t,
      rowPinned: e.rowPinned
    } : null;
  }
  getCellBelow(e) {
    if (!e)
      return null;
    const t = this.rowSpanSvc?.getCellEnd(e) ?? e, i = Du(this.beans, t);
    return i ? {
      rowIndex: i.rowIndex,
      column: e.column,
      rowPinned: i.rowPinned
    } : null;
  }
  getCellAbove(e) {
    if (!e)
      return null;
    const t = this.rowSpanSvc?.getCellStart(e) ?? e, i = qn(this.beans, {
      rowIndex: t.rowIndex,
      rowPinned: t.rowPinned
    });
    return i ? {
      rowIndex: i.rowIndex,
      column: e.column,
      rowPinned: i.rowPinned
    } : null;
  }
  getNextTabbedCell(e, t) {
    return t ? this.getNextTabbedCellBackwards(e) : this.getNextTabbedCellForwards(e);
  }
  getNextTabbedCellForwards(e) {
    const { visibleCols: t, pagination: i } = this.beans, s = t.allCols;
    let o = e.rowIndex, n = e.rowPinned, r = t.getColAfter(e.column);
    if (!r) {
      r = s[0];
      const a = Du(this.beans, e);
      if (Ce(a) || !a.rowPinned && !(i?.isRowInPage(a.rowIndex) ?? !0))
        return null;
      o = a ? a.rowIndex : null, n = a ? a.rowPinned : null;
    }
    return { rowIndex: o, column: r, rowPinned: n };
  }
  getNextTabbedCellBackwards(e) {
    const { beans: t } = this, { visibleCols: i, pagination: s } = t, o = i.allCols;
    let n = e.rowIndex, r = e.rowPinned, a = i.getColBefore(e.column);
    if (!a) {
      a = ue(o);
      const l = qn(t, { rowIndex: e.rowIndex, rowPinned: e.rowPinned });
      if (Ce(l) || !l.rowPinned && !(s?.isRowInPage(l.rowIndex) ?? !0))
        return null;
      n = l ? l.rowIndex : null, r = l ? l.rowPinned : null;
    }
    return { rowIndex: n, column: a, rowPinned: r };
  }
  isSuppressNavigable(e, t) {
    const { suppressNavigable: i } = e.colDef;
    if (typeof i == "boolean")
      return i;
    if (typeof i == "function") {
      const s = e.createColumnFunctionCallbackParams(t);
      return i(s);
    }
    return !1;
  }
};
function UA(e) {
  return e.focusSvc.getFocusedCell();
}
function jA(e) {
  return e.focusSvc.clearFocusedCell();
}
function $A(e, t, i, s) {
  e.focusSvc.setFocusedCell({ rowIndex: t, column: i, rowPinned: s, forceBrowserFocus: !0 });
}
function KA(e, t) {
  return e.navigation?.tabToNextCell(!1, t) ?? !1;
}
function YA(e, t) {
  return e.navigation?.tabToNextCell(!0, t) ?? !1;
}
function qA(e, t, i = !1) {
  const s = e.headerNavigation?.getHeaderPositionForColumn(t, i);
  s && e.focusSvc.focusHeaderPosition({ headerPosition: s });
}
var XA = class extends T {
  constructor() {
    super(), this.beanName = "navigation", this.onPageDown = wu(this.onPageDown, 100), this.onPageUp = wu(this.onPageUp, 100);
  }
  postConstruct() {
    this.beans.ctrlsSvc.whenReady(this, (e) => {
      this.gridBodyCon = e.gridBodyCtrl;
    });
  }
  handlePageScrollingKey(e, t = !1) {
    const i = e.key, s = e.altKey, o = e.ctrlKey || e.metaKey, n = !!this.beans.rangeSvc && e.shiftKey, r = EP(this.gos, e);
    let a = !1;
    switch (i) {
      case E.PAGE_HOME:
      case E.PAGE_END:
        !o && !s && (this.onHomeOrEndKey(i), a = !0);
        break;
      case E.LEFT:
      case E.RIGHT:
      case E.UP:
      case E.DOWN:
        if (!r)
          return !1;
        o && !s && !n && (this.onCtrlUpDownLeftRight(i, r), a = !0);
        break;
      case E.PAGE_DOWN:
      case E.PAGE_UP:
        !o && !s && (a = this.handlePageUpDown(i, r, t));
        break;
    }
    return a && e.preventDefault(), a;
  }
  handlePageUpDown(e, t, i) {
    return i && (t = this.beans.focusSvc.getFocusedCell()), t ? (e === E.PAGE_UP ? this.onPageUp(t) : this.onPageDown(t), !0) : !1;
  }
  navigateTo({
    scrollIndex: e,
    scrollType: t,
    scrollColumn: i,
    focusIndex: s,
    focusColumn: o,
    isAsync: n,
    rowPinned: r
  }) {
    const { scrollFeature: a } = this.gridBodyCon;
    $(i) && !i.isPinned() && a.ensureColumnVisible(i), $(e) && a.ensureIndexVisible(e, t), n || a.ensureIndexVisible(s);
    const { focusSvc: l, rangeSvc: c } = this.beans;
    l.setFocusedCell({
      rowIndex: s,
      column: o,
      rowPinned: r,
      forceBrowserFocus: !0
    }), c?.setRangeToCell({ rowIndex: s, rowPinned: r, column: o });
  }
  // this method is throttled, see the `constructor`
  onPageDown(e) {
    const t = this.beans, i = aa(t), s = this.getViewportHeight(), { pageBounds: o, rowModel: n, rowAutoHeight: r } = t, a = o.getPixelOffset(), l = i.top + s, c = n.getRowIndexAtPixel(l + a);
    r?.active ? this.navigateToNextPageWithAutoHeight(e, c) : this.navigateToNextPage(e, c);
  }
  // this method is throttled, see the `constructor`
  onPageUp(e) {
    const t = this.beans, i = aa(t), { pageBounds: s, rowModel: o, rowAutoHeight: n } = t, r = s.getPixelOffset(), a = i.top, l = o.getRowIndexAtPixel(a + r);
    n?.active ? this.navigateToNextPageWithAutoHeight(e, l, !0) : this.navigateToNextPage(e, l, !0);
  }
  navigateToNextPage(e, t, i = !1) {
    const { pageBounds: s, rowModel: o } = this.beans, n = this.getViewportHeight(), r = s.getFirstRow(), a = s.getLastRow(), l = s.getPixelOffset(), c = o.getRow(e.rowIndex), d = i ? (
      // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain
      c?.rowHeight - n - l
    ) : n - l, u = c?.rowTop + d;
    let h = o.getRowIndexAtPixel(u + l);
    if (h === e.rowIndex) {
      const p = i ? -1 : 1;
      t = h = e.rowIndex + p;
    }
    let g;
    i ? (g = "bottom", h < r && (h = r), t < r && (t = r)) : (g = "top", h > a && (h = a), t > a && (t = a)), this.isRowTallerThanView(o.getRow(h)) && (t = h, g = "top"), this.navigateTo({
      scrollIndex: t,
      scrollType: g,
      scrollColumn: null,
      focusIndex: h,
      focusColumn: e.column
    });
  }
  navigateToNextPageWithAutoHeight(e, t, i = !1) {
    this.navigateTo({
      scrollIndex: t,
      scrollType: i ? "bottom" : "top",
      scrollColumn: null,
      focusIndex: t,
      focusColumn: e.column
    }), setTimeout(() => {
      const s = this.getNextFocusIndexForAutoHeight(e, i);
      this.navigateTo({
        scrollIndex: t,
        scrollType: i ? "bottom" : "top",
        scrollColumn: null,
        focusIndex: s,
        focusColumn: e.column,
        isAsync: !0
      });
    }, 50);
  }
  getNextFocusIndexForAutoHeight(e, t = !1) {
    const i = t ? -1 : 1, s = this.getViewportHeight(), { pageBounds: o, rowModel: n } = this.beans, r = o.getLastRow();
    let a = 0, l = e.rowIndex;
    for (; l >= 0 && l <= r; ) {
      const c = n.getRow(l);
      if (c) {
        const d = c.rowHeight ?? 0;
        if (a + d > s)
          break;
        a += d;
      }
      l += i;
    }
    return Math.max(0, Math.min(l, r));
  }
  getViewportHeight() {
    const e = this.beans, t = aa(e), i = this.beans.scrollVisibleSvc.getScrollbarWidth();
    let s = t.bottom - t.top;
    return e.ctrlsSvc.get("center").isHorizontalScrollShowing() && (s -= i), s;
  }
  isRowTallerThanView(e) {
    if (!e)
      return !1;
    const t = e.rowHeight;
    return typeof t != "number" ? !1 : t > this.getViewportHeight();
  }
  onCtrlUpDownLeftRight(e, t) {
    const i = this.beans.cellNavigation.getNextCellToFocus(e, t, !0), { rowIndex: s, rowPinned: o } = i, n = i.column;
    this.navigateTo({
      scrollIndex: s,
      scrollType: null,
      scrollColumn: n,
      focusIndex: s,
      focusColumn: n,
      rowPinned: o
    });
  }
  // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring
  // same cell into view (which means either scroll all the way up, or all the way down).
  onHomeOrEndKey(e) {
    const t = e === E.PAGE_HOME, { visibleCols: i, pageBounds: s, rowModel: o } = this.beans, n = i.allCols, r = t ? s.getFirstRow() : s.getLastRow(), a = o.getRow(r);
    if (!a)
      return;
    const l = (t ? n : [...n].reverse()).find(
      (c) => !c.isSuppressNavigable(a)
    );
    l && this.navigateTo({
      scrollIndex: r,
      scrollType: null,
      scrollColumn: l,
      focusIndex: r,
      focusColumn: l
    });
  }
  // result of keyboard event
  onTabKeyDown(e, t) {
    const i = t.shiftKey, s = this.tabToNextCellCommon(e, i, t), o = this.beans, { ctrlsSvc: n, pageBounds: r, focusSvc: a, gos: l } = o;
    if (s !== !1) {
      s ? t.preventDefault() : s === null && n.get("gridCtrl").allowFocusForNextCoreContainer(i);
      return;
    }
    if (i) {
      const { rowIndex: c, rowPinned: d } = e.getRowPosition();
      (d ? c === 0 : c === r.getFirstRow()) && (l.get("headerHeight") === 0 || ki(o) ? Ds(o, !0, !0) : (t.preventDefault(), a.focusPreviousFromFirstCell(t)));
    } else
      e instanceof Cs && e.focusCell(!0), (!i && a.focusOverlay(!1) || Ds(o, i)) && t.preventDefault();
  }
  // comes from API
  tabToNextCell(e, t) {
    const i = this.beans, { focusSvc: s, rowRenderer: o } = i, n = s.getFocusedCell();
    if (!n)
      return !1;
    let r = qs(i, n);
    return !r && (r = o.getRowByPosition(n), !r || !r.isFullWidth()) ? !1 : !!this.tabToNextCellCommon(r, e, t, "api");
  }
  tabToNextCellCommon(e, t, i, s = "ui") {
    const { editSvc: o, focusSvc: n } = this.beans;
    let r;
    const a = e instanceof Cs ? e : e.getAllCellCtrls()?.[0];
    return o?.isEditing() ? r = o?.moveToNextCell(a, t, i, s) : r = this.moveToNextCellNotEditing(e, t, i), r === null ? r : r || !!n.focusedHeader;
  }
  // returns null if no navigation should be performed
  moveToNextCellNotEditing(e, t, i) {
    const s = this.beans.visibleCols.allCols;
    let o;
    if (e instanceof tr) {
      if (o = {
        ...e.getRowPosition(),
        column: t ? s[0] : ue(s)
      }, this.gos.get("embedFullWidthRows") && i) {
        const r = e.findFullWidthInfoForEvent(i);
        r && (o.column = r.column);
      }
    } else
      o = e.getFocusedCellPosition();
    const n = this.findNextCellToFocusOn(o, { backwards: t, startEditing: !1 });
    if (n === !1)
      return null;
    if (n instanceof Cs)
      n.focusCell(!0);
    else if (n)
      return this.tryToFocusFullWidthRow(n, t);
    return $(n);
  }
  /**
   * called by the cell, when tab is pressed while editing.
   * @returns RenderedCell when navigation successful, false if navigation should not be performed, otherwise null
   */
  findNextCellToFocusOn(e, { backwards: t, startEditing: i, skipToNextEditableCell: s }) {
    let o = e;
    const n = this.beans, { cellNavigation: r, gos: a, focusSvc: l, rowRenderer: c, rangeSvc: d } = n;
    for (; ; ) {
      e !== o && (e = o), t || (o = this.getLastCellOfColSpan(o)), o = r.getNextTabbedCell(o, t);
      const u = a.getCallback("tabToNextCell");
      if ($(u)) {
        const f = u({
          backwards: t,
          editing: i,
          previousCellPosition: e,
          nextCellPosition: o || null
        });
        if (f === !0)
          o = e;
        else {
          if (f === !1)
            return !1;
          o = {
            rowIndex: f.rowIndex,
            column: f.column,
            rowPinned: f.rowPinned
          };
        }
      }
      if (!o)
        return null;
      if (o.rowIndex < 0) {
        const p = It(n);
        return l.focusHeaderPosition({
          headerPosition: {
            headerRowIndex: p + o.rowIndex,
            column: o.column
          },
          fromCell: !0
        }), null;
      }
      const h = a.get("editType") === "fullRow";
      if (i && (!h || s) && !this.isCellEditable(o))
        continue;
      this.ensureCellVisible(o);
      const g = qs(n, o);
      if (!g) {
        const p = c.getRowByPosition(o);
        if (!p || !p.isFullWidth() || i)
          continue;
        return { ...p.getRowPosition(), column: o?.column };
      }
      if (!r.isSuppressNavigable(g.column, g.rowNode))
        return g.setFocusedCellPosition(o), d?.setRangeToCell(o), g;
    }
  }
  isCellEditable(e) {
    const t = this.lookupRowNodeForCell(e);
    return t ? e.column.isCellEditable(t) : !1;
  }
  lookupRowNodeForCell({ rowIndex: e, rowPinned: t }) {
    const { pinnedRowModel: i, rowModel: s } = this.beans;
    return t === "top" ? i?.getPinnedTopRow(e) : t === "bottom" ? i?.getPinnedBottomRow(e) : s.getRow(e);
  }
  // we use index for rows, but column object for columns, as the next column (by index) might not
  // be visible (header grouping) so it's not reliable, so using the column object instead.
  navigateToNextCell(e, t, i, s) {
    let o = i, n = !1;
    const r = this.beans, { cellNavigation: a, focusSvc: l, gos: c } = r;
    for (; o && (o === i || !this.isValidNavigateCell(o)); )
      c.get("enableRtl") ? t === E.LEFT && (o = this.getLastCellOfColSpan(o)) : t === E.RIGHT && (o = this.getLastCellOfColSpan(o)), o = a.getNextCellToFocus(t, o), n = Ce(o);
    if (n && e && e.key === E.UP && (o = {
      rowIndex: -1,
      rowPinned: null,
      column: i.column
    }), s) {
      const u = c.getCallback("navigateToNextCell");
      if ($(u)) {
        const g = u({
          key: t,
          previousCellPosition: i,
          nextCellPosition: o || null,
          event: e
        });
        $(g) ? o = {
          rowPinned: g.rowPinned,
          rowIndex: g.rowIndex,
          column: g.column
        } : o = null;
      }
    }
    if (!o)
      return;
    if (o.rowIndex < 0) {
      const u = It(r);
      l.focusHeaderPosition({
        headerPosition: { headerRowIndex: u + o.rowIndex, column: i.column },
        event: e || void 0,
        fromCell: !0
      });
      return;
    }
    const d = this.getNormalisedPosition(o);
    d ? this.focusPosition(d) : this.tryToFocusFullWidthRow(o);
  }
  getNormalisedPosition(e) {
    if (!!this.beans.spannedRowRenderer?.getCellByPosition(e))
      return e;
    this.ensureCellVisible(e);
    const i = qs(this.beans, e);
    return i ? (e = i.getFocusedCellPosition(), this.ensureCellVisible(e), e) : null;
  }
  tryToFocusFullWidthRow(e, t) {
    const { visibleCols: i, rowRenderer: s, focusSvc: o, eventSvc: n } = this.beans, r = i.allCols, a = s.getRowByPosition(e);
    if (!a || !a.isFullWidth())
      return !1;
    const l = o.getFocusedCell(), c = {
      rowIndex: e.rowIndex,
      rowPinned: e.rowPinned,
      column: e.column || (t ? ue(r) : r[0])
    };
    this.focusPosition(c);
    const d = t ?? (l != null && UF(c, l));
    return n.dispatchEvent({
      type: "fullWidthRowFocused",
      rowIndex: c.rowIndex,
      rowPinned: c.rowPinned,
      column: c.column,
      isFullWidthCell: !0,
      fromBelow: d
    }), !0;
  }
  focusPosition(e) {
    const { focusSvc: t, rangeSvc: i } = this.beans;
    t.setFocusedCell({
      rowIndex: e.rowIndex,
      column: e.column,
      rowPinned: e.rowPinned,
      forceBrowserFocus: !0
    }), i?.setRangeToCell(e);
  }
  isValidNavigateCell(e) {
    return !!Zt(this.beans, e);
  }
  getLastCellOfColSpan(e) {
    const t = qs(this.beans, e);
    if (!t)
      return e;
    const i = t.getColSpanningList();
    return i.length === 1 ? e : {
      rowIndex: e.rowIndex,
      column: ue(i),
      rowPinned: e.rowPinned
    };
  }
  ensureCellVisible(e) {
    const t = lf(this.gos), i = this.beans.rowModel.getRow(e.rowIndex), s = t && i?.sticky, { scrollFeature: o } = this.gridBodyCon;
    !s && Ce(e.rowPinned) && o.ensureIndexVisible(e.rowIndex), e.column.isPinned() || o.ensureColumnVisible(e.column);
  }
  ensureColumnVisible(e) {
    const t = this.gridBodyCon.scrollFeature;
    e.isPinned() || t.ensureColumnVisible(e);
  }
  ensureRowVisible(e) {
    this.gridBodyCon.scrollFeature.ensureIndexVisible(e);
  }
};
function aa(e) {
  return e.ctrlsSvc.getScrollFeature().getVScrollPosition();
}
var ZA = {
  moduleName: "KeyboardNavigation",
  version: Y,
  beans: [XA, _A, tA],
  apiFunctions: {
    getFocusedCell: UA,
    clearFocusedCell: jA,
    setFocusedCell: $A,
    setFocusedHeader: qA,
    tabToNextCell: KA,
    tabToPreviousCell: YA
  }
}, QA = class extends T {
  constructor() {
    super(...arguments), this.beanName = "pageBoundsListener";
  }
  postConstruct() {
    this.addManagedEventListeners({
      modelUpdated: this.onModelUpdated.bind(this),
      recalculateRowBounds: this.calculatePages.bind(this)
    }), this.onModelUpdated();
  }
  onModelUpdated(e) {
    this.calculatePages(), this.eventSvc.dispatchEvent({
      type: "paginationChanged",
      animate: e?.animate ?? !1,
      newData: e?.newData ?? !1,
      newPage: e?.newPage ?? !1,
      newPageSize: e?.newPageSize ?? !1,
      keepRenderedRows: e?.keepRenderedRows ?? !1
    });
  }
  calculatePages() {
    const { pageBounds: e, pagination: t, rowModel: i } = this.beans;
    t ? t.calculatePages() : e.calculateBounds(0, i.getRowCount() - 1);
  }
}, JA = class extends T {
  constructor() {
    super(...arguments), this.beanName = "pageBounds", this.pixelOffset = 0;
  }
  getFirstRow() {
    return this.topRowBounds?.rowIndex ?? -1;
  }
  getLastRow() {
    return this.bottomRowBounds?.rowIndex ?? -1;
  }
  getCurrentPageHeight() {
    const { topRowBounds: e, bottomRowBounds: t } = this;
    return !e || !t ? 0 : Math.max(t.rowTop + t.rowHeight - e.rowTop, 0);
  }
  getCurrentPagePixelRange() {
    const { topRowBounds: e, bottomRowBounds: t } = this, i = e?.rowTop ?? 0, s = t ? t.rowTop + t.rowHeight : 0;
    return { pageFirstPixel: i, pageLastPixel: s };
  }
  calculateBounds(e, t) {
    const { rowModel: i } = this.beans, s = i.getRowBounds(e);
    s && (s.rowIndex = e), this.topRowBounds = s;
    const o = i.getRowBounds(t);
    o && (o.rowIndex = t), this.bottomRowBounds = o, this.calculatePixelOffset();
  }
  getPixelOffset() {
    return this.pixelOffset;
  }
  calculatePixelOffset() {
    const e = this.topRowBounds?.rowTop ?? 0;
    this.pixelOffset !== e && (this.pixelOffset = e, this.eventSvc.dispatchEvent({ type: "paginationPixelOffsetChanged" }));
  }
}, eI = (
  /*css*/
  ".ag-pinned-left-floating-bottom,.ag-pinned-left-floating-top,.ag-pinned-right-floating-bottom,.ag-pinned-right-floating-top{min-width:0;overflow:hidden;position:relative}.ag-pinned-left-sticky-top,.ag-pinned-right-sticky-top{height:100%;overflow:hidden;position:relative}.ag-sticky-bottom-full-width-container,.ag-sticky-top-full-width-container{height:100%;overflow:hidden;width:100%}.ag-pinned-left-header,.ag-pinned-right-header{display:inline-block;height:100%;overflow:hidden;position:relative}.ag-body-horizontal-scroll:not(.ag-scrollbar-invisible){.ag-horizontal-left-spacer:not(.ag-scroller-corner){border-right:var(--ag-pinned-column-border)}.ag-horizontal-right-spacer:not(.ag-scroller-corner){border-left:var(--ag-pinned-column-border)}}.ag-pinned-right-header{border-left:var(--ag-pinned-column-border)}.ag-pinned-left-header{border-right:var(--ag-pinned-column-border)}.ag-cell.ag-cell-first-right-pinned:not(.ag-cell-range-left,.ag-cell-range-single-cell,.ag-cell-focus:not(.ag-cell-range-selected):focus-within){border-left:var(--ag-pinned-column-border)}.ag-cell.ag-cell-last-left-pinned:not(.ag-cell-range-right,.ag-cell-range-single-cell,.ag-cell-focus:not(.ag-cell-range-selected):focus-within){border-right:var(--ag-pinned-column-border)}.ag-pinned-left-header .ag-header-cell-resize:after{left:calc(50% - var(--ag-header-column-resize-handle-width))}.ag-pinned-right-header .ag-header-cell-resize:after{left:50%}.ag-pinned-left-header .ag-header-cell-resize{right:-3px}.ag-pinned-right-header .ag-header-cell-resize{left:-3px}"
), tI = class extends T {
  constructor(e, t) {
    super(), this.isLeft = e, this.elements = t, this.getWidth = e ? () => this.beans.pinnedCols.leftWidth : () => this.beans.pinnedCols.rightWidth;
  }
  postConstruct() {
    this.addManagedEventListeners({
      [`${this.isLeft ? "left" : "right"}PinnedWidthChanged`]: this.onPinnedWidthChanged.bind(this)
    });
  }
  onPinnedWidthChanged() {
    const e = this.getWidth(), t = e > 0;
    for (const i of this.elements)
      i && (Re(i, t), Vt(i, e));
  }
}, iI = class extends T {
  constructor() {
    super(...arguments), this.beanName = "pinnedCols";
  }
  postConstruct() {
    this.beans.ctrlsSvc.whenReady(this, (t) => {
      this.gridBodyCtrl = t.gridBodyCtrl;
    });
    const e = this.checkContainerWidths.bind(this);
    this.addManagedEventListeners({
      displayedColumnsChanged: e,
      displayedColumnsWidthChanged: e
    }), this.addManagedPropertyListener("domLayout", e);
  }
  checkContainerWidths() {
    const { gos: e, visibleCols: t, eventSvc: i } = this.beans, s = ze(e, "print"), o = s ? 0 : t.getColsLeftWidth(), n = s ? 0 : t.getDisplayedColumnsRightWidth();
    o != this.leftWidth && (this.leftWidth = o, i.dispatchEvent({ type: "leftPinnedWidthChanged" })), n != this.rightWidth && (this.rightWidth = n, i.dispatchEvent({ type: "rightPinnedWidthChanged" }));
  }
  keepPinnedColumnsNarrowerThanViewport() {
    const e = this.gridBodyCtrl.eBodyViewport, t = wo(e);
    if (t <= 50)
      return;
    const i = this.getPinnedColumnsOverflowingViewport(t - 50), s = this.gos.getCallback("processUnpinnedColumns"), { columns: o, hasLockedPinned: n } = i;
    let r = o;
    !r.length && !n || (s && (r = s({
      columns: r,
      viewportWidth: t
    })), !(!r || !r.length) && (r = r.filter((a) => !ai(a)), this.setColsPinned(r, null, "viewportSizeFeature")));
  }
  createPinnedWidthFeature(e, ...t) {
    return new tI(e, t);
  }
  setColsPinned(e, t, i) {
    const { colModel: s, colAnimation: o, visibleCols: n, gos: r } = this.beans;
    if (!s.cols || !e?.length)
      return;
    if (ze(r, "print")) {
      B(37);
      return;
    }
    o?.start();
    let a;
    t === !0 || t === "left" ? a = "left" : t === "right" ? a = "right" : a = null;
    const l = [];
    e.forEach((c) => {
      if (!c)
        return;
      const d = s.getCol(c);
      d && d.getPinned() !== a && (this.setColPinned(d, a), l.push(d));
    }), l.length && (n.refresh(i), Tf(this.eventSvc, l, i)), o?.finish();
  }
  initCol(e) {
    const { pinned: t, initialPinned: i } = e.colDef;
    t !== void 0 ? this.setColPinned(e, t) : this.setColPinned(e, i);
  }
  setColPinned(e, t) {
    t === !0 || t === "left" ? e.pinned = "left" : t === "right" ? e.pinned = "right" : e.pinned = null, e.dispatchStateUpdatedEvent("pinned");
  }
  setupHeaderPinnedWidth(e) {
    const { scrollVisibleSvc: t } = this.beans;
    if (e.pinned == null)
      return;
    const i = e.pinned === "left", s = e.pinned === "right";
    e.hidden = !0;
    const o = () => {
      const n = i ? this.leftWidth : this.rightWidth;
      if (n == null)
        return;
      const r = n == 0, a = e.hidden !== r, l = this.gos.get("enableRtl"), c = t.getScrollbarWidth(), u = t.verticalScrollShowing && (l && i || !l && s) ? n + c : n;
      e.comp.setPinnedContainerWidth(`${u}px`), e.comp.setDisplayed(!r), a && (e.hidden = r, e.refresh());
    };
    e.addManagedEventListeners({
      leftPinnedWidthChanged: o,
      rightPinnedWidthChanged: o,
      scrollVisibilityChanged: o,
      scrollbarWidthChanged: o
    });
  }
  getHeaderResizeDiff(e, t) {
    if (t.getPinned()) {
      const { leftWidth: s, rightWidth: o } = this, n = wo(this.beans.ctrlsSvc.getGridBodyCtrl().eBodyViewport) - 50;
      if (s + o + e > n)
        if (n > s + o)
          e = n - s - o;
        else
          return 0;
    }
    return e;
  }
  getPinnedColumnsOverflowingViewport(e) {
    const t = this.rightWidth ?? 0, i = this.leftWidth ?? 0, s = t + i;
    let o = !1;
    if (s < e)
      return { columns: [], hasLockedPinned: o };
    const { visibleCols: n } = this.beans, r = [...n.leftCols], a = [...n.rightCols];
    let l = 0, c = 0;
    const d = 0, u = [];
    let h = s - d - e;
    for (; (c < r.length || l < a.length) && h > 0; ) {
      if (l < a.length) {
        const g = a[l++];
        if (g.colDef.lockPinned) {
          o = !0;
          continue;
        }
        h -= g.getActualWidth(), u.push(g);
      }
      if (c < r.length && h > 0) {
        const g = r[c++];
        if (g.colDef.lockPinned) {
          o = !0;
          continue;
        }
        h -= g.getActualWidth(), u.push(g);
      }
    }
    return { columns: u, hasLockedPinned: o };
  }
}, sI = {
  moduleName: "PinnedColumn",
  version: Y,
  beans: [iI],
  css: [eI]
}, oI = class extends T {
  constructor() {
    super(), this.beanName = "ariaAnnounce", this.descriptionContainer = null, this.pendingAnnouncements = /* @__PURE__ */ new Map(), this.lastAnnouncement = "", this.updateAnnouncement = We(this, this.updateAnnouncement.bind(this), 200);
  }
  postConstruct() {
    const e = this.beans, t = He(e), i = this.descriptionContainer = t.createElement("div");
    i.classList.add("ag-aria-description-container"), Vp(i, "polite"), ER(i, "additions text"), PR(i, !0), e.eGridDiv.appendChild(i);
  }
  /**
   * @param key used for debouncing calls
   */
  announceValue(e, t) {
    this.pendingAnnouncements.set(t, e), this.updateAnnouncement();
  }
  updateAnnouncement() {
    if (!this.descriptionContainer)
      return;
    const e = Array.from(this.pendingAnnouncements.values()).join(". ");
    this.pendingAnnouncements.clear(), this.descriptionContainer.textContent = "", setTimeout(() => {
      this.handleAnnouncementUpdate(e);
    }, 50);
  }
  handleAnnouncementUpdate(e) {
    if (!this.isAlive() || !this.descriptionContainer)
      return;
    let t = e;
    if (t == null || t.replace(/[ .]/g, "") == "") {
      this.lastAnnouncement = "";
      return;
    }
    this.lastAnnouncement === t && (t = `${t}​`), this.lastAnnouncement = t, this.descriptionContainer.textContent = t;
  }
  destroy() {
    super.destroy();
    const { descriptionContainer: e } = this;
    e && (ct(e), e.parentElement?.removeChild(e)), this.descriptionContainer = null, this.pendingAnnouncements.clear();
  }
}, nI = {
  moduleName: "Aria",
  version: Y,
  beans: [oI]
};
function rI(e) {
  e.overlays?.showLoadingOverlay();
}
function aI(e) {
  e.overlays?.showNoRowsOverlay();
}
function lI(e) {
  e.overlays?.hideOverlay();
}
var cI = (
  /*css*/
  ".ag-overlay{inset:0;pointer-events:none;position:absolute;z-index:2}.ag-overlay-panel,.ag-overlay-wrapper{display:flex;height:100%;width:100%}.ag-overlay-wrapper{align-items:center;flex:none;justify-content:center;text-align:center}.ag-overlay-loading-wrapper{pointer-events:all}.ag-overlay-loading-center{background:var(--ag-background-color);border:solid var(--ag-border-width) var(--ag-border-color);border-radius:var(--ag-border-radius);box-shadow:var(--ag-popup-shadow);padding:var(--ag-spacing)}"
), dI = {
  tag: "div",
  cls: "ag-overlay",
  role: "presentation",
  children: [
    {
      tag: "div",
      cls: "ag-overlay-panel",
      role: "presentation",
      children: [{ tag: "div", ref: "eOverlayWrapper", cls: "ag-overlay-wrapper", role: "presentation" }]
    }
  ]
}, Zm = class extends pe {
  constructor() {
    super(dI), this.eOverlayWrapper = q, this.activePromise = null, this.activeOverlay = null, this.updateListenerDestroyFunc = null, this.activeCssClass = null, this.elToFocusAfter = null, this.registerCSS(cI);
  }
  handleKeyDown(e) {
    if (e.key !== E.TAB || e.defaultPrevented || jt(e))
      return;
    const t = this.beans;
    if (qi(t, this.eOverlayWrapper, !1, e.shiftKey))
      return;
    let s = !1;
    e.shiftKey ? s = t.focusSvc.focusGridView({
      column: ue(t.visibleCols.allCols),
      backwards: !0,
      canFocusOverlay: !1
    }) : s = Ds(t, !1), s && e.preventDefault();
  }
  updateLayoutClasses(e, t) {
    const i = this.eOverlayWrapper.classList, { AUTO_HEIGHT: s, NORMAL: o, PRINT: n } = vn;
    i.toggle(s, t.autoHeight), i.toggle(o, t.normal), i.toggle(n, t.print);
  }
  postConstruct() {
    this.createManagedBean(new Sc(this)), this.setDisplayed(!1, { skipAriaHidden: !0 }), this.beans.overlays.setOverlayWrapperComp(this), this.addManagedElementListeners(this.getFocusableElement(), { keydown: this.handleKeyDown.bind(this) });
  }
  setWrapperTypeClass(e) {
    const t = this.eOverlayWrapper.classList;
    this.activeCssClass && t.toggle(this.activeCssClass, !1), this.activeCssClass = e, t.toggle(e, !0);
  }
  showOverlay(e, t, i, s) {
    if (this.setWrapperTypeClass(t), this.destroyActiveOverlay(), this.elToFocusAfter = null, this.activePromise = e, !!e) {
      if (this.setDisplayed(!0, { skipAriaHidden: !0 }), i && this.isGridFocused()) {
        const o = Fe(this.beans);
        o && !af(this.beans) && (this.elToFocusAfter = o);
      }
      e.then((o) => {
        if (this.activePromise !== e) {
          this.activeOverlay !== o && (this.destroyBean(o), o = null);
          return;
        }
        if (this.activePromise = null, !!o) {
          if (this.activeOverlay !== o && (this.eOverlayWrapper.appendChild(o.getGui()), this.activeOverlay = o, s)) {
            const n = o;
            this.updateListenerDestroyFunc = this.addManagedPropertyListener(s, ({ currentValue: r }) => {
              n.refresh?.(Z(this.gos, { ...r ?? {} }));
            });
          }
          i && this.isGridFocused() && Wi(this.eOverlayWrapper);
        }
      });
    }
  }
  updateOverlayWrapperPaddingTop(e) {
    this.eOverlayWrapper.style.setProperty("padding-top", `${e}px`);
  }
  destroyActiveOverlay() {
    this.activePromise = null;
    const e = this.activeOverlay;
    if (!e)
      return;
    let t = this.elToFocusAfter;
    this.activeOverlay = null, this.elToFocusAfter = null, t && !this.isGridFocused() && (t = null);
    const i = this.updateListenerDestroyFunc;
    i && (i(), this.updateListenerDestroyFunc = null), this.destroyBean(e), ct(this.eOverlayWrapper), t?.focus?.({ preventScroll: !0 });
  }
  hideOverlay() {
    this.destroyActiveOverlay(), this.setDisplayed(!1, { skipAriaHidden: !0 });
  }
  isGridFocused() {
    const e = Fe(this.beans);
    return !!e && this.beans.eGridDiv.contains(e);
  }
  destroy() {
    this.elToFocusAfter = null, this.destroyActiveOverlay(), this.beans.overlays.setOverlayWrapperComp(void 0), super.destroy();
  }
}, uI = {
  selector: "AG-OVERLAY-WRAPPER",
  component: Zm
}, hI = class extends T {
  constructor() {
    super(...arguments), this.beanName = "overlays", this.state = 0, this.showInitialOverlay = !0, this.wrapperPadding = 0;
  }
  postConstruct() {
    this.isClientSide = Oe(this.gos), this.isServerSide = !this.isClientSide && $i(this.gos);
    const e = () => this.updateOverlayVisibility();
    this.addManagedEventListeners({
      newColumnsLoaded: e,
      rowDataUpdated: e,
      gridSizeChanged: this.refreshWrapperPadding.bind(this),
      rowCountReady: () => {
        this.showInitialOverlay = !1, this.updateOverlayVisibility();
      }
    }), this.addManagedPropertyListener("loading", e);
  }
  setOverlayWrapperComp(e) {
    this.eWrapper = e, this.updateOverlayVisibility();
  }
  /** Returns true if the overlay is visible. */
  isVisible() {
    return this.state !== 0 && !!this.eWrapper;
  }
  /** Returns true if the overlay is visible and is exclusive (popup over the grid) */
  isExclusive() {
    return this.state === 1 && !!this.eWrapper;
  }
  showLoadingOverlay() {
    this.showInitialOverlay = !1;
    const e = this.gos, t = e.get("loading");
    !t && (t !== void 0 || e.get("suppressLoadingOverlay")) || this.doShowLoadingOverlay();
  }
  showNoRowsOverlay() {
    this.showInitialOverlay = !1;
    const e = this.gos;
    e.get("loading") || e.get("suppressNoRowsOverlay") || this.doShowNoRowsOverlay();
  }
  hideOverlay() {
    if (this.showInitialOverlay = !1, this.gos.get("loading")) {
      B(99);
      return;
    }
    this.doHideOverlay();
  }
  getOverlayWrapperSelector() {
    return uI;
  }
  getOverlayWrapperCompClass() {
    return Zm;
  }
  updateOverlayVisibility() {
    if (!this.eWrapper) {
      this.state = 0;
      return;
    }
    const {
      state: e,
      isClientSide: t,
      isServerSide: i,
      beans: { gos: s, colModel: o, rowModel: n }
    } = this;
    let r = this.gos.get("loading");
    r !== void 0 && (this.showInitialOverlay = !1), this.showInitialOverlay && r === void 0 && !s.get("suppressLoadingOverlay") && (r = !s.get("columnDefs") || !o.ready || !s.get("rowData") && t), r ? e !== 1 && this.doShowLoadingOverlay() : (this.showInitialOverlay = !1, t && n.isEmpty() && !s.get("suppressNoRowsOverlay") ? e !== 2 && this.doShowNoRowsOverlay() : (e === 1 || !i && e !== 0) && this.doHideOverlay());
  }
  doShowLoadingOverlay() {
    this.eWrapper && (this.state = 1, this.showOverlay(
      FF(this.beans.userCompFactory, Z(this.gos, {})),
      "ag-overlay-loading-wrapper",
      "loadingOverlayComponentParams"
    ), this.updateExclusive());
  }
  doShowNoRowsOverlay() {
    this.eWrapper && (this.state = 2, this.showOverlay(
      PF(this.beans.userCompFactory, Z(this.gos, {})),
      "ag-overlay-no-rows-wrapper",
      "noRowsOverlayComponentParams"
    ), this.updateExclusive());
  }
  doHideOverlay() {
    this.eWrapper && (this.state = 0, this.eWrapper.hideOverlay(), this.updateExclusive());
  }
  showOverlay(e, t, i) {
    const s = e?.newAgStackInstance() ?? null;
    this.eWrapper?.showOverlay(s, t, this.isExclusive(), i), this.refreshWrapperPadding();
  }
  updateExclusive() {
    const e = this.exclusive;
    this.exclusive = this.isExclusive(), this.exclusive !== e && this.eventSvc.dispatchEvent({
      type: "overlayExclusiveChanged"
    });
  }
  refreshWrapperPadding() {
    const e = this.eWrapper;
    if (!e)
      return;
    let t = 0;
    this.state === 2 ? t = this.beans.ctrlsSvc.get("gridHeaderCtrl")?.headerHeight || 0 : this.wrapperPadding !== 0 && (t = 0), this.wrapperPadding !== t && (this.wrapperPadding = t, e.updateOverlayWrapperPaddingTop(t));
  }
}, gI = {
  moduleName: "Overlay",
  version: Y,
  userComponents: {
    agLoadingOverlay: UE,
    agNoRowsOverlay: $E
  },
  apiFunctions: {
    showLoadingOverlay: rI,
    showNoRowsOverlay: aI,
    hideOverlay: lI
  },
  beans: [hI]
}, pI = class extends T {
  constructor() {
    super(...arguments), this.beanName = "rowContainerHeight", this.scrollY = 0, this.uiBodyHeight = 0;
  }
  postConstruct() {
    this.addManagedEventListeners({ bodyHeightChanged: this.updateOffset.bind(this) }), this.maxDivHeight = NR(), Gi(this.gos, "RowContainerHeightService - maxDivHeight = " + this.maxDivHeight);
  }
  updateOffset() {
    if (!this.stretching)
      return;
    const e = this.beans.ctrlsSvc.getScrollFeature().getVScrollPosition().top, t = this.getUiBodyHeight();
    (e !== this.scrollY || t !== this.uiBodyHeight) && (this.scrollY = e, this.uiBodyHeight = t, this.calculateOffset());
  }
  calculateOffset() {
    this.setUiContainerHeight(this.maxDivHeight), this.pixelsToShave = this.modelHeight - this.uiContainerHeight, this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;
    const e = this.scrollY / this.maxScrollY, t = e * this.pixelsToShave;
    Gi(
      this.gos,
      `RowContainerHeightService - Div Stretch Offset = ${t} (${this.pixelsToShave} * ${e})`
    ), this.setDivStretchOffset(t);
  }
  setUiContainerHeight(e) {
    e !== this.uiContainerHeight && (this.uiContainerHeight = e, this.eventSvc.dispatchEvent({ type: "rowContainerHeightChanged" }));
  }
  clearOffset() {
    this.setUiContainerHeight(this.modelHeight), this.pixelsToShave = 0, this.setDivStretchOffset(0);
  }
  setDivStretchOffset(e) {
    const t = typeof e == "number" ? Math.floor(e) : null;
    this.divStretchOffset !== t && (this.divStretchOffset = t, this.eventSvc.dispatchEvent({ type: "heightScaleChanged" }));
  }
  setModelHeight(e) {
    this.modelHeight = e, this.stretching = e != null && // null happens when in print layout
    this.maxDivHeight > 0 && e > this.maxDivHeight, this.stretching ? this.calculateOffset() : this.clearOffset();
  }
  getRealPixelPosition(e) {
    return e - this.divStretchOffset;
  }
  getUiBodyHeight() {
    const e = this.beans.ctrlsSvc.getScrollFeature().getVScrollPosition();
    return e.bottom - e.top;
  }
  getScrollPositionForPixel(e) {
    if (this.pixelsToShave <= 0)
      return e;
    const t = this.modelHeight - this.getUiBodyHeight(), i = e / t;
    return this.maxScrollY * i;
  }
}, fI = 400, mI = class extends T {
  constructor() {
    super(...arguments), this.beanName = "rowRenderer", this.destroyFuncsForColumnListeners = [], this.rowCtrlsByRowIndex = {}, this.zombieRowCtrls = {}, this.allRowCtrls = [], this.topRowCtrls = [], this.bottomRowCtrls = [], this.refreshInProgress = !1, this.dataFirstRenderedFired = !1, this.setupRangeSelectionListeners = () => {
      const e = () => {
        this.getAllCellCtrls().forEach((n) => n.onCellSelectionChanged());
      }, t = () => {
        this.getAllCellCtrls().forEach((n) => n.updateRangeBordersIfRangeCount());
      }, i = () => {
        this.eventSvc.addEventListener("cellSelectionChanged", e), this.eventSvc.addEventListener("columnMoved", t), this.eventSvc.addEventListener("columnPinned", t), this.eventSvc.addEventListener("columnVisible", t);
      }, s = () => {
        this.eventSvc.removeEventListener("cellSelectionChanged", e), this.eventSvc.removeEventListener("columnMoved", t), this.eventSvc.removeEventListener("columnPinned", t), this.eventSvc.removeEventListener("columnVisible", t);
      };
      this.addDestroyFunc(() => s()), this.addManagedPropertyListeners(["enableRangeSelection", "cellSelection"], () => {
        hi(this.gos) ? i() : s();
      }), hi(this.gos) && i();
    };
  }
  wireBeans(e) {
    this.pageBounds = e.pageBounds, this.colModel = e.colModel, this.pinnedRowModel = e.pinnedRowModel, this.rowModel = e.rowModel, this.focusSvc = e.focusSvc, this.rowContainerHeight = e.rowContainerHeight, this.ctrlsSvc = e.ctrlsSvc, this.editSvc = e.editSvc;
  }
  postConstruct() {
    this.ctrlsSvc.whenReady(this, (e) => {
      this.gridBodyCtrl = e.gridBodyCtrl, this.initialise();
    });
  }
  initialise() {
    this.addManagedEventListeners({
      paginationChanged: this.onPageLoaded.bind(this),
      pinnedRowDataChanged: this.onPinnedRowDataChanged.bind(this),
      pinnedRowsChanged: this.onPinnedRowsChanged.bind(this),
      displayedColumnsChanged: this.onDisplayedColumnsChanged.bind(this),
      bodyScroll: this.onBodyScroll.bind(this),
      bodyHeightChanged: this.redraw.bind(this, {})
    }), this.addManagedPropertyListeners(["domLayout", "embedFullWidthRows"], () => this.onDomLayoutChanged()), this.addManagedPropertyListeners(["suppressMaxRenderedRowRestriction", "rowBuffer"], () => this.redraw()), this.addManagedPropertyListener("suppressCellFocus", (s) => this.onSuppressCellFocusChanged(s.currentValue)), this.addManagedPropertyListeners(
      [
        "groupSuppressBlankHeader",
        "getBusinessKeyForNode",
        "fullWidthCellRenderer",
        "fullWidthCellRendererParams",
        "suppressStickyTotalRow",
        "groupRowRenderer",
        "groupRowRendererParams",
        // maybe only needs to refresh FW rows...
        "loadingCellRenderer",
        "loadingCellRendererParams",
        "detailCellRenderer",
        "detailCellRendererParams",
        "enableRangeSelection",
        "enableCellTextSelection"
      ],
      () => this.redrawRows()
    ), this.addManagedPropertyListener("cellSelection", ({ currentValue: s, previousValue: o }) => {
      (!o && s || o && !s) && this.redrawRows();
    });
    const { stickyRowSvc: e, gos: t, showRowGroupCols: i } = this.beans;
    if (i && this.addManagedPropertyListener("showOpenedGroup", () => {
      const s = i.getShowRowGroupCols();
      s.length && this.refreshCells({ columns: s, force: !0 });
    }), e)
      this.stickyRowFeature = e.createStickyRowFeature(
        this,
        this.createRowCon.bind(this),
        this.destroyRowCtrls.bind(this)
      );
    else {
      const s = this.gridBodyCtrl;
      s.setStickyTopHeight(0), s.setStickyBottomHeight(0);
    }
    this.registerCellEventListeners(), this.initialiseCache(), this.printLayout = ze(t, "print"), this.embedFullWidthRows = this.printLayout || t.get("embedFullWidthRows"), this.redrawAfterModelUpdate();
  }
  initialiseCache() {
    if (this.gos.get("keepDetailRows")) {
      const e = this.getKeepDetailRowsCount(), t = e ?? 3;
      this.cachedRowCtrls = new CI(t);
    }
  }
  getKeepDetailRowsCount() {
    return this.gos.get("keepDetailRowsCount");
  }
  getStickyTopRowCtrls() {
    return this.stickyRowFeature?.stickyTopRowCtrls ?? [];
  }
  getStickyBottomRowCtrls() {
    return this.stickyRowFeature?.stickyBottomRowCtrls ?? [];
  }
  updateAllRowCtrls() {
    const e = Object.values(this.rowCtrlsByRowIndex), t = Object.values(this.zombieRowCtrls), i = this.cachedRowCtrls?.getEntries() ?? [];
    t.length > 0 || i.length > 0 ? this.allRowCtrls = [...e, ...t, ...i] : this.allRowCtrls = e;
  }
  /**
   * Checks if the cell is rendered or not. Also returns true if row ctrl is present but has not rendered
   * cells yet.
   * @returns true if cellCtrl is present, or if the row is present but has not rendered rows yet
   */
  isCellBeingRendered(e, t) {
    const i = this.rowCtrlsByRowIndex[e];
    return !t || !i ? !!i : i.isFullWidth() ? !0 : !!this.beans.spannedRowRenderer?.getCellByPosition({ rowIndex: e, column: t, rowPinned: null }) || !!i.getCellCtrl(t) || !i.isRowRendered();
  }
  /**
   * Notifies all row and cell controls of any change in focused cell.
   * @param event cell focused event
   */
  updateCellFocus(e) {
    this.getAllCellCtrls().forEach((t) => t.onCellFocused(e)), this.getFullWidthRowCtrls().forEach((t) => t.onFullWidthRowFocused(e));
  }
  /**
   * Called when a new cell is focused in the grid
   * - if the focused cell isn't rendered; re-draw rows to dry to render it
   * - subsequently updates all cell and row controls with the new focused cell
   * @param event cell focused event
   */
  onCellFocusChanged(e) {
    if (e && e.rowIndex != null && !e.rowPinned) {
      const t = this.beans.colModel.getCol(e.column) ?? void 0;
      this.isCellBeingRendered(e.rowIndex, t) || this.redraw();
    }
    this.updateCellFocus(e);
  }
  onSuppressCellFocusChanged(e) {
    this.getAllCellCtrls().forEach((t) => t.onSuppressCellFocusChanged(e)), this.getFullWidthRowCtrls().forEach((t) => t.onSuppressCellFocusChanged(e));
  }
  // in a clean design, each cell would register for each of these events. however when scrolling, all the cells
  // registering and de-registering for events is a performance bottleneck. so we register here once and inform
  // all active cells.
  registerCellEventListeners() {
    this.addManagedEventListeners({
      cellFocused: (e) => this.onCellFocusChanged(e),
      cellFocusCleared: () => this.updateCellFocus(),
      flashCells: (e) => {
        const { cellFlashSvc: t } = this.beans;
        t && this.getAllCellCtrls().forEach((i) => t.onFlashCells(i, e));
      },
      columnHoverChanged: () => {
        this.getAllCellCtrls().forEach((e) => e.onColumnHover());
      },
      displayedColumnsChanged: () => {
        this.getAllCellCtrls().forEach((e) => e.onDisplayedColumnsChanged());
      },
      displayedColumnsWidthChanged: () => {
        this.printLayout && this.getAllCellCtrls().forEach((e) => e.onLeftChanged());
      }
    }), this.setupRangeSelectionListeners(), this.refreshListenersToColumnsForCellComps(), this.addManagedEventListeners({
      gridColumnsChanged: this.refreshListenersToColumnsForCellComps.bind(this)
    }), this.addDestroyFunc(this.removeGridColumnListeners.bind(this));
  }
  // executes all functions in destroyFuncsForColumnListeners and then clears the list
  removeGridColumnListeners() {
    this.destroyFuncsForColumnListeners.forEach((e) => e()), this.destroyFuncsForColumnListeners.length = 0;
  }
  // this function adds listeners onto all the grid columns, which are the column that we could have cellComps for.
  // when the grid columns change, we add listeners again. in an ideal design, each CellComp would just register to
  // the column it belongs to on creation, however this was a bottleneck with the number of cells, so do it here
  // once instead.
  refreshListenersToColumnsForCellComps() {
    this.removeGridColumnListeners(), this.colModel.getCols().forEach((t) => {
      const i = (l) => {
        this.getAllCellCtrls().forEach((c) => {
          c.column === t && l(c);
        });
      }, s = () => {
        i((l) => l.onLeftChanged());
      }, o = () => {
        i((l) => l.onWidthChanged());
      }, n = () => {
        i((l) => l.onFirstRightPinnedChanged());
      }, r = () => {
        i((l) => l.onLastLeftPinnedChanged());
      }, a = () => {
        i((l) => l.onColDefChanged());
      };
      t.__addEventListener("leftChanged", s), t.__addEventListener("widthChanged", o), t.__addEventListener("firstRightPinnedChanged", n), t.__addEventListener("lastLeftPinnedChanged", r), t.__addEventListener("colDefChanged", a), this.destroyFuncsForColumnListeners.push(() => {
        t.__removeEventListener("leftChanged", s), t.__removeEventListener("widthChanged", o), t.__removeEventListener("firstRightPinnedChanged", n), t.__removeEventListener("lastLeftPinnedChanged", r), t.__removeEventListener("colDefChanged", a);
      });
    });
  }
  onDomLayoutChanged() {
    const e = ze(this.gos, "print"), t = e || this.gos.get("embedFullWidthRows"), i = t !== this.embedFullWidthRows || this.printLayout !== e;
    this.printLayout = e, this.embedFullWidthRows = t, i && this.redrawAfterModelUpdate({ domLayoutChanged: !0 });
  }
  // for row models that have datasources, when we update the datasource, we need to force the rowRenderer
  // to redraw all rows. otherwise the old rows from the old datasource will stay displayed.
  datasourceChanged() {
    this.firstRenderedRow = 0, this.lastRenderedRow = -1;
    const e = Object.keys(this.rowCtrlsByRowIndex);
    this.removeRowCtrls(e);
  }
  onPageLoaded(e) {
    const t = {
      recycleRows: e.keepRenderedRows,
      animate: e.animate,
      newData: e.newData,
      newPage: e.newPage,
      // because this is a model updated event (not pinned rows), we
      // can skip updating the pinned rows. this is needed so that if user
      // is doing transaction updates, the pinned rows are not getting constantly
      // trashed - or editing cells in pinned rows are not refreshed and put into read mode
      onlyBody: !0
    };
    this.redrawAfterModelUpdate(t);
  }
  /**
   * @param column AgColumn
   * @returns An array with HTMLElement for every cell of the column passed as param.
   * If the cell is spanning across multiple columns, it only returns the html element
   * if the column passed is the first column of the span (used for auto width calculation).
   */
  getAllCellsNotSpanningForColumn(e) {
    const t = [];
    return this.getAllRowCtrls().forEach((i) => {
      const s = i.getCellCtrl(e, !0)?.eGui;
      s && t.push(s);
    }), t;
  }
  refreshFloatingRowComps(e = !0) {
    this.refreshFloatingRows(this.topRowCtrls, "top", e), this.refreshFloatingRows(this.bottomRowCtrls, "bottom", e);
  }
  /**
   * Determines which row controllers need to be destroyed and re-created vs which ones can
   * be re-used.
   *
   * This is operation is to pinned/floating rows as `this.recycleRows` is to normal/body rows.
   *
   * All `RowCtrl` instances in `rowCtrls` that don't correspond to `RowNode` instances in `rowNodes` are destroyed.
   * All `RowNode` instances in `rowNodes` that don't correspond to `RowCtrl` instances in `rowCtrls` are created.
   * All instances in `rowCtrls` must be in the same order as their corresponding nodes in `rowNodes`.
   *
   * @param rowCtrls The list of existing row controllers
   * @param rowNodes The canonical list of row nodes that should have associated controllers
   */
  refreshFloatingRows(e, t, i) {
    const { pinnedRowModel: s, beans: o, printLayout: n } = this, r = Object.fromEntries(e.map((l) => [l.rowNode.id, l]));
    s?.forEachPinnedRow(t, (l, c) => {
      const d = e[c];
      d && s.getPinnedRowById(d.rowNode.id, t) === void 0 && (d.destroyFirstPass(), d.destroySecondPass()), l.id in r && i ? (e[c] = r[l.id], delete r[l.id]) : e[c] = new tr(l, o, !1, !1, n);
    });
    const a = (t === "top" ? s?.getPinnedTopRowCount() : s?.getPinnedBottomRowCount()) ?? 0;
    e.length = a;
  }
  onPinnedRowDataChanged() {
    const e = {
      recycleRows: !0
    };
    this.redrawAfterModelUpdate(e);
  }
  onPinnedRowsChanged() {
    this.redrawAfterModelUpdate({ recycleRows: !0 });
  }
  redrawRow(e, t = !1) {
    if (e.sticky)
      this.stickyRowFeature?.refreshStickyNode(e);
    else if (this.cachedRowCtrls?.has(e)) {
      this.cachedRowCtrls.removeRow(e);
      return;
    } else {
      const i = (s) => {
        const o = s[e.rowIndex];
        o && o.rowNode === e && (o.destroyFirstPass(), o.destroySecondPass(), s[e.rowIndex] = this.createRowCon(e, !1, !1));
      };
      switch (e.rowPinned) {
        case "top":
          i(this.topRowCtrls);
          break;
        case "bottom":
          i(this.bottomRowCtrls);
          break;
        default:
          i(this.rowCtrlsByRowIndex), this.updateAllRowCtrls();
      }
    }
    t || this.dispatchDisplayedRowsChanged(!1);
  }
  redrawRows(e) {
    const { editSvc: t } = this.beans;
    if (t?.isEditing() && (t.isBatchEditing() ? t.cleanupEditors() : t.stopEditing(void 0, { source: "api" })), e != null) {
      e?.forEach((s) => this.redrawRow(s, !0)), this.dispatchDisplayedRowsChanged(!1);
      return;
    }
    this.redrawAfterModelUpdate();
  }
  // gets called from:
  // +) initialisation (in registerGridComp) params = null
  // +) onDomLayoutChanged, params = null
  // +) onPageLoaded, recycleRows, animate, newData, newPage from event, onlyBody=true
  // +) onPinnedRowDataChanged, recycleRows = true
  // +) redrawRows (from Grid API), recycleRows = true/false
  redrawAfterModelUpdate(e = {}) {
    this.getLockOnRefresh();
    const t = this.beans.focusSvc?.getFocusCellToUseAfterRefresh();
    this.updateContainerHeights(), this.scrollToTopIfNewData(e);
    const i = !e.domLayoutChanged && !!e.recycleRows, s = e.animate && hs(this.gos), o = i ? this.getRowsToRecycle() : null;
    i || this.removeAllRowComps(), this.workOutFirstAndLastRowsToRender();
    const { stickyRowFeature: n, gos: r } = this;
    if (n) {
      n.checkStickyRows();
      const a = n.extraTopHeight + n.extraBottomHeight;
      a && this.updateContainerHeights(a);
    }
    this.recycleRows(o, s), this.gridBodyCtrl.updateRowCount(), e.onlyBody || this.refreshFloatingRowComps(r.get("enableRowPinning") ? i : void 0), this.dispatchDisplayedRowsChanged(), t != null && this.restoreFocusedCell(t), this.releaseLockOnRefresh();
  }
  scrollToTopIfNewData(e) {
    const t = e.newData || e.newPage, i = this.gos.get("suppressScrollOnNewData");
    t && !i && (this.gridBodyCtrl.scrollFeature.scrollToTop(), this.stickyRowFeature?.resetOffsets());
  }
  updateContainerHeights(e = 0) {
    const { rowContainerHeight: t } = this;
    if (this.printLayout) {
      t.setModelHeight(null);
      return;
    }
    let i = this.pageBounds.getCurrentPageHeight();
    i === 0 && (i = 1), t.setModelHeight(i + e);
  }
  getLockOnRefresh() {
    if (this.refreshInProgress)
      throw new Error(Gt(252));
    this.refreshInProgress = !0, this.beans.frameworkOverrides.getLockOnRefresh?.();
  }
  releaseLockOnRefresh() {
    this.refreshInProgress = !1, this.beans.frameworkOverrides.releaseLockOnRefresh?.();
  }
  isRefreshInProgress() {
    return this.refreshInProgress;
  }
  // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without
  // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits
  // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the
  // edited cell).
  restoreFocusedCell(e) {
    if (!e)
      return;
    const t = this.beans.focusSvc, i = this.findPositionToFocus(e);
    if (!i) {
      t.focusHeaderPosition({
        headerPosition: {
          headerRowIndex: It(this.beans) - 1,
          column: e.column
        }
      });
      return;
    }
    if (e.rowIndex !== i.rowIndex || e.rowPinned != i.rowPinned) {
      t.setFocusedCell({
        ...i,
        preventScrollOnBrowserFocus: !0,
        forceBrowserFocus: !0
      });
      return;
    }
    t.doesRowOrCellHaveBrowserFocus() || this.updateCellFocus(
      Z(this.gos, {
        ...i,
        forceBrowserFocus: !0,
        preventScrollOnBrowserFocus: !0,
        type: "cellFocused"
      })
    );
  }
  findPositionToFocus(e) {
    const { pagination: t, pageBounds: i } = this.beans;
    let s = e;
    for (s.rowPinned == null && t && i && !t.isRowInPage(s.rowIndex) && (s = { rowPinned: null, rowIndex: i.getFirstRow() }); s; ) {
      if (s.rowPinned == null && i)
        if (s.rowIndex < i.getFirstRow()) {
          if (s = qn(this.beans, { rowPinned: null, rowIndex: 0 }), !s)
            return null;
        } else s.rowIndex > i.getLastRow() && (s = { rowPinned: null, rowIndex: i.getLastRow() });
      const o = this.getRowByPosition(s);
      if (o?.isAlive())
        return { ...o.getRowPosition(), column: e.column };
      s = qn(this.beans, s);
    }
    return null;
  }
  getAllCellCtrls() {
    const e = [], t = this.getAllRowCtrls(), i = t.length;
    for (let s = 0; s < i; s++) {
      const o = t[s].getAllCellCtrls(), n = o.length;
      for (let r = 0; r < n; r++)
        e.push(o[r]);
    }
    return e;
  }
  getAllRowCtrls() {
    const { spannedRowRenderer: e } = this.beans, t = this.getStickyTopRowCtrls(), i = this.getStickyBottomRowCtrls();
    return [
      ...this.topRowCtrls,
      ...this.bottomRowCtrls,
      ...t,
      ...i,
      ...e?.getCtrls("top") ?? [],
      ...e?.getCtrls("bottom") ?? [],
      ...e?.getCtrls("center") ?? [],
      ...Object.values(this.rowCtrlsByRowIndex)
    ];
  }
  addRenderedRowListener(e, t, i) {
    const s = this.rowCtrlsByRowIndex[t];
    s && s.addEventListener(e, i);
  }
  refreshCells({ rowNodes: e, columns: t, force: i, suppressFlash: s } = {}) {
    const o = {
      force: i,
      newData: !1,
      suppressFlash: s
    };
    for (const n of this.getCellCtrls(e, t))
      n.refreshOrDestroyCell(o);
    this.refreshFullWidth(e);
  }
  refreshRows(e = {}) {
    this.getRowCtrls(e.rowNodes).forEach((t) => t.refreshRow(e)), this.refreshFullWidth(e.rowNodes);
  }
  refreshFullWidth(e) {
    if (!e)
      return;
    let t = !1;
    for (const i of this.getRowCtrls(e)) {
      if (!i.isFullWidth())
        continue;
      i.refreshFullWidth() || (t = !0, this.redrawRow(i.rowNode, !0));
    }
    t && this.dispatchDisplayedRowsChanged(!1);
  }
  /**
   * @param rowNodes if provided, returns the RowCtrls for the provided rowNodes. otherwise returns all RowCtrls.
   */
  getRowCtrls(e) {
    const t = gl(e), i = this.getAllRowCtrls();
    return !e || !t ? i : i.filter((s) => {
      const o = s.rowNode;
      return pl(o, t);
    });
  }
  // returns CellCtrl's that match the provided rowNodes and columns. eg if one row node
  // and two columns provided, that identifies 4 cells, so 4 CellCtrl's returned.
  getCellCtrls(e, t) {
    let i;
    $(t) && (i = {}, t.forEach((o) => {
      const n = this.colModel.getCol(o);
      $(n) && (i[n.getId()] = !0);
    }));
    const s = [];
    return this.getRowCtrls(e).forEach((o) => {
      o.getAllCellCtrls().forEach((n) => {
        const r = n.column.getId();
        i && !i[r] || s.push(n);
      });
    }), s;
  }
  destroy() {
    this.removeAllRowComps(!0), super.destroy();
  }
  removeAllRowComps(e = !1) {
    const t = Object.keys(this.rowCtrlsByRowIndex);
    this.removeRowCtrls(t, e), this.stickyRowFeature?.destroyStickyCtrls();
  }
  getRowsToRecycle() {
    const e = [];
    for (const i of Object.keys(this.rowCtrlsByRowIndex))
      this.rowCtrlsByRowIndex[i].rowNode.id == null && e.push(i);
    this.removeRowCtrls(e);
    const t = {};
    for (const i of Object.values(this.rowCtrlsByRowIndex)) {
      const s = i.rowNode;
      t[s.id] = i;
    }
    return this.rowCtrlsByRowIndex = {}, t;
  }
  // takes array of row indexes
  removeRowCtrls(e, t = !1) {
    e.forEach((i) => {
      const s = this.rowCtrlsByRowIndex[i];
      s && (s.destroyFirstPass(t), s.destroySecondPass()), delete this.rowCtrlsByRowIndex[i];
    });
  }
  onBodyScroll(e) {
    e.direction === "vertical" && this.redraw({ afterScroll: !0 });
  }
  // gets called when rows don't change, but viewport does, so after:
  // 1) height of grid body changes, ie number of displayed rows has changed
  // 2) grid scrolled to new position
  // 3) ensure index visible (which is a scroll)
  redraw(e = {}) {
    const { focusSvc: t, animationFrameSvc: i } = this.beans, { afterScroll: s } = e;
    let o;
    const n = this.stickyRowFeature;
    n && (o = t?.getFocusCellToUseAfterRefresh() || void 0);
    const r = this.firstRenderedRow, a = this.lastRenderedRow;
    this.workOutFirstAndLastRowsToRender();
    let l = !1;
    if (n) {
      l = n.checkStickyRows();
      const d = n.extraTopHeight + n.extraBottomHeight;
      d && this.updateContainerHeights(d);
    }
    const c = this.firstRenderedRow !== r || this.lastRenderedRow !== a;
    if (!(s && !l && !c) && (this.getLockOnRefresh(), this.recycleRows(null, !1, s), this.releaseLockOnRefresh(), this.dispatchDisplayedRowsChanged(s && !l), o != null)) {
      const d = t?.getFocusCellToUseAfterRefresh();
      o != null && d == null && (i?.flushAllFrames(), this.restoreFocusedCell(o));
    }
  }
  removeRowCompsNotToDraw(e, t) {
    const i = {};
    e.forEach((n) => i[n] = !0);
    const o = Object.keys(this.rowCtrlsByRowIndex).filter((n) => !i[n]);
    this.removeRowCtrls(o, t);
  }
  calculateIndexesToDraw(e) {
    const t = [];
    for (let r = this.firstRenderedRow; r <= this.lastRenderedRow; r++)
      t.push(r);
    const i = this.beans.pagination, s = this.beans.focusSvc?.getFocusedCell()?.rowIndex;
    s != null && (s < this.firstRenderedRow || s > this.lastRenderedRow) && (!i || i.isRowInPage(s)) && s < this.rowModel.getRowCount() && t.push(s);
    const o = (r) => {
      const a = r.rowNode.rowIndex;
      a == null || a === s || (a < this.firstRenderedRow || a > this.lastRenderedRow) && this.doNotUnVirtualiseRow(r) && t.push(a);
    };
    for (const r of Object.values(this.rowCtrlsByRowIndex))
      o(r);
    if (e)
      for (const r of Object.values(e))
        o(r);
    t.sort((r, a) => r - a);
    const n = [];
    for (let r = 0; r < t.length; r++) {
      const a = t[r], l = this.rowModel.getRow(a);
      l && !l.sticky && n.push(a);
    }
    return n;
  }
  recycleRows(e, t = !1, i = !1) {
    const s = this.calculateIndexesToDraw(e);
    if ((this.printLayout || i) && (t = !1), this.removeRowCompsNotToDraw(s, !t), s.forEach((o) => {
      this.createOrUpdateRowCtrl(o, e, t, i);
    }), e) {
      const { animationFrameSvc: o } = this.beans;
      o?.active && i && !this.printLayout ? o.addDestroyTask(() => {
        this.destroyRowCtrls(e, t), this.updateAllRowCtrls(), this.dispatchDisplayedRowsChanged();
      }) : this.destroyRowCtrls(e, t);
    }
    this.updateAllRowCtrls();
  }
  dispatchDisplayedRowsChanged(e = !1) {
    this.eventSvc.dispatchEvent({
      type: "displayedRowsChanged",
      afterScroll: e
    });
  }
  onDisplayedColumnsChanged() {
    const { visibleCols: e } = this.beans, t = e.isPinningLeft(), i = e.isPinningRight();
    (this.pinningLeft !== t || i !== this.pinningRight) && (this.pinningLeft = t, this.pinningRight = i, this.embedFullWidthRows && this.redrawFullWidthEmbeddedRows());
  }
  // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,
  // then it should go into the pinned left area if pinning left, or the center area if not pinning.
  redrawFullWidthEmbeddedRows() {
    const e = [];
    this.getFullWidthRowCtrls().forEach((t) => {
      const i = t.rowNode.rowIndex;
      e.push(i.toString());
    }), this.refreshFloatingRowComps(), this.removeRowCtrls(e), this.redraw({ afterScroll: !0 });
  }
  getFullWidthRowCtrls(e) {
    const t = gl(e);
    return this.getAllRowCtrls().filter((i) => {
      if (!i.isFullWidth())
        return !1;
      const s = i.rowNode;
      return !(t != null && !pl(s, t));
    });
  }
  createOrUpdateRowCtrl(e, t, i, s) {
    let o, n = this.rowCtrlsByRowIndex[e];
    if (n || (o = this.rowModel.getRow(e), $(o) && $(t) && t[o.id] && o.alreadyRendered && (n = t[o.id], t[o.id] = null)), !n)
      if (o || (o = this.rowModel.getRow(e)), $(o))
        n = this.createRowCon(o, i, s);
      else
        return;
    return o && (o.alreadyRendered = !0), this.rowCtrlsByRowIndex[e] = n, n;
  }
  destroyRowCtrls(e, t) {
    const i = [];
    if (e) {
      for (const s of Object.values(e))
        if (s) {
          if (this.cachedRowCtrls && s.isCacheable()) {
            this.cachedRowCtrls.addRow(s);
            continue;
          }
          if (s.destroyFirstPass(!t), t) {
            const o = s.instanceId;
            this.zombieRowCtrls[o] = s, i.push(() => {
              s.destroySecondPass(), delete this.zombieRowCtrls[o];
            });
          } else
            s.destroySecondPass();
        }
    }
    t && (i.push(() => {
      this.updateAllRowCtrls(), this.dispatchDisplayedRowsChanged();
    }), window.setTimeout(() => i.forEach((s) => s()), fI));
  }
  getRowBuffer() {
    return this.gos.get("rowBuffer");
  }
  getRowBufferInPixels() {
    const e = this.getRowBuffer(), t = Ai(this.beans);
    return e * t;
  }
  workOutFirstAndLastRowsToRender() {
    const { rowContainerHeight: e, pageBounds: t, rowModel: i } = this;
    e.updateOffset();
    let s, o;
    if (!i.isRowsToRender())
      s = 0, o = -1;
    else if (this.printLayout)
      this.beans.environment.refreshRowHeightVariable(), s = t.getFirstRow(), o = t.getLastRow();
    else {
      const d = this.getRowBufferInPixels(), u = this.ctrlsSvc.getScrollFeature(), h = this.gos.get("suppressRowVirtualisation");
      let g = !1, p, f;
      do {
        const y = t.getPixelOffset(), { pageFirstPixel: S, pageLastPixel: x } = t.getCurrentPagePixelRange(), D = e.divStretchOffset, M = u.getVScrollPosition(), k = M.top, P = M.bottom;
        h ? (p = S + D, f = x + D) : (p = Math.max(k + y - d, S) + D, f = Math.min(P + y + d, x) + D), this.firstVisibleVPixel = Math.max(k + y, S) + D, this.lastVisibleVPixel = Math.min(P + y, x) + D, g = this.ensureAllRowsInRangeHaveHeightsCalculated(p, f);
      } while (g);
      let m = i.getRowIndexAtPixel(p), C = i.getRowIndexAtPixel(f);
      const v = t.getFirstRow(), w = t.getLastRow();
      m < v && (m = v), C > w && (C = w), s = m, o = C;
    }
    const n = ze(this.gos, "normal"), r = this.gos.get("suppressMaxRenderedRowRestriction"), a = Math.max(this.getRowBuffer(), 500);
    n && !r && o - s > a && (o = s + a);
    const l = s !== this.firstRenderedRow, c = o !== this.lastRenderedRow;
    (l || c) && (this.firstRenderedRow = s, this.lastRenderedRow = o, this.eventSvc.dispatchEvent({
      type: "viewportChanged",
      firstRow: s,
      lastRow: o
    }));
  }
  /**
   * This event will only be fired once, and is queued until after the browser next renders.
   * This allows us to fire an event during the start of the render cycle, when we first see data being rendered
   * but not execute the event until all of the data has finished being rendered to the dom.
   */
  dispatchFirstDataRenderedEvent() {
    this.dataFirstRenderedFired || (this.dataFirstRenderedFired = !0, Jt(this.beans, () => {
      this.beans.eventSvc.dispatchEvent({
        type: "firstDataRendered",
        firstRow: this.firstRenderedRow,
        lastRow: this.lastRenderedRow
      });
    }));
  }
  ensureAllRowsInRangeHaveHeightsCalculated(e, t) {
    const i = this.pinnedRowModel?.ensureRowHeightsValid(), s = this.stickyRowFeature?.ensureRowHeightsValid(), { pageBounds: o, rowModel: n } = this, r = n.ensureRowHeightsValid(
      e,
      t,
      o.getFirstRow(),
      o.getLastRow()
    );
    return (r || s) && this.eventSvc.dispatchEvent({
      type: "recalculateRowBounds"
    }), s || r || i ? (this.updateContainerHeights(), !0) : !1;
  }
  // check that none of the rows to remove are editing or focused as:
  // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,
  //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered
  //    the edit is reset - so we want to keep it rendered.
  // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,
  //    otherwise the user can range select and drag (with focus cell going out of the viewport)
  //    and then ctrl+c, nothing will happen if cell is removed from dom.
  // c) if detail record of master detail, as users complained that the context of detail rows
  //    was getting lost when detail row out of view. eg user expands to show detail row,
  //    then manipulates the detail panel (eg sorts the detail grid), then context is lost
  //    after detail panel is scrolled out of / into view.
  doNotUnVirtualiseRow(e) {
    const s = e.rowNode, o = this.focusSvc.isRowFocused(s.rowIndex, s.rowPinned), n = this.editSvc?.isEditing(e), r = s.detail;
    return o || n || r ? !!this.isRowPresent(s) : !1;
  }
  isRowPresent(e) {
    return this.rowModel.isRowPresent(e) ? this.beans.pagination?.isRowInPage(e.rowIndex) ?? !0 : !1;
  }
  createRowCon(e, t, i) {
    const s = this.cachedRowCtrls?.getRow(e) ?? null;
    if (s)
      return s;
    const o = i && !this.printLayout && !!this.beans.animationFrameSvc?.active;
    return new tr(e, this.beans, t, o, this.printLayout);
  }
  getRenderedNodes() {
    const e = Object.values(this.rowCtrlsByRowIndex).map((s) => s.rowNode), t = this.getStickyTopRowCtrls().map((s) => s.rowNode), i = this.getStickyBottomRowCtrls().map((s) => s.rowNode);
    return [...t, ...e, ...i];
  }
  getRowByPosition(e) {
    let t;
    const { rowIndex: i } = e;
    switch (e.rowPinned) {
      case "top":
        t = this.topRowCtrls[i];
        break;
      case "bottom":
        t = this.bottomRowCtrls[i];
        break;
      default:
        t = this.rowCtrlsByRowIndex[i], t || (t = this.getStickyTopRowCtrls().find((s) => s.rowNode.rowIndex === i) || null, t || (t = this.getStickyBottomRowCtrls().find((s) => s.rowNode.rowIndex === i) || null));
        break;
    }
    return t;
  }
  // returns true if any row between startIndex and endIndex is rendered. used by
  // SSRM or IRM, as they don't want to purge visible blocks from cache.
  isRangeInRenderedViewport(e, t) {
    if (e == null || t == null)
      return !1;
    const s = e > this.lastRenderedRow;
    return !(t < this.firstRenderedRow) && !s;
  }
}, CI = class {
  constructor(e) {
    this.entriesMap = {}, this.entriesList = [], this.maxCount = e;
  }
  addRow(e) {
    if (this.entriesMap[e.rowNode.id] = e, this.entriesList.push(e), e.setCached(!0), this.entriesList.length > this.maxCount) {
      const t = this.entriesList[0];
      t.destroyFirstPass(), t.destroySecondPass(), this.removeFromCache(t);
    }
  }
  getRow(e) {
    if (e == null || e.id == null)
      return null;
    const t = this.entriesMap[e.id];
    return t ? (this.removeFromCache(t), t.setCached(!1), t.rowNode != e ? null : t) : null;
  }
  has(e) {
    return this.entriesMap[e.id] != null;
  }
  removeRow(e) {
    const t = e.id, i = this.entriesMap[t];
    delete this.entriesMap[t], St(this.entriesList, i);
  }
  removeFromCache(e) {
    const t = e.rowNode.id;
    delete this.entriesMap[t], St(this.entriesList, e);
  }
  getEntries() {
    return this.entriesList;
  }
};
function gl(e) {
  if (!e)
    return;
  const t = {
    top: {},
    bottom: {},
    normal: {}
  };
  return e.forEach((i) => {
    const s = i.id;
    switch (i.rowPinned) {
      case "top":
        t.top[s] = i;
        break;
      case "bottom":
        t.bottom[s] = i;
        break;
      default:
        t.normal[s] = i;
        break;
    }
  }), t;
}
function pl(e, t) {
  const i = e.id;
  switch (e.rowPinned) {
    case "top":
      return t.top[i] != null;
    case "bottom":
      return t.bottom[i] != null;
    default:
      return t.normal[i] != null;
  }
}
var vI = class extends T {
  constructor() {
    super(...arguments), this.beanName = "rowNodeSorter";
  }
  postConstruct() {
    const { gos: e } = this;
    this.isAccentedSort = e.get("accentedSort"), this.primaryColumnsSortGroups = Mt(e), this.addManagedPropertyListener(
      "accentedSort",
      (t) => this.isAccentedSort = t.currentValue
    ), this.addManagedPropertyListener(
      "autoGroupColumnDef",
      () => this.primaryColumnsSortGroups = Mt(e)
    );
  }
  doFullSort(e, t) {
    const i = e.map((s, o) => ({
      currentPos: o,
      rowNode: s
    }));
    return i.sort(this.compareRowNodes.bind(this, t)), i.map((s) => s.rowNode);
  }
  compareRowNodes(e, t, i) {
    const s = t.rowNode, o = i.rowNode;
    for (let n = 0, r = e.length; n < r; n++) {
      const a = e[n], l = a.sort === "desc", c = this.getValue(s, a.column), d = this.getValue(o, a.column);
      let u;
      const h = this.getComparator(a, s);
      if (h ? u = h(c, d, s, o, l) : u = yR(c, d, this.isAccentedSort), !isNaN(u) && u !== 0)
        return a.sort === "asc" ? u : u * -1;
    }
    return t.currentPos - i.currentPos;
  }
  getComparator(e, t) {
    const i = e.column, s = i.getColDef().comparator;
    if (s != null)
      return s;
    if (!i.getColDef().showRowGroup)
      return;
    const o = !t.group && i.getColDef().field;
    if (!o)
      return;
    const n = this.beans.colModel.getColDefCol(o);
    if (n)
      return n.getColDef().comparator;
  }
  getValue(e, t) {
    const { valueSvc: i, colModel: s, showRowGroupCols: o, gos: n } = this.beans;
    if (!this.primaryColumnsSortGroups)
      return i.getValue(t, e, !1);
    if (e.rowGroupColumn === t) {
      if (df(n, s.isPivotActive())) {
        const c = e.allLeafChildren?.[0];
        return c ? i.getValue(t, c, !1) : void 0;
      }
      const l = o?.getShowRowGroupCol(t.getId());
      return l ? e.groupData?.[l.getId()] : void 0;
    }
    if (!(e.group && t.getColDef().showRowGroup))
      return i.getValue(t, e, !1);
  }
};
function wI(e) {
  e.sortSvc?.onSortChanged("api");
}
var Qm = {
  moduleName: "Sort",
  version: Y,
  beans: [dA, vI],
  apiFunctions: {
    onSortChanged: wI
  },
  userComponents: {
    agSortIndicator: Vc
  },
  icons: {
    // show on column header when column is sorted ascending
    sortAscending: "asc",
    // show on column header when column is sorted descending
    sortDescending: "desc",
    // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true
    sortUnSort: "none"
  }
}, SI = class extends T {
  constructor() {
    super(...arguments), this.beanName = "syncSvc", this.waitingForColumns = !1;
  }
  postConstruct() {
    this.addManagedPropertyListener("columnDefs", (e) => this.setColumnDefs(e));
  }
  start() {
    this.beans.ctrlsSvc.whenReady(this, () => {
      const e = this.gos.get("columnDefs");
      e ? this.setColumnsAndData(e) : this.waitingForColumns = !0, this.gridReady();
    });
  }
  setColumnsAndData(e) {
    const { colModel: t, rowModel: i } = this.beans;
    t.setColumnDefs(e ?? [], "gridInitializing"), i.start();
  }
  gridReady() {
    const { eventSvc: e, gos: t } = this;
    e.dispatchEvent({
      type: "gridReady"
    }), Gi(t, `initialised successfully, enterprise = ${t.isModuleRegistered("EnterpriseCore")}`);
  }
  setColumnDefs(e) {
    const t = this.gos.get("columnDefs");
    if (t) {
      if (this.waitingForColumns) {
        this.waitingForColumns = !1, this.setColumnsAndData(t);
        return;
      }
      this.beans.colModel.setColumnDefs(t, ps(e.source));
    }
  }
};
function yI(e) {
  e.valueCache?.expire();
}
function bI(e, t) {
  const { colKey: i, rowNode: s, useFormatter: o } = t, n = e.colModel.getColDefCol(i) ?? e.colModel.getCol(i);
  if (Ce(n))
    return null;
  const r = e.valueSvc.getValueForDisplay(n, s, o);
  return o ? r.valueFormatted ?? Ls(r.value) : r.value;
}
var RI = "paste", xI = class extends T {
  constructor() {
    super(...arguments), this.beanName = "changeDetectionSvc", this.clientSideRowModel = null;
  }
  postConstruct() {
    const { gos: e, rowModel: t } = this.beans;
    Oe(e) && (this.clientSideRowModel = t), this.addManagedEventListeners({ cellValueChanged: this.onCellValueChanged.bind(this) });
  }
  onCellValueChanged(e) {
    const { gos: t, rowRenderer: i } = this.beans;
    if (e.source === RI || t.get("suppressChangeDetection"))
      return;
    const s = e.node, o = [s], n = this.clientSideRowModel, r = n?.rootNode;
    if (r && !s.isRowPinned()) {
      const a = t.get("aggregateOnlyChangedColumns"), l = new Po(a, r);
      l.addParentNode(s.parent, [e.column]), n.doAggregate(l), l.forEachChangedNodeDepthFirst((c) => {
        o.push(c), c.sibling && o.push(c.sibling);
      });
    }
    i.refreshCells({ rowNodes: o });
  }
}, FI = class extends T {
  constructor() {
    super(...arguments), this.beanName = "expressionSvc", this.cache = {};
  }
  evaluate(e, t) {
    if (typeof e == "string")
      return this.evaluateExpression(e, t);
    he(15, { expression: e });
  }
  evaluateExpression(e, t) {
    try {
      return this.createExpressionFunction(e)(
        t.value,
        t.context,
        t.oldValue,
        t.newValue,
        t.value,
        t.node,
        t.data,
        t.colDef,
        t.rowIndex,
        t.api,
        t.getValue,
        t.column,
        t.columnGroup
      );
    } catch (i) {
      return he(16, { expression: e, params: t, e: i }), null;
    }
  }
  createExpressionFunction(e) {
    const t = this.cache;
    if (t[e])
      return t[e];
    const i = this.createFunctionBody(e), s = new Function(
      "x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, getValue, column, columnGroup",
      i
    );
    return t[e] = s, s;
  }
  createFunctionBody(e) {
    return e.indexOf("return") >= 0 ? e : "return " + e + ";";
  }
}, PI = class extends T {
  constructor() {
    super(...arguments), this.beanName = "valueCache", this.cacheVersion = 0;
  }
  postConstruct() {
    const e = this.gos;
    this.active = e.get("valueCache"), this.neverExpires = e.get("valueCacheNeverExpires");
  }
  onDataChanged() {
    this.neverExpires || this.expire();
  }
  expire() {
    this.cacheVersion++;
  }
  setValue(e, t, i) {
    if (this.active) {
      const s = this.cacheVersion;
      e.__cacheVersion !== s && (e.__cacheVersion = s, e.__cacheData = {}), e.__cacheData[t] = i;
    }
  }
  getValue(e, t) {
    if (!(!this.active || e.__cacheVersion !== this.cacheVersion))
      return e.__cacheData[t];
  }
}, EI = {
  moduleName: "ValueCache",
  version: Y,
  beans: [PI],
  apiFunctions: {
    expireValueCache: yI
  }
}, DI = {
  moduleName: "Expression",
  version: Y,
  beans: [FI]
}, TI = {
  moduleName: "ChangeDetection",
  version: Y,
  beans: [xI]
}, MI = {
  moduleName: "CellApi",
  version: Y,
  apiFunctions: {
    getCellValue: bI
  }
}, tn = { checkSiblings: !0 }, AI = class extends T {
  constructor() {
    super(...arguments), this.beanName = "valueSvc", this.hasEdit = !1, this.initialised = !1, this.isSsrm = !1;
  }
  wireBeans(e) {
    this.expressionSvc = e.expressionSvc, this.colModel = e.colModel, this.valueCache = e.valueCache, this.dataTypeSvc = e.dataTypeSvc, this.editSvc = e.editSvc, this.hasEdit = !!e.editSvc;
  }
  postConstruct() {
    this.initialised || this.init();
  }
  init() {
    this.executeValueGetter = this.valueCache ? this.executeValueGetterWithValueCache.bind(this) : this.executeValueGetterWithoutValueCache.bind(this), this.isSsrm = $i(this.gos), this.cellExpressions = this.gos.get("enableCellExpressions"), this.isTreeData = this.gos.get("treeData"), this.initialised = !0;
    const e = (t) => this.callColumnCellValueChangedHandler(t);
    this.eventSvc.addEventListener("cellValueChanged", e, !0), this.addDestroyFunc(() => this.eventSvc.removeEventListener("cellValueChanged", e, !0)), this.addManagedPropertyListener("treeData", (t) => this.isTreeData = t.currentValue);
  }
  /**
   * Use this function to get a displayable cell value.
   * The values from this function are not used for sorting, filtering, or aggregation purposes.
   * Handles: groupHideOpenParents, showOpenedGroup and groupSuppressBlankHeader behaviours
   */
  getValueForDisplay(e, t, i = !1, s = !1, o = "ui") {
    const { showRowGroupColValueSvc: n } = this.beans, r = !e && t.group, a = e?.colDef.showRowGroup, l = !this.isTreeData || t.footer;
    if (n && l && (r || a)) {
      const f = n.getGroupValue(t, e);
      if (f == null)
        return {
          value: null,
          valueFormatted: null
        };
      if (!i)
        return {
          value: f.value,
          valueFormatted: null
        };
      const m = n.formatAndPrefixGroupColValue(f, e, s);
      return {
        value: f.value,
        valueFormatted: m
      };
    }
    if (!e)
      return {
        value: t.key,
        valueFormatted: null
      };
    const c = t.leafGroup && this.colModel.isPivotMode(), d = t.group && t.expanded && !t.footer && !c, u = this.gos.get("groupSuppressBlankHeader") || !t.sibling, h = d && !u, g = this.getValue(e, t, h, o), p = i && !(s && e.colDef.useValueFormatterForExport === !1);
    return {
      value: g,
      valueFormatted: p ? this.formatValue(e, t, g) : null
    };
  }
  getValue(e, t, i = !1, s = "ui") {
    if (this.initialised || this.init(), !t)
      return;
    const o = e.getColDef(), n = o.field, r = e.getColId();
    let a = t.data;
    if (this.hasEdit && s === "ui") {
      const f = this.editSvc;
      if (f.isRowEditing(t, tn) && (a = f.getRowDataValue(t, tn)), f.isEditing()) {
        const m = f.getCellDataValue({ rowNode: t, column: e }, !0);
        if (m !== void 0)
          return m;
      }
    }
    let l;
    const c = o.showRowGroup;
    if (typeof c == "string" && (this.beans.rowGroupColsSvc?.getColumnIndex(c) ?? -1) > t.level)
      return null;
    const d = typeof c != "string" || !t.group, u = t.groupData && r in t.groupData, h = !i && t.aggData && t.aggData[r] !== void 0, g = this.isSsrm && i && !!o.aggFunc, p = this.isSsrm && t.footer && t.field && (o.showRowGroup === !0 || o.showRowGroup === t.field);
    if (this.isTreeData && h)
      l = t.aggData[r];
    else if (this.isTreeData && o.valueGetter)
      l = this.executeValueGetter(o.valueGetter, a, e, t);
    else if (this.isTreeData && n && a)
      l = eo(a, n, e.isFieldContainsDots());
    else if (u)
      l = t.groupData[r];
    else if (h)
      l = t.aggData[r];
    else if (o.valueGetter && !g) {
      if (!d)
        return l;
      l = this.executeValueGetter(o.valueGetter, a, e, t);
    } else if (p)
      l = eo(a, t.field, e.isFieldContainsDots());
    else if (n && a && !g) {
      if (!d)
        return l;
      l = eo(a, n, e.isFieldContainsDots());
    }
    if (this.cellExpressions && typeof l == "string" && l.indexOf("=") === 0) {
      const f = l.substring(1);
      l = this.executeValueGetter(f, a, e, t);
    }
    return l;
  }
  parseValue(e, t, i, s) {
    const o = e.getColDef(), n = o.valueParser;
    if ($(n)) {
      const r = Z(this.gos, {
        node: t,
        data: t?.data,
        oldValue: s,
        newValue: i,
        colDef: o,
        column: e
      });
      return typeof n == "function" ? n(r) : this.expressionSvc?.evaluate(n, r);
    }
    return i;
  }
  getDeleteValue(e, t) {
    return $(e.getColDef().valueParser) ? this.parseValue(e, t, "", this.getValueForDisplay(e, t).value) ?? null : null;
  }
  formatValue(e, t, i, s, o = !0) {
    const { expressionSvc: n } = this.beans;
    let r = null, a;
    const l = e.getColDef();
    if (s ? a = s : o && (a = l.valueFormatter), a) {
      let c = t ? t.data : null;
      if (t) {
        const u = { rowNode: t };
        if (this.hasEdit) {
          const h = this.editSvc;
          h.isEditing(u, tn) && (c = h.getRowDataValue(t, tn));
        }
      }
      const d = Z(this.gos, {
        value: i,
        node: t,
        data: c,
        colDef: l,
        column: e
      });
      typeof a == "function" ? r = a(d) : r = n ? n.evaluate(a, d) : null;
    } else if (l.refData)
      return l.refData[i] || "";
    return r == null && Array.isArray(i) && (r = i.join(", ")), r;
  }
  /**
   * Sets the value of a GridCell
   * @param rowNode The `RowNode` to be updated
   * @param colKey The `Column` to be updated
   * @param newValue The new value to be set
   * @param eventSource The event source
   * @returns `True` if the value has been updated, otherwise`False`.
   */
  setValue(e, t, i, s) {
    const o = this.colModel.getColDefCol(t);
    if (!e || !o)
      return !1;
    Ce(e.data) && (e.data = {});
    const { field: n, valueSetter: r } = o.getColDef();
    if (Ce(n) && Ce(r))
      return B(17), !1;
    if (this.dataTypeSvc && !this.dataTypeSvc.checkType(o, i))
      return B(135), !1;
    const a = Z(this.gos, {
      node: e,
      data: e.data,
      oldValue: this.getValue(o, e, void 0, s),
      newValue: i,
      colDef: o.getColDef(),
      column: o
    });
    a.newValue = i;
    let l;
    if ($(r) ? typeof r == "function" ? l = r(a) : l = this.expressionSvc?.evaluate(r, a) : l = this.setValueUsingField(e.data, n, i, o.isFieldContainsDots()), l === void 0 && (l = !0), !l)
      return !1;
    e.resetQuickFilterAggregateText(), this.valueCache?.onDataChanged();
    const c = this.getValue(o, e);
    return this.dispatchCellValueChangedEvent(e, a, c, s), e.pinnedSibling && this.dispatchCellValueChangedEvent(e.pinnedSibling, a, c, s), !0;
  }
  dispatchCellValueChangedEvent(e, t, i, s) {
    this.eventSvc.dispatchEvent({
      type: "cellValueChanged",
      event: null,
      rowIndex: e.rowIndex,
      rowPinned: e.rowPinned,
      column: t.column,
      colDef: t.colDef,
      data: e.data,
      node: e,
      oldValue: t.oldValue,
      newValue: i,
      value: i,
      source: s
    });
  }
  callColumnCellValueChangedHandler(e) {
    const t = e.colDef.onCellValueChanged;
    typeof t == "function" && this.beans.frameworkOverrides.wrapOutgoing(() => {
      t({
        node: e.node,
        data: e.data,
        oldValue: e.oldValue,
        newValue: e.newValue,
        colDef: e.colDef,
        column: e.column,
        api: e.api,
        context: e.context
      });
    });
  }
  setValueUsingField(e, t, i, s) {
    if (!t)
      return !1;
    let o = !1;
    if (!s)
      o = e[t] === i, o || (e[t] = i);
    else {
      const n = t.split(".");
      let r = e;
      for (; n.length > 0 && r; ) {
        const a = n.shift();
        n.length === 0 ? (o = r[a] === i, o || (r[a] = i)) : r = r[a];
      }
    }
    return !o;
  }
  executeValueGetterWithValueCache(e, t, i, s) {
    const o = i.getColId(), n = this.valueCache.getValue(s, o);
    if (n !== void 0)
      return n;
    const r = this.executeValueGetterWithoutValueCache(e, t, i, s);
    return this.valueCache.setValue(s, o, r), r;
  }
  executeValueGetterWithoutValueCache(e, t, i, s) {
    const o = Z(this.gos, {
      data: t,
      node: s,
      column: i,
      colDef: i.getColDef(),
      getValue: this.getValueCallback.bind(this, s)
    });
    let n;
    return typeof e == "function" ? n = e(o) : n = this.expressionSvc?.evaluate(e, o), n;
  }
  getValueCallback(e, t) {
    const i = this.colModel.getColDefCol(t);
    return i ? this.getValue(i, e) : null;
  }
  // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col
  getKeyForNode(e, t) {
    const i = this.getValue(e, t), s = e.getColDef().keyCreator;
    let o = i;
    if (s) {
      const n = Z(this.gos, {
        value: i,
        colDef: e.getColDef(),
        column: e,
        node: t,
        data: t.data
      });
      o = s(n);
    }
    return typeof o == "string" || o == null || (o = String(o), o === "[object Object]" && B(121)), o;
  }
}, II = {
  moduleName: "CommunityCore",
  version: Y,
  beans: [
    rA,
    H0,
    _T,
    Xx,
    pI,
    tT,
    eA,
    MA,
    Kx,
    JA,
    QA,
    mI,
    AI,
    oA,
    JM,
    nA,
    jT,
    SI,
    HT,
    BT
  ],
  icons: {
    // icon on select dropdowns (select cell editor, charts tool panels)
    selectOpen: "small-down",
    /** @deprecated v33 */
    smallDown: "small-down",
    /** @deprecated v33 */
    colorPicker: "color-picker",
    /** @deprecated v33 */
    smallUp: "small-up",
    /** @deprecated v33 */
    checkboxChecked: "small-up",
    /** @deprecated v33 */
    checkboxIndeterminate: "checkbox-indeterminate",
    /** @deprecated v33 */
    checkboxUnchecked: "checkbox-unchecked",
    /** @deprecated v33 */
    radioButtonOn: "radio-button-on",
    /** @deprecated v33 */
    radioButtonOff: "radio-button-off",
    /** @deprecated v33 */
    smallLeft: "small-left",
    /** @deprecated v33 */
    smallRight: "small-right"
  },
  apiFunctions: {
    getGridId: B0,
    destroy: N0,
    isDestroyed: W0,
    getGridOption: z0,
    setGridOption: _0,
    updateGridOptions: xm,
    isModuleRegistered: U0
  },
  dependsOn: [
    OT,
    kD,
    ND,
    Qm,
    GA,
    sT,
    HA,
    gI,
    TI,
    NA,
    ZA,
    sI,
    nI,
    zA,
    zT,
    VT,
    DI,
    aT
  ]
};
function fl(e) {
  const { inputValue: t, allSuggestions: i, hideIrrelevant: s, filterByPercentageOfBestMatch: o } = e;
  let n = (i ?? []).map(
    (l, c) => ({
      value: l,
      relevance: kI(t, l),
      idx: c
    })
  );
  if (n.sort((l, c) => l.relevance - c.relevance), s && (n = n.filter(
    (l) => l.relevance < Math.max(l.value.length, t.length)
  )), n.length > 0 && o && o > 0) {
    const c = n[0].relevance * o;
    n = n.filter((d) => c - d.relevance < 0);
  }
  const r = [], a = [];
  for (const l of n)
    r.push(l.value), a.push(l.idx);
  return { values: r, indices: a };
}
function kI(e, t) {
  e.length < t.length && ([e, t] = [t, e]);
  let i = [], s = [];
  const o = e.length, n = t.length;
  for (let a = 0; a <= n; a++)
    i[a] = a;
  let r = 0;
  for (let a = 1; a <= o; a++) {
    s[0] = a;
    for (let l = 1; l <= n; l++) {
      const c = e[a - 1], d = t[l - 1];
      if (c.toLocaleLowerCase() === d.toLocaleLowerCase())
        ++r, c === d && ++r, a > 1 && l > 1 && e[a - 2].toLocaleLowerCase() === t[l - 2].toLocaleLowerCase() && (++r, e[a - 2] === t[l - 2] && ++r), a < o / 2 - 10 && ++r, s[l] = i[l - 1];
      else {
        const u = s[l - 1], h = i[l], g = i[l - 1];
        s[l] = 1 + Math.min(u, h, g);
      }
    }
    [i, s] = [s, i];
  }
  return i[n] / (r + 1);
}
var Jm = {
  AdvancedFilter: 1,
  AllEnterprise: 1,
  BatchEdit: 1,
  CellSelection: 1,
  Clipboard: 1,
  ColumnMenu: 1,
  ColumnsToolPanel: 1,
  ContextMenu: 1,
  ExcelExport: 1,
  FiltersToolPanel: 1,
  Find: 1,
  GridCharts: 1,
  IntegratedCharts: 1,
  GroupFilter: 1,
  MasterDetail: 1,
  Menu: 1,
  MultiFilter: 1,
  NewFiltersToolPanel: 1,
  Pivot: 1,
  RangeSelection: 1,
  RichSelect: 1,
  RowNumbers: 1,
  RowGrouping: 1,
  RowGroupingPanel: 1,
  ServerSideRowModelApi: 1,
  ServerSideRowModel: 1,
  SetFilter: 1,
  SideBar: 1,
  Sparklines: 1,
  StatusBar: 1,
  TreeData: 1,
  ViewportRowModel: 1
}, la = [
  "TextFilter",
  "NumberFilter",
  "DateFilter",
  "SetFilter",
  "MultiFilter",
  "GroupFilter",
  "CustomFilter"
], LI = {
  EditCore: [
    "TextEditor",
    "NumberEditor",
    "DateEditor",
    "CheckboxEditor",
    "LargeTextEditor",
    "SelectEditor",
    "RichSelect",
    "CustomEditor"
  ],
  CheckboxCellRenderer: ["AllCommunity"],
  ClientSideRowModelHierarchy: ["RowGrouping", "Pivot", "TreeData"],
  ColumnFilter: la,
  ColumnGroupHeaderComp: ["AllCommunity"],
  ColumnGroup: ["AllCommunity"],
  ColumnHeaderComp: ["AllCommunity"],
  ColumnMove: ["AllCommunity"],
  ColumnResize: ["AllCommunity"],
  CommunityCore: ["AllCommunity"],
  CsrmSsrmSharedApi: ["ClientSideRowModelApi", "ServerSideRowModelApi"],
  EnterpriseCore: ["AllEnterprise"],
  FilterCore: [...la, "QuickFilter", "ExternalFilter", "AdvancedFilter"],
  GroupCellRenderer: ["RowGrouping", "Pivot", "TreeData", "MasterDetail", "ServerSideRowModel"],
  KeyboardNavigation: ["AllCommunity"],
  LoadingCellRenderer: ["ServerSideRowModel"],
  MenuCore: ["ColumnMenu", "ContextMenu"],
  MenuItem: ["ColumnMenu", "ContextMenu", "MultiFilter", "IntegratedCharts", "ColumnsToolPanel"],
  Overlay: ["AllCommunity"],
  PinnedColumn: ["AllCommunity"],
  SharedAggregation: ["RowGrouping", "Pivot", "TreeData", "ServerSideRowModel"],
  SharedDragAndDrop: ["AllCommunity"],
  SharedMasterDetail: ["MasterDetail", "ServerSideRowModel"],
  SharedMenu: [...la, "ColumnMenu", "ContextMenu"],
  SharedPivot: ["Pivot", "ServerSideRowModel"],
  SharedRowGrouping: ["RowGrouping", "ServerSideRowModel"],
  SharedRowSelection: ["RowSelection", "ServerSideRowModel"],
  SkeletonCellRenderer: ["ServerSideRowModel"],
  Sort: ["AllCommunity"],
  SsrmInfiniteSharedApi: ["InfiniteRowModel", "ServerSideRowModelApi"],
  SharedTreeData: ["TreeData", "ServerSideRowModel"]
}, OI = {
  InfiniteRowModel: "infinite",
  ClientSideRowModelApi: "clientSide",
  ClientSideRowModel: "clientSide",
  ServerSideRowModelApi: "serverSide",
  ServerSideRowModel: "serverSide",
  ViewportRowModel: "viewport"
};
function VI(e, t) {
  const i = [];
  return (Array.isArray(e) ? e : [e]).forEach((s) => {
    const o = LI[s];
    o ? o.forEach((n) => {
      const r = OI[n];
      (!r || r === t) && i.push(n);
    }) : i.push(s);
  }), i;
}
var eC = () => `No AG Grid modules are registered! It is recommended to start with all Community features via the AllCommunityModule:
                    
    import { ModuleRegistry, AllCommunityModule } from 'ag-grid-community';
    
    ModuleRegistry.registerModules([ AllCommunityModule ]);
    `, GI = (e) => {
  const t = e.map(
    (s) => `import { ${no(s)} } from '${Jm[s] ? "ag-grid-enterprise" : "ag-grid-community"}';`
  );
  return e.some((s) => s === "IntegratedCharts" || s === "Sparklines") && t.push("import { AgChartsEnterpriseModule } from 'ag-charts-enterprise';"), `import { ModuleRegistry } from 'ag-grid-community'; 
${t.join(` 
`)} 

ModuleRegistry.registerModules([ ${e.map((s) => no(s, !0)).join(", ")} ]); 

For more info see: ${us}/modules/`;
};
function no(e, t = !1) {
  return t && (e === "IntegratedCharts" || e === "Sparklines") ? `${e}Module.with(AgChartsEnterpriseModule)` : `${e}Module`;
}
function HI(e, t) {
  const i = t.filter((n) => n === "IntegratedCharts" || n === "Sparklines");
  let s = "";
  return !globalThis?.agCharts && i.length > 0 ? s = `Unable to use ${e} as either the ag-charts-community or ag-charts-enterprise script needs to be included alongside ag-grid-enterprise.
` : t.some((n) => Jm[n]) && (s = s + `Unable to use ${e} as that requires the ag-grid-enterprise script to be included.
`), s;
}
function tC({
  moduleName: e,
  rowModelType: t
}) {
  return `To use the ${e}Module you must set the gridOption "rowModelType='${t}'"`;
}
var dh = ({
  reasonOrId: e,
  moduleName: t,
  gridScoped: i,
  gridId: s,
  rowModelType: o,
  additionalText: n,
  isUmd: r
}) => {
  const a = VI(t, o), l = typeof e == "string" ? e : zI[e];
  if (r)
    return HI(l, a);
  const c = a.filter((h) => h === "IntegratedCharts" || h === "Sparklines"), d = c.length > 0 ? `${c.map((h) => no(h)).join()} must be initialised with an AG Charts module. One of 'AgChartsCommunityModule' / 'AgChartsEnterpriseModule'.` : "";
  return `${`Unable to use ${l} as ${a.length > 1 ? "one of " + a.map((h) => no(h)).join(", ") : no(a[0])} is not registered${i ? " for gridId: " + s : ""}. ${d} Check if you have registered the module:
`}
${GI(a)}` + (n ? ` 

${n}` : "");
}, uh = (e) => `${e} must be initialised with an AG Charts module. One of 'AgChartsCommunityModule' / 'AgChartsEnterpriseModule'.

import { AgChartsEnterpriseModule } from 'ag-charts-enterprise';
import { ModuleRegistry } from 'ag-grid-community';
import { ${e} } from 'ag-grid-enterprise';
    
ModuleRegistry.registerModules([${e}.with(AgChartsEnterpriseModule)]);
    `, BI = (e) => `AG Grid: Unable to use the Clipboard API (navigator.clipboard.${e}()). The reason why it could not be used has been logged in the previous line. For this reason the grid has defaulted to using a workaround which doesn't perform as well. Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API.`, NI = {
  1: () => "`rowData` must be an array",
  2: ({ nodeId: e }) => `Duplicate node id '${e}' detected from getRowId callback, this could cause issues in your grid.`,
  3: () => "Calling gridApi.resetRowHeights() makes no sense when using Auto Row Height.",
  4: ({ id: e }) => `Could not find row id=${e}, data item was not found for this id`,
  5: ({ data: e }) => [
    "Could not find data item as object was not found.",
    e,
    " Consider using getRowId to help the Grid find matching row data"
  ],
  6: () => "'groupHideOpenParents' only works when specifying specific columns for 'colDef.showRowGroup'",
  7: () => "Pivoting is not supported with aligned grids as it may produce different columns in each grid.",
  8: ({ key: e }) => `Unknown key for navigation ${e}`,
  9: ({ variable: e }) => `No value for ${e?.cssName}. This usually means that the grid has been initialised before styles have been loaded. The default value of ${e?.defaultValue} will be used and updated when styles load.`,
  10: ({ eventType: e }) => `As of v33, the '${e}' event is deprecated. Use the global 'modelUpdated' event to determine when row children have changed.`,
  11: () => "No gridOptions provided to createGrid",
  12: ({ colKey: e }) => ["column ", e, " not found"],
  13: () => "Could not find rowIndex, this means tasks are being executed on a rowNode that has been removed from the grid.",
  14: ({ groupPrefix: e }) => `Row IDs cannot start with ${e}, this is a reserved prefix for AG Grid's row grouping feature.`,
  15: ({ expression: e }) => ["value should be either a string or a function", e],
  16: ({ expression: e, params: t, e: i }) => [
    "Processing of the expression failed",
    "Expression = ",
    e,
    "Params = ",
    t,
    "Exception = ",
    i
  ],
  17: () => "you need either field or valueSetter set on colDef for editing to work",
  18: () => "alignedGrids contains an undefined option.",
  19: () => "alignedGrids - No api found on the linked grid.",
  20: () => `You may want to configure via a callback to avoid setup race conditions:
                     "alignedGrids: () => [linkedGrid]"`,
  21: () => "pivoting is not supported with aligned grids. You can only use one of these features at a time in a grid.",
  22: ({ key: e }) => `${e} is an initial property and cannot be updated.`,
  23: () => "The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.",
  24: () => "row height must be a number if not using standard row model",
  25: ({ id: e }) => ["The getRowId callback must return a string. The ID ", e, " is being cast to a string."],
  26: ({ fnName: e, preDestroyLink: t }) => `Grid API function ${e}() cannot be called as the grid has been destroyed.
 Either clear local references to the grid api, when it is destroyed, or check gridApi.isDestroyed() to avoid calling methods against a destroyed grid.
 To run logic when the grid is about to be destroyed use the gridPreDestroy event. See: ${t}`,
  27: ({ fnName: e, module: t }) => `API function '${e}' not registered to module '${t}'`,
  28: () => "setRowCount cannot be used while using row grouping.",
  29: () => "tried to call sizeColumnsToFit() but the grid is coming back with zero width, maybe the grid is not visible yet on the screen?",
  30: ({ toIndex: e }) => [
    "tried to insert columns in invalid location, toIndex = ",
    e,
    "remember that you should not count the moving columns when calculating the new index"
  ],
  31: () => "infinite loop in resizeColumnSets",
  32: () => "applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.",
  33: () => "stateItem.aggFunc must be a string. if using your own aggregation functions, register the functions first before using them in get/set state. This is because it is intended for the column state to be stored and retrieved as simple JSON.",
  34: ({ key: e }) => `the column type '${e}' is a default column type and cannot be overridden.`,
  35: () => "Column type definitions 'columnTypes' with a 'type' attribute are not supported because a column type cannot refer to another column type. Only column definitions 'columnDefs' can use the 'type' attribute to refer to a column type.",
  36: ({ t: e }) => "colDef.type '" + e + "' does not correspond to defined gridOptions.columnTypes",
  37: () => "Changing the column pinning status is not allowed with domLayout='print'",
  38: ({ iconName: e }) => `provided icon '${e}' needs to be a string or a function`,
  39: () => "Applying column order broke a group where columns should be married together. Applying new order has been discarded.",
  40: ({ e, method: t }) => `${e}
${BI(t)}`,
  41: () => "Browser did not allow document.execCommand('copy'). Ensure 'api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise the browser will prevent it for security reasons.",
  42: () => "Browser does not support document.execCommand('copy') for clipboard operations",
  43: ({ iconName: e }) => `As of v33, icon '${e}' is deprecated. Use the icon CSS name instead.`,
  44: () => 'Data type definition hierarchies (via the "extendsDataType" property) cannot contain circular references.',
  45: ({ parentCellDataType: e }) => `The data type definition ${e} does not exist.`,
  46: () => 'The "baseDataType" property of a data type definition must match that of its parent.',
  47: ({ cellDataType: e }) => `Missing data type definition - "${e}"`,
  48: ({ property: e }) => `Cell data type is "object" but no Value ${e} has been provided. Please either provide an object data type definition with a Value ${e}, or set "colDef.value${e}"`,
  49: ({ methodName: e }) => `Framework component is missing the method ${e}()`,
  50: ({ compName: e }) => `Could not find component ${e}, did you forget to configure this component?`,
  51: () => "Export cancelled. Export is not allowed as per your configuration.",
  52: () => "There is no `window` associated with the current `document`",
  53: () => "unknown value type during csv conversion",
  54: () => "Could not find document body, it is needed for drag and drop and context menu.",
  55: () => "addRowDropZone - A container target needs to be provided",
  56: () => "addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.",
  57: () => "unable to show popup filter, filter instantiation failed",
  58: () => "no values found for select cellEditor",
  59: () => "cannot select pinned rows",
  60: () => "cannot select node until it has finished loading",
  61: () => "since version v32.2.0, rowNode.isFullWidthCell() has been deprecated. Instead check `rowNode.detail` followed by the user provided `isFullWidthRow` grid option.",
  62: ({ colId: e }) => `setFilterModel() - no column found for colId: ${e}`,
  63: ({ colId: e }) => `setFilterModel() - unable to fully apply model, filtering disabled for colId: ${e}`,
  64: ({ colId: e }) => `setFilterModel() - unable to fully apply model, unable to create filter for colId: ${e}`,
  65: () => "filter missing setModel method, which is needed for setFilterModel",
  66: () => "filter API missing getModel method, which is needed for getFilterModel",
  67: () => "Filter is missing isFilterActive() method",
  68: () => "Column Filter API methods have been disabled as Advanced Filters are enabled.",
  69: ({ guiFromFilter: e }) => `getGui method from filter returned ${e}; it should be a DOM element.`,
  70: ({ newFilter: e }) => `Grid option quickFilterText only supports string inputs, received: ${typeof e}`,
  71: () => "debounceMs is ignored when apply button is present",
  72: ({ keys: e }) => ["ignoring FilterOptionDef as it doesn't contain one of ", e],
  73: () => "invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'",
  74: () => "no filter options for filter",
  75: () => "Unknown button type specified",
  76: ({ filterModelType: e }) => [
    'Unexpected type of filter "',
    e,
    '", it looks like the filter was configured with incorrect Filter Options'
  ],
  77: () => "Filter model is missing 'conditions'",
  78: () => 'Filter Model contains more conditions than "filterParams.maxNumConditions". Additional conditions have been ignored.',
  79: () => '"filterParams.maxNumConditions" must be greater than or equal to zero.',
  80: () => '"filterParams.numAlwaysVisibleConditions" must be greater than or equal to zero.',
  81: () => '"filterParams.numAlwaysVisibleConditions" cannot be greater than "filterParams.maxNumConditions".',
  82: ({ param: e }) => `DateFilter ${e} is not a number`,
  83: () => "DateFilter minValidYear should be <= maxValidYear",
  84: () => "DateFilter minValidDate should be <= maxValidDate",
  85: () => "DateFilter should not have both minValidDate and minValidYear parameters set at the same time! minValidYear will be ignored.",
  86: () => "DateFilter should not have both maxValidDate and maxValidYear parameters set at the same time! maxValidYear will be ignored.",
  87: () => "DateFilter parameter minValidDate should always be lower than or equal to parameter maxValidDate.",
  88: ({ index: e }) => `Invalid row index for ensureIndexVisible: ${e}`,
  89: () => "A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)",
  90: () => "datasource is missing getRows method",
  91: () => "Filter is missing method doesFilterPass",
  92: () => "AnimationFrameService called but animation frames are off",
  93: () => "cannot add multiple ranges when `cellSelection.suppressMultiRanges = true`",
  94: ({
    paginationPageSizeOption: e,
    pageSizeSet: t,
    pageSizesSet: i,
    pageSizeOptions: s
  }) => `'paginationPageSize=${e}'${t ? "" : " (default value)"}, but ${e} is not included in${i ? "" : " the default"} paginationPageSizeSelector=[${s?.join(", ")}].`,
  95: ({
    paginationPageSizeOption: e,
    paginationPageSizeSelector: t
  }) => `Either set '${t}' to an array that includes ${e} or to 'false' to disable the page size selector.`,
  96: ({ id: e, data: t }) => [
    "Duplicate ID",
    e,
    "found for pinned row with data",
    t,
    "When `getRowId` is defined, it must return unique IDs for all pinned rows. Use the `rowPinned` parameter."
  ],
  97: ({ colId: e }) => `cellEditor for column ${e} is missing getGui() method`,
  98: () => "popup cellEditor does not work with fullRowEdit - you cannot use them both - either turn off fullRowEdit, or stop using popup editors.",
  99: () => "Since v32, `api.hideOverlay()` does not hide the loading overlay when `loading=true`. Set `loading=false` instead.",
  // 100: ({ rowModelType }: { rowModelType: RowModelType }) =>
  //     `selectAll only available when rowModelType='clientSide', ie not ${rowModelType}` as const,
  101: ({
    propertyName: e,
    componentName: t,
    agGridDefaults: i,
    jsComps: s
  }) => {
    const o = [], n = [
      // Don't include the old names / internals in potential suggestions
      ...Object.keys(i ?? []).filter(
        (a) => !["agCellEditor", "agGroupRowRenderer", "agSortIndicator"].includes(a)
      ),
      ...Object.keys(s ?? []).filter((a) => !!s[a])
    ], r = fl({
      inputValue: t,
      allSuggestions: n,
      hideIrrelevant: !0,
      filterByPercentageOfBestMatch: 0.8
    }).values;
    return o.push(
      `Could not find '${t}' component. It was configured as "${e}: '${t}'" but it wasn't found in the list of registered components.
`
    ), r.length > 0 && o.push(`         Did you mean: [${r.slice(0, 3)}]?
`), o.push("If using a custom component check it has been registered correctly."), o;
  },
  102: () => "selectAll: 'filtered' only works when gridOptions.rowModelType='clientSide'",
  103: () => "Invalid selection state. When using client-side row model, the state must conform to `string[]`.",
  104: ({ value: e, param: t }) => `Numeric value ${e} passed to ${t} param will be interpreted as ${e} seconds. If this is intentional use "${e}s" to silence this warning.`,
  105: ({ e }) => ["chart rendering failed", e],
  106: () => `Theming API and Legacy Themes are both used in the same page. A Theming API theme has been provided to the 'theme' grid option, but the file (ag-grid.css) is also included and will cause styling issues. Remove ag-grid.css from the page. See the migration guide: ${us}/theming-migration/`,
  107: ({ key: e, value: t }) => `Invalid value for theme param ${e} - ${t}`,
  108: ({ e }) => ["chart update failed", e],
  109: ({ inputValue: e, allSuggestions: t }) => {
    const i = fl({
      inputValue: e,
      allSuggestions: t,
      hideIrrelevant: !0,
      filterByPercentageOfBestMatch: 0.8
    }).values;
    return [
      `Could not find '${e}' aggregate function. It was configured as "aggFunc: '${e}'" but it wasn't found in the list of registered aggregations.`,
      i.length > 0 ? `         Did you mean: [${i.slice(0, 3)}]?` : "",
      "If using a custom aggregation function check it has been registered correctly."
    ].join(`
`);
  },
  110: () => "groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup",
  111: () => "Invalid selection state. When `groupSelects` is enabled, the state must conform to `IServerSideGroupSelectionState`.",
  113: () => "Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values",
  114: ({ component: e }) => `Could not find component with name of ${e}. Is it in Vue.components?`,
  // 115: () => 'The provided selection state should be an object.' as const,
  116: () => "Invalid selection state. The state must conform to `IServerSideSelectionState`.",
  117: () => "selectAll must be of boolean type.",
  118: () => "Infinite scrolling must be enabled in order to set the row count.",
  119: () => "Unable to instantiate filter",
  120: () => "MultiFloatingFilterComp expects MultiFilter as its parent",
  121: () => "a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (see AG Grid docs) or b) to toString() on the object to return a key",
  122: () => "could not find the document, document is empty",
  123: () => "Advanced Filter is only supported with the Client-Side Row Model or Server-Side Row Model.",
  124: () => "No active charts to update.",
  125: ({ chartId: e }) => `Unable to update chart. No active chart found with ID: ${e}.`,
  126: () => "unable to restore chart as no chart model is provided",
  127: ({ allRange: e }) => `unable to create chart as ${e ? "there are no columns in the grid" : "no range is selected"}.`,
  128: ({ feature: e }) => `${e} is only available if using 'multiRow' selection mode.`,
  129: ({ feature: e, rowModel: t }) => `${e} is only available if using 'clientSide' or 'serverSide' rowModelType, you are using ${t}.`,
  130: () => 'cannot multi select unless selection mode is "multiRow"',
  // 131: () => 'cannot range select while selecting multiple rows' as const,
  132: () => "Row selection features are not available unless `rowSelection` is enabled.",
  133: ({ iconName: e }) => `icon '${e}' function should return back a string or a dom object`,
  134: ({ iconName: e }) => `Did not find icon '${e}'`,
  135: () => "Data type of the new value does not match the cell data type of the column",
  136: () => "Unable to update chart as the 'type' is missing. It must be either 'rangeChartUpdate', 'pivotChartUpdate', or 'crossFilterChartUpdate'.",
  137: ({ type: e, currentChartType: t }) => `Unable to update chart as a '${e}' update type is not permitted on a ${t}.`,
  138: ({ chartType: e }) => `invalid chart type supplied: ${e}`,
  139: ({ customThemeName: e }) => `a custom chart theme with the name ${e} has been supplied but not added to the 'chartThemes' list`,
  140: ({ name: e }) => `no stock theme exists with the name '${e}' and no custom chart theme with that name was supplied to 'customChartThemes'`,
  141: () => "cross filtering with row grouping is not supported.",
  142: () => "cross filtering is only supported in the client side row model.",
  143: ({ panel: e }) => `'${e}' is not a valid Chart Tool Panel name`,
  144: ({ type: e }) => `Invalid charts data panel group name supplied: '${e}'`,
  145: ({ group: e }) => `As of v32, only one charts customize panel group can be expanded at a time. '${e}' will not be expanded.`,
  146: ({ comp: e }) => `Unable to instantiate component '${e}' as its module hasn't been loaded. Add 'ValidationModule' to see which module is required.`,
  147: ({ group: e }) => `Invalid charts customize panel group name supplied: '${e}'`,
  148: ({ group: e }) => `invalid chartGroupsDef config '${e}'`,
  149: ({ group: e, chartType: t }) => `invalid chartGroupsDef config '${e}.${t}'`,
  150: () => "'seriesChartTypes' are required when the 'customCombo' chart type is specified.",
  151: ({ chartType: e }) => `invalid chartType '${e}' supplied in 'seriesChartTypes', converting to 'line' instead.`,
  152: ({ colId: e }) => `no 'seriesChartType' found for colId = '${e}', defaulting to 'line'.`,
  153: ({ chartDataType: e }) => `unexpected chartDataType value '${e}' supplied, instead use 'category', 'series' or 'excluded'`,
  154: ({ colId: e }) => `cross filtering requires a 'agSetColumnFilter' or 'agMultiColumnFilter' to be defined on the column with id: ${e}`,
  155: ({ option: e }) => `'${e}' is not a valid Chart Toolbar Option`,
  156: ({ panel: e }) => `Invalid panel in chartToolPanelsDef.panels: '${e}'`,
  157: ({ unrecognisedGroupIds: e }) => ["unable to find group(s) for supplied groupIds:", e],
  158: () => "can not expand a column item that does not represent a column group header",
  159: () => "Invalid params supplied to createExcelFileForExcel() - `ExcelExportParams.data` is empty.",
  160: () => "Export cancelled. Export is not allowed as per your configuration.",
  161: () => "The Excel Exporter is currently on Multi Sheet mode. End that operation by calling 'api.getMultipleSheetAsExcel()' or 'api.exportMultipleSheetsAsExcel()'",
  162: ({ id: e, dataType: t }) => `Unrecognized data type for excel export [${e}.dataType=${t}]`,
  163: ({ featureName: e }) => `Excel table export does not work with ${e}. The exported Excel file will not contain any Excel tables.
 Please turn off ${e} to enable Excel table exports.`,
  164: () => "Unable to add data table to Excel sheet: A table already exists.",
  165: () => "Unable to add data table to Excel sheet: Missing required parameters.",
  166: ({ unrecognisedGroupIds: e }) => ["unable to find groups for these supplied groupIds:", e],
  167: ({ unrecognisedColIds: e }) => ["unable to find columns for these supplied colIds:", e],
  168: () => "detailCellRendererParams.template should be function or string",
  169: () => 'Reference to eDetailGrid was missing from the details template. Please add data-ref="eDetailGrid" to the template.',
  170: ({ providedStrategy: e }) => `invalid cellRendererParams.refreshStrategy = ${e} supplied, defaulting to refreshStrategy = 'rows'.`,
  171: () => "could not find detail grid options for master detail, please set gridOptions.detailCellRendererParams.detailGridOptions",
  172: () => "could not find getDetailRowData for master / detail, please set gridOptions.detailCellRendererParams.getDetailRowData",
  173: ({ group: e }) => `invalid chartGroupsDef config '${e}'`,
  174: ({ group: e, chartType: t }) => `invalid chartGroupsDef config '${e}.${t}'`,
  175: ({ menuTabName: e, itemsToConsider: t }) => [
    `Trying to render an invalid menu item '${e}'. Check that your 'menuTabs' contains one of `,
    t
  ],
  176: ({ key: e }) => `unknown menu item type ${e}`,
  177: () => "valid values for cellSelection.handle.direction are 'x', 'y' and 'xy'. Default to 'xy'.",
  178: ({ colId: e }) => `column ${e} is not visible`,
  179: () => "totalValueGetter should be either a function or a string (expression)",
  180: () => "agRichSelectCellEditor requires cellEditorParams.values to be set",
  181: () => "agRichSelectCellEditor cannot have `multiSelect` and `allowTyping` set to `true`. AllowTyping has been turned off.",
  182: () => 'you cannot mix groupDisplayType = "multipleColumns" with treeData, only one column can be used to display groups when doing tree data',
  183: () => "Group Column Filter only works on group columns. Please use a different filter.",
  184: ({ parentGroupData: e, childNodeData: t }) => ["duplicate group keys for row data, keys should be unique", [e, t]],
  185: ({ data: e }) => ["getDataPath() should not return an empty path", [e]],
  186: ({
    rowId: e,
    rowData: t,
    duplicateRowsData: i
  }) => [
    "duplicate group keys for row data, keys should be unique",
    e,
    t,
    ...i ?? []
  ],
  187: ({ rowId: e, firstData: t, secondData: i }) => [
    `Duplicate node id ${e}. Row IDs are provided via the getRowId() callback. Please modify the getRowId() callback code to provide unique row id values.`,
    "first instance",
    t,
    "second instance",
    i
  ],
  188: () => "getRowId callback must be provided for Server Side Row Model selection to work correctly.",
  189: ({ startRow: e }) => `invalid value ${e} for startRow, the value should be >= 0`,
  190: ({ rowGroupId: e, data: t }) => [
    "null and undefined values are not allowed for server side row model keys",
    e ? `column = ${e}` : "",
    "data is ",
    t
  ],
  // 191: () => `cannot multi select unless selection mode is 'multiRow'` as const,
  // 192: () => `cannot use range selection when multi selecting rows` as const,
  // 193: () => "cannot multi select unless selection mode is 'multiRow'" as const,
  194: ({ method: e }) => `calling gridApi.${e}() is only possible when using rowModelType=\`clientSide\`.`,
  195: ({ justCurrentPage: e }) => `selecting just ${e ? "current page" : "filtered"} only works when gridOptions.rowModelType='clientSide'`,
  196: ({ key: e }) => `Provided ids must be of string type. Invalid id provided: ${e}`,
  197: () => "`toggledNodes` must be an array of string ids.",
  // 198: () => `cannot multi select unless selection mode is 'multiRow'` as const,
  199: () => "getSelectedNodes and getSelectedRows functions cannot be used with select all functionality with the server-side row model. Use `api.getServerSideSelectionState()` instead.",
  200: dh,
  201: ({ rowModelType: e }) => `Could not find row model for rowModelType = ${e}`,
  202: () => "`getSelectedNodes` and `getSelectedRows` functions cannot be used with `groupSelectsChildren` and the server-side row model. Use `api.getServerSideSelectionState()` instead.",
  203: () => "Server Side Row Model does not support Dynamic Row Height and Cache Purging. Either a) remove getRowHeight() callback or b) remove maxBlocksInCache property. Purging has been disabled.",
  204: () => "Server Side Row Model does not support Auto Row Height and Cache Purging. Either a) remove colDef.autoHeight or b) remove maxBlocksInCache property. Purging has been disabled.",
  205: ({ duplicateIdText: e }) => `Unable to display rows as duplicate row ids (${e}) were returned by the getRowId callback. Please modify the getRowId callback to provide unique ids.`,
  206: () => "getRowId callback must be implemented for transactions to work. Transaction was ignored.",
  207: () => 'The Set Filter Parameter "defaultToNothingSelected" value was ignored because it does not work when "excelMode" is used.',
  208: () => "Set Filter Value Formatter must return string values. Please ensure the Set Filter Value Formatter returns string values for complex objects.",
  209: () => `Set Filter Key Creator is returning null for provided values and provided values are primitives. Please provide complex objects. See ${us}/filter-set-filter-list/#filter-value-types`,
  210: () => "Set Filter has a Key Creator, but provided values are primitives. Did you mean to provide complex objects?",
  211: () => "property treeList=true for Set Filter params, but you did not provide a treeListPathGetter or values of type Date.",
  212: () => "please review all your toolPanel components, it seems like at least one of them doesn't have an id",
  213: () => "Advanced Filter does not work with Filters Tool Panel. Filters Tool Panel has been disabled.",
  214: ({ key: e }) => `unable to lookup Tool Panel as invalid key supplied: ${e}`,
  215: ({ key: e, defaultByKey: t }) => `the key ${e} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(t ?? {}).join(",")}`,
  216: ({ name: e }) => `Missing component for '${e}'`,
  217: ({ invalidColIds: e }) => ["unable to find grid columns for the supplied colDef(s):", e],
  218: ({ property: e, defaultOffset: t }) => `${e} must be a number, the value you provided is not a valid number. Using the default of ${t}px.`,
  219: ({ property: e }) => `Property ${e} does not exist on the target object.`,
  220: ({ lineDash: e }) => `'${e}' is not a valid 'lineDash' option.`,
  221: () => "agAggregationComponent should only be used with the client and server side row model.",
  222: () => "agFilteredRowCountComponent should only be used with the client side row model.",
  223: () => "agSelectedRowCountComponent should only be used with the client and server side row model.",
  224: () => "agTotalAndFilteredRowCountComponent should only be used with the client side row model.",
  225: () => "agTotalRowCountComponent should only be used with the client side row model.",
  226: () => "viewport is missing init method.",
  227: () => "menu item icon must be DOM node or string",
  228: ({ menuItemOrString: e }) => `unrecognised menu item ${e}`,
  229: ({ index: e }) => ["invalid row index for ensureIndexVisible: ", e],
  230: () => "detailCellRendererParams.template is not supported by AG Grid React. To change the template, provide a Custom Detail Cell Renderer. See https://www.ag-grid.com/react-data-grid/master-detail-custom-detail/",
  // @deprecated v32 mark for removal as part of v32 deprecated features
  231: () => "As of v32, using custom components with `reactiveCustomComponents = false` is deprecated.",
  232: () => "Using both rowData and v-model. rowData will be ignored.",
  233: ({ methodName: e }) => `Framework component is missing the method ${e}()`,
  234: () => 'Group Column Filter does not work with the colDef property "field". This property will be ignored.',
  235: () => 'Group Column Filter does not work with the colDef property "filterValueGetter". This property will be ignored.',
  236: () => 'Group Column Filter does not work with the colDef property "filterParams". This property will be ignored.',
  237: () => "Group Column Filter does not work with Tree Data enabled. Please disable Tree Data, or use a different filter.",
  238: () => "setRowCount can only accept a positive row count.",
  239: () => 'Theming API and CSS File Themes are both used in the same page. In v33 we released the Theming API as the new default method of styling the grid. See the migration docs https://www.ag-grid.com/react-data-grid/theming-migration/. Because no value was provided to the `theme` grid option it defaulted to themeQuartz. But the file (ag-grid.css) is also included and will cause styling issues. Either pass the string "legacy" to the theme grid option to use v32 style themes, or remove ag-grid.css from the page to use Theming API.',
  240: ({ theme: e }) => `theme grid option must be a Theming API theme object or the string "legacy", received: ${e}`,
  // 241: () => `cannot select multiple rows when rowSelection.mode is set to 'singleRow'` as const,
  // 242: () => 'cannot select multiple rows when using rangeSelect' as const,
  243: () => "Failed to deserialize state - each provided state object must be an object.",
  244: () => "Failed to deserialize state - `selectAllChildren` must be a boolean value or undefined.",
  245: () => "Failed to deserialize state - `toggledNodes` must be an array.",
  246: () => "Failed to deserialize state - Every `toggledNode` requires an associated string id.",
  247: () => `Row selection state could not be parsed due to invalid data. Ensure all child state has toggledNodes or does not conform with the parent rule. 
Please rebuild the selection state and reapply it.`,
  248: () => "SetFloatingFilter expects SetFilter as its parent",
  249: () => "Must supply a Value Formatter in Set Filter params when using a Key Creator",
  250: () => "Must supply a Key Creator in Set Filter params when `treeList = true` on a group column, and Tree Data or Row Grouping is enabled.",
  251: ({ chartType: e }) => `AG Grid: Unable to create chart as an invalid chartType = '${e}' was supplied.`,
  252: () => `cannot get grid to draw rows when it is in the middle of drawing rows. 
Your code probably called a grid API method while the grid was in the render stage. 
To overcome this, put the API call into a timeout, e.g. instead of api.redrawRows(), call setTimeout(function() { api.redrawRows(); }, 0). 
To see what part of your code that caused the refresh check this stacktrace.`,
  253: ({ version: e }) => ["Illegal version string: ", e],
  254: () => "Cannot create chart: no chart themes available.",
  255: ({ point: e }) => `Lone surrogate U+${e?.toString(16).toUpperCase()} is not a scalar value`,
  256: () => "Unable to initialise. See validation error, or load ValidationModule if missing.",
  257: () => uh("IntegratedChartsModule"),
  258: () => uh("SparklinesModule"),
  259: ({ part: e }) => `the argument to theme.withPart must be a Theming API part object, received: ${e}`,
  260: ({
    propName: e,
    compName: t,
    gridScoped: i,
    gridId: s,
    rowModelType: o
  }) => dh({
    reasonOrId: `AG Grid '${e}' component: ${t}`,
    moduleName: Ss[t],
    gridId: s,
    gridScoped: i,
    rowModelType: o
  }),
  261: () => "As of v33, `column.isHovered()` is deprecated. Use `api.isColumnHovered(column)` instead.",
  262: () => 'As of v33, icon key "smallDown" is deprecated. Use "advancedFilterBuilderSelect" for Advanced Filter Builder dropdown, "selectOpen" for Select cell editor and dropdowns (e.g. Integrated Charts menu), "richSelectOpen" for Rich Select cell editor.',
  263: () => 'As of v33, icon key "smallLeft" is deprecated. Use "panelDelimiterRtl" for Row Group Panel / Pivot Panel, "subMenuOpenRtl" for sub-menus.',
  264: () => 'As of v33, icon key "smallRight" is deprecated. Use "panelDelimiter" for Row Group Panel / Pivot Panel, "subMenuOpen" for sub-menus.',
  265: ({ colId: e }) => `Unable to infer chart data type for column '${e}' if first data entry is null. Please specify "chartDataType", or a "cellDataType" in the column definition. For more information, see ${us}/integrated-charts-range-chart#coldefchartdatatype .`,
  266: () => 'As of v33.1, using "keyCreator" with the Rich Select Editor has been deprecated. It now requires the "formatValue" callback to convert complex data to strings.',
  267: () => "Detail grids can not use a different theme to the master grid, the `theme` detail grid option will be ignored.",
  268: () => "Transactions aren't supported with tree data when using treeDataChildrenField",
  269: () => "When `masterSelects: 'detail'`, detail grids must be configured with multi-row selection",
  270: ({ id: e, parentId: t }) => `Cycle detected for row with id='${e}' and parent id='${t}'. Resetting the parent for row with id='${e}' and showing it as a root-level node.`,
  271: ({ id: e, parentId: t }) => `Parent row not found for row with id='${e}' and parent id='${t}'. Showing row with id='${e}' as a root-level node.`,
  272: () => eC(),
  273: ({ providedId: e, usedId: t }) => `Provided column id '${e}' was already in use, ensure all column and group ids are unique. Using '${t}' instead.`,
  274: ({ prop: e }) => {
    let t = `Since v33, ${e} has been deprecated.`;
    switch (e) {
      case "maxComponentCreationTimeMs":
        t += " This property is no longer required and so will be removed in a future version.";
        break;
      case "setGridApi":
        t += " This method is not called by AG Grid. To access the GridApi see: https://ag-grid.com/react-data-grid/grid-interface/#grid-api ";
        break;
      case "children":
        t += " For multiple versions AgGridReact does not support children.";
        break;
    }
    return t;
  },
  275: tC,
  276: () => "Row Numbers Row Resizer cannot be used when Grid Columns have `autoHeight` enabled.",
  277: ({ colId: e }) => `'enableFilterHandlers' is set to true, but column '${e}' does not have 'filter.doesFilterPass' or 'filter.handler' set.`,
  278: ({ colId: e }) => `Unable to create filter handler for column '${e}'`,
  279: (e) => {
  },
  // `Unable to create dynamic bean '${name}' during module init lifecycle, dynamic beans must be initialised on first use.` as const,
  280: ({ colId: e }) => `'name' must be provided for custom filter components for column '${e}`,
  281: ({ colId: e }) => `Filter for column '${e}' does not have 'filterParams.buttons', but the new Filters Tool Panel has buttons configured. Either configure buttons for the filter, or disable buttons on the Filters Tool Panel.`,
  282: () => "New filter tool panel requires `enableFilterHandlers: true`.",
  283: () => "As of v34, use the same method on the filter handler (`api.getColumnFilterHandler(colKey)`) instead.",
  284: () => "As of v34, filters are active when they have a model. Use `api.getColumnFilterModel()` instead.",
  285: () => "As of v34, use (`api.getColumnFilterModel()`) instead.",
  286: () => "As of v34, use (`api.setColumnFilterModel()`) instead.",
  287: () => "`api.doFilterAction()` requires `enableFilterHandlers = true",
  288: () => "`api.getColumnFilterModel(key, true)` requires `enableFilterHandlers = true",
  289: ({ rowModelType: e }) => `Row Model '${e}' is not supported with Batch Editing`,
  290: ({ rowIndex: e, rowPinned: t }) => `Row with index '${e}' and pinned state '${t}' not found`
};
function WI(e, t) {
  const i = NI[e];
  if (!i)
    return [`Missing error text for error id ${e}!`];
  const s = i(t), n = `
See ${tf(e, t)}`;
  return Array.isArray(s) ? s.concat(n) : [s, n];
}
var zI = {
  1: "Charting Aggregation",
  2: "pivotResultFields",
  3: "setTooltip"
}, hh = /* @__PURE__ */ new WeakMap(), gh = /* @__PURE__ */ new WeakMap(), _I = 1, UI = class {
  create(e, t, i, s, o, n) {
    const r = Ip.applyGlobalGridOptions(t), a = r.gridId ?? String(_I++), l = this.getRegisteredModules(o, a, r.rowModelType), c = this.createBeansList(r.rowModelType, l, a), d = this.createProvidedBeans(e, r, o);
    if (!c)
      return;
    const h = {
      providedBeanInstances: d,
      beanClasses: c,
      gridId: a,
      beanInitComparator: L0,
      beanDestroyComparator: O0,
      derivedBeans: [I0],
      destroyCallback: () => {
        gh.delete(p), hh.delete(e), n?.();
      }
    }, g = new WF(h);
    this.registerModuleFeatures(g, l), i(g), g.getBean("syncSvc").start(), s?.(g);
    const p = g.getBean("gridApi");
    return hh.set(e, p), gh.set(p, e), p;
  }
  getRegisteredModules(e, t, i) {
    return Ro(II, void 0, !0), e?.modules?.forEach((s) => Ro(s, t)), kF(t, ph(i));
  }
  registerModuleFeatures(e, t) {
    const i = e.getBean("registry"), s = e.getBean("apiFunctionSvc");
    t.forEach((o) => {
      i.registerModule(o);
      const n = o.apiFunctions;
      n && Object.keys(n).forEach((a) => {
        s?.addFunction(a, n[a]);
      });
    });
  }
  createProvidedBeans(e, t, i) {
    let s = i ? i.frameworkOverrides : null;
    Ce(s) && (s = new bm());
    const o = {
      gridOptions: t,
      eGridDiv: e,
      globalListener: i ? i.globalListener : null,
      globalSyncListener: i ? i.globalSyncListener : null,
      frameworkOverrides: s
    };
    return i && i.providedBeanInstances && Object.assign(o, i.providedBeanInstances), o;
  }
  createBeansList(e, t, i) {
    const s = {
      clientSide: "ClientSideRowModel",
      infinite: "InfiniteRowModel",
      serverSide: "ServerSideRowModel",
      viewport: "ViewportRowModel"
    }, o = ph(e), n = s[o];
    if (!n) {
      Ks(201, { rowModelType: o }, `Unknown rowModelType ${o}.`);
      return;
    }
    if (!VF()) {
      Ks(272, void 0, eC());
      return;
    }
    if (!e) {
      const a = Object.entries(s).filter(
        ([l, c]) => Qa(c, i, l)
      );
      if (a.length == 1) {
        const [l, c] = a[0];
        if (l !== o) {
          const d = {
            moduleName: c,
            rowModelType: l
          };
          Ks(275, d, tC(d));
          return;
        }
      }
    }
    if (!Qa(n, i, o)) {
      Ks(
        200,
        {
          reasonOrId: `rowModelType = '${o}'`,
          moduleName: n,
          gridScoped: pc(),
          gridId: i,
          rowModelType: o
        },
        `Missing module ${n}Module for rowModelType ${o}.`
      );
      return;
    }
    const r = /* @__PURE__ */ new Set();
    return t.forEach((a) => a.beans?.forEach((l) => r.add(l))), Array.from(r);
  }
};
function ph(e) {
  return e ?? "clientSide";
}
function Nt(e) {
  const t = e.rowModel;
  return t.getType() === "clientSide" ? t : void 0;
}
function Cr(e) {
  const t = e.rowModel;
  return t.getType() === "infinite" ? t : void 0;
}
function iC(e) {
  const t = e.rowModel;
  return t.getType() === "serverSide" ? t : void 0;
}
var jI = class extends T {
  constructor() {
    super(...arguments), this.beanName = "localeSvc";
  }
  getLocaleTextFunc() {
    const e = this.gos, t = e.getCallback("getLocaleText");
    if (t)
      return (s, o, n) => t({
        key: s,
        defaultValue: o,
        variableValues: n
      });
    const i = e.get("localeText");
    return (s, o, n) => {
      let r = i && i[s];
      if (r && n && n.length) {
        let a = 0;
        for (; !(a >= n.length || r.indexOf("${variable}") === -1); )
          r = r.replace("${variable}", n[a++]);
      }
      return r ?? o;
    };
  }
};
function $I(e, t = !1) {
  const i = [], s = [], o = [], n = [], r = [], a = [], l = [], c = [], d = [];
  let u = 0;
  for (let h = 0; h < e.length; h++) {
    const {
      colId: g,
      sort: p,
      sortIndex: f,
      rowGroup: m,
      rowGroupIndex: C,
      aggFunc: v,
      pivot: w,
      pivotIndex: y,
      pinned: S,
      hide: x,
      width: D,
      flex: M
    } = e[h];
    d.push(g), p && (i[f ?? u++] = { colId: g, sort: p }), m && (s[C ?? 0] = g), typeof v == "string" && o.push({ colId: g, aggFunc: v }), w && (n[y ?? 0] = g), S && (S === "right" ? a : r).push(g), x && l.push(g), (M != null || D) && c.push({ colId: g, flex: M ?? void 0, width: D });
  }
  return {
    sort: i.length ? { sortModel: i } : void 0,
    rowGroup: s.length ? { groupColIds: s } : void 0,
    aggregation: o.length ? { aggregationModel: o } : void 0,
    pivot: n.length || t ? { pivotMode: t, pivotColIds: n } : void 0,
    columnPinning: r.length || a.length ? { leftColIds: r, rightColIds: a } : void 0,
    columnVisibility: l.length ? { hiddenColIds: l } : void 0,
    columnSizing: c.length ? { columnSizingModel: c } : void 0,
    columnOrder: d.length ? { orderedColIds: d } : void 0
  };
}
function KI(e) {
  const t = [];
  return e.forEach(({ groupId: i, open: s }) => {
    s && t.push(i);
  }), t.length ? { openColumnGroupIds: t } : void 0;
}
var YI = class {
  wrap(e, t, i, s) {
    const o = this.createWrapper(e, s);
    return t?.forEach((n) => {
      this.createMethod(o, n, !0);
    }), i?.forEach((n) => {
      this.createMethod(o, n, !1);
    }), o;
  }
  createMethod(e, t, i) {
    e.addMethod(t, this.createMethodProxy(e, t, i));
  }
  createMethodProxy(e, t, i) {
    return function() {
      return e.hasMethod(t) ? e.callMethod(t, arguments) : (i && B(49, { methodName: t }), null);
    };
  }
}, qI = { tag: "div", cls: "ag-tooltip" }, XI = class extends Ec {
  constructor() {
    super(qI);
  }
  // will need to type params
  init(e) {
    const { value: t } = e, i = this.getGui();
    i.textContent = Ls(t);
    const s = e.location.replace(/([a-z])([A-Z0-9])/g, "$1-$2").toLowerCase();
    i.classList.add(`ag-${s}-tooltip`);
  }
}, ZI = 1e3, QI = 1e3, fh = 100, mh, sn = !1, JI = class extends T {
  constructor(e, t) {
    super(), this.tooltipCtrl = e, this.getTooltipValue = t, this.interactionEnabled = !1, this.isInteractingWithTooltip = !1, this.state = 0, this.tooltipInstanceCount = 0, this.tooltipMouseTrack = !1;
  }
  wireBeans(e) {
    this.popupSvc = e.popupSvc, this.userCompFactory = e.userCompFactory;
  }
  postConstruct() {
    this.gos.get("tooltipInteraction") && (this.interactionEnabled = !0), this.tooltipTrigger = this.getTooltipTrigger(), this.tooltipMouseTrack = this.gos.get("tooltipMouseTrack");
    const e = this.tooltipCtrl.getGui();
    this.tooltipTrigger === 0 && this.addManagedListeners(e, {
      mouseenter: this.onMouseEnter.bind(this),
      mouseleave: this.onMouseLeave.bind(this)
    }), this.tooltipTrigger === 1 && this.addManagedListeners(e, {
      focusin: this.onFocusIn.bind(this),
      focusout: this.onFocusOut.bind(this)
    }), this.addManagedListeners(e, { mousemove: this.onMouseMove.bind(this) }), this.interactionEnabled || this.addManagedListeners(e, {
      mousedown: this.onMouseDown.bind(this),
      keydown: this.onKeyDown.bind(this)
    });
  }
  getGridOptionsTooltipDelay(e) {
    const t = this.gos.get(e);
    return Math.max(200, t);
  }
  getTooltipDelay(e) {
    return e === "show" ? this.tooltipCtrl.getTooltipShowDelayOverride?.() ?? this.getGridOptionsTooltipDelay("tooltipShowDelay") : this.tooltipCtrl.getTooltipHideDelayOverride?.() ?? this.getGridOptionsTooltipDelay("tooltipHideDelay");
  }
  destroy() {
    this.setToDoNothing(), super.destroy();
  }
  getTooltipTrigger() {
    const e = this.gos.get("tooltipTrigger");
    return !e || e === "hover" ? 0 : 1;
  }
  onMouseEnter(e) {
    this.interactionEnabled && this.interactiveTooltipTimeoutId && (this.unlockService(), this.startHideTimeout()), !Di() && (sn ? this.showTooltipTimeoutId = window.setTimeout(() => {
      this.prepareToShowTooltip(e);
    }, fh) : this.prepareToShowTooltip(e));
  }
  onMouseMove(e) {
    this.lastMouseEvent && (this.lastMouseEvent = e), this.tooltipMouseTrack && this.state === 2 && this.tooltipComp && this.positionTooltip();
  }
  onMouseDown() {
    this.setToDoNothing();
  }
  onMouseLeave() {
    this.interactionEnabled ? this.lockService() : this.setToDoNothing();
  }
  onFocusIn() {
    this.prepareToShowTooltip();
  }
  onFocusOut(e) {
    const t = e.relatedTarget, i = this.tooltipCtrl.getGui(), s = this.tooltipComp?.getGui();
    this.isInteractingWithTooltip || i.contains(t) || this.interactionEnabled && s?.contains(t) || this.setToDoNothing();
  }
  onKeyDown() {
    this.isInteractingWithTooltip && (this.isInteractingWithTooltip = !1), this.setToDoNothing();
  }
  prepareToShowTooltip(e) {
    if (this.state != 0 || sn)
      return;
    let t = 0;
    e && (t = this.isLastTooltipHiddenRecently() ? 200 : this.getTooltipDelay("show")), this.lastMouseEvent = e || null, this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), t), this.state = 1;
  }
  isLastTooltipHiddenRecently() {
    return Date.now() - mh < ZI;
  }
  setToDoNothing(e) {
    !e && this.state === 2 && this.hideTooltip(), this.onBodyScrollEventCallback && (this.onBodyScrollEventCallback(), this.onBodyScrollEventCallback = void 0), this.onColumnMovedEventCallback && (this.onColumnMovedEventCallback(), this.onColumnMovedEventCallback = void 0), this.onDocumentKeyDownCallback && (this.onDocumentKeyDownCallback(), this.onDocumentKeyDownCallback = void 0), this.clearTimeouts(), this.state = 0, this.lastMouseEvent = null;
  }
  showTooltip() {
    const e = this.getTooltipValue(), t = this.tooltipCtrl;
    if (!$(e) || t.shouldDisplayTooltip && !t.shouldDisplayTooltip()) {
      this.setToDoNothing();
      return;
    }
    const i = t.getRowNode?.(), s = Z(this.gos, {
      location: t.getLocation?.() ?? "UNKNOWN",
      //'cell',
      colDef: t.getColDef?.(),
      column: t.getColumn?.(),
      rowIndex: t.getRowIndex?.(),
      node: i,
      data: i?.data,
      value: e,
      valueFormatted: t.getValueFormatted?.(),
      hideTooltipCallback: () => this.hideTooltip(!0),
      ...t.getAdditionalParams?.() ?? {}
    });
    this.state = 2, this.tooltipInstanceCount++;
    const o = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);
    EF(this.userCompFactory, s)?.newAgStackInstance().then(o);
  }
  hideTooltip(e) {
    !e && this.isInteractingWithTooltip || (this.tooltipComp && (this.destroyTooltipComp(), mh = Date.now()), this.eventSvc.dispatchEvent({
      type: "tooltipHide",
      parentGui: this.tooltipCtrl.getGui()
    }), e && (this.isInteractingWithTooltip = !1), this.setToDoNothing(!0));
  }
  newTooltipComponentCallback(e, t) {
    if (this.state !== 2 || this.tooltipInstanceCount !== e) {
      this.destroyBean(t);
      return;
    }
    const s = t.getGui();
    this.tooltipComp = t, s.classList.contains("ag-tooltip") || s.classList.add("ag-tooltip-custom"), this.tooltipTrigger === 0 && s.classList.add("ag-tooltip-animate"), this.interactionEnabled && s.classList.add("ag-tooltip-interactive");
    const o = this.getLocaleTextFunc(), n = this.popupSvc?.addPopup({
      eChild: s,
      ariaLabel: o("ariaLabelTooltip", "Tooltip")
    });
    if (n && (this.tooltipPopupDestroyFunc = n.hideFunc), this.positionTooltip(), this.tooltipTrigger === 1) {
      const r = () => this.setToDoNothing();
      [this.onBodyScrollEventCallback, this.onColumnMovedEventCallback] = this.addManagedEventListeners({
        bodyScroll: r,
        columnMoved: r
      });
    }
    this.interactionEnabled && ([this.tooltipMouseEnterListener, this.tooltipMouseLeaveListener] = this.addManagedElementListeners(s, {
      mouseenter: this.onTooltipMouseEnter.bind(this),
      mouseleave: this.onTooltipMouseLeave.bind(this)
    }), [this.onDocumentKeyDownCallback] = this.addManagedElementListeners(He(this.beans), {
      keydown: (r) => {
        s.contains(r?.target) || this.onKeyDown();
      }
    }), this.tooltipTrigger === 1 && ([this.tooltipFocusInListener, this.tooltipFocusOutListener] = this.addManagedElementListeners(s, {
      focusin: this.onTooltipFocusIn.bind(this),
      focusout: this.onTooltipFocusOut.bind(this)
    }))), this.eventSvc.dispatchEvent({
      type: "tooltipShow",
      tooltipGui: s,
      parentGui: this.tooltipCtrl.getGui()
    }), this.startHideTimeout();
  }
  onTooltipMouseEnter() {
    this.isInteractingWithTooltip = !0, this.unlockService();
  }
  onTooltipMouseLeave() {
    this.isTooltipFocused() || (this.isInteractingWithTooltip = !1, this.lockService());
  }
  onTooltipFocusIn() {
    this.isInteractingWithTooltip = !0;
  }
  isTooltipFocused() {
    const e = this.tooltipComp?.getGui(), t = Fe(this.beans);
    return !!e && e.contains(t);
  }
  onTooltipFocusOut(e) {
    const t = this.tooltipCtrl.getGui();
    this.isTooltipFocused() || (this.isInteractingWithTooltip = !1, t.contains(e.relatedTarget) ? this.startHideTimeout() : this.hideTooltip());
  }
  positionTooltip() {
    const e = {
      type: "tooltip",
      ePopup: this.tooltipComp.getGui(),
      nudgeY: 18,
      skipObserver: this.tooltipMouseTrack
    };
    this.lastMouseEvent ? this.popupSvc?.positionPopupUnderMouseEvent({
      ...e,
      mouseEvent: this.lastMouseEvent
    }) : this.popupSvc?.positionPopupByComponent({
      ...e,
      eventSource: this.tooltipCtrl.getGui(),
      position: "under",
      keepWithinBounds: !0,
      nudgeY: 5
    });
  }
  destroyTooltipComp() {
    this.tooltipComp.getGui().classList.add("ag-tooltip-hiding");
    const e = this.tooltipPopupDestroyFunc, t = this.tooltipComp, i = this.tooltipTrigger === 0 ? QI : 0;
    window.setTimeout(() => {
      e(), this.destroyBean(t);
    }, i), this.clearTooltipListeners(), this.tooltipPopupDestroyFunc = void 0, this.tooltipComp = void 0;
  }
  clearTooltipListeners() {
    [
      this.tooltipMouseEnterListener,
      this.tooltipMouseLeaveListener,
      this.tooltipFocusInListener,
      this.tooltipFocusOutListener
    ].forEach((e) => {
      e && e();
    }), this.tooltipMouseEnterListener = this.tooltipMouseLeaveListener = this.tooltipFocusInListener = this.tooltipFocusOutListener = null;
  }
  lockService() {
    sn = !0, this.interactiveTooltipTimeoutId = window.setTimeout(() => {
      this.unlockService(), this.setToDoNothing();
    }, fh);
  }
  unlockService() {
    sn = !1, this.clearInteractiveTimeout();
  }
  startHideTimeout() {
    this.clearHideTimeout(), this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.getTooltipDelay("hide"));
  }
  clearShowTimeout() {
    this.showTooltipTimeoutId && (window.clearTimeout(this.showTooltipTimeoutId), this.showTooltipTimeoutId = void 0);
  }
  clearHideTimeout() {
    this.hideTooltipTimeoutId && (window.clearTimeout(this.hideTooltipTimeoutId), this.hideTooltipTimeoutId = void 0);
  }
  clearInteractiveTimeout() {
    this.interactiveTooltipTimeoutId && (window.clearTimeout(this.interactiveTooltipTimeoutId), this.interactiveTooltipTimeoutId = void 0);
  }
  clearTimeouts() {
    this.clearShowTimeout(), this.clearHideTimeout(), this.clearInteractiveTimeout();
  }
};
function ca(e) {
  return e.get("tooltipShowMode") === "whenTruncated";
}
var ek = class extends T {
  constructor(e, t) {
    super(), this.ctrl = e, t && (this.beans = t);
  }
  postConstruct() {
    this.refreshTooltip();
  }
  /**
   *
   * @param tooltip The tooltip value
   * @param allowEmptyString Set it to true to allow the title to be set to `''`. This is necessary
   * when the browser adds a default tooltip the element and the tooltip service will be displayed
   * next to a browser tooltip causing confusion.
   */
  setBrowserTooltip(e, t) {
    const i = "title", s = this.ctrl.getGui();
    s && (e != null && (e != "" || t) ? s.setAttribute(i, e) : s.removeAttribute(i));
  }
  updateTooltipText() {
    const { getTooltipValue: e } = this.ctrl;
    e && (this.tooltip = e());
  }
  createTooltipFeatureIfNeeded() {
    this.tooltipManager == null && (this.tooltipManager = this.createBean(
      new JI(this.ctrl, () => this.tooltip),
      this.beans.context
    ));
  }
  setTooltipAndRefresh(e) {
    this.tooltip = e, this.refreshTooltip();
  }
  refreshTooltip(e) {
    this.browserTooltips = this.beans.gos.get("enableBrowserTooltips"), this.updateTooltipText(), this.browserTooltips ? (this.setBrowserTooltip(this.tooltip), this.tooltipManager = this.destroyBean(this.tooltipManager, this.beans.context)) : (this.setBrowserTooltip(e ? "" : null, e), this.createTooltipFeatureIfNeeded());
  }
  destroy() {
    this.tooltipManager = this.destroyBean(this.tooltipManager, this.beans.context), super.destroy();
  }
};
function tk(e, t) {
  if (typeof e != "number")
    return "";
  const i = t(), s = i("thousandSeparator", ","), o = i("decimalSeparator", ".");
  return e.toString().replace(".", o).replace(/(\d)(?=(\d{3})+(?!\d))/g, `$1${s}`);
}
var ik = class extends T {
  getFileName(e) {
    const t = this.getDefaultFileExtension();
    return (e == null || !e.length) && (e = this.getDefaultFileName()), e.indexOf(".") === -1 ? `${e}.${t}` : e;
  }
  getData(e) {
    const t = this.createSerializingSession(e);
    return this.beans.gridSerializer.serialize(t, e);
  }
  getDefaultFileName() {
    return `export.${this.getDefaultFileExtension()}`;
  }
}, sk = class {
  constructor(e) {
    const {
      colModel: t,
      rowGroupColsSvc: i,
      colNames: s,
      valueSvc: o,
      gos: n,
      processCellCallback: r,
      processHeaderCallback: a,
      processGroupHeaderCallback: l,
      processRowGroupCallback: c
    } = e;
    this.colModel = t, this.rowGroupColsSvc = i, this.colNames = s, this.valueSvc = o, this.gos = n, this.processCellCallback = r, this.processHeaderCallback = a, this.processGroupHeaderCallback = l, this.processRowGroupCallback = c;
  }
  prepare(e) {
  }
  extractHeaderValue(e) {
    return this.getHeaderName(this.processHeaderCallback, e) ?? "";
  }
  extractRowCellValue(e, t, i, s, o) {
    const n = t === 0 && uf(this.gos, o, this.colModel.isPivotMode());
    if (this.processRowGroupCallback && (this.gos.get("treeData") || o.group) && (e.isRowGroupDisplayed(o.rowGroupColumn?.getColId() ?? "") || n))
      return { value: this.processRowGroupCallback(Z(this.gos, { column: e, node: o })) ?? "" };
    if (this.processCellCallback)
      return {
        value: this.processCellCallback(
          Z(this.gos, {
            accumulatedRowIndex: i,
            column: e,
            node: o,
            value: this.valueSvc.getValueForDisplay(e, o, void 0, void 0).value,
            type: s,
            parseValue: (h) => this.valueSvc.parseValue(
              e,
              o,
              h,
              this.valueSvc.getValue(e, o, void 0)
            ),
            formatValue: (h) => this.valueSvc.formatValue(e, o, h) ?? h
          })
        ) ?? ""
      };
    const r = this.gos.get("treeData"), a = this.valueSvc, l = o.level === -1 && o.footer, c = e.colDef.showRowGroup === !0 && (o.group || r);
    if (!l && (n || c)) {
      let h = "", g = o;
      for (; g && g.level !== -1; ) {
        const { value: p, valueFormatted: f } = a.getValueForDisplay(
          n ? void 0 : e,
          // full width group doesn't have a column
          g,
          !0,
          !0
        );
        h = ` -> ${f ?? p ?? ""}${h}`, g = g.parent;
      }
      return {
        value: h,
        // don't return the unformatted value; as if the grid detects number it'll not use the concatenated string
        valueFormatted: h
      };
    }
    const { value: d, valueFormatted: u } = a.getValueForDisplay(e, o, !0, !0);
    return {
      value: d ?? "",
      valueFormatted: u
    };
  }
  getHeaderName(e, t) {
    return e ? e(Z(this.gos, { column: t })) : this.colNames.getDisplayNameForColumn(t, "csv", !0);
  }
};
function ok(e, t) {
  const i = document.defaultView || window;
  if (!i) {
    B(52);
    return;
  }
  const s = document.createElement("a"), o = i.URL.createObjectURL(t);
  s.setAttribute("href", o), s.setAttribute("download", e), s.style.display = "none", document.body.appendChild(s), s.dispatchEvent(
    new MouseEvent("click", {
      bubbles: !1,
      cancelable: !0,
      view: i
    })
  ), document.body.removeChild(s), i.setTimeout(() => {
    i.URL.revokeObjectURL(o);
  }, 0);
}
var nk = {
  enableBrowserTooltips: !0,
  tooltipTrigger: !0,
  tooltipMouseTrack: !0,
  tooltipShowMode: !0,
  tooltipInteraction: !0,
  defaultColGroupDef: !0,
  suppressAutoSize: !0,
  skipHeaderOnAutoSize: !0,
  autoSizeStrategy: !0,
  components: !0,
  stopEditingWhenCellsLoseFocus: !0,
  undoRedoCellEditing: !0,
  undoRedoCellEditingLimit: !0,
  excelStyles: !0,
  cacheQuickFilter: !0,
  customChartThemes: !0,
  chartThemeOverrides: !0,
  chartToolPanelsDef: !0,
  loadingCellRendererSelector: !0,
  localeText: !0,
  keepDetailRows: !0,
  keepDetailRowsCount: !0,
  detailRowHeight: !0,
  detailRowAutoHeight: !0,
  tabIndex: !0,
  valueCache: !0,
  valueCacheNeverExpires: !0,
  enableCellExpressions: !0,
  suppressTouch: !0,
  suppressBrowserResizeObserver: !0,
  suppressPropertyNamesCheck: !0,
  debug: !0,
  dragAndDropImageComponent: !0,
  loadingOverlayComponent: !0,
  suppressLoadingOverlay: !0,
  noRowsOverlayComponent: !0,
  paginationPageSizeSelector: !0,
  paginateChildRows: !0,
  pivotPanelShow: !0,
  pivotSuppressAutoColumn: !0,
  suppressExpandablePivotGroups: !0,
  aggFuncs: !0,
  allowShowChangeAfterFilter: !0,
  ensureDomOrder: !0,
  enableRtl: !0,
  suppressColumnVirtualisation: !0,
  suppressMaxRenderedRowRestriction: !0,
  suppressRowVirtualisation: !0,
  rowDragText: !0,
  groupLockGroupColumns: !0,
  suppressGroupRowsSticky: !0,
  rowModelType: !0,
  cacheOverflowSize: !0,
  infiniteInitialRowCount: !0,
  serverSideInitialRowCount: !0,
  maxBlocksInCache: !0,
  maxConcurrentDatasourceRequests: !0,
  blockLoadDebounceMillis: !0,
  serverSideOnlyRefreshFilteredGroups: !0,
  serverSidePivotResultFieldSeparator: !0,
  viewportRowModelPageSize: !0,
  viewportRowModelBufferSize: !0,
  debounceVerticalScrollbar: !0,
  suppressAnimationFrame: !0,
  suppressPreventDefaultOnMouseWheel: !0,
  scrollbarWidth: !0,
  icons: !0,
  suppressRowTransform: !0,
  gridId: !0,
  enableGroupEdit: !0,
  initialState: !0,
  processUnpinnedColumns: !0,
  createChartContainer: !0,
  getLocaleText: !0,
  getRowId: !0,
  reactiveCustomComponents: !0,
  renderingMode: !0,
  columnMenu: !0,
  suppressSetFilterByDefault: !0,
  getDataPath: !0,
  enableCellSpan: !0,
  enableFilterHandlers: !0,
  filterHandlers: !0
}, Je = "clientSide", Xe = "serverSide", Zi = "infinite", rk = {
  onGroupExpandedOrCollapsed: [Je],
  refreshClientSideRowModel: [Je],
  isRowDataEmpty: [Je],
  forEachLeafNode: [Je],
  forEachNodeAfterFilter: [Je],
  forEachNodeAfterFilterAndSort: [Je],
  resetRowHeights: [Je],
  applyTransaction: [Je],
  applyTransactionAsync: [Je],
  flushAsyncTransactions: [Je],
  getBestCostNodeSelection: [Je],
  getServerSideSelectionState: [Xe],
  setServerSideSelectionState: [Xe],
  applyServerSideTransaction: [Xe],
  applyServerSideTransactionAsync: [Xe],
  applyServerSideRowData: [Xe],
  retryServerSideLoads: [Xe],
  flushServerSideAsyncTransactions: [Xe],
  refreshServerSide: [Xe],
  getServerSideGroupLevelState: [Xe],
  refreshInfiniteCache: [Zi],
  purgeInfiniteCache: [Zi],
  getInfiniteRowCount: [Zi],
  isLastRowIndexKnown: [Zi, Xe],
  expandAll: [Je, Xe],
  collapseAll: [Je, Xe],
  onRowHeightChanged: [Je, Xe],
  setRowCount: [Zi, Xe],
  getCacheBlockState: [Zi, Xe]
}, ak = {
  showLoadingOverlay: {
    version: "v32",
    message: '`showLoadingOverlay` is deprecated. Use the grid option "loading"=true instead or setGridOption("loading", true).'
  },
  clearRangeSelection: {
    version: "v32.2",
    message: "Use `clearCellSelection` instead."
  },
  getInfiniteRowCount: {
    version: "v32.2",
    old: "getInfiniteRowCount()",
    new: "getDisplayedRowCount()"
  },
  selectAllFiltered: {
    version: "v33",
    old: "selectAllFiltered()",
    new: 'selectAll("filtered")'
  },
  deselectAllFiltered: {
    version: "v33",
    old: "deselectAllFiltered()",
    new: 'deselectAll("filtered")'
  },
  selectAllOnCurrentPage: {
    version: "v33",
    old: "selectAllOnCurrentPage()",
    new: 'selectAll("currentPage")'
  },
  deselectAllOnCurrentPage: {
    version: "v33",
    old: "deselectAllOnCurrentPage()",
    new: 'deselectAll("currentPage")'
  }
};
function lk(e, t, i) {
  const s = ak[e];
  if (s) {
    const { version: n, new: r, old: a, message: l } = s, c = a ?? e;
    return (...d) => {
      const u = r ? `Please use ${r} instead. ` : "";
      return io(`Since ${n} api.${c} is deprecated. ${u}${l ?? ""}`), t.apply(t, d);
    };
  }
  const o = rk[e];
  return o ? (...n) => {
    const r = i.rowModel.getType();
    if (!o.includes(r)) {
      ds(
        `api.${e} can only be called when gridOptions.rowModelType is ${o.join(" or ")}`
      );
      return;
    }
    return t.apply(t, n);
  } : t;
}
var ck = {
  detailCellRendererCtrl: "SharedMasterDetail",
  dndSourceComp: "DragAndDrop",
  fillHandle: "CellSelection",
  groupCellRendererCtrl: "GroupCellRenderer",
  headerFilterCellCtrl: "ColumnFilter",
  headerGroupCellCtrl: "ColumnGroup",
  rangeHandle: "CellSelection",
  tooltipFeature: "Tooltip",
  groupStrategy: "RowGrouping",
  treeGroupStrategy: "TreeData",
  rowNumberRowResizer: "RowNumbers",
  singleCell: "EditCore",
  fullRow: "EditCore",
  agSetColumnFilterHandler: "SetFilter",
  agMultiColumnFilterHandler: "MultiFilter",
  agGroupColumnFilterHandler: "GroupFilter",
  agNumberColumnFilterHandler: "NumberFilter",
  agDateColumnFilterHandler: "DateFilter",
  agTextColumnFilterHandler: "TextFilter"
}, dk = {
  expanded: 1,
  contracted: 1,
  "tree-closed": 1,
  "tree-open": 1,
  "tree-indeterminate": 1,
  pin: 1,
  "eye-slash": 1,
  arrows: 1,
  left: 1,
  right: 1,
  group: 1,
  aggregation: 1,
  pivot: 1,
  "not-allowed": 1,
  chart: 1,
  cross: 1,
  cancel: 1,
  tick: 1,
  first: 1,
  previous: 1,
  next: 1,
  last: 1,
  linked: 1,
  unlinked: 1,
  "color-picker": 1,
  loading: 1,
  menu: 1,
  "menu-alt": 1,
  filter: 1,
  "filter-add": 1,
  columns: 1,
  maximize: 1,
  minimize: 1,
  copy: 1,
  cut: 1,
  paste: 1,
  grip: 1,
  save: 1,
  csv: 1,
  excel: 1,
  "small-down": 1,
  "small-left": 1,
  "small-right": 1,
  "small-up": 1,
  asc: 1,
  desc: 1,
  none: 1,
  up: 1,
  down: 1,
  plus: 1,
  minus: 1,
  settings: 1,
  "checkbox-checked": 1,
  "checkbox-indeterminate": 1,
  "checkbox-unchecked": 1,
  "radio-button-on": 1,
  "radio-button-off": 1,
  eye: 1,
  "column-arrow": 1,
  "un-pin": 1,
  "pinned-top": 1,
  "pinned-bottom": 1,
  "chevron-up": 1,
  "chevron-down": 1,
  "chevron-left": 1,
  "chevron-right": 1,
  edit: 1
}, uk = {
  chart: "MenuCore",
  cancel: "EnterpriseCore",
  first: "Pagination",
  previous: "Pagination",
  next: "Pagination",
  last: "Pagination",
  linked: "IntegratedCharts",
  loadingMenuItems: "MenuCore",
  unlinked: "IntegratedCharts",
  menu: "ColumnHeaderComp",
  legacyMenu: "ColumnMenu",
  filter: "ColumnFilter",
  filterActive: "ColumnFilter",
  filterAdd: "NewFiltersToolPanel",
  filterCardCollapse: "NewFiltersToolPanel",
  filterCardExpand: "NewFiltersToolPanel",
  filterCardEditing: "NewFiltersToolPanel",
  filterTab: "ColumnMenu",
  filtersToolPanel: "FiltersToolPanel",
  columns: ["MenuCore"],
  columnsToolPanel: ["ColumnsToolPanel"],
  maximize: "EnterpriseCore",
  minimize: "EnterpriseCore",
  save: "MenuCore",
  columnGroupOpened: "ColumnGroupHeaderComp",
  columnGroupClosed: "ColumnGroupHeaderComp",
  accordionOpen: "EnterpriseCore",
  accordionClosed: "EnterpriseCore",
  accordionIndeterminate: "EnterpriseCore",
  columnSelectClosed: ["ColumnsToolPanel", "ColumnMenu"],
  columnSelectOpen: ["ColumnsToolPanel", "ColumnMenu"],
  columnSelectIndeterminate: ["ColumnsToolPanel", "ColumnMenu"],
  columnMovePin: "SharedDragAndDrop",
  columnMoveHide: "SharedDragAndDrop",
  columnMoveMove: "SharedDragAndDrop",
  columnMoveLeft: "SharedDragAndDrop",
  columnMoveRight: "SharedDragAndDrop",
  columnMoveGroup: "SharedDragAndDrop",
  columnMoveValue: "SharedDragAndDrop",
  columnMovePivot: "SharedDragAndDrop",
  dropNotAllowed: "SharedDragAndDrop",
  ensureColumnVisible: ["ColumnsToolPanel", "ColumnMenu"],
  groupContracted: "GroupCellRenderer",
  groupExpanded: "GroupCellRenderer",
  setFilterGroupClosed: "SetFilter",
  setFilterGroupOpen: "SetFilter",
  setFilterGroupIndeterminate: "SetFilter",
  setFilterLoading: "SetFilter",
  close: "EnterpriseCore",
  check: "MenuItem",
  colorPicker: "CommunityCore",
  groupLoading: "LoadingCellRenderer",
  menuAlt: "ColumnHeaderComp",
  menuPin: "MenuCore",
  menuValue: "MenuCore",
  menuAddRowGroup: ["MenuCore", "ColumnsToolPanel"],
  menuRemoveRowGroup: ["MenuCore", "ColumnsToolPanel"],
  clipboardCopy: "MenuCore",
  clipboardCut: "MenuCore",
  clipboardPaste: "MenuCore",
  pivotPanel: ["ColumnsToolPanel", "RowGroupingPanel"],
  rowGroupPanel: ["ColumnsToolPanel", "RowGroupingPanel"],
  valuePanel: "ColumnsToolPanel",
  columnDrag: "EnterpriseCore",
  rowDrag: ["RowDrag", "DragAndDrop"],
  csvExport: "MenuCore",
  excelExport: "MenuCore",
  smallDown: "CommunityCore",
  selectOpen: "CommunityCore",
  richSelectOpen: "RichSelect",
  richSelectRemove: "RichSelect",
  smallLeft: "CommunityCore",
  smallRight: "CommunityCore",
  subMenuOpen: "MenuItem",
  subMenuOpenRtl: "MenuItem",
  panelDelimiter: "RowGroupingPanel",
  panelDelimiterRtl: "RowGroupingPanel",
  smallUp: "CommunityCore",
  sortAscending: ["MenuCore", "Sort"],
  sortDescending: ["MenuCore", "Sort"],
  sortUnSort: ["MenuCore", "Sort"],
  advancedFilterBuilder: "AdvancedFilter",
  advancedFilterBuilderDrag: "AdvancedFilter",
  advancedFilterBuilderInvalid: "AdvancedFilter",
  advancedFilterBuilderMoveUp: "AdvancedFilter",
  advancedFilterBuilderMoveDown: "AdvancedFilter",
  advancedFilterBuilderAdd: "AdvancedFilter",
  advancedFilterBuilderRemove: "AdvancedFilter",
  advancedFilterBuilderSelectOpen: "AdvancedFilter",
  chartsMenu: "IntegratedCharts",
  chartsMenuEdit: "IntegratedCharts",
  chartsMenuAdvancedSettings: "IntegratedCharts",
  chartsMenuAdd: "IntegratedCharts",
  chartsColorPicker: "IntegratedCharts",
  chartsThemePrevious: "IntegratedCharts",
  chartsThemeNext: "IntegratedCharts",
  chartsDownload: "IntegratedCharts",
  checkboxChecked: "CommunityCore",
  checkboxIndeterminate: "CommunityCore",
  checkboxUnchecked: "CommunityCore",
  radioButtonOn: "CommunityCore",
  radioButtonOff: "CommunityCore",
  rowPin: "PinnedRow",
  rowUnpin: "PinnedRow",
  rowPinBottom: "PinnedRow",
  rowPinTop: "PinnedRow"
}, hk = /* @__PURE__ */ new Set([
  "colorPicker",
  "smallUp",
  "checkboxChecked",
  "checkboxIndeterminate",
  "checkboxUnchecked",
  "radioButtonOn",
  "radioButtonOff",
  "smallDown",
  "smallLeft",
  "smallRight"
]), gk = class extends T {
  constructor() {
    super(...arguments), this.beanName = "validation";
  }
  wireBeans(e) {
    this.gridOptions = e.gridOptions, KR(this);
  }
  warnOnInitialPropertyUpdate(e, t) {
    e === "api" && nk[t] && B(22, { key: t });
  }
  processGridOptions(e) {
    this.processOptions(e, EA());
  }
  validateApiFunction(e, t) {
    return lk(e, t, this.beans);
  }
  missingUserComponent(e, t, i, s) {
    const o = Ss[t];
    o ? this.gos.assertModuleRegistered(
      o,
      `AG Grid '${e}' component: ${t}`
    ) : B(101, {
      propertyName: e,
      componentName: t,
      agGridDefaults: i,
      jsComps: s
    });
  }
  missingDynamicBean(e) {
    const t = ck[e];
    return t ? Gt(200, {
      ...this.gos.getModuleErrorParams(),
      moduleName: t,
      reasonOrId: e
    }) : void 0;
  }
  checkRowEvents(e) {
    fk.has(e) && B(10, { eventType: e });
  }
  validateIcon(e) {
    if (hk.has(e) && B(43, { iconName: e }), dk[e])
      return;
    const t = uk[e];
    if (t) {
      he(200, {
        reasonOrId: `icon '${e}'`,
        moduleName: t,
        gridScoped: pc(),
        gridId: this.beans.context.getGridId(),
        rowModelType: this.gos.get("rowModelType"),
        additionalText: "Alternatively, use the CSS icon name directly."
      });
      return;
    }
    B(134, { iconName: e });
  }
  isProvidedUserComp(e) {
    return !!Ss[e];
  }
  /** Should only be called via the GridOptionsService */
  validateColDef(e) {
    this.processOptions(e, mA());
  }
  processOptions(e, t) {
    const { validations: i, deprecations: s, allProperties: o, propertyExceptions: n, objectName: r, docsUrl: a } = t;
    o && this.gridOptions.suppressPropertyNamesCheck !== !0 && this.checkProperties(
      e,
      [...n ?? [], ...Object.keys(s)],
      o,
      r,
      a
    );
    const l = /* @__PURE__ */ new Set();
    Object.keys(e).forEach((d) => {
      const u = s[d];
      if (u) {
        const { message: v, version: w } = u;
        l.add(`As of v${w}, ${String(d)} is deprecated. ${v ?? ""}`);
      }
      const h = e[d];
      if (h == null || h === !1)
        return;
      const g = i[d];
      if (!g)
        return;
      const { dependencies: p, validate: f, supportedRowModels: m, expectedType: C } = g;
      if (C) {
        const v = typeof h;
        if (v !== C) {
          l.add(
            `${String(d)} should be of type '${C}' but received '${v}' (${h}).`
          );
          return;
        }
      }
      if (m) {
        const v = this.gridOptions.rowModelType ?? "clientSide";
        if (!m.includes(v)) {
          l.add(
            `${String(d)} is not supported with the '${v}' row model. It is only valid with: ${m.join(", ")}.`
          );
          return;
        }
      }
      if (p) {
        const v = this.checkForRequiredDependencies(d, p, e);
        if (v) {
          l.add(v);
          return;
        }
      }
      if (f) {
        const v = f(e, this.gridOptions, this.beans);
        if (v) {
          l.add(v);
          return;
        }
      }
    }), l.size > 0 && l.forEach((d) => {
      io(d);
    });
  }
  checkForRequiredDependencies(e, t, i) {
    const o = Object.entries(t).filter(([n, r]) => {
      const a = i[n];
      return !r.required.includes(a);
    });
    return o.length === 0 ? null : o.map(
      ([n, r]) => `'${String(e)}' requires '${n}' to be one of [${r.required.map((a) => a === null ? "null" : a === void 0 ? "undefined" : a).join(", ")}]. ${r.reason ?? ""}`
    ).join(`
           `);
  }
  checkProperties(e, t, i, s, o) {
    const n = ["__ob__", "__v_skip", "__metadata__"], r = pk(
      Object.getOwnPropertyNames(e),
      [...n, ...t, ...i],
      i
    ), a = Object.keys(r);
    for (const l of a) {
      const c = r[l];
      let d = `invalid ${s} property '${l}' did you mean any of these: ${c.slice(0, 8).join(", ")}.`;
      i.includes("context") && (d += `
If you are trying to annotate ${s} with application data, use the '${s}.context' property instead.`), io(d);
    }
    if (a.length > 0 && o) {
      const l = this.beans.frameworkOverrides.getDocLink(o);
      io(`to see all the valid ${s} properties please check: ${l}`);
    }
  }
  getConsoleMessage(e, t) {
    return WI(e, t);
  }
};
function pk(e, t, i) {
  const s = {}, o = e.filter(
    (n) => !t.some((r) => r === n)
  );
  return o.length > 0 && o.forEach(
    (n) => s[n] = fl({ inputValue: n, allSuggestions: i }).values
  ), s;
}
var fk = /* @__PURE__ */ new Set([
  "firstChildChanged",
  "lastChildChanged",
  "childIndexChanged"
]), mk = {
  moduleName: "Validation",
  version: Y,
  beans: [gk]
};
function sC(e) {
  e.sibling && (e.sibling.childrenAfterFilter = e.childrenAfterFilter);
}
var Ck = class extends T {
  constructor() {
    super(...arguments), this.beanName = "filterStage", this.refreshProps = /* @__PURE__ */ new Set(["excludeChildrenWhenTreeDataFiltering"]), this.step = "filter";
  }
  wireBeans(e) {
    this.filterManager = e.filterManager;
  }
  execute(e) {
    const { changedPath: t } = e;
    this.filter(t);
  }
  filter(e) {
    const t = !!this.filterManager?.isChildFilterPresent();
    this.filterNodes(t, e);
  }
  filterNodes(e, t) {
    const i = (s, o) => {
      s.hasChildren() && e && !o ? s.childrenAfterFilter = s.childrenAfterGroup.filter((n) => {
        const r = n.childrenAfterFilter && n.childrenAfterFilter.length > 0, a = n.data && this.filterManager.doesRowPassFilter({ rowNode: n });
        return r || a;
      }) : s.childrenAfterFilter = s.childrenAfterGroup, sC(s);
    };
    if (this.doingTreeDataFiltering()) {
      const s = (n, r) => {
        if (n.childrenAfterGroup)
          for (let a = 0; a < n.childrenAfterGroup.length; a++) {
            const l = n.childrenAfterGroup[a], c = r || this.filterManager.doesRowPassFilter({ rowNode: l });
            l.childrenAfterGroup ? s(n.childrenAfterGroup[a], c) : i(l, c);
          }
        i(n, r);
      }, o = (n) => s(n, !1);
      t.executeFromRootNode(o);
    } else {
      const s = (o) => i(o, !1);
      t.forEachChangedNodeDepthFirst(s, !0);
    }
  }
  doingTreeDataFiltering() {
    return this.gos.get("treeData") && !this.gos.get("excludeChildrenWhenTreeDataFiltering");
  }
}, vk = class extends Pc {
  constructor() {
    super(...arguments), this.iconCreated = !1;
  }
  setComp(e, t, i, s, o) {
    this.comp = e;
    const n = Vo(this, this.beans.context, o);
    this.eButtonShowMainFilter = i, this.eFloatingFilterBody = s, this.setGui(t, n), this.setupActive(), this.refreshHeaderStyles(), this.setupWidth(n), this.setupLeft(n), this.setupHover(n), this.setupFocus(n), this.setupAria(), this.setupFilterButton(), this.setupUserComp(), this.setupSyncWithFilter(n), this.setupUi(), n.addManagedElementListeners(this.eButtonShowMainFilter, { click: this.showParentFilter.bind(this) }), this.setupFilterChangedListener(n);
    const r = () => this.onColDefChanged(n);
    n.addManagedListeners(this.column, { colDefChanged: r }), n.addManagedEventListeners({
      filterSwitched: ({ column: a }) => {
        a === this.column && r();
      }
    }), n.addDestroyFunc(() => {
      this.eButtonShowMainFilter = null, this.eFloatingFilterBody = null, this.userCompDetails = null, this.clearComponent();
    });
  }
  // empty abstract method
  resizeHeader() {
  }
  moveHeader() {
  }
  getHeaderClassParams() {
    const { column: e, beans: t } = this, i = e.colDef;
    return Z(t.gos, {
      colDef: i,
      column: e,
      floatingFilter: !0
    });
  }
  setupActive() {
    const e = this.column.getColDef(), t = !!e.filter, i = !!e.floatingFilter;
    this.active = t && i;
  }
  setupUi() {
    if (this.comp.setButtonWrapperDisplayed(!this.suppressFilterButton && this.active), this.comp.addOrRemoveBodyCssClass("ag-floating-filter-full-body", this.suppressFilterButton), this.comp.addOrRemoveBodyCssClass("ag-floating-filter-body", !this.suppressFilterButton), !this.active || this.iconCreated)
      return;
    const e = Ct("filter", this.beans, this.column);
    e && (this.iconCreated = !0, this.eButtonShowMainFilter.appendChild(e));
  }
  setupFocus(e) {
    e.createManagedBean(
      new Vs(this.eGui, {
        shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),
        onTabKeyDown: this.onTabKeyDown.bind(this),
        handleKeyDown: this.handleKeyDown.bind(this),
        onFocusIn: this.onFocusIn.bind(this)
      })
    );
  }
  setupAria() {
    const e = this.getLocaleTextFunc();
    xs(this.eButtonShowMainFilter, e("ariaFilterMenuOpen", "Open Filter Menu"));
  }
  onTabKeyDown(e) {
    const { beans: t } = this;
    if (Fe(t) === this.eGui)
      return;
    const o = qi(t, this.eGui, null, e.shiftKey);
    if (o) {
      t.headerNavigation?.scrollToColumn(this.column), e.preventDefault(), o.focus();
      return;
    }
    const n = this.findNextColumnWithFloatingFilter(e.shiftKey);
    n && t.focusSvc.focusHeaderPosition({
      headerPosition: {
        headerRowIndex: this.rowCtrl.rowIndex,
        column: n
      },
      event: e
    }) && e.preventDefault();
  }
  findNextColumnWithFloatingFilter(e) {
    const t = this.beans.visibleCols;
    let i = this.column;
    do
      if (i = e ? t.getColBefore(i) : t.getColAfter(i), !i)
        break;
    while (!i.getColDef().filter || !i.getColDef().floatingFilter);
    return i;
  }
  handleKeyDown(e) {
    super.handleKeyDown(e);
    const t = this.getWrapperHasFocus();
    switch (e.key) {
      case E.UP:
      case E.DOWN:
      case E.LEFT:
      case E.RIGHT:
        if (t)
          return;
        Bi(e);
      case E.ENTER:
        t && Wi(this.eGui) && e.preventDefault();
        break;
      case E.ESCAPE:
        t || this.eGui.focus();
    }
  }
  onFocusIn(e) {
    if (this.eGui.contains(e.relatedTarget))
      return;
    const i = !!e.relatedTarget && !e.relatedTarget.classList.contains("ag-floating-filter"), s = !!e.relatedTarget && Ti(e.relatedTarget, "ag-floating-filter");
    if (i && s && e.target === this.eGui) {
      const o = this.lastFocusEvent, n = !!(o && o.key === E.TAB);
      if (o && n) {
        const r = o.shiftKey;
        Wi(this.eGui, r);
      }
    }
    this.focusThis();
  }
  setupHover(e) {
    this.beans.colHover?.addHeaderFilterColumnHoverListener(e, this.comp, this.column, this.eGui);
  }
  setupLeft(e) {
    const t = new Fc(this.column, this.eGui, this.beans);
    e.createManagedBean(t);
  }
  setupFilterButton() {
    this.suppressFilterButton = !this.beans.menuSvc?.isFloatingFilterButtonEnabled(this.column), this.highlightFilterButtonWhenActive = !at(this.gos);
  }
  setupUserComp() {
    if (!this.active)
      return;
    const e = this.beans.colFilter?.getFloatingFilterCompDetails(
      this.column,
      () => this.showParentFilter()
    );
    e && this.setCompDetails(e);
  }
  setCompDetails(e) {
    this.userCompDetails = e, this.comp.setCompDetails(e);
  }
  showParentFilter() {
    const e = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;
    this.beans.menuSvc?.showFilterMenu({
      column: this.column,
      buttonElement: e,
      containerType: "floatingFilter",
      positionBy: "button"
    });
  }
  setupSyncWithFilter(e) {
    if (!this.active)
      return;
    const {
      beans: { colFilter: t },
      column: i,
      gos: s
    } = this, o = (n) => {
      if (n?.source === "filterDestroyed" && (!this.isAlive() || !t?.isAlive()))
        return;
      const r = this.comp.getFloatingFilterComp();
      r && r.then((a) => {
        if (a) {
          if (s.get("enableFilterHandlers")) {
            const d = n;
            let u = "filter";
            d?.afterFloatingFilter ? u = "ui" : d?.afterDataChange ? u = "dataChanged" : n?.source === "api" && (u = "api"), this.updateFloatingFilterParams(this.userCompDetails, u);
            return;
          }
          const l = t?.getCurrentFloatingFilterParentModel(i), c = n ? {
            // event can have additional params like `afterDataChange` which need to be passed through
            ...n,
            columns: n.columns ?? [],
            source: n.source === "api" ? "api" : "columnFilter"
          } : null;
          a.onParentModelChanged(l, c);
        }
      });
    };
    [this.destroySyncListener] = e.addManagedListeners(i, { filterChanged: o }), t?.isFilterActive(i) && o(null);
  }
  setupWidth(e) {
    const t = () => {
      const i = `${this.column.getActualWidth()}px`;
      this.comp.setWidth(i);
    };
    e.addManagedListeners(this.column, { widthChanged: t }), t();
  }
  setupFilterChangedListener(e) {
    this.active && ([this.destroyFilterChangedListener] = e.addManagedListeners(this.column, {
      filterChanged: this.updateFilterButton.bind(this)
    }), this.updateFilterButton());
  }
  updateFilterButton() {
    if (!this.suppressFilterButton && this.comp) {
      const e = !!this.beans.filterManager?.isFilterAllowed(this.column);
      this.comp.setButtonWrapperDisplayed(e), this.highlightFilterButtonWhenActive && e && this.eButtonShowMainFilter.classList.toggle("ag-filter-active", this.column.isFilterActive());
    }
  }
  onColDefChanged(e) {
    const t = this.active;
    this.setupActive();
    const i = !t && this.active;
    t && !this.active && (this.destroySyncListener(), this.destroyFilterChangedListener());
    const s = this.beans.colFilter, o = this.active ? s?.getFloatingFilterCompDetails(this.column, () => this.showParentFilter()) : null, n = this.comp.getFloatingFilterComp();
    !n || !o ? this.updateCompDetails(e, o, i) : n.then((r) => {
      !r || s?.areFilterCompsDifferent(this.userCompDetails ?? null, o) ? this.updateCompDetails(e, o, i) : this.updateFloatingFilterParams(o, "colDef");
    });
  }
  updateCompDetails(e, t, i) {
    this.isAlive() && (this.setCompDetails(t), this.setupFilterButton(), this.setupUi(), i && (this.setupSyncWithFilter(e), this.setupFilterChangedListener(e)));
  }
  updateFloatingFilterParams(e, t) {
    if (!e)
      return;
    let i = e.params;
    this.comp.getFloatingFilterComp()?.then((s) => {
      typeof s?.refresh == "function" && (this.gos.get("enableFilterHandlers") && (i = {
        ...i,
        model: Ge(this.beans.colFilter?.model ?? {}, this.column.getColId()),
        source: t
      }), s.refresh(i));
    });
  }
  addResizeAndMoveKeyboardListeners() {
  }
  destroy() {
    super.destroy(), this.destroySyncListener = null, this.destroyFilterChangedListener = null;
  }
};
function wk(e, t) {
  const i = e.colModel.getCol(t);
  if (!i) {
    he(12, { colKey: t });
    return;
  }
  e.menuSvc?.showColumnMenu({
    column: i,
    positionBy: "auto"
  });
}
function Sk(e) {
  e.menuSvc?.hidePopupMenu();
}
var yk = {
  moduleName: "SharedMenu",
  version: Y,
  beans: [zE],
  apiFunctions: {
    showColumnMenu: wk,
    hidePopupMenu: Sk
  }
}, on = 0, bk = 200, Rk = class extends T {
  constructor() {
    super(...arguments), this.beanName = "popupSvc", this.popupList = [];
  }
  postConstruct() {
    this.beans.ctrlsSvc.whenReady(this, (e) => {
      this.gridCtrl = e.gridCtrl;
    }), this.addManagedEventListeners({ gridStylesChanged: this.handleThemeChange.bind(this) });
  }
  getPopupParent() {
    const e = this.gos.get("popupParent");
    return e || this.gridCtrl.getGui();
  }
  positionPopupForMenu(e) {
    const { eventSource: t, ePopup: i, column: s, node: o, event: n } = e, r = t.getBoundingClientRect(), a = this.getParentRect();
    this.setAlignedTo(t, i);
    let l = !1;
    const c = () => {
      const d = this.keepXYWithinBounds(
        i,
        r.top - a.top,
        0
        /* Vertical */
      ), u = i.clientWidth > 0 ? i.clientWidth : 200;
      l || (i.style.minWidth = `${u}px`, l = !0);
      const g = a.right - a.left - u;
      let p;
      return this.gos.get("enableRtl") ? (p = m(), p < 0 && (p = f(), this.setAlignedStyles(i, "left")), p > g && (p = 0, this.setAlignedStyles(i, "right"))) : (p = f(), p > g && (p = m(), this.setAlignedStyles(i, "right")), p < 0 && (p = 0, this.setAlignedStyles(i, "left"))), { x: p, y: d };
      function f() {
        return r.right - a.left - 2;
      }
      function m() {
        return r.left - a.left - u;
      }
    };
    this.positionPopup({
      ePopup: i,
      keepWithinBounds: !0,
      updatePosition: c,
      postProcessCallback: () => this.callPostProcessPopup(
        "subMenu",
        i,
        t,
        n instanceof MouseEvent ? n : void 0,
        s,
        o
      )
    });
  }
  positionPopupUnderMouseEvent(e) {
    const { ePopup: t, nudgeX: i, nudgeY: s, skipObserver: o } = e;
    this.positionPopup({
      ePopup: t,
      nudgeX: i,
      nudgeY: s,
      keepWithinBounds: !0,
      skipObserver: o,
      updatePosition: () => this.calculatePointerAlign(e.mouseEvent),
      postProcessCallback: () => this.callPostProcessPopup(
        e.type,
        e.ePopup,
        null,
        e.mouseEvent,
        e.column,
        e.rowNode
      )
    });
  }
  calculatePointerAlign(e) {
    const t = this.getParentRect();
    return {
      x: e.clientX - t.left,
      y: e.clientY - t.top
    };
  }
  positionPopupByComponent(e) {
    const {
      ePopup: t,
      nudgeX: i,
      nudgeY: s,
      keepWithinBounds: o,
      eventSource: n,
      alignSide: r = "left",
      position: a = "over",
      column: l,
      rowNode: c,
      type: d
    } = e, u = n.getBoundingClientRect(), h = this.getParentRect();
    this.setAlignedTo(n, t);
    const g = () => {
      let p = u.left - h.left;
      r === "right" && (p -= t.offsetWidth - u.width);
      let f;
      return a === "over" ? (f = u.top - h.top, this.setAlignedStyles(t, "over")) : (this.setAlignedStyles(t, "under"), this.shouldRenderUnderOrAbove(t, u, h, e.nudgeY || 0) === "under" ? f = u.top - h.top + u.height : f = u.top - t.offsetHeight - (s || 0) * 2 - h.top), { x: p, y: f };
    };
    this.positionPopup({
      ePopup: t,
      nudgeX: i,
      nudgeY: s,
      keepWithinBounds: o,
      updatePosition: g,
      postProcessCallback: () => this.callPostProcessPopup(d, t, n, null, l, c)
    });
  }
  shouldRenderUnderOrAbove(e, t, i, s) {
    const o = i.bottom - t.bottom, n = t.top - i.top, r = e.offsetHeight + s;
    return o > r ? "under" : n > r || n > o ? "above" : "under";
  }
  setAlignedStyles(e, t) {
    const i = this.getPopupIndex(e);
    if (i === -1)
      return;
    const s = this.popupList[i], { alignedToElement: o } = s;
    !o || (["right", "left", "over", "above", "under"].forEach((r) => {
      o.classList.remove(`ag-has-popup-positioned-${r}`), e.classList.remove(`ag-popup-positioned-${r}`);
    }), !t) || (o.classList.add(`ag-has-popup-positioned-${t}`), e.classList.add(`ag-popup-positioned-${t}`));
  }
  setAlignedTo(e, t) {
    const i = this.getPopupIndex(t);
    if (i !== -1) {
      const s = this.popupList[i];
      s.alignedToElement = e;
    }
  }
  callPostProcessPopup(e, t, i, s, o, n) {
    const r = this.gos.getCallback("postProcessPopup");
    r && r({
      column: o,
      rowNode: n,
      ePopup: t,
      type: e,
      eventSource: i,
      mouseEvent: s
    });
  }
  positionPopup(e) {
    const { ePopup: t, keepWithinBounds: i, nudgeX: s, nudgeY: o, skipObserver: n, updatePosition: r } = e, a = { width: 0, height: 0 }, l = (c = !1) => {
      let { x: d, y: u } = r();
      c && t.clientWidth === a.width && t.clientHeight === a.height || (a.width = t.clientWidth, a.height = t.clientHeight, s && (d += s), o && (u += o), i && (d = this.keepXYWithinBounds(
        t,
        d,
        1
        /* Horizontal */
      ), u = this.keepXYWithinBounds(
        t,
        u,
        0
        /* Vertical */
      )), t.style.left = `${d}px`, t.style.top = `${u}px`, e.postProcessCallback && e.postProcessCallback());
    };
    if (l(), !n) {
      const c = Qt(this.beans, t, () => l(!0));
      setTimeout(() => c(), bk);
    }
  }
  getActivePopups() {
    return this.popupList.map((e) => e.element);
  }
  getParentRect() {
    const e = He(this.beans);
    let t = this.getPopupParent();
    return t === e.body ? t = e.documentElement : getComputedStyle(t).position === "static" && (t = t.offsetParent), $p(t);
  }
  keepXYWithinBounds(e, t, i) {
    const s = i === 0, o = s ? "clientHeight" : "clientWidth", n = s ? "top" : "left", r = s ? "height" : "width", a = s ? "scrollTop" : "scrollLeft", l = He(this.beans), c = l.documentElement, d = this.getPopupParent(), u = e.getBoundingClientRect(), h = d.getBoundingClientRect(), g = l.documentElement.getBoundingClientRect(), p = d === l.body, f = Math.ceil(u[r]);
    let C = p ? (s ? jp : On)(c) + c[a] : d[o];
    p && (C -= Math.abs(g[n] - h[n]));
    const v = C - f;
    return Math.min(Math.max(t, 0), Math.abs(v));
  }
  addPopup(e) {
    const t = He(this.beans), { eChild: i, ariaLabel: s, ariaOwns: o, alwaysOnTop: n, positionCallback: r, anchorToElement: a } = e;
    if (!t)
      return B(122), { hideFunc: () => {
      } };
    const l = this.getPopupIndex(i);
    if (l !== -1)
      return { hideFunc: this.popupList[l].hideFunc };
    this.initialisePopupPosition(i);
    const c = this.createPopupWrapper(i, !!n, s, o), d = this.addEventListenersToPopup({ ...e, wrapperEl: c });
    return r && r(), this.addPopupToPopupList(i, c, d, a), {
      hideFunc: d
    };
  }
  initialisePopupPosition(e) {
    const i = this.getPopupParent().getBoundingClientRect();
    $(e.style.top) || (e.style.top = `${i.top * -1}px`), $(e.style.left) || (e.style.left = `${i.left * -1}px`);
  }
  createPopupWrapper(e, t, i, s) {
    const o = this.getPopupParent(), { environment: n, gos: r } = this.beans, a = Ae({ tag: "div" });
    return n.applyThemeClasses(a), a.classList.add("ag-popup"), e.classList.add(r.get("enableRtl") ? "ag-rtl" : "ag-ltr", "ag-popup-child"), e.hasAttribute("role") || Vi(e, "dialog"), i ? xs(e, i) : s && (e.id || (e.id = `popup-component-${on}`), mu(s, e.id)), a.appendChild(e), o.appendChild(a), t ? this.setAlwaysOnTop(e, !0) : this.bringPopupToFront(e), a;
  }
  handleThemeChange(e) {
    if (e.themeChanged) {
      const t = this.beans.environment;
      for (const i of this.popupList)
        t.applyThemeClasses(i.wrapper);
    }
  }
  addEventListenersToPopup(e) {
    const t = this.beans, i = He(t), s = this.getPopupParent(), { wrapperEl: o, eChild: n, closedCallback: r, afterGuiAttached: a, closeOnEsc: l, modal: c, ariaOwns: d } = e;
    let u = !1;
    const h = (m) => {
      if (!o.contains(Fe(t)))
        return;
      m.key === E.ESCAPE && !jt(m) && f({ keyboardEvent: m });
    }, g = (m) => f({ mouseEvent: m }), p = (m) => f({ touchEvent: m }), f = (m = {}) => {
      const { mouseEvent: C, touchEvent: v, keyboardEvent: w, forceHide: y } = m;
      !y && // we don't hide popup if the event was on the child, or any
      // children of this child
      (this.isEventFromCurrentPopup({ mouseEvent: C, touchEvent: v }, n) || // this method should only be called once. the client can have different
      // paths, each one wanting to close, so this method may be called multiple times.
      u) || (u = !0, s.removeChild(o), i.removeEventListener("keydown", h), i.removeEventListener("mousedown", g), i.removeEventListener("touchstart", p), i.removeEventListener("contextmenu", g), this.eventSvc.removeEventListener("dragStarted", g), r && r(C || v || w), this.removePopupFromPopupList(n, d));
    };
    return a && a({ hidePopup: f }), window.setTimeout(() => {
      l && i.addEventListener("keydown", h), c && (i.addEventListener("mousedown", g), this.eventSvc.addEventListener("dragStarted", g), i.addEventListener("touchstart", p), i.addEventListener("contextmenu", g));
    }, 0), f;
  }
  addPopupToPopupList(e, t, i, s) {
    this.popupList.push({
      element: e,
      wrapper: t,
      hideFunc: i,
      instanceId: on,
      isAnchored: !!s
    }), s && this.setPopupPositionRelatedToElement(e, s), on = on + 1;
  }
  getPopupIndex(e) {
    return this.popupList.findIndex((t) => t.element === e);
  }
  setPopupPositionRelatedToElement(e, t) {
    const i = this.getPopupIndex(e);
    if (i === -1)
      return;
    const s = this.popupList[i];
    if (s.stopAnchoringPromise && s.stopAnchoringPromise.then((n) => n && n()), s.stopAnchoringPromise = void 0, s.isAnchored = !1, !t)
      return;
    const o = this.keepPopupPositionedRelativeTo({
      element: t,
      ePopup: e,
      hidePopup: s.hideFunc
    });
    return s.stopAnchoringPromise = o, s.isAnchored = !0, o;
  }
  removePopupFromPopupList(e, t) {
    this.setAlignedStyles(e, null), this.setPopupPositionRelatedToElement(e, null), t && mu(t, null), this.popupList = this.popupList.filter((i) => i.element !== e);
  }
  keepPopupPositionedRelativeTo(e) {
    const t = this.getPopupParent(), i = t.getBoundingClientRect(), { element: s, ePopup: o } = e, n = s.getBoundingClientRect(), r = (u) => parseInt(u.substring(0, u.length - 1), 10), a = (u, h) => {
      const g = i[u] - n[u], p = r(o.style[u]);
      return {
        initialDiff: g,
        lastDiff: g,
        initial: p,
        last: p,
        direction: h
      };
    }, l = a(
      "top",
      0
      /* Vertical */
    ), c = a(
      "left",
      1
      /* Horizontal */
    ), d = this.beans.frameworkOverrides;
    return new re((u) => {
      d.wrapIncoming(() => {
        d.setInterval(() => {
          const h = t.getBoundingClientRect(), g = s.getBoundingClientRect();
          if (g.top == 0 && g.left == 0 && g.height == 0 && g.width == 0) {
            e.hidePopup();
            return;
          }
          const f = (m, C) => {
            const v = r(o.style[C]);
            m.last !== v && (m.initial = v, m.last = v);
            const w = h[C] - g[C];
            if (w != m.lastDiff) {
              const y = this.keepXYWithinBounds(
                o,
                m.initial + m.initialDiff - w,
                m.direction
              );
              o.style[C] = `${y}px`, m.last = y;
            }
            m.lastDiff = w;
          };
          f(l, "top"), f(c, "left");
        }, 200).then((h) => {
          u(() => {
            h != null && window.clearInterval(h);
          });
        });
      }, "popupPositioning");
    });
  }
  hasAnchoredPopup() {
    return this.popupList.some((e) => e.isAnchored);
  }
  isEventFromCurrentPopup(e, t) {
    const { mouseEvent: i, touchEvent: s } = e, o = i || s;
    if (!o)
      return !1;
    const n = this.getPopupIndex(t);
    if (n === -1)
      return !1;
    for (let r = n; r < this.popupList.length; r++) {
      const a = this.popupList[r];
      if (vx(a.element, o))
        return !0;
    }
    return this.isElementWithinCustomPopup(o.target);
  }
  isElementWithinCustomPopup(e) {
    const t = He(this.beans);
    for (; e && e !== t.body; ) {
      if (e.classList.contains("ag-custom-component-popup") || e.parentElement === null)
        return !0;
      e = e.parentElement;
    }
    return !1;
  }
  getWrapper(e) {
    for (; !e.classList.contains("ag-popup") && e.parentElement; )
      e = e.parentElement;
    return e.classList.contains("ag-popup") ? e : null;
  }
  setAlwaysOnTop(e, t) {
    const i = this.getWrapper(e);
    i && (i.classList.toggle("ag-always-on-top", !!t), t && this.bringPopupToFront(i));
  }
  /** @returns true if moved */
  bringPopupToFront(e) {
    const t = this.getPopupParent(), i = Array.prototype.slice.call(t.querySelectorAll(".ag-popup")), s = i.length, o = this.getWrapper(e);
    if (!o || s <= 1 || !t.contains(e))
      return;
    const n = [], r = [];
    for (const h of i)
      h !== o && (h.classList.contains("ag-always-on-top") ? r.push(h) : n.push(h));
    const a = [], l = r.length, u = o.classList.contains("ag-always-on-top") || !l ? [...n, ...r, o] : [...n, o, ...r];
    for (let h = 0; h <= s; h++) {
      const g = u[h];
      if (i[h] === u[h] || g === o)
        continue;
      g.querySelectorAll("div").forEach((f) => {
        f.scrollTop !== 0 && a.push([f, f.scrollTop]);
      }), h === 0 ? t.insertAdjacentElement("afterbegin", g) : u[h - 1].insertAdjacentElement("afterend", g);
    }
    for (; a.length; ) {
      const h = a.pop();
      h[0].scrollTop = h[1];
    }
  }
}, vr = {
  moduleName: "Popup",
  version: Y,
  beans: [Rk]
}, xk = (
  /*css*/
  ".ag-set-filter{--ag-indentation-level:0}.ag-set-filter-item{align-items:center;display:flex;height:100%}:where(.ag-ltr) .ag-set-filter-item{padding-left:calc(var(--ag-widget-container-horizontal-padding) + var(--ag-indentation-level)*var(--ag-set-filter-indent-size))}:where(.ag-rtl) .ag-set-filter-item{padding-right:calc(var(--ag-widget-container-horizontal-padding) + var(--ag-indentation-level)*var(--ag-set-filter-indent-size))}.ag-set-filter-item-checkbox{display:flex;height:100%;width:100%}.ag-set-filter-group-icons{display:block;>*{cursor:pointer}}:where(.ag-ltr) .ag-set-filter-group-icons{margin-right:var(--ag-widget-container-horizontal-padding)}:where(.ag-rtl) .ag-set-filter-group-icons{margin-left:var(--ag-widget-container-horizontal-padding)}.ag-filter-body-wrapper{display:flex;flex-direction:column}:where(.ag-menu:not(.ag-tabs) .ag-filter) .ag-filter-body-wrapper,:where(.ag-menu:not(.ag-tabs) .ag-filter)>:not(.ag-filter-wrapper){min-width:180px}.ag-filter-filter{flex:1 1 0px}.ag-filter-condition{display:flex;justify-content:center}.ag-floating-filter-body{display:flex;flex:1 1 auto;height:100%;position:relative}.ag-floating-filter-full-body{align-items:center;display:flex;flex:1 1 auto;height:100%;overflow:hidden;width:100%}:where(.ag-floating-filter-full-body)>div{flex:1 1 auto}.ag-floating-filter-input{align-items:center;display:flex;width:100%;>*{flex:1 1 auto}:where(.ag-input-field-input[type=date]),:where(.ag-input-field-input[type=datetime-local]){width:1px}}.ag-floating-filter-button{display:flex;flex:none}.ag-date-floating-filter-wrapper{display:flex}.ag-set-floating-filter-input :where(input)[disabled]{pointer-events:none}.ag-floating-filter-button-button{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;height:var(--ag-icon-size);width:var(--ag-icon-size)}.ag-filter-loading{align-items:unset;background-color:var(--ag-chrome-background-color);height:100%;padding:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding);position:absolute;width:100%;z-index:1;:where(.ag-menu) &{background-color:var(--ag-menu-background-color)}}.ag-filter-separator{border-top:solid var(--ag-border-width) var(--menu-separator-color)}:where(.ag-filter-select) .ag-picker-field-wrapper{width:0}.ag-filter-condition-operator{height:17px}:where(.ag-ltr) .ag-filter-condition-operator-or{margin-left:calc(var(--ag-spacing)*2)}:where(.ag-rtl) .ag-filter-condition-operator-or{margin-right:calc(var(--ag-spacing)*2)}.ag-set-filter-select-all{padding-top:var(--ag-widget-container-vertical-padding)}.ag-filter-no-matches,.ag-set-filter-list{height:calc(var(--ag-list-item-height)*6)}.ag-filter-no-matches{padding:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding)}.ag-set-filter-tree-list{height:calc(var(--ag-list-item-height)*10)}.ag-set-filter-filter{margin-left:var(--ag-widget-container-horizontal-padding);margin-right:var(--ag-widget-container-horizontal-padding);margin-top:var(--ag-widget-container-vertical-padding)}.ag-filter-to{margin-top:var(--ag-widget-vertical-spacing)}.ag-mini-filter{margin:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding)}:where(.ag-ltr) .ag-set-filter-add-group-indent{margin-left:calc(var(--ag-icon-size) + var(--ag-widget-container-horizontal-padding))}:where(.ag-rtl) .ag-set-filter-add-group-indent{margin-right:calc(var(--ag-icon-size) + var(--ag-widget-container-horizontal-padding))}:where(.ag-filter-menu) .ag-set-filter-list{min-width:200px}.ag-filter-virtual-list-item:focus-visible{box-shadow:inset var(--ag-focus-shadow)}.ag-filter-apply-panel{display:flex;justify-content:flex-end;overflow:hidden;padding:var(--ag-widget-vertical-spacing) var(--ag-widget-container-horizontal-padding) var(--ag-widget-container-vertical-padding)}.ag-filter-apply-panel-button{line-height:1.5}:where(.ag-ltr) .ag-filter-apply-panel-button{margin-left:calc(var(--ag-spacing)*2)}:where(.ag-rtl) .ag-filter-apply-panel-button{margin-right:calc(var(--ag-spacing)*2)}.ag-simple-filter-body-wrapper{display:flex;flex-direction:column;min-height:calc(var(--ag-list-item-height) + var(--ag-widget-container-vertical-padding) + var(--ag-widget-vertical-spacing));overflow-y:auto;padding:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding);padding-bottom:calc(var(--ag-widget-container-vertical-padding) - var(--ag-widget-vertical-spacing));&>*{margin-bottom:var(--ag-widget-vertical-spacing)}:where(.ag-resizer-wrapper){margin:0}}.ag-multi-filter-menu-item{margin:var(--ag-spacing) 0}.ag-multi-filter-group-title-bar{background-color:transparent;color:var(--ag-header-text-color);font-weight:500;padding:calc(var(--ag-spacing)*1.5) var(--ag-spacing)}.ag-group-filter-field-select-wrapper{display:flex;flex-direction:column;gap:var(--ag-widget-vertical-spacing);padding:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding)}"
);
function Fk(e) {
  const t = e.filterManager;
  return !!t?.isColumnFilterPresent() || !!t?.isAggregateFilterPresent();
}
function Pk(e, t) {
  return e.filterManager?.getColumnFilterInstance(t) ?? Promise.resolve(void 0);
}
function Ek(e, t) {
  const i = e.colModel.getColDefCol(t);
  if (i)
    return e.colFilter?.destroyFilter(i, "api");
}
function Dk(e, t) {
  e.frameworkOverrides.wrapIncoming(() => e.filterManager?.setFilterModel(t));
}
function Tk(e) {
  return e.filterManager?.getFilterModel() ?? {};
}
function Mk(e, t, i) {
  const { gos: s, colModel: o, colFilter: n } = e;
  i && !s.get("enableFilterHandlers") && (B(288), i = !1);
  const r = o.getColDefCol(t);
  return r ? n?.getModelForColumn(r, i) ?? null : null;
}
function Ak(e, t, i) {
  return e.filterManager?.setColumnFilterModel(t, i) ?? Promise.resolve();
}
function Ik(e, t) {
  const i = e.colModel.getCol(t);
  if (!i) {
    he(12, { colKey: t });
    return;
  }
  e.menuSvc?.showFilterMenu({
    column: i,
    containerType: "columnFilter",
    positionBy: "auto"
  });
}
function kk(e) {
  e.menuSvc?.hideFilterMenu();
}
function Lk(e, t) {
  const i = e.colModel.getCol(t);
  if (!i) {
    he(12, { colKey: t });
    return;
  }
  return e.colFilter?.getHandler(i, !0);
}
function Ok(e, t) {
  const { colModel: i, colFilter: s, gos: o } = e;
  if (!o.get("enableFilterHandlers")) {
    B(287);
    return;
  }
  const { colId: n, action: r } = t;
  if (n) {
    const a = i.getColById(n);
    a && s?.updateModel(a, r);
  } else
    s?.updateAllModels(r);
}
var Vk = {
  filterHandler: () => ({
    doesFilterPass: () => !0
  })
}, Gk = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colFilter", this.allColumnFilters = /* @__PURE__ */ new Map(), this.allColumnListeners = /* @__PURE__ */ new Map(), this.activeAggregateFilters = [], this.activeColumnFilters = [], this.processingFilterChange = !1, this.modelUpdates = [], this.columnModelUpdates = [], this.state = /* @__PURE__ */ new Map(), this.handlerMap = {
      ...sm
    }, this.isGlobalButtons = !1, this.activeFilterComps = /* @__PURE__ */ new Set();
  }
  postConstruct() {
    this.addManagedEventListeners({
      gridColumnsChanged: this.onColumnsChanged.bind(this),
      dataTypesInferred: this.processFilterModelUpdateQueue.bind(this)
    });
    const e = this.gos, t = {
      ...e.get("initialState")?.filter?.filterModel ?? {}
    };
    this.initialModel = t, this.model = {
      ...t
    }, e.get("enableFilterHandlers") || delete this.handlerMap.agMultiColumnFilter;
  }
  refreshModel() {
    this.onNewRowsLoaded("rowDataUpdated");
  }
  setModel(e, t = "api") {
    const { colModel: i, dataTypeSvc: s, filterManager: o } = this.beans;
    if (s?.isPendingInference) {
      this.modelUpdates.push({ model: e, source: t });
      return;
    }
    const n = [], r = this.getModel(!0);
    if (e) {
      const a = new Set(Object.keys(e));
      this.allColumnFilters.forEach((l, c) => {
        const d = e[c];
        n.push(this.setModelOnFilterWrapper(l, d)), a.delete(c);
      }), a.forEach((l) => {
        const c = i.getColDefCol(l) || i.getCol(l);
        if (!c) {
          B(62, { colId: l });
          return;
        }
        if (!c.isFilterAllowed()) {
          B(63, { colId: l });
          return;
        }
        const d = this.getOrCreateFilterWrapper(c, !0);
        if (!d) {
          B(64, { colId: l });
          return;
        }
        n.push(this.setModelOnFilterWrapper(d, e[l], !0));
      });
    } else
      this.model = {}, this.allColumnFilters.forEach((a) => {
        n.push(this.setModelOnFilterWrapper(a, null));
      });
    re.all(n).then(() => {
      const a = this.getModel(!0), l = [];
      this.allColumnFilters.forEach((c, d) => {
        const u = r ? r[d] : null, h = a ? a[d] : null;
        mo(u, h) || l.push(c.column);
      }), l.length > 0 && o?.onFilterChanged({ columns: l, source: t });
    });
  }
  getModel(e) {
    const t = {}, {
      allColumnFilters: i,
      initialModel: s,
      beans: { colModel: o }
    } = this;
    if (i.forEach((n, r) => {
      const a = this.getModelFromFilterWrapper(n);
      $(a) && (t[r] = a);
    }), !e)
      for (const n of Object.keys(s)) {
        const r = s[n];
        $(r) && !i.has(n) && o.getCol(n)?.isFilterAllowed() && (t[n] = r);
      }
    return t;
  }
  setState(e, t, i = "api") {
    if (this.state.clear(), t)
      for (const s of Object.keys(t)) {
        const o = t[s];
        this.state.set(s, {
          model: Ge(this.model, s),
          state: o
        });
      }
    this.setModel(e, i);
  }
  getState() {
    const e = this.state;
    if (!e.size)
      return;
    const t = {};
    let i = !1;
    return e.forEach((s, o) => {
      const n = s.state;
      n != null && (i = !0, t[o] = n);
    }), i ? t : void 0;
  }
  getModelFromFilterWrapper(e) {
    const i = e.column.getColId();
    if (e.isHandler)
      return Ge(this.model, i);
    const s = e.filter;
    return s ? typeof s.getModel != "function" ? (B(66), null) : s.getModel() : Ge(this.initialModel, i);
  }
  isFilterPresent() {
    return this.activeColumnFilters.length > 0;
  }
  isAggFilterPresent() {
    return !!this.activeAggregateFilters.length;
  }
  disableFilters() {
    this.initialModel = {};
    const { allColumnFilters: e } = this;
    return e.size ? (e.forEach(
      (t) => this.disposeFilterWrapper(t, "advancedFilterEnabled")
    ), !0) : !1;
  }
  updateActiveFilters() {
    const e = (c) => c ? c.isFilterActive ? c.isFilterActive() : (B(67), !1) : !1, { colModel: t, gos: i } = this.beans, s = !!qa(i), o = (c) => {
      if (!c.isPrimary())
        return !0;
      const u = !t.isPivotActive();
      return !c.isValueActive() || !u ? !1 : t.isPivotMode() ? !0 : s;
    }, n = [], r = [], a = (c, d, u) => {
      d && (o(c) ? n.push(u) : r.push(u));
    }, l = [];
    return this.allColumnFilters.forEach((c) => {
      const d = c.column, u = d.getColId();
      if (c.isHandler)
        l.push(
          re.resolve().then(() => {
            a(d, this.isHandlerActive(d), {
              colId: u,
              isHandler: !0,
              handler: c.handler,
              handlerParams: c.handlerParams
            });
          })
        );
      else {
        const h = ei(c);
        h && l.push(
          h.then((g) => {
            a(d, e(g), {
              colId: u,
              isHandler: !1,
              comp: g
            });
          })
        );
      }
    }), re.all(l).then(() => {
      this.activeAggregateFilters = n, this.activeColumnFilters = r;
    });
  }
  updateFilterFlagInColumns(e, t) {
    const i = [];
    return this.allColumnFilters.forEach((s) => {
      const o = s.column;
      if (s.isHandler)
        i.push(
          re.resolve().then(() => {
            this.setColFilterActive(
              o,
              this.isHandlerActive(o),
              e,
              t
            );
          })
        );
      else {
        const n = ei(s);
        n && i.push(
          n.then((r) => {
            this.setColFilterActive(
              o,
              r.isFilterActive(),
              e,
              t
            );
          })
        );
      }
    }), this.beans.groupFilter?.updateFilterFlags(e, t), re.all(i);
  }
  doFiltersPass(e, t, i) {
    const { data: s, aggData: o } = e, n = i ? this.activeAggregateFilters : this.activeColumnFilters, r = i ? o : s, a = this.model;
    for (let l = 0; l < n.length; l++) {
      const c = n[l], { colId: d, isHandler: u } = c;
      if (d !== t)
        if (u) {
          const { handler: h, handlerParams: g } = c;
          if (!h.doesFilterPass({
            node: e,
            data: r,
            model: Ge(a, d),
            handlerParams: g
          }))
            return !1;
        } else {
          const h = c.comp;
          if (typeof h.doesFilterPass != "function") {
            he(91);
            continue;
          }
          if (!h.doesFilterPass({ node: e, data: r }))
            return !1;
        }
    }
    return !0;
  }
  getHandlerParams(e) {
    const t = this.allColumnFilters.get(e.getColId());
    return t?.isHandler ? t.handlerParams : void 0;
  }
  // sometimes (especially in React) the filter can call onFilterChanged when we are in the middle
  // of a render cycle. this would be bad, so we wait for render cycle to complete when this happens.
  // this happens in react when we change React State in the grid (eg setting RowCtrl's in RowContainer)
  // which results in React State getting applied in the main application, triggering a useEffect() to
  // be kicked off adn then the application calling the grid's API. in AG-6554, the custom filter was
  // getting it's useEffect() triggered in this way.
  callOnFilterChangedOutsideRenderCycle(e) {
    const { rowRenderer: t, filterManager: i } = this.beans, s = () => {
      this.isAlive() && i?.onFilterChanged(e);
    };
    t.isRefreshInProgress() ? setTimeout(s, 0) : s();
  }
  updateBeforeFilterChanged(e = {}) {
    const { column: t, additionalEventAttributes: i } = e, s = t?.getColId();
    return this.updateActiveFilters().then(
      () => this.updateFilterFlagInColumns("filterChanged", i).then(() => {
        this.allColumnFilters.forEach((o) => {
          const { column: n, isHandler: r } = o;
          s !== n.getColId() && (r && o.handler.onAnyFilterChanged?.(), ei(o, r)?.then((a) => {
            typeof a?.onAnyFilterChanged == "function" && a.onAnyFilterChanged();
          }));
        }), this.processingFilterChange = !0;
      })
    );
  }
  updateAfterFilterChanged() {
    this.processingFilterChange = !1;
  }
  isSuppressFlashingCellsBecauseFiltering() {
    return !(this.gos.get("allowShowChangeAfterFilter") ?? !1) && this.processingFilterChange;
  }
  onNewRowsLoaded(e) {
    const t = [];
    this.allColumnFilters.forEach((i) => {
      const s = i.isHandler;
      s && i.handler.onNewRowsLoaded?.();
      const o = ei(i, s);
      o && t.push(
        o.then((n) => {
          n.onNewRowsLoaded?.();
        })
      );
    }), re.all(t).then(() => this.updateFilterFlagInColumns(e, { afterDataChange: !0 })).then(() => this.updateActiveFilters());
  }
  createGetValue(e, t) {
    const { filterValueSvc: i, colModel: s } = this.beans;
    return (o, n) => {
      const r = n ? s.getCol(n) : e;
      return r ? i.getValue(r, o, t) : void 0;
    };
  }
  isFilterActive(e) {
    const t = this.cachedFilter(e);
    if (t?.isHandler)
      return this.isHandlerActive(e);
    const i = t?.filter;
    return i ? i.isFilterActive() : Ge(this.initialModel, e.getColId()) != null;
  }
  isHandlerActive(e) {
    const t = $(Ge(this.model, e.getColId()));
    if (t)
      return t;
    const i = this.beans.groupFilter;
    return i?.isGroupFilter(e) ? i.isFilterActive(e) : !1;
  }
  getOrCreateFilterUi(e) {
    const t = this.getOrCreateFilterWrapper(e, !0);
    return t ? ei(t) : null;
  }
  getFilterUiForDisplay(e) {
    const t = this.getOrCreateFilterWrapper(e, !0);
    if (!t)
      return null;
    const i = ei(t);
    return i ? i.then((s) => ({
      comp: s,
      params: t.filterUi.filterParams,
      isHandler: t.isHandler
    })) : null;
  }
  getHandler(e, t) {
    const i = this.getOrCreateFilterWrapper(e, t);
    return i?.isHandler ? i.handler : void 0;
  }
  getOrCreateFilterWrapper(e, t) {
    if (!e.isFilterAllowed())
      return;
    let i = this.cachedFilter(e);
    return !i && t && (i = this.createFilterWrapper(e), this.setColumnFilterWrapper(e, i)), i;
  }
  cachedFilter(e) {
    return this.allColumnFilters.get(e.getColId());
  }
  getDefaultFilter(e, t = !1) {
    return this.getDefaultFilterFromDataType(() => this.beans.dataTypeSvc?.getBaseDataType(e), t);
  }
  getDefaultFilterFromDataType(e, t = !1) {
    return ux(this.gos) ? t ? "agSetColumnFloatingFilter" : "agSetColumnFilter" : YP(e(), t);
  }
  getDefaultFloatingFilter(e) {
    return this.getDefaultFilter(e, !0);
  }
  createFilterComp(e, t, i, s, o, n) {
    const r = () => {
      const c = this.createFilterCompParams(e, o, n), d = s(c, o);
      return RF(this.beans.userCompFactory, t, d, i);
    }, a = r();
    return a ? {
      compDetails: a,
      createFilterUi: (c) => (c ? r() : a).newAgStackInstance()
    } : null;
  }
  createFilterInstance(e, t, i, s) {
    const o = this.beans.selectableFilter;
    o?.isSelectable(t) && (t = o.getFilterDef(e, t));
    const { handler: n, handlerParams: r, handlerGenerator: a } = this.createHandler(e, t, i) ?? {}, l = this.createFilterComp(
      e,
      t,
      i,
      s,
      !!n,
      "init"
    );
    if (!l)
      return {
        compDetails: null,
        createFilterUi: null,
        handler: n,
        handlerGenerator: a,
        handlerParams: r
      };
    const { compDetails: c, createFilterUi: d } = l;
    return this.isGlobalButtons && (c.params?.buttons?.length || B(281, { colId: e.getColId() })), {
      compDetails: c,
      handler: n,
      handlerGenerator: a,
      handlerParams: r,
      createFilterUi: d
    };
  }
  createBaseFilterParams(e, t) {
    const { filterManager: i, rowModel: s } = this.beans;
    return Z(this.gos, {
      column: e,
      colDef: e.getColDef(),
      getValue: this.createGetValue(e),
      doesRowPassOtherFilter: t ? () => !0 : (o) => i?.doesRowPassOtherFilters(e.getColId(), o) ?? !0,
      // to avoid breaking changes to `filterParams` defined as functions
      // we need to provide the below options even though they are not valid for handlers
      rowModel: s
    });
  }
  createFilterCompParams(e, t, i, s) {
    const o = this.filterChangedCallbackFactory(e), n = this.createBaseFilterParams(e, s);
    if (n.filterChangedCallback = o, n.filterModifiedCallback = s ? () => {
    } : (r) => this.filterModified(e, r), t) {
      const r = n, a = e.getColId(), l = Ge(this.model, a);
      r.model = l, r.state = this.state.get(a) ?? {
        model: l
      }, r.onModelChange = (c, d) => {
        this.updateStoredModel(a, c), this.refreshHandlerAndUi(e, c, "ui").then(() => {
          o({ ...d, source: "columnFilter" });
        });
      }, r.onStateChange = (c) => {
        this.updateState(e, c), this.updateOrRefreshFilterUi(e);
      }, r.onAction = (c, d, u) => {
        this.updateModel(e, c, d), this.dispatchLocalEvent({
          type: "filterAction",
          column: e,
          action: c,
          event: u
        });
      }, r.getHandler = () => this.getHandler(e, !0), r.onUiChange = (c) => this.filterUiChanged(e, c), r.source = i;
    }
    return n;
  }
  createFilterUiForHandler(e, t) {
    return t ? {
      created: !1,
      create: t,
      filterParams: e.params,
      compDetails: e
    } : null;
  }
  createFilterUiLegacy(e, t, i) {
    const s = t(), o = {
      created: !0,
      create: t,
      filterParams: e.params,
      compDetails: e,
      promise: s
    };
    return s.then(i), o;
  }
  createFilterWrapper(e) {
    const { compDetails: t, handler: i, handlerGenerator: s, handlerParams: o, createFilterUi: n } = this.createFilterInstance(
      e,
      e.getColDef(),
      this.getDefaultFilter(e),
      (a) => a
    ), r = e.getColId();
    if (i)
      return delete this.initialModel[r], i.init?.({
        ...o,
        source: "init",
        model: Ge(this.model, r)
      }), {
        column: e,
        isHandler: !0,
        handler: i,
        handlerGenerator: s,
        handlerParams: o,
        filterUi: this.createFilterUiForHandler(t, n)
      };
    if (n) {
      const a = {
        column: e,
        filterUi: null,
        isHandler: !1
      };
      return a.filterUi = this.createFilterUiLegacy(t, n, (l) => {
        a.filter = l ?? void 0;
      }), a;
    }
    return {
      column: e,
      filterUi: null,
      isHandler: !1
    };
  }
  createHandlerFunc(e, t) {
    const { gos: i, frameworkOverrides: s, registry: o } = this.beans;
    let n;
    const r = (u) => {
      const h = u.filter;
      if (kf(h)) {
        const g = h.handler;
        return g || (n = h.doesFilterPass, n ? () => ({
          doesFilterPass: n
        }) : void 0);
      }
      return typeof h == "string" ? h : void 0;
    }, a = i.get("enableFilterHandlers") ? r(e) : void 0, l = (u) => () => this.createBean(o.createDynamicBean(u, !0));
    let c, d;
    if (typeof a == "string") {
      const u = i.get("filterHandlers")?.[a];
      u != null ? c = u : LP.has(a) && (c = l(a), d = a);
    } else
      c = a;
    if (!c) {
      let u;
      const { compName: h, jsComp: g, fwComp: p } = Vf(s, e);
      h ? u = h : g == null && p == null && e.filter === !0 && (u = t), d = this.handlerMap[u], d && (c = l(d));
    }
    if (c)
      return { filterHandler: c, handlerNameOrCallback: n ?? d };
  }
  createHandler(e, t, i) {
    let s = this.createHandlerFunc(t, i);
    if (!s) {
      const c = this.gos;
      if (!c.get("enableFilterHandlers"))
        return;
      Oe(c) && B(277, { colId: e.getColId() }), s = Vk;
    }
    const o = jr(
      this.beans.userCompFactory,
      t,
      this.createFilterCompParams(e, !0, "init")
    ), { handlerNameOrCallback: n, filterHandler: r } = s, { handler: a, handlerParams: l } = this.createHandlerFromFunc(e, r, o);
    return {
      handler: a,
      handlerParams: l,
      handlerGenerator: n ?? r
    };
  }
  createHandlerFromFunc(e, t, i) {
    const s = e.getColDef(), o = t(Z(this.gos, { column: e, colDef: s })), n = this.createHandlerParams(e, i);
    return { handler: o, handlerParams: n };
  }
  createHandlerParams(e, t) {
    const i = e.getColDef(), s = e.getColId(), o = this.filterChangedCallbackFactory(e);
    return Z(this.gos, {
      colDef: i,
      column: e,
      getValue: this.createGetValue(e),
      doesRowPassOtherFilter: (n) => this.beans.filterManager?.doesRowPassOtherFilters(s, n) ?? !0,
      onModelChange: (n, r) => {
        this.updateStoredModel(s, n), this.refreshHandlerAndUi(e, n, "handler").then(() => {
          o({ ...r, source: "columnFilter" });
        });
      },
      filterParams: t
    });
  }
  onColumnsChanged() {
    const e = [], { colModel: t, filterManager: i, groupFilter: s } = this.beans;
    this.allColumnFilters.forEach((n, r) => {
      let a;
      n.column.isPrimary() ? a = t.getColDefCol(r) : a = t.getCol(r), !(a && a === n.column) && (e.push(n.column), this.disposeFilterWrapper(n, "columnChanged"), this.disposeColumnListener(r));
    });
    const o = s && e.every((n) => s.isGroupFilter(n));
    e.length > 0 && !o && i?.onFilterChanged({ columns: e, source: "api" });
  }
  isFilterAllowed(e) {
    if (!e.isFilterAllowed())
      return !1;
    const i = this.beans.groupFilter;
    return i?.isGroupFilter(e) ? i.isFilterAllowed(e) : !0;
  }
  getFloatingFilterCompDetails(e, t) {
    const { userCompFactory: i, frameworkOverrides: s, selectableFilter: o } = this.beans, n = (h) => {
      const g = this.getOrCreateFilterUi(e);
      g?.then((p) => {
        h(bo(p));
      });
    }, r = e.getColDef(), a = o?.isSelectable(r) ? o.getFilterDef(e, r) : r, l = eE(s, a, () => this.getDefaultFloatingFilter(e)) ?? "agReadOnlyFloatingFilter", c = this.gos.get("enableFilterHandlers"), d = jr(
      i,
      a,
      this.createFilterCompParams(e, c, "init", !0)
    ), u = Z(this.gos, {
      column: e,
      filterParams: d,
      currentParentModel: () => this.getCurrentFloatingFilterParentModel(e),
      parentFilterInstance: n,
      showParentFilter: t
    });
    if (c) {
      const h = u, g = e.getColId(), p = this.filterChangedCallbackFactory(e);
      h.onUiChange = (f) => this.floatingFilterUiChanged(e, f), h.model = Ge(this.model, g), h.onModelChange = (f, m) => {
        this.updateStoredModel(g, f), this.refreshHandlerAndUi(e, f, "floating", !0).then(() => {
          p({ ...m, source: "columnFilter" });
        });
      }, h.getHandler = () => this.getHandler(e, !0), h.source = "init";
    }
    return DF(i, r, u, l);
  }
  getCurrentFloatingFilterParentModel(e) {
    return this.getModelFromFilterWrapper(this.cachedFilter(e) ?? { column: e });
  }
  destroyFilterUi(e, t, i, s) {
    if (e.isHandler) {
      const o = t.getColId();
      delete this.initialModel[o], this.state.delete(o);
      const n = e.filterUi, r = this.createFilterUiForHandler(i, s);
      e.filterUi = r, n?.created && n.promise.then((a) => {
        this.destroyBean(a), this.eventSvc.dispatchEvent({
          type: "filterDestroyed",
          source: "paramsUpdated",
          column: e.column
        });
      });
    } else
      this.destroyFilter(t, "paramsUpdated");
  }
  // destroys the filter, so it no longer takes part
  destroyFilter(e, t = "api") {
    const i = e.getColId(), s = this.allColumnFilters.get(i);
    this.disposeColumnListener(i), delete this.initialModel[i], s && this.disposeFilterWrapper(s, t).then((o) => {
      o && this.isAlive() && this.beans.filterManager?.onFilterChanged({
        columns: [e],
        source: "api"
      });
    });
  }
  disposeColumnListener(e) {
    const t = this.allColumnListeners.get(e);
    t && (this.allColumnListeners.delete(e), t());
  }
  disposeFilterWrapper(e, t) {
    let i = !1;
    const { column: s, isHandler: o, filterUi: n } = e, r = s.getColId();
    o && (i = this.isHandlerActive(s), this.destroyBean(e.handler), delete this.model[r], this.state.delete(r));
    const a = () => {
      this.setColFilterActive(s, !1, "filterDestroyed"), this.allColumnFilters.delete(r), this.eventSvc.dispatchEvent({
        type: "filterDestroyed",
        source: t,
        column: s
      });
    };
    if (n) {
      if (n.created)
        return n.promise.then((l) => (i = o ? i : !!l?.isFilterActive(), this.destroyBean(l), a(), i));
      a();
    }
    return re.resolve(i);
  }
  filterChangedCallbackFactory(e) {
    return (t) => {
      this.callOnFilterChangedOutsideRenderCycle({
        additionalEventAttributes: t,
        columns: [e],
        column: e,
        source: t?.source ?? "columnFilter"
      });
    };
  }
  filterParamsChanged(e, t = "api") {
    const i = this.allColumnFilters.get(e);
    if (!i)
      return;
    const s = this.beans, o = i.column, n = o.getColDef(), r = o.isFilterAllowed(), a = this.getDefaultFilter(o), l = s.selectableFilter, c = l?.isSelectable(n) ? l.getFilterDef(o, n) : n, d = r ? this.createHandlerFunc(c, this.getDefaultFilter(o)) : void 0, u = !!d, h = i.isHandler;
    if (h != u) {
      this.destroyFilter(o, "paramsUpdated");
      return;
    }
    const { compDetails: g, createFilterUi: p } = (r ? this.createFilterComp(o, c, a, (m) => m, u, "colDef") : null) ?? { compDetails: null, createFilterUi: null }, f = g?.params ?? jr(
      s.userCompFactory,
      c,
      this.createFilterCompParams(o, u, "colDef")
    );
    if (h) {
      const m = d?.handlerNameOrCallback ?? d?.filterHandler, C = Ge(this.model, e);
      if (i.handlerGenerator != m) {
        const v = i.handler, { handler: w, handlerParams: y } = this.createHandlerFromFunc(
          o,
          d.filterHandler,
          f
        );
        i.handler = w, i.handlerParams = y, i.handlerGenerator = m, delete this.model[e], w.init?.({ ...y, source: "init", model: null }), this.destroyBean(v), C != null && this.beans.filterManager?.onFilterChanged({
          columns: [o],
          source: t
        });
      } else {
        const v = this.createHandlerParams(o, g?.params);
        i.handlerParams = v, i.handler.refresh?.({
          ...v,
          source: "colDef",
          model: C
        });
      }
    }
    if (this.areFilterCompsDifferent(i.filterUi?.compDetails ?? null, g) || !i.filterUi || !g) {
      this.destroyFilterUi(i, o, g, p);
      return;
    }
    i.filterUi.filterParams = f, ei(i, h)?.then((m) => {
      (m?.refresh ? m.refresh(f) : !0) === !1 ? this.destroyFilterUi(i, o, g, p) : this.dispatchLocalEvent({
        type: "filterParamsChanged",
        column: o,
        params: f
      });
    });
  }
  refreshHandlerAndUi(e, t, i, s) {
    const o = this.cachedFilter(e);
    if (!o)
      return s && this.getOrCreateFilterWrapper(e, !0), re.resolve();
    if (!o.isHandler)
      return re.resolve();
    const { filterUi: n, handler: r, handlerParams: a } = o;
    return OP(
      () => {
        if (n) {
          const { created: l, filterParams: c } = n;
          if (l)
            return n.promise.then((d) => d ? { filter: d, filterParams: c } : void 0);
          n.refreshed = !0;
        }
        return re.resolve(void 0);
      },
      r,
      a,
      t,
      this.state.get(e.getColId()) ?? { model: t },
      i
    );
  }
  setColumnFilterWrapper(e, t) {
    const i = e.getColId();
    this.allColumnFilters.set(i, t), this.allColumnListeners.set(
      i,
      this.addManagedListeners(e, { colDefChanged: () => this.filterParamsChanged(i) })[0]
    );
  }
  areFilterCompsDifferent(e, t) {
    if (!t || !e)
      return !0;
    const { componentClass: i } = e, { componentClass: s } = t;
    return !(i === s || // react hooks returns new wrappers, so check nested render method
    i?.render && s?.render && i.render === s.render);
  }
  hasFloatingFilters() {
    return this.beans.colModel.getCols().some((t) => t.getColDef().floatingFilter);
  }
  getFilterInstance(e) {
    const t = this.beans.colModel.getColDefCol(e);
    if (!t)
      return Promise.resolve(void 0);
    const i = this.getOrCreateFilterUi(t);
    return i ? new Promise((s) => {
      i.then((o) => {
        s(bo(o));
      });
    }) : Promise.resolve(null);
  }
  processFilterModelUpdateQueue() {
    this.modelUpdates.forEach(({ model: e, source: t }) => this.setModel(e, t)), this.modelUpdates = [], this.columnModelUpdates.forEach(({ key: e, model: t, resolve: i }) => {
      this.setModelForColumn(e, t).then(() => i());
    }), this.columnModelUpdates = [];
  }
  getModelForColumn(e, t) {
    if (t) {
      const { state: s, model: o } = this, n = e.getColId(), r = s.get(n);
      return r ? r.model ?? null : Ge(o, n);
    }
    const i = this.cachedFilter(e);
    return i ? this.getModelFromFilterWrapper(i) : null;
  }
  setModelForColumn(e, t) {
    if (this.beans.dataTypeSvc?.isPendingInference) {
      let i = () => {
      };
      const s = new Promise((o) => {
        i = o;
      });
      return this.columnModelUpdates.push({ key: e, model: t, resolve: i }), s;
    }
    return new Promise((i) => {
      this.setModelForColumnLegacy(e, t).then((s) => i(s));
    });
  }
  getStateForColumn(e) {
    return this.state.get(e) ?? {
      model: Ge(this.model, e)
    };
  }
  setModelForColumnLegacy(e, t) {
    const i = this.beans.colModel.getColDefCol(e), s = i ? this.getOrCreateFilterWrapper(i, !0) : null;
    return s ? this.setModelOnFilterWrapper(s, t) : re.resolve();
  }
  setColDefPropsForDataType(e, t, i) {
    const s = e.filter, o = s === !0 ? this.getDefaultFilterFromDataType(() => t.baseDataType) : s;
    if (typeof o != "string")
      return;
    let n, r;
    const a = this.beans, { filterParams: l, filterValueGetter: c } = e;
    o === "agMultiColumnFilter" ? { filterParams: n, filterValueGetter: r } = a.multiFilter?.getParamsForDataType(
      l,
      c,
      t,
      i
    ) ?? {} : { filterParams: n, filterValueGetter: r } = jP(
      o,
      l,
      c,
      t,
      i,
      a,
      this.getLocaleTextFunc()
    ), e.filterParams = n, r && (e.filterValueGetter = r);
  }
  // additionalEventAttributes is used by provided simple floating filter, so it can add 'floatingFilter=true' to the event
  setColFilterActive(e, t, i, s) {
    e.filterActive !== t && (e.filterActive = t, e.dispatchColEvent("filterActiveChanged", i)), e.dispatchColEvent("filterChanged", i, s);
  }
  setModelOnFilterWrapper(e, t, i) {
    return new re((s) => {
      if (e.isHandler) {
        const n = e.column, r = n.getColId(), a = this.model[r];
        if (this.updateStoredModel(r, t), i && t === a) {
          s();
          return;
        }
        this.refreshHandlerAndUi(n, t, "api").then(() => s());
        return;
      }
      const o = ei(e);
      if (o) {
        o.then((n) => {
          if (typeof n?.setModel != "function") {
            B(65), s();
            return;
          }
          (n.setModel(t) || re.resolve()).then(() => s());
        });
        return;
      }
      s();
    });
  }
  /** for handlers only */
  updateStoredModel(e, t) {
    $(t) ? this.model[e] = t : delete this.model[e];
    const i = this.state.get(e), s = {
      model: t,
      state: i?.state
    };
    this.state.set(e, s);
  }
  filterModified(e, t) {
    this.getOrCreateFilterUi(e)?.then((i) => {
      this.eventSvc.dispatchEvent({
        type: "filterModified",
        column: e,
        filterInstance: i,
        ...t
      });
    });
  }
  filterUiChanged(e, t) {
    this.gos.get("enableFilterHandlers") && this.eventSvc.dispatchEvent({
      type: "filterUiChanged",
      column: e,
      ...t
    });
  }
  floatingFilterUiChanged(e, t) {
    this.gos.get("enableFilterHandlers") && this.eventSvc.dispatchEvent({
      type: "floatingFilterUiChanged",
      column: e,
      ...t
    });
  }
  updateModel(e, t, i) {
    const s = e.getColId(), o = () => this.cachedFilter(e)?.filterUi;
    Iu(
      t,
      o,
      () => Ge(this.model, s),
      () => this.state.get(s),
      (n) => this.updateState(e, n),
      (n) => o()?.filterParams?.onModelChange(n, i)
    );
  }
  updateAllModels(e, t) {
    const i = [];
    this.allColumnFilters.forEach((s, o) => {
      const n = this.beans.colModel.getColDefCol(o);
      n && Iu(
        e,
        () => s.filterUi,
        () => Ge(this.model, o),
        () => this.state.get(o),
        (r) => this.updateState(n, r),
        (r) => {
          this.updateStoredModel(o, r), this.dispatchLocalEvent({
            type: "filterAction",
            column: n,
            action: e
          }), i.push(this.refreshHandlerAndUi(n, r, "ui"));
        }
      );
    }), i.length && re.all(i).then(() => {
      this.callOnFilterChangedOutsideRenderCycle({
        source: "columnFilter",
        additionalEventAttributes: t,
        columns: []
      });
    });
  }
  updateOrRefreshFilterUi(e) {
    const t = e.getColId();
    nm(
      () => this.cachedFilter(e)?.filterUi,
      () => Ge(this.model, t),
      () => this.state.get(t)
    );
  }
  updateState(e, t) {
    this.state.set(e.getColId(), t), this.dispatchLocalEvent({
      type: "filterStateChanged",
      column: e,
      state: t
    });
  }
  // for tool panel only
  canApplyAll() {
    const { state: e, model: t, activeFilterComps: i } = this;
    for (const o of i)
      if (o.source === "COLUMN_MENU")
        return !1;
    let s = !1;
    for (const o of e.keys()) {
      const n = e.get(o);
      if (n.valid === !1)
        return !1;
      (n.model ?? null) !== Ge(t, o) && (s = !0);
    }
    return s;
  }
  hasUnappliedModel(e) {
    const { model: t, state: i } = this;
    return (i.get(e)?.model ?? null) !== Ge(t, e);
  }
  setGlobalButtons(e) {
    this.isGlobalButtons = e, this.dispatchLocalEvent({
      type: "filterGlobalButtons",
      isGlobal: e
    });
  }
  shouldKeepStateOnDetach(e, t) {
    if (t === "newFiltersToolPanel")
      return !0;
    const i = this.beans.filterPanelSvc;
    return i?.isActive ? !!i.getState(e.getColId()) : !1;
  }
  destroy() {
    super.destroy(), this.allColumnFilters.forEach((e) => this.disposeFilterWrapper(e, "gridDestroyed")), this.allColumnListeners.clear(), this.state.clear(), this.activeFilterComps.clear();
  }
};
function Hk(e) {
  return !!e.filterManager?.isAnyFilterPresent();
}
function Bk(e, t = "api") {
  e.filterManager?.onFilterChanged({ source: t });
}
var Nk = class extends T {
  constructor() {
    super(...arguments), this.beanName = "filterManager", this.advFilterModelUpdateQueue = [];
  }
  wireBeans(e) {
    this.quickFilter = e.quickFilter, this.advancedFilter = e.advancedFilter, this.colFilter = e.colFilter;
  }
  postConstruct() {
    const e = this.refreshFiltersForAggregations.bind(this), t = this.updateAdvFilterColumns.bind(this);
    this.addManagedEventListeners({
      columnValueChanged: e,
      columnPivotChanged: e,
      columnPivotModeChanged: e,
      newColumnsLoaded: t,
      columnVisible: t,
      advancedFilterEnabledChanged: ({ enabled: s }) => this.onAdvFilterEnabledChanged(s),
      dataTypesInferred: this.processFilterModelUpdateQueue.bind(this)
    }), this.externalFilterPresent = this.isExternalFilterPresentCallback(), this.addManagedPropertyListeners(["isExternalFilterPresent", "doesExternalFilterPass"], () => {
      this.onFilterChanged({ source: "api" });
    }), this.updateAggFiltering(), this.addManagedPropertyListener("groupAggFiltering", () => {
      this.updateAggFiltering(), this.onFilterChanged();
    }), this.quickFilter && this.addManagedListeners(this.quickFilter, {
      quickFilterChanged: () => this.onFilterChanged({ source: "quickFilter" })
    });
    const { gos: i } = this;
    this.alwaysPassFilter = i.get("alwaysPassFilter"), this.addManagedPropertyListener("alwaysPassFilter", () => {
      this.alwaysPassFilter = i.get("alwaysPassFilter"), this.onFilterChanged({ source: "api" });
    });
  }
  isExternalFilterPresentCallback() {
    const e = this.gos.getCallback("isExternalFilterPresent");
    return typeof e == "function" && e({});
  }
  doesExternalFilterPass(e) {
    const t = this.gos.get("doesExternalFilterPass");
    return typeof t == "function" && t(e);
  }
  setFilterState(e, t, i = "api") {
    this.isAdvFilterEnabled() || this.colFilter?.setState(e, t, i);
  }
  setFilterModel(e, t = "api", i) {
    if (this.isAdvFilterEnabled()) {
      i || this.warnAdvFilters();
      return;
    }
    this.colFilter?.setModel(e, t);
  }
  getFilterModel() {
    return this.colFilter?.getModel() ?? {};
  }
  getFilterState() {
    return this.colFilter?.getState();
  }
  isColumnFilterPresent() {
    return !!this.colFilter?.isFilterPresent();
  }
  isAggregateFilterPresent() {
    return !!this.colFilter?.isAggFilterPresent();
  }
  isChildFilterPresent() {
    return this.isColumnFilterPresent() || this.isQuickFilterPresent() || this.externalFilterPresent || this.isAdvFilterPresent();
  }
  isAnyFilterPresent() {
    return this.isChildFilterPresent() || this.isAggregateFilterPresent();
  }
  isAdvFilterPresent() {
    return this.isAdvFilterEnabled() && this.advancedFilter.isFilterPresent();
  }
  onAdvFilterEnabledChanged(e) {
    e ? this.colFilter?.disableFilters() && this.onFilterChanged({ source: "advancedFilter" }) : this.advancedFilter?.isFilterPresent() && (this.advancedFilter.setModel(null), this.onFilterChanged({ source: "advancedFilter" }));
  }
  isAdvFilterEnabled() {
    return !!this.advancedFilter?.isEnabled();
  }
  isAdvFilterHeaderActive() {
    return this.isAdvFilterEnabled() && this.advancedFilter.isHeaderActive();
  }
  refreshFiltersForAggregations() {
    qa(this.gos) && this.isAnyFilterPresent() && this.onFilterChanged();
  }
  onFilterChanged(e = {}) {
    const { source: t, additionalEventAttributes: i, columns: s = [] } = e;
    this.externalFilterPresent = this.isExternalFilterPresentCallback(), (this.colFilter ? this.colFilter.updateBeforeFilterChanged(e) : re.resolve()).then(() => {
      const o = {
        source: t,
        type: "filterChanged",
        columns: s
      };
      i && Qe(o, i), this.eventSvc.dispatchEvent(o), this.colFilter?.updateAfterFilterChanged();
    });
  }
  isSuppressFlashingCellsBecauseFiltering() {
    return !!this.colFilter?.isSuppressFlashingCellsBecauseFiltering();
  }
  isQuickFilterPresent() {
    return !!this.quickFilter?.isFilterPresent();
  }
  updateAggFiltering() {
    this.aggFiltering = !!qa(this.gos);
  }
  isAggregateQuickFilterPresent() {
    return this.isQuickFilterPresent() && this.shouldApplyQuickFilterAfterAgg();
  }
  isNonAggregateQuickFilterPresent() {
    return this.isQuickFilterPresent() && !this.shouldApplyQuickFilterAfterAgg();
  }
  shouldApplyQuickFilterAfterAgg() {
    return (this.aggFiltering || this.beans.colModel.isPivotMode()) && !this.gos.get("applyQuickFilterBeforePivotOrAgg");
  }
  doesRowPassOtherFilters(e, t) {
    return this.doesRowPassFilter({ rowNode: t, colIdToSkip: e });
  }
  doesRowPassAggregateFilters(e) {
    const { rowNode: t } = e;
    return this.alwaysPassFilter?.(t) ? !0 : !(this.isAggregateQuickFilterPresent() && !this.quickFilter.doesRowPass(t) || this.isAggregateFilterPresent() && !this.colFilter.doFiltersPass(t, e.colIdToSkip, !0));
  }
  doesRowPassFilter(e) {
    const { rowNode: t } = e;
    return this.alwaysPassFilter?.(t) ? !0 : !(this.isNonAggregateQuickFilterPresent() && !this.quickFilter.doesRowPass(t) || this.externalFilterPresent && !this.doesExternalFilterPass(t) || this.isColumnFilterPresent() && !this.colFilter.doFiltersPass(t, e.colIdToSkip) || this.isAdvFilterPresent() && !this.advancedFilter.doesFilterPass(t));
  }
  // for group filters, can change dynamically whether they are allowed or not
  isFilterAllowed(e) {
    return this.isAdvFilterEnabled() ? !1 : !!this.colFilter?.isFilterAllowed(e);
  }
  getAdvFilterModel() {
    return this.isAdvFilterEnabled() ? this.advancedFilter.getModel() : null;
  }
  setAdvFilterModel(e, t = "api") {
    if (this.isAdvFilterEnabled()) {
      if (this.beans.dataTypeSvc?.isPendingInference) {
        this.advFilterModelUpdateQueue.push(e);
        return;
      }
      this.advancedFilter.setModel(e ?? null), this.onFilterChanged({ source: t });
    }
  }
  toggleAdvFilterBuilder(e, t) {
    this.isAdvFilterEnabled() && this.advancedFilter.getCtrl().toggleFilterBuilder({ source: t, force: e });
  }
  updateAdvFilterColumns() {
    this.isAdvFilterEnabled() && this.advancedFilter.updateValidity() && this.onFilterChanged({ source: "advancedFilter" });
  }
  hasFloatingFilters() {
    return this.isAdvFilterEnabled() ? !1 : !!this.colFilter?.hasFloatingFilters();
  }
  getColumnFilterInstance(e) {
    return this.isAdvFilterEnabled() ? (this.warnAdvFilters(), Promise.resolve(void 0)) : this.colFilter?.getFilterInstance(e) ?? Promise.resolve(void 0);
  }
  warnAdvFilters() {
    B(68);
  }
  setupAdvFilterHeaderComp(e) {
    this.advancedFilter?.getCtrl().setupHeaderComp(e);
  }
  getHeaderRowCount() {
    return this.isAdvFilterHeaderActive() ? 1 : 0;
  }
  getHeaderHeight() {
    return this.isAdvFilterHeaderActive() ? this.advancedFilter.getCtrl().getHeaderHeight() : 0;
  }
  processFilterModelUpdateQueue() {
    this.advFilterModelUpdateQueue.forEach((e) => this.setAdvFilterModel(e)), this.advFilterModelUpdateQueue = [];
  }
  setColumnFilterModel(e, t) {
    return this.isAdvFilterEnabled() ? (this.warnAdvFilters(), Promise.resolve()) : this.colFilter?.setModelForColumn(e, t) ?? Promise.resolve();
  }
}, Wk = class extends T {
  constructor() {
    super(...arguments), this.beanName = "filterMenuFactory";
  }
  wireBeans(e) {
    this.popupSvc = e.popupSvc;
  }
  hideActiveMenu() {
    this.hidePopup?.();
  }
  showMenuAfterMouseEvent(e, t, i, s) {
    e && !e.isColumn || this.showPopup(
      e,
      (o) => {
        this.popupSvc?.positionPopupUnderMouseEvent({
          column: e,
          type: i,
          mouseEvent: t,
          ePopup: o
        });
      },
      i,
      t.target,
      at(this.gos),
      s
    );
  }
  showMenuAfterButtonClick(e, t, i, s) {
    if (e && !e.isColumn)
      return;
    let o = -1, n = "left";
    const r = at(this.gos);
    !r && this.gos.get("enableRtl") && (o = 1, n = "right");
    const a = r ? void 0 : 4 * o, l = r ? void 0 : 4;
    this.showPopup(
      e,
      (c) => {
        this.popupSvc?.positionPopupByComponent({
          type: i,
          eventSource: t,
          ePopup: c,
          nudgeX: a,
          nudgeY: l,
          alignSide: n,
          keepWithinBounds: !0,
          position: "under",
          column: e
        });
      },
      i,
      t,
      r,
      s
    );
  }
  showPopup(e, t, i, s, o, n) {
    const r = e ? this.createBean(new WP(e, "COLUMN_MENU")) : void 0;
    if (this.activeMenu = r, !r?.hasFilter() || !e) {
      he(57);
      return;
    }
    const a = Ae({
      tag: "div",
      cls: `ag-menu${o ? "" : " ag-filter-menu"}`,
      role: "presentation"
    });
    [this.tabListener] = this.addManagedElementListeners(a, {
      keydown: (f) => this.trapFocusWithin(f, a)
    }), a.appendChild(r?.getGui());
    let l;
    const c = () => r?.afterGuiDetached(), d = hx(this.gos) ? s ?? this.beans.ctrlsSvc.getGridBodyCtrl().eGridBody : void 0, u = (f) => {
      Nu(e, !1, "contextMenu");
      const m = f instanceof KeyboardEvent;
      this.tabListener && (this.tabListener = this.tabListener()), m && s && Ht(s) && Xf(s)?.focus({ preventScroll: !0 }), c(), this.destroyBean(this.activeMenu), this.dispatchVisibleChangedEvent(!1, i, e), n?.();
    }, h = this.getLocaleTextFunc(), g = o && i !== "columnFilter" ? h("ariaLabelColumnMenu", "Column Menu") : h("ariaLabelColumnFilter", "Column Filter"), p = this.popupSvc?.addPopup({
      modal: !0,
      eChild: a,
      closeOnEsc: !0,
      closedCallback: u,
      positionCallback: () => t(a),
      anchorToElement: d,
      ariaLabel: g
    });
    p && (this.hidePopup = l = p.hideFunc), r.afterInit().then(() => {
      t(a), r.afterGuiAttached({ container: i, hidePopup: l });
    }), Nu(e, !0, "contextMenu"), this.dispatchVisibleChangedEvent(!0, i, e);
  }
  trapFocusWithin(e, t) {
    e.key !== E.TAB || e.defaultPrevented || qi(this.beans, t, !1, e.shiftKey) || (e.preventDefault(), Wi(t, e.shiftKey));
  }
  dispatchVisibleChangedEvent(e, t, i) {
    this.eventSvc.dispatchEvent({
      type: "columnMenuVisibleChanged",
      visible: e,
      switchingTab: !1,
      key: t,
      column: i ?? null,
      columnGroup: null
    });
  }
  isMenuEnabled(e) {
    return e.isFilterAllowed() && (e.getColDef().menuTabs ?? ["filterMenuTab"]).includes("filterMenuTab");
  }
  showMenuAfterContextMenuEvent() {
  }
  destroy() {
    this.destroyBean(this.activeMenu), super.destroy();
  }
}, zk = class extends T {
  constructor() {
    super(...arguments), this.beanName = "filterValueSvc";
  }
  getValue(e, t, i) {
    if (!t)
      return;
    const s = e.getColDef(), { selectableFilter: o, valueSvc: n } = this.beans, r = i ?? o?.getFilterValueGetter(e.getColId()) ?? s.filterValueGetter;
    return r ? this.executeFilterValueGetter(r, t.data, e, t, s) : n.getValue(e, t);
  }
  executeFilterValueGetter(e, t, i, s, o) {
    const { expressionSvc: n, valueSvc: r } = this.beans, a = Z(this.gos, {
      data: t,
      node: s,
      column: i,
      colDef: o,
      getValue: r.getValueCallback.bind(r, s)
    });
    return typeof e == "function" ? e(a) : n?.evaluate(e, a);
  }
}, _k = {
  tag: "div",
  cls: "ag-floating-filter-input",
  role: "presentation",
  children: [
    {
      tag: "ag-input-text-field",
      ref: "eFloatingFilterText"
    }
  ]
}, Uk = class extends pe {
  constructor() {
    super(_k, [fr]), this.eFloatingFilterText = q;
  }
  init(e) {
    this.params = e;
    const t = this.beans.colNames.getDisplayNameForColumn(e.column, "header", !0);
    if (this.eFloatingFilterText.setDisabled(!0).setInputAriaLabel(`${t} ${this.getLocaleTextFunc()("ariaFilterInput", "Filter Input")}`), this.gos.get("enableFilterHandlers")) {
      const i = e, s = i.getHandler();
      if (s.getModelAsString) {
        const o = s.getModelAsString(i.model);
        this.eFloatingFilterText.setValue(o);
      }
    }
  }
  onParentModelChanged(e) {
    if (e == null) {
      this.eFloatingFilterText.setValue("");
      return;
    }
    this.params.parentFilterInstance((t) => {
      if (t.getModelAsString) {
        const i = t.getModelAsString(e);
        this.eFloatingFilterText.setValue(i);
      }
    });
  }
  refresh(e) {
    this.init(e);
  }
}, Gc = class {
  constructor() {
    this.customFilterOptions = {};
  }
  init(e, t) {
    this.filterOptions = e.filterOptions ?? t, this.mapCustomOptions(), this.defaultOption = this.getDefaultItem(e.defaultOption);
  }
  refresh(e, t) {
    const i = e.filterOptions ?? t;
    this.filterOptions !== i && (this.filterOptions = i, this.customFilterOptions = {}, this.mapCustomOptions()), this.defaultOption = this.getDefaultItem(e.defaultOption);
  }
  mapCustomOptions() {
    const { filterOptions: e } = this;
    e && e.forEach((t) => {
      if (typeof t == "string")
        return;
      const i = [["displayKey"], ["displayName"], ["predicate", "test"]], s = (o) => o.some((n) => t[n] != null) ? !0 : (B(72, { keys: o }), !1);
      if (!i.every(s)) {
        this.filterOptions = e.filter((o) => o === t) || [];
        return;
      }
      this.customFilterOptions[t.displayKey] = t;
    });
  }
  getDefaultItem(e) {
    const { filterOptions: t } = this;
    if (e)
      return e;
    if (t.length >= 1) {
      const i = t[0];
      if (typeof i == "string")
        return i;
      if (i.displayKey)
        return i.displayKey;
      B(73);
    } else
      B(74);
  }
  getCustomOption(e) {
    return this.customFilterOptions[e];
  }
};
function ro(e, t, i) {
  return i == null ? e.splice(t) : e.splice(t, i);
}
function ir(e) {
  return e == null || typeof e == "string" && e.trim().length === 0;
}
function jk(e) {
  return e === "AND" || e === "OR" ? e : "AND";
}
function $k(e, t, i) {
  if (e == null)
    return;
  const { predicate: s } = e;
  if (s != null && !t.some((o) => o == null))
    return s(t, i);
}
function Kk(e, t) {
  let i = e.length;
  return i > t && (e.splice(t), B(78), i = t), i;
}
function To(e, t) {
  const i = t.getCustomOption(e);
  if (i) {
    const { numberOfInputs: o } = i;
    return o ?? 1;
  }
  return e && ["empty", "notBlank", "blank"].indexOf(e) >= 0 ? 0 : e === "inRange" ? 2 : 1;
}
var Hc = class extends QP {
  constructor(e, t, i) {
    super(e, "simple-filter"), this.mapValuesFromModel = t, this.defaultOptions = i, this.eTypes = [], this.eJoinPanels = [], this.eJoinAnds = [], this.eJoinOrs = [], this.eConditionBodies = [], this.listener = () => this.onUiChanged(), this.lastUiCompletePosition = null, this.joinOperatorId = 0;
  }
  setParams(e) {
    super.setParams(e);
    const t = new Gc();
    this.optionsFactory = t, t.init(e, this.defaultOptions), this.commonUpdateSimpleParams(e), this.createOption(), this.createMissingConditionsAndOperators();
  }
  updateParams(e, t) {
    this.optionsFactory.refresh(e, this.defaultOptions), super.updateParams(e, t), this.commonUpdateSimpleParams(e);
  }
  commonUpdateSimpleParams(e) {
    this.setNumConditions(e), this.defaultJoinOperator = jk(e.defaultJoinOperator), this.filterPlaceholder = e.filterPlaceholder, this.createFilterListOptions();
    const t = this.getGui();
    this.isReadOnly() ? t.setAttribute("tabindex", "-1") : t.removeAttribute("tabindex");
  }
  // floating filter calls this when user applies filter from floating filter
  onFloatingFilterChanged(e, t) {
    this.setTypeFromFloatingFilter(e), this.setValueFromFloatingFilter(t), this.onUiChanged("immediately", !0);
  }
  setTypeFromFloatingFilter(e) {
    this.eTypes.forEach((t, i) => {
      const s = i === 0 ? e : this.optionsFactory.defaultOption;
      t.setValue(s, !0);
    });
  }
  getModelFromUi() {
    const e = this.getUiCompleteConditions();
    return e.length === 0 ? null : this.maxNumConditions > 1 && e.length > 1 ? {
      filterType: this.filterType,
      operator: this.getJoinOperator(),
      conditions: e
    } : e[0];
  }
  getConditionTypes() {
    return this.eTypes.map((e) => e.getValue());
  }
  getConditionType(e) {
    return this.eTypes[e].getValue();
  }
  getJoinOperator() {
    const { eJoinOrs: e, defaultJoinOperator: t } = this;
    return e.length === 0 ? t : e[0].getValue() === !0 ? "OR" : "AND";
  }
  areNonNullModelsEqual(e, t) {
    const i = !e.operator, s = !t.operator;
    if (!i && s || i && !s)
      return !1;
    let n;
    if (i) {
      const r = e, a = t;
      n = this.areSimpleModelsEqual(r, a);
    } else {
      const r = e, a = t;
      n = r.operator === a.operator && Yi(
        r.conditions,
        a.conditions,
        (l, c) => this.areSimpleModelsEqual(l, c)
      );
    }
    return n;
  }
  setModelIntoUi(e, t) {
    if (e == null)
      return this.resetUiToDefaults(t), re.resolve();
    if (e.operator) {
      const s = e;
      let o = s.conditions;
      o == null && (o = [], B(77));
      const n = Kk(o, this.maxNumConditions), r = this.getNumConditions();
      if (n < r)
        this.removeConditionsAndOperators(n);
      else if (n > r)
        for (let l = r; l < n; l++)
          this.createJoinOperatorPanel(), this.createOption();
      const a = s.operator === "OR";
      this.eJoinAnds.forEach((l) => l.setValue(!a, !0)), this.eJoinOrs.forEach((l) => l.setValue(a, !0)), o.forEach((l, c) => {
        this.eTypes[c].setValue(l.type, !0), this.setConditionIntoUi(l, c);
      });
    } else {
      const s = e;
      this.getNumConditions() > 1 && this.removeConditionsAndOperators(1), this.eTypes[0].setValue(s.type, !0), this.setConditionIntoUi(s, 0);
    }
    return this.lastUiCompletePosition = this.getNumConditions() - 1, this.createMissingConditionsAndOperators(), this.updateUiVisibility(), t || this.params.onUiChange(this.getUiChangeEventParams()), re.resolve();
  }
  setNumConditions(e) {
    let t = e.maxNumConditions ?? 2;
    t < 1 && (B(79), t = 1), this.maxNumConditions = t;
    let i = e.numAlwaysVisibleConditions ?? 1;
    i < 1 && (B(80), i = 1), i > t && (B(81), i = t), this.numAlwaysVisibleConditions = i;
  }
  createOption() {
    const e = this.getGui(), t = this.createManagedBean(new Ac());
    this.eTypes.push(t), t.addCss("ag-filter-select"), e.appendChild(t.getGui());
    const i = this.createEValue();
    this.eConditionBodies.push(i), e.appendChild(i), this.putOptionsIntoDropdown(t), this.resetType(t);
    const s = this.getNumConditions() - 1;
    this.forEachPositionInput(s, (o) => this.resetInput(o)), this.addChangedListeners(t, s);
  }
  createJoinOperatorPanel() {
    const e = Ae({ tag: "div", cls: "ag-filter-condition" });
    this.eJoinPanels.push(e);
    const t = this.createJoinOperator(this.eJoinAnds, e, "and"), i = this.createJoinOperator(this.eJoinOrs, e, "or");
    this.getGui().appendChild(e);
    const s = this.eJoinPanels.length - 1, o = this.joinOperatorId++;
    this.resetJoinOperatorAnd(t, s, o), this.resetJoinOperatorOr(i, s, o), this.isReadOnly() || (t.onValueChange(this.listener), i.onValueChange(this.listener));
  }
  createJoinOperator(e, t, i) {
    const s = this.createManagedBean(new v0());
    e.push(s);
    const o = "ag-filter-condition-operator";
    return s.addCss(o), s.addCss(`${o}-${i}`), t.appendChild(s.getGui()), s;
  }
  createFilterListOptions() {
    this.filterListOptions = this.optionsFactory.filterOptions.map(
      (e) => typeof e == "string" ? this.createBoilerplateListOption(e) : this.createCustomListOption(e)
    );
  }
  putOptionsIntoDropdown(e) {
    const { filterListOptions: t } = this;
    t.forEach((i) => {
      e.addOption(i);
    }), e.setDisabled(t.length <= 1);
  }
  createBoilerplateListOption(e) {
    return { value: e, text: this.translate(e) };
  }
  createCustomListOption(e) {
    const { displayKey: t } = e, i = this.optionsFactory.getCustomOption(e.displayKey);
    return {
      value: t,
      text: i ? this.getLocaleTextFunc()(i.displayKey, i.displayName) : this.translate(t)
    };
  }
  createBodyTemplate() {
    return null;
  }
  getAgComponents() {
    return [];
  }
  updateUiVisibility() {
    const e = this.getJoinOperator();
    this.updateNumConditions(), this.updateConditionStatusesAndValues(this.lastUiCompletePosition, e);
  }
  updateNumConditions() {
    let e = -1, t = !0;
    for (let i = 0; i < this.getNumConditions(); i++)
      this.isConditionUiComplete(i) ? e = i : t = !1;
    if (this.shouldAddNewConditionAtEnd(t))
      this.createJoinOperatorPanel(), this.createOption();
    else {
      const i = this.lastUiCompletePosition ?? this.getNumConditions() - 2;
      if (e < i) {
        this.removeConditionsAndOperators(i + 1);
        const s = e + 1, o = i - s;
        o > 0 && this.removeConditionsAndOperators(s, o), this.createMissingConditionsAndOperators();
      }
    }
    this.lastUiCompletePosition = e;
  }
  updateConditionStatusesAndValues(e, t) {
    this.eTypes.forEach((s, o) => {
      const n = this.isConditionDisabled(o, e);
      s.setDisabled(n || this.filterListOptions.length <= 1), o === 1 && (vo(this.eJoinPanels[0], n), this.eJoinAnds[0].setDisabled(n), this.eJoinOrs[0].setDisabled(n));
    }), this.eConditionBodies.forEach((s, o) => {
      Re(s, this.isConditionBodyVisible(o));
    });
    const i = (t ?? this.getJoinOperator()) === "OR";
    this.eJoinAnds.forEach((s) => {
      s.setValue(!i, !0);
    }), this.eJoinOrs.forEach((s) => {
      s.setValue(i, !0);
    }), this.forEachInput((s, o, n, r) => {
      this.setElementDisplayed(s, o < r), this.setElementDisabled(s, this.isConditionDisabled(n, e));
    }), this.resetPlaceholder();
  }
  shouldAddNewConditionAtEnd(e) {
    return e && this.getNumConditions() < this.maxNumConditions && !this.isReadOnly();
  }
  removeConditionsAndOperators(e, t) {
    if (e >= this.getNumConditions())
      return;
    const {
      eTypes: i,
      eConditionBodies: s,
      eJoinPanels: o,
      eJoinAnds: n,
      eJoinOrs: r
    } = this;
    this.removeComponents(i, e, t), this.removeElements(s, e, t), this.removeEValues(e, t);
    const a = Math.max(e - 1, 0);
    this.removeElements(o, a, t), this.removeComponents(n, a, t), this.removeComponents(r, a, t);
  }
  removeElements(e, t, i) {
    ro(e, t, i).forEach((o) => Xt(o));
  }
  removeComponents(e, t, i) {
    ro(e, t, i).forEach((o) => {
      Xt(o.getGui()), this.destroyBean(o);
    });
  }
  afterGuiAttached(e) {
    if (super.afterGuiAttached(e), this.resetPlaceholder(), !e?.suppressFocus) {
      let t;
      if (!this.isReadOnly()) {
        const i = this.getInputs(0)[0];
        i instanceof Fi && this.isConditionBodyVisible(0) ? t = i.getInputElement() : t = this.eTypes[0]?.getFocusableElement();
      }
      (t ?? this.getGui()).focus({ preventScroll: !0 });
    }
  }
  afterGuiDetached() {
    super.afterGuiDetached();
    const e = this.params;
    if (this.beans.colFilter?.shouldKeepStateOnDetach(e.column))
      return;
    e.onStateChange({
      model: e.model
    });
    let t = -1, i = -1, s = !1;
    const o = this.getJoinOperator();
    for (let r = this.getNumConditions() - 1; r >= 0; r--)
      if (this.isConditionUiComplete(r))
        t === -1 && (t = r, i = r);
      else {
        const a = r >= this.numAlwaysVisibleConditions && !this.isConditionUiComplete(r - 1), l = r < t;
        (a || l) && (this.removeConditionsAndOperators(r, 1), s = !0, l && i--);
      }
    let n = !1;
    this.getNumConditions() < this.numAlwaysVisibleConditions && (this.createMissingConditionsAndOperators(), n = !0), this.shouldAddNewConditionAtEnd(i === this.getNumConditions() - 1) && (this.createJoinOperatorPanel(), this.createOption(), n = !0), n && this.updateConditionStatusesAndValues(i, o), s && this.updateJoinOperatorsDisabled(), this.lastUiCompletePosition = i;
  }
  getModelAsString(e) {
    return this.params.getHandler()?.getModelAsString?.(e) ?? "";
  }
  getPlaceholderText(e, t) {
    let i = this.translate(e);
    if (typeof this.filterPlaceholder == "function") {
      const s = this.eTypes[t].getValue(), o = this.translate(s);
      i = this.filterPlaceholder({
        filterOptionKey: s,
        filterOption: o,
        placeholder: i
      });
    } else typeof this.filterPlaceholder == "string" && (i = this.filterPlaceholder);
    return i;
  }
  // allow sub-classes to reset HTML placeholders after UI update.
  resetPlaceholder() {
    const e = this.getLocaleTextFunc();
    this.forEachInput((t, i, s, o) => {
      if (!(t instanceof Fi))
        return;
      const n = i === 0 && o > 1 ? "inRangeStart" : i === 0 ? "filterOoo" : "inRangeEnd", r = i === 0 && o > 1 ? e("ariaFilterFromValue", "Filter from value") : i === 0 ? e("ariaFilterValue", "Filter Value") : e("ariaFilterToValue", "Filter to Value");
      t.setInputPlaceholder(this.getPlaceholderText(n, s)), t.setInputAriaLabel(r);
    });
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  setElementValue(e, t, i) {
    e instanceof Fi && e.setValue(t != null ? String(t) : null, !0);
  }
  setElementDisplayed(e, t) {
    e instanceof pe && Re(e.getGui(), t);
  }
  setElementDisabled(e, t) {
    e instanceof pe && vo(e.getGui(), t);
  }
  attachElementOnChange(e, t) {
    e instanceof Fi && e.onValueChange(t);
  }
  forEachInput(e) {
    this.getConditionTypes().forEach((t, i) => {
      this.forEachPositionTypeInput(i, t, e);
    });
  }
  forEachPositionInput(e, t) {
    const i = this.getConditionType(e);
    this.forEachPositionTypeInput(e, i, t);
  }
  forEachPositionTypeInput(e, t, i) {
    const s = To(t, this.optionsFactory), o = this.getInputs(e);
    for (let n = 0; n < o.length; n++) {
      const r = o[n];
      r != null && i(r, n, e, s);
    }
  }
  isConditionDisabled(e, t) {
    return this.isReadOnly() ? !0 : e === 0 ? !1 : e > t + 1;
  }
  isConditionBodyVisible(e) {
    const t = this.getConditionType(e);
    return To(t, this.optionsFactory) > 0;
  }
  // returns true if the UI represents a working filter, eg all parts are filled out.
  // eg if text filter and textfield blank then returns false.
  isConditionUiComplete(e) {
    return !(e >= this.getNumConditions() || this.getConditionType(e) === "empty" || this.getValues(e).some((i) => i == null));
  }
  getNumConditions() {
    return this.eTypes.length;
  }
  getUiCompleteConditions() {
    const e = [];
    for (let t = 0; t < this.getNumConditions(); t++)
      this.isConditionUiComplete(t) && e.push(this.createCondition(t));
    return e;
  }
  createMissingConditionsAndOperators() {
    if (!this.isReadOnly())
      for (let e = this.getNumConditions(); e < this.numAlwaysVisibleConditions; e++)
        this.createJoinOperatorPanel(), this.createOption();
  }
  resetUiToDefaults(e) {
    this.removeConditionsAndOperators(this.isReadOnly() ? 1 : this.numAlwaysVisibleConditions), this.eTypes.forEach((t) => this.resetType(t)), this.eJoinAnds.forEach(
      (t, i) => this.resetJoinOperatorAnd(t, i, this.joinOperatorId + i)
    ), this.eJoinOrs.forEach(
      (t, i) => this.resetJoinOperatorOr(t, i, this.joinOperatorId + i)
    ), this.joinOperatorId++, this.forEachInput((t) => this.resetInput(t)), this.resetPlaceholder(), this.createMissingConditionsAndOperators(), this.lastUiCompletePosition = null, this.updateUiVisibility(), e || this.params.onUiChange(this.getUiChangeEventParams());
  }
  resetType(e) {
    const i = this.getLocaleTextFunc()("ariaFilteringOperator", "Filtering operator");
    e.setValue(this.optionsFactory.defaultOption, !0).setAriaLabel(i).setDisabled(this.isReadOnly() || this.filterListOptions.length <= 1);
  }
  resetJoinOperatorAnd(e, t, i) {
    this.resetJoinOperator(
      e,
      t,
      this.defaultJoinOperator === "AND",
      this.translate("andCondition"),
      i
    );
  }
  resetJoinOperatorOr(e, t, i) {
    this.resetJoinOperator(
      e,
      t,
      this.defaultJoinOperator === "OR",
      this.translate("orCondition"),
      i
    );
  }
  resetJoinOperator(e, t, i, s, o) {
    this.updateJoinOperatorDisabled(
      e.setValue(i, !0).setName(`ag-simple-filter-and-or-${this.getCompId()}-${o}`).setLabel(s),
      t
    );
  }
  updateJoinOperatorsDisabled() {
    const e = (t, i) => this.updateJoinOperatorDisabled(t, i);
    this.eJoinAnds.forEach(e), this.eJoinOrs.forEach(e);
  }
  updateJoinOperatorDisabled(e, t) {
    e.setDisabled(this.isReadOnly() || t > 0);
  }
  resetInput(e) {
    this.setElementValue(e, null), this.setElementDisabled(e, this.isReadOnly());
  }
  // puts model values into the UI
  setConditionIntoUi(e, t) {
    const i = this.mapValuesFromModel(e, this.optionsFactory);
    this.forEachInput((s, o, n) => {
      n === t && this.setElementValue(s, i[o] != null ? i[o] : null);
    });
  }
  // after floating filter changes, this sets the 'value' section. this is implemented by the base class
  // (as that's where value is controlled), the 'type' part from the floating filter is dealt with in this class.
  setValueFromFloatingFilter(e) {
    this.forEachInput((t, i, s) => {
      this.setElementValue(t, i === 0 && s === 0 ? e : null, !0);
    });
  }
  addChangedListeners(e, t) {
    this.isReadOnly() || (e.onValueChange(this.listener), this.forEachPositionInput(t, (i) => {
      this.attachElementOnChange(i, this.listener);
    }));
  }
  hasInvalidInputs() {
    return !1;
  }
  isReadOnly() {
    return !!this.params.readOnly;
  }
}, oC = class {
  constructor(e, t, i, s, o, n) {
    this.alive = !0, this.context = e, this.eParent = o;
    const r = xF(t, i, s);
    r && r.newAgStackInstance().then((a) => {
      if (!this.alive) {
        e.destroyBean(a);
        return;
      }
      if (this.dateComp = a, !a)
        return;
      o.appendChild(a.getGui()), a?.afterGuiAttached?.();
      const { tempValue: l, disabled: c } = this;
      l && a.setDate(l), c != null && a.setDisabled?.(c), n?.(this);
    });
  }
  destroy() {
    this.alive = !1, this.dateComp = this.context.destroyBean(this.dateComp);
  }
  getDate() {
    return this.dateComp ? this.dateComp.getDate() : this.tempValue;
  }
  setDate(e) {
    const t = this.dateComp;
    t ? t.setDate(e) : this.tempValue = e;
  }
  setDisabled(e) {
    const t = this.dateComp;
    t ? t.setDisabled?.(e) : this.disabled = e;
  }
  setDisplayed(e) {
    Re(this.eParent, e);
  }
  setInputPlaceholder(e) {
    this.dateComp?.setInputPlaceholder?.(e);
  }
  setInputAriaLabel(e) {
    this.dateComp?.setInputAriaLabel?.(e);
  }
  afterGuiAttached(e) {
    this.dateComp?.afterGuiAttached?.(e);
  }
  updateParams(e) {
    this.dateComp?.refresh?.(e);
  }
}, Bc = [
  "equals",
  "notEqual",
  "lessThan",
  "greaterThan",
  "inRange",
  "blank",
  "notBlank"
];
function nC(e, t) {
  const { dateFrom: i, dateTo: s, type: o } = e || {};
  return [
    i && st(i) || null,
    s && st(s) || null
  ].slice(0, To(o, t));
}
var Ch = 1e3, vh = 1 / 0, Yk = class extends Hc {
  constructor() {
    super("dateFilter", nC, Bc), this.eConditionPanelsFrom = [], this.eConditionPanelsTo = [], this.dateConditionFromComps = [], this.dateConditionToComps = [], this.minValidYear = Ch, this.maxValidYear = vh, this.minValidDate = null, this.maxValidDate = null, this.filterType = "date";
  }
  afterGuiAttached(e) {
    super.afterGuiAttached(e), this.dateConditionFromComps[0].afterGuiAttached(e);
  }
  commonUpdateSimpleParams(e) {
    super.commonUpdateSimpleParams(e);
    const t = (l, c) => {
      const d = e[l];
      if (d != null)
        if (isNaN(d))
          B(82, { param: l });
        else
          return d == null ? c : Number(d);
      return c;
    }, i = t("minValidYear", Ch), s = t("maxValidYear", vh);
    this.minValidYear = i, this.maxValidYear = s, i > s && B(83);
    const { minValidDate: o, maxValidDate: n } = e, r = o instanceof Date ? o : st(o);
    this.minValidDate = r;
    const a = n instanceof Date ? n : st(n);
    this.maxValidDate = a, r && a && r > a && B(84);
  }
  createDateCompWrapper(e) {
    const {
      beans: { userCompFactory: t, context: i, gos: s },
      params: o
    } = this, n = new oC(
      i,
      t,
      o.colDef,
      Z(s, {
        onDateChanged: () => this.onUiChanged(),
        filterParams: o,
        location: "filter"
      }),
      e
    );
    return this.addDestroyFunc(() => n.destroy()), n;
  }
  setElementValue(e, t) {
    e.setDate(t);
  }
  setElementDisplayed(e, t) {
    e.setDisplayed(t);
  }
  setElementDisabled(e, t) {
    e.setDisabled(t);
  }
  createEValue() {
    const e = Ae({ tag: "div", cls: "ag-filter-body" });
    return this.createFromToElement(e, this.eConditionPanelsFrom, this.dateConditionFromComps, "from"), this.createFromToElement(e, this.eConditionPanelsTo, this.dateConditionToComps, "to"), e;
  }
  createFromToElement(e, t, i, s) {
    const o = Ae({ tag: "div", cls: `ag-filter-${s} ag-filter-date-${s}` });
    t.push(o), e.appendChild(o), i.push(this.createDateCompWrapper(o));
  }
  removeEValues(e, t) {
    this.removeDateComps(this.dateConditionFromComps, e, t), this.removeDateComps(this.dateConditionToComps, e, t), ro(this.eConditionPanelsFrom, e, t), ro(this.eConditionPanelsTo, e, t);
  }
  removeDateComps(e, t, i) {
    ro(e, t, i).forEach((o) => o.destroy());
  }
  isValidDateValue(e) {
    if (e === null)
      return !1;
    const { minValidDate: t, maxValidDate: i, minValidYear: s, maxValidYear: o } = this;
    if (t) {
      if (e < t)
        return !1;
    } else if (e.getUTCFullYear() < s)
      return !1;
    if (i) {
      if (e > i)
        return !1;
    } else if (e.getUTCFullYear() > o)
      return !1;
    return !0;
  }
  isConditionUiComplete(e) {
    if (!super.isConditionUiComplete(e))
      return !1;
    let t = !0;
    return this.forEachInput((i, s, o, n) => {
      o !== e || !t || s >= n || (t = t && this.isValidDateValue(i.getDate()));
    }), t;
  }
  areSimpleModelsEqual(e, t) {
    return e.dateFrom === t.dateFrom && e.dateTo === t.dateTo && e.type === t.type;
  }
  createCondition(e) {
    const t = this.getConditionType(e), i = {}, s = this.getValues(e);
    return s.length > 0 && (i.dateFrom = lt(s[0])), s.length > 1 && (i.dateTo = lt(s[1])), {
      dateFrom: null,
      dateTo: null,
      filterType: this.filterType,
      type: t,
      ...i
    };
  }
  resetPlaceholder() {
    const e = this.getLocaleTextFunc(), t = this.translate("dateFormatOoo"), i = e("ariaFilterValue", "Filter Value");
    this.forEachInput((s) => {
      s.setInputPlaceholder(t), s.setInputAriaLabel(i);
    });
  }
  getInputs(e) {
    const { dateConditionFromComps: t, dateConditionToComps: i } = this;
    return e >= t.length ? [null, null] : [t[e], i[e]];
  }
  getValues(e) {
    const t = [];
    return this.forEachPositionInput(e, (i, s, o, n) => {
      s < n && t.push(i.getDate());
    }), t;
  }
  translate(e) {
    return e === "lessThan" ? super.translate("before") : e === "greaterThan" ? super.translate("after") : super.translate(e);
  }
}, rC = class extends T {
  constructor(e, t) {
    super(), this.mapValuesFromModel = e, this.defaultOptions = t;
  }
  init(e) {
    const t = e.filterParams, i = new Gc();
    this.optionsFactory = i, i.init(t, this.defaultOptions), this.filterModelFormatter = this.createManagedBean(
      new this.FilterModelFormatterClass(i, t)
    ), this.updateParams(e), this.validateModel(e);
  }
  refresh(e) {
    if (e.source === "colDef") {
      const t = e.filterParams, i = this.optionsFactory;
      i.refresh(t, this.defaultOptions), this.filterModelFormatter.updateParams({ optionsFactory: i, filterParams: t }), this.updateParams(e);
    }
    this.validateModel(e);
  }
  updateParams(e) {
    this.params = e;
  }
  doesFilterPass(e) {
    const t = e.model;
    if (t == null)
      return !0;
    const { operator: i } = t, s = [];
    if (i) {
      const r = t;
      s.push(...r.conditions ?? []);
    } else
      s.push(t);
    const o = i && i === "OR" ? "some" : "every", n = this.params.getValue(e.node);
    return s[o]((r) => this.individualConditionPasses(e, r, n));
  }
  getModelAsString(e, t) {
    return this.filterModelFormatter.getModelAsString(e, t) ?? "";
  }
  validateModel(e) {
    const {
      model: t,
      filterParams: { filterOptions: i, maxNumConditions: s }
    } = e;
    if (t == null)
      return;
    let n = JP(t) ? t.conditions : [t];
    const r = i?.map((d) => typeof d == "string" ? d : d.displayKey) ?? this.defaultOptions;
    if (!(!n || n.every((d) => r.find((u) => u === d.type) !== void 0))) {
      this.params = {
        ...e,
        model: null
      }, e.onModelChange(null);
      return;
    }
    let l = !1;
    const c = this.filterType;
    if ((n && !n.every((d) => d.filterType === c) || t.filterType !== c) && (n = n.map((d) => ({ ...d, filterType: c })), l = !0), typeof s == "number" && n && n.length > s && (n = n.slice(0, s), l = !0), l) {
      const d = n.length > 1 ? {
        ...t,
        filterType: c,
        conditions: n
      } : {
        ...n[0],
        filterType: c
      };
      this.params = {
        ...e,
        model: d
      }, e.onModelChange(d);
      return;
    }
  }
  /** returns true if the row passes the said condition */
  individualConditionPasses(e, t, i) {
    const s = this.optionsFactory, o = this.mapValuesFromModel(t, s), n = s.getCustomOption(t.type), r = $k(n, o, i);
    return r ?? (i == null ? this.evaluateNullValue(t.type) : this.evaluateNonNullValue(o, i, t, e));
  }
}, aC = class extends rC {
  evaluateNullValue(e) {
    const {
      includeBlanksInEquals: t,
      includeBlanksInNotEqual: i,
      includeBlanksInGreaterThan: s,
      includeBlanksInLessThan: o,
      includeBlanksInRange: n
    } = this.params.filterParams;
    switch (e) {
      case "equals":
        if (t)
          return !0;
        break;
      case "notEqual":
        if (i)
          return !0;
        break;
      case "greaterThan":
      case "greaterThanOrEqual":
        if (s)
          return !0;
        break;
      case "lessThan":
      case "lessThanOrEqual":
        if (o)
          return !0;
        break;
      case "inRange":
        if (n)
          return !0;
        break;
      case "blank":
        return !0;
      case "notBlank":
        return !1;
    }
    return !1;
  }
  evaluateNonNullValue(e, t, i) {
    const s = i.type;
    if (!this.isValid(t))
      return s === "notEqual" || s === "notBlank";
    const o = this.comparator(), n = e[0] != null ? o(e[0], t) : 0;
    switch (s) {
      case "equals":
        return n === 0;
      case "notEqual":
        return n !== 0;
      case "greaterThan":
        return n > 0;
      case "greaterThanOrEqual":
        return n >= 0;
      case "lessThan":
        return n < 0;
      case "lessThanOrEqual":
        return n <= 0;
      case "inRange": {
        const r = o(e[1], t);
        return this.params.filterParams.inRangeInclusive ? n >= 0 && r <= 0 : n > 0 && r < 0;
      }
      case "blank":
        return ir(t);
      case "notBlank":
        return !ir(t);
      default:
        return B(76, { filterModelType: s }), !0;
    }
  }
}, lC = {
  equals: "Equals",
  notEqual: "NotEqual",
  greaterThan: "GreaterThan",
  greaterThanOrEqual: "GreaterThanOrEqual",
  lessThan: "LessThan",
  lessThanOrEqual: "LessThanOrEqual",
  inRange: "InRange"
}, qk = {
  contains: "Contains",
  notContains: "NotContains",
  equals: "TextEquals",
  notEqual: "TextNotEqual",
  startsWith: "StartsWith",
  endsWith: "EndsWith",
  inRange: "InRange"
}, Nc = class extends T {
  constructor(e, t, i) {
    super(), this.optionsFactory = e, this.filterParams = t, this.valueFormatter = i;
  }
  // used by:
  // 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.
  // 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)
  getModelAsString(e, t) {
    const i = this.getLocaleTextFunc(), s = t === "filterToolPanel";
    if (!e)
      return s ? ni(this, "filterSummaryInactive") : null;
    if (e.operator != null) {
      const n = e, a = (n.conditions ?? []).map((c) => this.getModelAsString(c, t)), l = n.operator === "AND" ? "andCondition" : "orCondition";
      return a.join(` ${ni(this, l)} `);
    } else {
      if (e.type === "blank" || e.type === "notBlank")
        return s ? ni(this, e.type === "blank" ? "filterSummaryBlank" : "filterSummaryNotBlank") : i(e.type, e.type);
      {
        const n = e, r = this.optionsFactory.getCustomOption(n.type), { displayKey: a, displayName: l, numberOfInputs: c } = r || {};
        return a && l && c === 0 ? i(a, l) : this.conditionToString(
          n,
          s,
          n.type === "inRange" || c === 2,
          a,
          l
        );
      }
    }
  }
  updateParams(e) {
    const { optionsFactory: t, filterParams: i } = e;
    this.optionsFactory = t, this.filterParams = i;
  }
  conditionForToolPanel(e, t, i, s, o, n) {
    let r;
    const a = this.getTypeKey(e);
    return a && (r = ni(this, a)), o && n && (r = this.getLocaleTextFunc()(o, n)), r != null ? t ? `${r} ${ni(this, "filterSummaryInRangeValues", [i(), s()])}` : `${r} ${i()}` : null;
  }
  getTypeKey(e) {
    const t = this.filterTypeKeys[e];
    return t ? `filterSummary${t}` : null;
  }
  formatValue(e) {
    const t = this.valueFormatter;
    return t ? t(e ?? null) ?? "" : String(e);
  }
}, cC = class extends Nc {
  constructor(e, t) {
    super(e, t, (i) => {
      const { dataTypeSvc: s, valueSvc: o } = this.beans, n = t.column, a = s?.getDateFormatterFunction(n)?.(i ?? void 0);
      return o.formatValue(n, null, a);
    }), this.filterTypeKeys = lC;
  }
  conditionToString(e, t, i, s, o) {
    const { type: n } = e, r = st(e.dateFrom), a = st(e.dateTo), l = this.filterParams.inRangeFloatingFilterDateFormat, c = t ? this.formatValue.bind(this) : (h) => sl(h, l), d = () => r !== null ? c(r) : "null", u = () => a !== null ? c(a) : "null";
    if (t) {
      const h = this.conditionForToolPanel(
        n,
        i,
        d,
        u,
        s,
        o
      );
      if (h != null)
        return h;
    }
    return i ? `${d()}-${u()}` : r != null ? c(r) : `${n}`;
  }
};
function Xk(e, t) {
  const i = t;
  return i < e ? -1 : i > e ? 1 : 0;
}
var Zk = class extends aC {
  constructor() {
    super(nC, Bc), this.filterType = "date", this.FilterModelFormatterClass = cC;
  }
  comparator() {
    return this.params.filterParams.comparator ?? Xk;
  }
  isValid(e) {
    const t = this.params.filterParams.isValidDate;
    return !t || t(e);
  }
}, dC = class extends pe {
  constructor() {
    super(...arguments), this.defaultDebounceMs = 0;
  }
  setLastTypeFromModel(e) {
    if (!e) {
      this.lastType = this.optionsFactory.defaultOption;
      return;
    }
    const t = e.operator;
    let i;
    t ? i = e.conditions[0] : i = e, this.lastType = i.type;
  }
  canWeEditAfterModelFromParentFilter(e) {
    if (!e)
      return this.isTypeEditable(this.lastType);
    if (e.operator)
      return !1;
    const i = e;
    return this.isTypeEditable(i.type);
  }
  init(e) {
    this.params = e;
    const t = this.gos.get("enableFilterHandlers");
    if (this.reactive = t, this.setParams(e), t) {
      const i = e;
      this.onModelUpdated(i.model);
    }
  }
  setParams(e) {
    const t = new Gc();
    this.optionsFactory = t, t.init(e.filterParams, this.defaultOptions), this.filterModelFormatter = this.createManagedBean(
      new this.FilterModelFormatterClass(t, e.filterParams)
    ), this.setSimpleParams(e, !1);
  }
  setSimpleParams(e, t = !0) {
    const i = this.optionsFactory.defaultOption;
    t || (this.lastType = i), this.readOnly = !!e.filterParams.readOnly;
    const s = this.isTypeEditable(i);
    this.setEditable(s);
  }
  refresh(e) {
    this.params = e;
    const t = e, i = this.reactive;
    if ((!i || t.source === "colDef") && this.updateParams(e), i) {
      const { source: s, model: o } = t;
      if (s === "dataChanged" || s === "ui")
        return;
      this.onModelUpdated(o);
    }
  }
  updateParams(e) {
    const t = this.optionsFactory;
    t.refresh(e.filterParams, this.defaultOptions), this.setSimpleParams(e), this.filterModelFormatter.updateParams({
      optionsFactory: t,
      filterParams: e.filterParams
    });
  }
  onParentModelChanged(e, t) {
    t?.afterFloatingFilter || t?.afterDataChange || this.onModelUpdated(e);
  }
  hasSingleInput(e) {
    const t = this.optionsFactory.getCustomOption(e)?.numberOfInputs;
    return t == null || t == 1;
  }
  isTypeEditable(e) {
    const t = ["inRange", "empty", "blank", "notBlank"];
    return !!e && !this.readOnly && this.hasSingleInput(e) && t.indexOf(e) < 0;
  }
  getAriaLabel(e) {
    return `${this.beans.colNames.getDisplayNameForColumn(e.column, "header", !0)} ${this.getLocaleTextFunc()("ariaFilterInput", "Filter Input")}`;
  }
}, Qk = {
  tag: "div",
  cls: "ag-floating-filter-input",
  role: "presentation",
  children: [
    {
      tag: "ag-input-text-field",
      ref: "eReadOnlyText"
    },
    { tag: "div", ref: "eDateWrapper", cls: "ag-date-floating-filter-wrapper" }
  ]
}, Jk = class extends dC {
  constructor() {
    super(Qk, [fr]), this.eReadOnlyText = q, this.eDateWrapper = q, this.FilterModelFormatterClass = cC, this.filterType = "date", this.defaultOptions = Bc;
  }
  setParams(e) {
    super.setParams(e), this.createDateComponent();
    const t = this.getLocaleTextFunc();
    this.eReadOnlyText.setDisabled(!0).setInputAriaLabel(t("ariaDateFilterInput", "Date Filter Input"));
  }
  updateParams(e) {
    super.updateParams(e), this.dateComp.updateParams(this.getDateComponentParams()), this.updateCompOnModelChange(e.currentParentModel());
  }
  updateCompOnModelChange(e) {
    const t = !this.readOnly && this.canWeEditAfterModelFromParentFilter(e);
    if (this.setEditable(t), t) {
      const i = e ? st(e.dateFrom) : null;
      this.dateComp.setDate(i), this.eReadOnlyText.setValue("");
    } else
      this.eReadOnlyText.setValue(this.filterModelFormatter.getModelAsString(e)), this.dateComp.setDate(null);
  }
  setEditable(e) {
    Re(this.eDateWrapper, e), Re(this.eReadOnlyText.getGui(), !e);
  }
  onModelUpdated(e) {
    super.setLastTypeFromModel(e), this.updateCompOnModelChange(e);
  }
  onDateChanged() {
    const e = this.dateComp.getDate();
    if (this.reactive) {
      const t = this.params;
      t.onUiChange();
      const i = t.model, s = lt(e), o = s == null ? null : {
        ...i ?? {
          filterType: this.filterType,
          type: this.lastType ?? this.optionsFactory.defaultOption
        },
        dateFrom: s
      };
      t.onModelChange(o, { afterFloatingFilter: !0 });
    } else
      this.params.parentFilterInstance((t) => {
        t?.onFloatingFilterChanged(this.lastType || null, e);
      });
  }
  getDateComponentParams() {
    const { filterParams: e } = this.params, t = vc(e, this.defaultDebounceMs);
    return Z(this.gos, {
      onDateChanged: We(this, this.onDateChanged.bind(this), t),
      filterParams: e,
      location: "floatingFilter"
    });
  }
  createDateComponent() {
    const {
      beans: { context: e, userCompFactory: t },
      eDateWrapper: i,
      params: s
    } = this;
    this.dateComp = new oC(
      e,
      t,
      s.column.getColDef(),
      this.getDateComponentParams(),
      i,
      (o) => {
        o.setInputAriaLabel(this.getAriaLabel(s));
      }
    ), this.addDestroyFunc(() => this.dateComp.destroy());
  }
}, eL = {
  tag: "div",
  cls: "ag-filter-filter",
  children: [
    {
      tag: "ag-input-text-field",
      ref: "eDateInput",
      cls: "ag-date-filter"
    }
  ]
}, tL = class extends pe {
  constructor() {
    super(eL, [fr]), this.eDateInput = q, this.isApply = !1, this.applyOnFocusOut = !1;
  }
  init(e) {
    this.params = e, this.setParams(e);
    const t = this.eDateInput.getInputElement();
    this.addManagedListeners(t, {
      // ensures that the input element is focussed when a clear button is clicked,
      // unless using safari as there is no clear button and focus does not work properly
      mouseDown: () => {
        this.eDateInput.isDisabled() || this.usingSafariDatePicker || t.focus({ preventScroll: !0 });
      },
      input: this.handleInput.bind(this, !1),
      change: this.handleInput.bind(this, !0),
      focusout: this.handleFocusOut.bind(this)
    });
  }
  handleInput(e) {
    if (!this.eDateInput.isDisabled()) {
      if (this.isApply) {
        this.applyOnFocusOut = !e, e && this.params.onDateChanged();
        return;
      }
      e || this.params.onDateChanged();
    }
  }
  handleFocusOut() {
    this.applyOnFocusOut && (this.applyOnFocusOut = !1, this.params.onDateChanged());
  }
  setParams(e) {
    const t = this.eDateInput.getInputElement(), i = this.shouldUseBrowserDatePicker(e);
    this.usingSafariDatePicker = i && Ui();
    const { minValidYear: s, maxValidYear: o, minValidDate: n, maxValidDate: r, buttons: a, includeTime: l, colDef: c } = e.filterParams || {}, d = this.beans.dataTypeSvc, u = l ?? d?.getDateIncludesTimeFlag?.(c.cellDataType) ?? !1;
    if (i ? u ? (t.type = "datetime-local", t.step = "1") : t.type = "date" : t.type = "text", n && s && B(85), r && o && B(86), n && r) {
      const [h, g] = [n, r].map(
        (p) => p instanceof Date ? p : st(p)
      );
      h && g && h.getTime() > g.getTime() && B(87);
    }
    n ? n instanceof Date ? t.min = sl(n) : t.min = n : s && (t.min = `${s}-01-01`), r ? r instanceof Date ? t.max = sl(r) : t.max = r : o && (t.max = `${o}-12-31`), this.isApply = e.location === "floatingFilter" && !!a?.includes("apply");
  }
  refresh(e) {
    this.params = e, this.setParams(e);
  }
  getDate() {
    return st(this.eDateInput.getValue());
  }
  setDate(e) {
    const t = this.params.filterParams.colDef.cellDataType, i = this.beans.dataTypeSvc?.getDateIncludesTimeFlag(t) ?? !1;
    this.eDateInput.setValue(lt(e, i));
  }
  setInputPlaceholder(e) {
    this.eDateInput.setInputPlaceholder(e);
  }
  setInputAriaLabel(e) {
    this.eDateInput.setAriaLabel(e);
  }
  setDisabled(e) {
    this.eDateInput.setDisabled(e);
  }
  afterGuiAttached(e) {
    (!e || !e.suppressFocus) && this.eDateInput.getInputElement().focus({ preventScroll: !0 });
  }
  shouldUseBrowserDatePicker(e) {
    return e?.filterParams?.browserDatePicker ?? !0;
  }
}, Wc = [
  "equals",
  "notEqual",
  "greaterThan",
  "greaterThanOrEqual",
  "lessThan",
  "lessThanOrEqual",
  "inRange",
  "blank",
  "notBlank"
];
function ml(e) {
  const { allowedCharPattern: t } = e ?? {};
  return t ?? null;
}
function Cl(e) {
  return e == null || isNaN(e) ? null : e;
}
function uC(e, t) {
  const { filter: i, filterTo: s, type: o } = e || {};
  return [Cl(i), Cl(s)].slice(
    0,
    To(o, t)
  );
}
var iL = class extends Hc {
  constructor() {
    super("numberFilter", uC, Wc), this.eValuesFrom = [], this.eValuesTo = [], this.filterType = "number", this.defaultDebounceMs = 500;
  }
  setElementValue(e, t, i) {
    const { numberFormatter: s } = this.params, o = !i && s ? s(t ?? null) : t;
    super.setElementValue(e, o);
  }
  createEValue() {
    const e = ml(this.params), t = Ae({ tag: "div", cls: "ag-filter-body", role: "presentation" });
    return this.createFromToElement(t, this.eValuesFrom, "from", e), this.createFromToElement(t, this.eValuesTo, "to", e), t;
  }
  createFromToElement(e, t, i, s) {
    const o = this.createManagedBean(
      s ? new Xi({ allowedCharPattern: s }) : new Mc()
    );
    o.addCss(`ag-filter-${i}`), o.addCss("ag-filter-filter"), t.push(o), e.appendChild(o.getGui());
  }
  removeEValues(e, t) {
    const i = (s) => this.removeComponents(s, e, t);
    i(this.eValuesFrom), i(this.eValuesTo);
  }
  getValues(e) {
    const t = [];
    return this.forEachPositionInput(e, (i, s, o, n) => {
      s < n && t.push(Cl(this.stringToFloat(i.getValue())));
    }), t;
  }
  areSimpleModelsEqual(e, t) {
    return e.filter === t.filter && e.filterTo === t.filterTo && e.type === t.type;
  }
  stringToFloat(e) {
    if (typeof e == "number")
      return e;
    let t = Ut(e);
    t != null && t.trim() === "" && (t = null);
    const i = this.params.numberParser;
    return i ? i(t) : t == null || t.trim() === "-" ? null : parseFloat(t);
  }
  createCondition(e) {
    const t = this.getConditionType(e), i = {
      filterType: this.filterType,
      type: t
    }, s = this.getValues(e);
    return s.length > 0 && (i.filter = s[0]), s.length > 1 && (i.filterTo = s[1]), i;
  }
  getInputs(e) {
    const { eValuesFrom: t, eValuesTo: i } = this;
    return e >= t.length ? [null, null] : [t[e], i[e]];
  }
  hasInvalidInputs() {
    let e = !1;
    return this.forEachInput((t) => {
      if (!t.getInputElement().validity.valid) {
        e = !0;
        return;
      }
    }), e;
  }
}, hC = class extends Nc {
  constructor(e, t) {
    super(e, t, t.numberFormatter), this.filterTypeKeys = lC;
  }
  conditionToString(e, t, i, s, o) {
    const { filter: n, filterTo: r, type: a } = e, l = this.formatValue.bind(this);
    if (t) {
      const c = this.conditionForToolPanel(
        a,
        i,
        () => l(n),
        () => l(r),
        s,
        o
      );
      if (c != null)
        return c;
    }
    return i ? `${l(n)}-${l(r)}` : n != null ? l(n) : `${a}`;
  }
}, sL = class extends aC {
  constructor() {
    super(uC, Wc), this.filterType = "number", this.FilterModelFormatterClass = hC;
  }
  comparator() {
    return (e, t) => e === t ? 0 : e < t ? 1 : -1;
  }
  isValid(e) {
    return !isNaN(e);
  }
}, gC = class extends T {
  constructor(e) {
    super(), this.params = e, this.eInput = q, this.onValueChanged = () => {
    };
  }
  setupGui(e) {
    this.eInput = this.createManagedBean(new Xi(this.params?.config));
    const t = this.eInput.getGui();
    e.appendChild(t);
    const i = (s) => this.onValueChanged(s);
    this.addManagedListeners(t, {
      input: i,
      keydown: i
    });
  }
  setEditable(e) {
    this.eInput.setDisabled(!e);
  }
  getValue() {
    return this.eInput.getValue();
  }
  setValue(e, t) {
    this.eInput.setValue(e, t);
  }
  setValueChangedListener(e) {
    this.onValueChanged = e;
  }
  setParams({ ariaLabel: e, autoComplete: t }) {
    const { eInput: i } = this;
    i.setInputAriaLabel(e), t !== void 0 && i.setAutoComplete(t);
  }
};
function pC(e) {
  const t = e?.trim();
  return t === "" ? e : t;
}
function fC(e, t) {
  const { filter: i, filterTo: s, type: o } = e || {};
  return [i || null, s || null].slice(0, To(o, t));
}
var oL = {
  tag: "div",
  ref: "eFloatingFilterInputContainer",
  cls: "ag-floating-filter-input",
  role: "presentation"
}, mC = class extends dC {
  constructor() {
    super(...arguments), this.eFloatingFilterInputContainer = q, this.defaultDebounceMs = 500;
  }
  postConstruct() {
    this.setTemplate(oL);
  }
  onModelUpdated(e) {
    this.setLastTypeFromModel(e), this.setEditable(this.canWeEditAfterModelFromParentFilter(e)), this.inputSvc.setValue(this.filterModelFormatter.getModelAsString(e));
  }
  setParams(e) {
    this.setupFloatingFilterInputService(e), super.setParams(e), this.setTextInputParams(e);
  }
  setupFloatingFilterInputService(e) {
    this.inputSvc = this.createFloatingFilterInputService(e), this.inputSvc.setupGui(this.eFloatingFilterInputContainer);
  }
  setTextInputParams(e) {
    const t = e.browserAutoComplete ?? !1, { inputSvc: i, defaultDebounceMs: s, readOnly: o } = this;
    if (i.setParams({
      ariaLabel: this.getAriaLabel(e),
      autoComplete: t
    }), this.applyActive = gr(e.filterParams), !o) {
      const n = vc(e.filterParams, s), r = We(
        this,
        this.syncUpWithParentFilter.bind(this),
        n
      );
      i.setValueChangedListener(r);
    }
  }
  updateParams(e) {
    super.updateParams(e), this.setTextInputParams(e);
  }
  recreateFloatingFilterInputService(e) {
    const { inputSvc: t } = this, i = t.getValue();
    ct(this.eFloatingFilterInputContainer), this.destroyBean(t), this.setupFloatingFilterInputService(e), t.setValue(i, !0);
  }
  syncUpWithParentFilter(e) {
    const t = e.key === E.ENTER, i = this.reactive;
    if (i && this.params.onUiChange(), this.applyActive && !t)
      return;
    const { inputSvc: s, params: o, lastType: n } = this;
    let r = s.getValue();
    if (o.filterParams.trimInput && (r = pC(r), s.setValue(r, !0)), i) {
      const a = o, l = a.model, c = this.convertValue(r), d = c == null ? null : {
        ...l ?? {
          filterType: this.filterType,
          type: n ?? this.optionsFactory.defaultOption
        },
        filter: c
      };
      a.onModelChange(d, { afterFloatingFilter: !0 });
    } else
      o.parentFilterInstance((a) => {
        a?.onFloatingFilterChanged(n || null, r || null);
      });
  }
  convertValue(e) {
    return e || null;
  }
  setEditable(e) {
    this.inputSvc.setEditable(e);
  }
}, nL = class extends T {
  constructor() {
    super(...arguments), this.onValueChanged = () => {
    }, this.numberInputActive = !0;
  }
  setupGui(e) {
    this.eNumberInput = this.createManagedBean(new Mc()), this.eTextInput = this.createManagedBean(new Xi()), this.eTextInput.setDisabled(!0);
    const t = this.eNumberInput.getGui(), i = this.eTextInput.getGui();
    e.appendChild(t), e.appendChild(i), this.setupListeners(t, (s) => this.onValueChanged(s)), this.setupListeners(i, (s) => this.onValueChanged(s));
  }
  setEditable(e) {
    this.numberInputActive = e, this.eNumberInput.setDisplayed(this.numberInputActive), this.eTextInput.setDisplayed(!this.numberInputActive);
  }
  setAutoComplete(e) {
    this.eNumberInput.setAutoComplete(e), this.eTextInput.setAutoComplete(e);
  }
  getValue() {
    return this.getActiveInputElement().getValue();
  }
  setValue(e, t) {
    this.getActiveInputElement().setValue(e, t);
  }
  getActiveInputElement() {
    return this.numberInputActive ? this.eNumberInput : this.eTextInput;
  }
  setValueChangedListener(e) {
    this.onValueChanged = e;
  }
  setupListeners(e, t) {
    this.addManagedListeners(e, {
      input: t,
      keydown: t
    });
  }
  setParams(e) {
    this.setAriaLabel(e.ariaLabel), e.autoComplete !== void 0 && this.setAutoComplete(e.autoComplete);
  }
  setAriaLabel(e) {
    this.eNumberInput.setInputAriaLabel(e), this.eTextInput.setInputAriaLabel(e);
  }
}, rL = class extends mC {
  constructor() {
    super(...arguments), this.FilterModelFormatterClass = hC, this.filterType = "number", this.defaultOptions = Wc;
  }
  updateParams(e) {
    ml(e.filterParams) !== this.allowedCharPattern && this.recreateFloatingFilterInputService(e), super.updateParams(e);
  }
  createFloatingFilterInputService(e) {
    return this.allowedCharPattern = ml(e.filterParams), this.allowedCharPattern ? this.createManagedBean(
      new gC({
        config: { allowedCharPattern: this.allowedCharPattern }
      })
    ) : this.createManagedBean(new nL());
  }
  convertValue(e) {
    return e ? Number(e) : null;
  }
}, zc = [
  "contains",
  "notContains",
  "equals",
  "notEqual",
  "startsWith",
  "endsWith",
  "blank",
  "notBlank"
], aL = class extends Hc {
  constructor() {
    super("textFilter", fC, zc), this.filterType = "text", this.eValuesFrom = [], this.eValuesTo = [], this.defaultDebounceMs = 500;
  }
  createCondition(e) {
    const t = this.getConditionType(e), i = {
      filterType: this.filterType,
      type: t
    }, s = this.getValuesWithSideEffects(e, !0);
    return s.length > 0 && (i.filter = s[0]), s.length > 1 && (i.filterTo = s[1]), i;
  }
  areSimpleModelsEqual(e, t) {
    return e.filter === t.filter && e.filterTo === t.filterTo && e.type === t.type;
  }
  getInputs(e) {
    const { eValuesFrom: t, eValuesTo: i } = this;
    return e >= t.length ? [null, null] : [t[e], i[e]];
  }
  getValues(e) {
    return this.getValuesWithSideEffects(e, !1);
  }
  getValuesWithSideEffects(e, t) {
    const i = [];
    return this.forEachPositionInput(e, (s, o, n, r) => {
      if (o < r) {
        let a = Ut(s.getValue());
        t && this.params.trimInput && (a = pC(a) ?? null, s.setValue(a, !0)), i.push(a);
      }
    }), i;
  }
  createEValue() {
    const e = Ae({ tag: "div", cls: "ag-filter-body", role: "presentation" }), { eValuesFrom: t, eValuesTo: i } = this;
    return this.createFromToElement(e, t, "from"), this.createFromToElement(e, i, "to"), e;
  }
  createFromToElement(e, t, i) {
    const s = this.createManagedBean(new Xi());
    s.addCss(`ag-filter-${i}`), s.addCss("ag-filter-filter"), t.push(s), e.appendChild(s.getGui());
  }
  removeEValues(e, t) {
    const i = (n) => this.removeComponents(n, e, t), { eValuesFrom: s, eValuesTo: o } = this;
    i(s), i(o);
  }
}, CC = class extends Nc {
  constructor() {
    super(...arguments), this.filterTypeKeys = qk;
  }
  conditionToString(e, t, i, s, o) {
    const { filter: n, filterTo: r, type: a } = e;
    if (t) {
      const l = (d) => () => ni(this, "filterSummaryTextQuote", [d]), c = this.conditionForToolPanel(
        a,
        i,
        l(n),
        l(r),
        s,
        o
      );
      if (c != null)
        return c;
    }
    return i ? `${n}-${r}` : n != null ? `${n}` : `${a}`;
  }
}, lL = ({ filterOption: e, value: t, filterText: i }) => {
  if (i == null)
    return !1;
  switch (e) {
    case "contains":
      return t.indexOf(i) >= 0;
    case "notContains":
      return t.indexOf(i) < 0;
    case "equals":
      return t === i;
    case "notEqual":
      return t != i;
    case "startsWith":
      return t.indexOf(i) === 0;
    case "endsWith": {
      const s = t.lastIndexOf(i);
      return s >= 0 && s === t.length - i.length;
    }
    default:
      return !1;
  }
}, cL = (e) => e, dL = (e) => e == null ? null : e.toString().toLowerCase(), uL = class extends rC {
  constructor() {
    super(fC, zc), this.filterType = "text", this.FilterModelFormatterClass = CC;
  }
  updateParams(e) {
    super.updateParams(e);
    const t = e.filterParams;
    this.matcher = t.textMatcher ?? lL, this.formatter = t.textFormatter ?? (t.caseSensitive ? cL : dL);
  }
  evaluateNullValue(e) {
    return e ? ["notEqual", "notContains", "blank"].indexOf(e) >= 0 : !1;
  }
  evaluateNonNullValue(e, t, i, s) {
    const o = e.map((h) => this.formatter(h)) || [], n = this.formatter(t), {
      api: r,
      colDef: a,
      column: l,
      context: c,
      filterParams: { textFormatter: d }
    } = this.params;
    if (i.type === "blank")
      return ir(t);
    if (i.type === "notBlank")
      return !ir(t);
    const u = {
      api: r,
      colDef: a,
      column: l,
      context: c,
      node: s.node,
      data: s.data,
      filterOption: i.type,
      value: n,
      textFormatter: d
    };
    return o.some((h) => this.matcher({ ...u, filterText: h }));
  }
}, hL = class extends mC {
  constructor() {
    super(...arguments), this.FilterModelFormatterClass = CC, this.filterType = "text", this.defaultOptions = zc;
  }
  createFloatingFilterInputService() {
    return this.createManagedBean(new gC());
  }
};
function gL(e) {
  return !!e.quickFilter?.isFilterPresent();
}
function pL(e) {
  return e.quickFilter?.getText();
}
function fL(e) {
  e.quickFilter?.resetCache();
}
var mL = class extends T {
  constructor() {
    super(...arguments), this.beanName = "quickFilter", this.quickFilter = null, this.quickFilterParts = null;
  }
  postConstruct() {
    const e = this.resetCache.bind(this), t = this.gos;
    this.addManagedEventListeners({
      columnPivotModeChanged: e,
      newColumnsLoaded: e,
      columnRowGroupChanged: e,
      columnVisible: () => {
        t.get("includeHiddenColumnsInQuickFilter") || this.resetCache();
      }
    }), this.addManagedPropertyListener("quickFilterText", (i) => this.setFilter(i.currentValue)), this.addManagedPropertyListeners(
      ["includeHiddenColumnsInQuickFilter", "applyQuickFilterBeforePivotOrAgg"],
      () => this.onColumnConfigChanged()
    ), this.quickFilter = this.parseFilter(t.get("quickFilterText")), this.parser = t.get("quickFilterParser"), this.matcher = t.get("quickFilterMatcher"), this.setFilterParts(), this.addManagedPropertyListeners(["quickFilterMatcher", "quickFilterParser"], () => this.setParserAndMatcher());
  }
  // if we are using autoGroupCols, then they should be included for quick filter. this covers the
  // following scenarios:
  // a) user provides 'field' into autoGroupCol of normal grid, so now because a valid col to filter leafs on
  // b) using tree data and user depends on autoGroupCol for first col, and we also want to filter on this
  //    (tree data is a bit different, as parent rows can be filtered on, unlike row grouping)
  refreshCols() {
    const { autoColSvc: e, colModel: t, gos: i, pivotResultCols: s } = this.beans, o = t.isPivotMode(), n = e?.getColumns(), r = t.getColDefCols();
    let a = (o && !i.get("applyQuickFilterBeforePivotOrAgg") ? s?.getPivotResultCols()?.list : r) ?? [];
    n && (a = a.concat(n)), this.colsToUse = i.get("includeHiddenColumnsInQuickFilter") ? a : a.filter((l) => l.isVisible() || l.isRowGroupActive());
  }
  isFilterPresent() {
    return this.quickFilter !== null;
  }
  doesRowPass(e) {
    const t = this.gos.get("cacheQuickFilter");
    return this.matcher ? this.doesRowPassMatcher(t, e) : this.quickFilterParts.every(
      (i) => t ? this.doesRowPassCache(e, i) : this.doesRowPassNoCache(e, i)
    );
  }
  resetCache() {
    this.beans.rowModel.forEachNode((e) => e.quickFilterAggregateText = null);
  }
  getText() {
    return this.gos.get("quickFilterText");
  }
  setFilterParts() {
    const { quickFilter: e, parser: t } = this;
    e ? this.quickFilterParts = t ? t(e) : e.split(" ") : this.quickFilterParts = null;
  }
  parseFilter(e) {
    return $(e) ? e.toUpperCase() : null;
  }
  setFilter(e) {
    if (e != null && typeof e != "string") {
      B(70, { newFilter: e });
      return;
    }
    const t = this.parseFilter(e);
    this.quickFilter !== t && (this.quickFilter = t, this.setFilterParts(), this.dispatchLocalEvent({ type: "quickFilterChanged" }));
  }
  setParserAndMatcher() {
    const e = this.gos.get("quickFilterParser"), t = this.gos.get("quickFilterMatcher"), i = e !== this.parser || t !== this.matcher;
    this.parser = e, this.matcher = t, i && (this.setFilterParts(), this.dispatchLocalEvent({ type: "quickFilterChanged" }));
  }
  onColumnConfigChanged() {
    this.refreshCols(), this.resetCache(), this.isFilterPresent() && this.dispatchLocalEvent({ type: "quickFilterChanged" });
  }
  doesRowPassNoCache(e, t) {
    return this.colsToUse.some((i) => {
      const s = this.getTextForColumn(i, e);
      return $(s) && s.indexOf(t) >= 0;
    });
  }
  doesRowPassCache(e, t) {
    return this.checkGenerateAggText(e), e.quickFilterAggregateText.indexOf(t) >= 0;
  }
  doesRowPassMatcher(e, t) {
    let i;
    e ? (this.checkGenerateAggText(t), i = t.quickFilterAggregateText) : i = this.getAggText(t);
    const { quickFilterParts: s, matcher: o } = this;
    return o(s, i);
  }
  checkGenerateAggText(e) {
    e.quickFilterAggregateText || (e.quickFilterAggregateText = this.getAggText(e));
  }
  getTextForColumn(e, t) {
    let i = this.beans.filterValueSvc.getValue(e, t);
    const s = e.getColDef();
    if (s.getQuickFilterText) {
      const o = Z(this.gos, {
        value: i,
        node: t,
        data: t.data,
        column: e,
        colDef: s
      });
      i = s.getQuickFilterText(o);
    }
    return $(i) ? i.toString().toUpperCase() : null;
  }
  getAggText(e) {
    const t = [];
    return this.colsToUse.forEach((i) => {
      const s = this.getTextForColumn(i, e);
      $(s) && t.push(s);
    }), t.join(`
`);
  }
}, CL = {
  moduleName: "ClientSideRowModelFilter",
  version: Y,
  rowModels: ["clientSide"],
  beans: [Ck]
}, _c = {
  moduleName: "FilterCore",
  version: Y,
  beans: [Nk],
  apiFunctions: {
    isAnyFilterPresent: Hk,
    onFilterChanged: Bk
  },
  css: [xk],
  dependsOn: [CL]
}, vC = {
  moduleName: "FilterValue",
  version: Y,
  beans: [zk]
}, wr = {
  moduleName: "ColumnFilter",
  version: Y,
  beans: [Gk, Wk],
  dynamicBeans: { headerFilterCellCtrl: vk },
  icons: {
    // open filter button - header, floating filter, menu
    filter: "filter",
    // filter is applied - header (legacy column menu), filter tool panel
    filterActive: "filter"
  },
  apiFunctions: {
    isColumnFilterPresent: Fk,
    getColumnFilterInstance: Pk,
    destroyFilter: Ek,
    setFilterModel: Dk,
    getFilterModel: Tk,
    getColumnFilterModel: Mk,
    setColumnFilterModel: Ak,
    showColumnFilter: Ik,
    hideColumnFilter: kk,
    getColumnFilterHandler: Lk,
    doFilterAction: Ok
  },
  dependsOn: [_c, vr, vC, yk]
}, vL = {
  moduleName: "CustomFilter",
  version: Y,
  userComponents: { agReadOnlyFloatingFilter: Uk },
  dependsOn: [wr]
}, wL = {
  moduleName: "TextFilter",
  version: Y,
  dependsOn: [wr],
  userComponents: {
    agTextColumnFilter: {
      classImp: aL,
      params: {
        useForm: !0
      }
    },
    agTextColumnFloatingFilter: hL
  },
  dynamicBeans: {
    agTextColumnFilterHandler: uL
  }
}, SL = {
  moduleName: "NumberFilter",
  version: Y,
  dependsOn: [wr],
  userComponents: {
    agNumberColumnFilter: {
      classImp: iL,
      params: {
        useForm: !0
      }
    },
    agNumberColumnFloatingFilter: rL
  },
  dynamicBeans: {
    agNumberColumnFilterHandler: sL
  }
}, yL = {
  moduleName: "DateFilter",
  version: Y,
  dependsOn: [wr],
  userComponents: {
    agDateColumnFilter: {
      classImp: Yk,
      params: {
        useForm: !0
      }
    },
    agDateInput: tL,
    agDateColumnFloatingFilter: Jk
  },
  dynamicBeans: {
    agDateColumnFilterHandler: Zk
  }
}, bL = {
  moduleName: "QuickFilterCore",
  version: Y,
  rowModels: ["clientSide"],
  beans: [mL],
  dependsOn: [_c, vC]
}, RL = {
  moduleName: "QuickFilter",
  version: Y,
  apiFunctions: {
    isQuickFilterPresent: gL,
    getQuickFilter: pL,
    resetQuickFilter: fL
  },
  dependsOn: [bL]
}, xL = {
  moduleName: "ExternalFilter",
  version: Y,
  dependsOn: [_c]
}, FL = (
  /*css*/
  ".ag-tooltip{background-color:var(--ag-tooltip-background-color);border:var(--ag-tooltip-border);border-radius:var(--ag-border-radius);color:var(--ag-tooltip-text-color);padding:var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding);position:absolute;white-space:normal;z-index:99999;&:where(.ag-cell-editor-tooltip){background-color:var(--ag-tooltip-error-background-color);border:var(--ag-tooltip-error-border);color:var(--ag-tooltip-error-text-color);font-weight:500}}.ag-tooltip-custom{position:absolute;z-index:99999}.ag-tooltip-custom:where(:not(.ag-tooltip-interactive)),.ag-tooltip:where(:not(.ag-tooltip-interactive)){pointer-events:none}.ag-tooltip-animate{transition:opacity 1s;&:where(.ag-tooltip-hiding){opacity:0}}"
), da = (e, t, i) => {
  const { editModelSvc: s } = e, o = s?.getCellValidationModel()?.getCellValidation(t)?.errorMessages, n = s?.getRowValidationModel().getRowValidation(t)?.errorMessages, r = o || n;
  return r && r.length ? r.join(i("tooltipValidationErrorSeparator", ". ")) : void 0;
}, PL = class extends T {
  constructor() {
    super(...arguments), this.beanName = "tooltipSvc";
  }
  setupHeaderTooltip(e, t, i, s) {
    e && t.destroyBean(e);
    const o = ca(this.gos), { column: n, eGui: r } = t, a = n.getColDef();
    !s && o && !a.headerComponent && (s = dn(
      () => r.querySelector(".ag-header-cell-text")
    ));
    const l = {
      getColumn: () => n,
      getColDef: () => n.getColDef(),
      getGui: () => r,
      getLocation: () => "header",
      getTooltipValue: () => i ?? n.getColDef().headerTooltip,
      shouldDisplayTooltip: s
    };
    let c = this.createTooltipFeature(l);
    return c && (c = t.createBean(c), t.setRefreshFunction("tooltip", () => c.refreshTooltip())), c;
  }
  setupHeaderGroupTooltip(e, t, i, s) {
    e && t.destroyBean(e);
    const o = ca(this.gos), { column: n, eGui: r } = t, a = n.getColGroupDef();
    !s && o && !a?.headerGroupComponent && (s = dn(
      () => r.querySelector(".ag-header-group-text")
    ));
    const l = {
      getColumn: () => n,
      getGui: () => r,
      getLocation: () => "headerGroup",
      getTooltipValue: () => i ?? (a && a.headerTooltip),
      shouldDisplayTooltip: s
    };
    a && (l.getColDef = () => a);
    const c = this.createTooltipFeature(l);
    return c && t.createBean(c);
  }
  enableCellTooltipFeature(e, t, i) {
    const { beans: s } = this, { gos: o, editSvc: n } = s, { column: r, rowNode: a } = e;
    let l = "cell";
    const c = () => {
      const g = !!!n?.isEditing(e) && da(s, e, this.getLocaleTextFunc());
      if (g)
        return l = "cellEditor", g;
      l = "cell";
      const p = r.getColDef(), f = a.data;
      if (p.tooltipField && $(f))
        return eo(f, p.tooltipField, r.isTooltipFieldContainsDots());
      const m = p.tooltipValueGetter;
      return m ? m(
        Z(o, {
          location: "cell",
          colDef: r.getColDef(),
          column: r,
          rowIndex: e.cellPosition.rowIndex,
          node: a,
          data: a.data,
          value: e.value,
          valueFormatted: e.valueFormatted
        })
      ) : null;
    }, d = ca(o);
    i || (d && !e.isCellRenderer() ? i = () => {
      const h = !!n?.isEditing(e);
      if (!h && da(s, e, this.getLocaleTextFunc()))
        return !0;
      if (!r.isTooltipEnabled())
        return !1;
      const f = dn(() => {
        const m = e.eGui;
        return m.children.length === 0 ? m : m.querySelector(".ag-cell-value");
      });
      return !h && f();
    } : i = () => !n?.isEditing(e));
    const u = {
      getColumn: () => r,
      getColDef: () => r.getColDef(),
      getRowIndex: () => e.cellPosition.rowIndex,
      getRowNode: () => a,
      getGui: () => e.eGui,
      getLocation: () => l,
      getTooltipValue: t != null ? () => t : c,
      // this makes no sense, why is the cell formatted value passed to the tooltip???
      getValueFormatted: () => e.valueFormatted,
      shouldDisplayTooltip: i
    };
    return this.createTooltipFeature(u, s);
  }
  setupFullWidthRowTooltip(e, t, i, s) {
    const o = {
      getGui: () => t.getFullWidthElement(),
      getTooltipValue: () => i,
      getLocation: () => "fullWidthRow",
      shouldDisplayTooltip: s
    }, n = this.beans, r = n.context;
    e && t.destroyBean(e, r);
    const a = this.createTooltipFeature(o, n);
    if (a)
      return t.createBean(a, r);
  }
  setupCellEditorTooltip(e, t) {
    const { beans: i } = this, { context: s } = i, o = t.getValidationElement?.(!0) || !t.isPopup?.() && e.eGui;
    if (!o)
      return;
    const n = {
      getGui: () => o,
      getTooltipValue: () => da(i, e, this.getLocaleTextFunc()),
      getLocation: () => "cellEditor",
      shouldDisplayTooltip: () => {
        const { editModelSvc: a } = i, l = a?.getRowValidationModel()?.getRowValidationMap(), c = a?.getCellValidationModel()?.getCellValidationMap(), d = !!l && l.size > 0, u = !!c && c.size > 0;
        return d || u;
      }
    }, r = this.createTooltipFeature(n, i);
    if (r)
      return e.createBean(r, s);
  }
  initCol(e) {
    const { colDef: t } = e;
    e.tooltipEnabled = $(t.tooltipField) || $(t.tooltipValueGetter) || $(t.tooltipComponent);
  }
  createTooltipFeature(e, t) {
    return this.beans.registry.createDynamicBean("tooltipFeature", !1, e, t);
  }
}, wC = {
  moduleName: "Tooltip",
  version: Y,
  beans: [PL],
  dynamicBeans: {
    tooltipFeature: ek
  },
  userComponents: {
    agTooltipComponent: XI
  },
  dependsOn: [vr],
  css: [FL]
}, ts = class {
  constructor(e) {
    this.cellValueChanges = e;
  }
}, ua = class extends ts {
  constructor(e, t, i, s) {
    super(e), this.initialRange = t, this.finalRange = i, this.ranges = s;
  }
}, EL = 10, wh = class {
  constructor(e) {
    this.actionStack = [], this.maxStackSize = e || EL, this.actionStack = new Array(this.maxStackSize);
  }
  pop() {
    return this.actionStack.pop();
  }
  push(e) {
    e.cellValueChanges && e.cellValueChanges.length > 0 && (this.actionStack.length === this.maxStackSize && this.actionStack.shift(), this.actionStack.push(e));
  }
  clear() {
    this.actionStack = [];
  }
  getCurrentStackSize() {
    return this.actionStack.length;
  }
}, DL = class extends T {
  constructor() {
    super(...arguments), this.beanName = "undoRedo", this.cellValueChanges = [], this.activeCellEdit = null, this.activeRowEdit = null, this.isPasting = !1, this.isRangeInAction = !1, this.batchEditing = !1, this.bulkEditing = !1, this.onCellValueChanged = (e) => {
      const t = { column: e.column, rowIndex: e.rowIndex, rowPinned: e.rowPinned }, i = this.activeCellEdit !== null && zf(this.activeCellEdit, t), s = this.activeRowEdit !== null && jF(this.activeRowEdit, t);
      if (!(i || s || this.isPasting || this.isRangeInAction))
        return;
      const { rowPinned: n, rowIndex: r, column: a, oldValue: l, value: c } = e, d = {
        rowPinned: n,
        rowIndex: r,
        columnId: a.getColId(),
        newValue: c,
        oldValue: l
      };
      this.cellValueChanges.push(d);
    }, this.clearStacks = () => {
      this.undoStack.clear(), this.redoStack.clear();
    };
  }
  postConstruct() {
    const { gos: e, ctrlsSvc: t } = this.beans;
    if (!e.get("undoRedoCellEditing"))
      return;
    const i = e.get("undoRedoCellEditingLimit");
    if (i <= 0)
      return;
    this.undoStack = new wh(i), this.redoStack = new wh(i), this.addListeners();
    const s = this.clearStacks.bind(this);
    this.addManagedEventListeners({
      cellValueChanged: this.onCellValueChanged.bind(this),
      // undo / redo is restricted to actual editing so we clear the stacks when other operations are
      // performed that change the order of the row / cols.
      modelUpdated: (o) => {
        o.keepUndoRedoStack || this.clearStacks();
      },
      columnPivotModeChanged: s,
      newColumnsLoaded: s,
      columnGroupOpened: s,
      columnRowGroupChanged: s,
      columnMoved: s,
      columnPinned: s,
      columnVisible: s,
      rowDragEnd: s
    }), t.whenReady(this, (o) => {
      this.gridBodyCtrl = o.gridBodyCtrl;
    });
  }
  getCurrentUndoStackSize() {
    return this.undoStack?.getCurrentStackSize() ?? 0;
  }
  getCurrentRedoStackSize() {
    return this.redoStack?.getCurrentStackSize() ?? 0;
  }
  undo(e) {
    const { eventSvc: t, undoStack: i, redoStack: s } = this;
    t.dispatchEvent({
      type: "undoStarted",
      source: e
    });
    const o = this.undoRedo(i, s, "initialRange", "oldValue", "undo");
    t.dispatchEvent({
      type: "undoEnded",
      source: e,
      operationPerformed: o
    });
  }
  redo(e) {
    const { eventSvc: t, undoStack: i, redoStack: s } = this;
    t.dispatchEvent({
      type: "redoStarted",
      source: e
    });
    const o = this.undoRedo(s, i, "finalRange", "newValue", "redo");
    t.dispatchEvent({
      type: "redoEnded",
      source: e,
      operationPerformed: o
    });
  }
  undoRedo(e, t, i, s, o) {
    if (!e)
      return !1;
    const n = e.pop();
    return !n || !n.cellValueChanges ? !1 : (this.processAction(
      n,
      (r) => r[s],
      o
    ), n instanceof ua ? this.processRange(n.ranges || [n[i]]) : this.processCell(n.cellValueChanges), t.push(n), !0);
  }
  processAction(e, t, i) {
    e.cellValueChanges.forEach((s) => {
      const { rowIndex: o, rowPinned: n, columnId: r } = s, a = { rowIndex: o, rowPinned: n }, l = Zt(this.beans, a);
      l.displayed && l.setDataValue(r, t(s), i);
    });
  }
  processRange(e) {
    let t;
    const i = this.beans.rangeSvc;
    i.removeAllCellRanges(!0), e.forEach((s, o) => {
      if (!s)
        return;
      const n = s.startRow, r = s.endRow;
      o === e.length - 1 && (t = {
        rowPinned: n.rowPinned,
        rowIndex: n.rowIndex,
        columnId: s.startColumn.getColId()
      }, this.setLastFocusedCell(t));
      const a = {
        rowStartIndex: n.rowIndex,
        rowStartPinned: n.rowPinned,
        rowEndIndex: r.rowIndex,
        rowEndPinned: r.rowPinned,
        columnStart: s.startColumn,
        columns: s.columns
      };
      i.addCellRange(a);
    });
  }
  processCell(e) {
    const t = e[0], { rowIndex: i, rowPinned: s } = t, o = { rowIndex: i, rowPinned: s }, n = Zt(this.beans, o), r = {
      rowPinned: t.rowPinned,
      rowIndex: n.rowIndex,
      columnId: t.columnId
    };
    this.setLastFocusedCell(r);
  }
  setLastFocusedCell(e) {
    const { rowIndex: t, columnId: i, rowPinned: s } = e, { colModel: o, focusSvc: n, rangeSvc: r } = this.beans, a = o.getCol(i);
    if (!a)
      return;
    const { scrollFeature: l } = this.gridBodyCtrl;
    l.ensureIndexVisible(t), l.ensureColumnVisible(a);
    const c = { rowIndex: t, column: a, rowPinned: s };
    n.setFocusedCell({ ...c, forceBrowserFocus: !0 }), r?.setRangeToCell(c);
  }
  addListeners() {
    this.addManagedEventListeners({
      rowEditingStarted: (e) => {
        this.activeRowEdit = { rowIndex: e.rowIndex, rowPinned: e.rowPinned };
      },
      rowEditingStopped: () => {
        const e = new ts(this.cellValueChanges);
        this.pushActionsToUndoStack(e), this.activeRowEdit = null;
      },
      cellEditingStarted: (e) => {
        this.activeCellEdit = { column: e.column, rowIndex: e.rowIndex, rowPinned: e.rowPinned };
      },
      cellEditingStopped: (e) => {
        if (this.activeCellEdit = null, e.valueChanged && !this.activeRowEdit && !this.isPasting && !this.isRangeInAction) {
          const i = new ts(this.cellValueChanges);
          this.pushActionsToUndoStack(i);
        }
      },
      pasteStart: () => {
        this.isPasting = !0;
      },
      pasteEnd: () => {
        const e = new ts(this.cellValueChanges);
        this.pushActionsToUndoStack(e), this.isPasting = !1;
      },
      fillStart: () => {
        this.isRangeInAction = !0;
      },
      fillEnd: (e) => {
        const t = new ua(this.cellValueChanges, e.initialRange, e.finalRange);
        this.pushActionsToUndoStack(t), this.isRangeInAction = !1;
      },
      keyShortcutChangedCellStart: () => {
        this.isRangeInAction = !0;
      },
      keyShortcutChangedCellEnd: () => {
        let e;
        const { rangeSvc: t, gos: i } = this.beans;
        t && hi(i) ? e = new ua(this.cellValueChanges, void 0, void 0, [
          ...t.getCellRanges()
        ]) : e = new ts(this.cellValueChanges), this.pushActionsToUndoStack(e), this.isRangeInAction = !1;
      },
      batchEditingStarted: () => this.startBigChange("batchEditing"),
      batchEditingStopped: ({ changes: e }) => this.stopBigChange("batchEditing", e),
      bulkEditingStarted: () => this.startBigChange("bulkEditing"),
      bulkEditingStopped: ({ changes: e }) => this.stopBigChange("bulkEditing", e)
    });
  }
  startBigChange(e) {
    this[e] = !0;
  }
  stopBigChange(e, t) {
    if (!this[e] || (this[e] = !1, t?.length === 0))
      return;
    const i = new ts(t ?? []);
    this.pushActionsToUndoStack(i), this.cellValueChanges = [];
  }
  pushActionsToUndoStack(e) {
    this.undoStack.push(e), this.cellValueChanges = [], this.redoStack.clear();
  }
}, TL = (
  /*css*/
  ".ag-cell-inline-editing{border:var(--ag-cell-editing-border)!important;border-radius:var(--ag-border-radius);box-shadow:var(--ag-cell-editing-shadow);padding:0;z-index:1;.ag-cell-edit-wrapper,.ag-cell-editor,.ag-cell-wrapper,:where(.ag-cell-editor) .ag-input-field-input,:where(.ag-cell-editor) .ag-wrapper{height:100%;line-height:normal;min-height:100%;width:100%}&.ag-cell-editing-error{border-color:var(--ag-invalid-color)!important}}:where(.ag-popup-editor) .ag-large-text{background-color:var(--ag-background-color);border-radius:var(--ag-border-radius);box-shadow:var(--ag-dropdown-shadow);padding:0}.ag-large-text-input{height:auto;padding:var(--ag-cell-horizontal-padding)}:where(.ag-rtl .ag-large-text-input) textarea{resize:none}:where(.ag-ltr) .ag-checkbox-edit{padding-left:var(--ag-cell-horizontal-padding)}:where(.ag-rtl) .ag-checkbox-edit{padding-right:var(--ag-cell-horizontal-padding)}:where(.ag-row.ag-row-editing-invalid .ag-cell-inline-editing){opacity:.8}"
), ML = {
  tag: "div",
  cls: "ag-cell-wrapper ag-cell-edit-wrapper ag-checkbox-edit",
  children: [
    {
      tag: "ag-checkbox",
      ref: "eEditor",
      role: "presentation"
    }
  ]
}, AL = class extends pr {
  constructor() {
    super(ML, [Tc]), this.eEditor = q;
  }
  initialiseEditor(e) {
    const t = e.value ?? void 0, i = this.eEditor;
    i.setValue(t), i.getInputElement().setAttribute("tabindex", "-1"), this.setAriaLabel(t), this.addManagedListeners(i, {
      fieldValueChanged: (o) => this.setAriaLabel(o.selected)
    });
  }
  getValue() {
    return this.eEditor.getValue();
  }
  focusIn() {
    this.eEditor.getFocusableElement().focus();
  }
  afterGuiAttached() {
    this.params.cellStartedEdit && this.focusIn();
  }
  isPopup() {
    return !1;
  }
  setAriaLabel(e) {
    const t = this.getLocaleTextFunc(), i = dr(t, e), s = t("ariaToggleCellValue", "Press SPACE to toggle cell value");
    this.eEditor.setInputAriaLabel(`${s} (${i})`);
  }
  getValidationElement(e) {
    return e ? this.params.eGridCell : this.eEditor.getInputElement();
  }
  getValidationErrors() {
    const { params: e } = this, { getValidationErrors: t } = e, i = this.getValue();
    return t ? t({
      value: i,
      internalErrors: null,
      cellEditorParams: e
    }) : null;
  }
}, Sr = class extends pr {
  constructor(e) {
    super(), this.cellEditorInput = e, this.eEditor = q;
  }
  initialiseEditor(e) {
    const { cellEditorInput: t } = this;
    this.setTemplate(
      { tag: "div", cls: "ag-cell-edit-wrapper", children: [t.getTemplate()] },
      t.getAgComponents()
    );
    const { eEditor: i } = this, { cellStartedEdit: s, eventKey: o, suppressPreventDefault: n } = e;
    i.getInputElement().setAttribute("title", ""), t.init(i, e);
    let r, a = !0;
    s ? (this.focusAfterAttached = !0, o === E.BACKSPACE || o === E.DELETE ? r = "" : o && o.length === 1 ? n ? a = !1 : r = o : (r = t.getStartValue(), o !== E.F2 && (this.highlightAllOnFocus = !0))) : (this.focusAfterAttached = !1, r = t.getStartValue()), a && r != null && i.setStartValue(r), this.addGuiEventListener("keydown", (l) => {
      const { key: c } = l;
      (c === E.PAGE_UP || c === E.PAGE_DOWN) && l.preventDefault();
    });
  }
  afterGuiAttached() {
    const e = this.getLocaleTextFunc(), t = this.eEditor;
    if (t.setInputAriaLabel(e("ariaInputEditor", "Input Editor")), !this.focusAfterAttached)
      return;
    Ui() || t.getFocusableElement().focus();
    const i = t.getInputElement();
    this.highlightAllOnFocus ? i.select() : this.cellEditorInput.setCaret?.();
  }
  // gets called when tabbing through cells and in full row edit mode
  focusIn() {
    const { eEditor: e } = this, t = e.getFocusableElement(), i = e.getInputElement();
    t.focus(), i.select();
  }
  getValue() {
    return this.cellEditorInput.getValue();
  }
  isPopup() {
    return !1;
  }
  getValidationElement() {
    return this.eEditor.getInputElement();
  }
  getValidationErrors() {
    return this.cellEditorInput.getValidationErrors();
  }
}, IL = {
  tag: "ag-input-date-field",
  ref: "eEditor",
  cls: "ag-cell-editor"
}, kL = class {
  constructor(e, t) {
    this.getDataTypeService = e, this.getLocaleTextFunc = t;
  }
  getTemplate() {
    return IL;
  }
  getAgComponents() {
    return [Sm];
  }
  init(e, t) {
    this.eEditor = e, this.params = t;
    const { min: i, max: s, step: o, colDef: n } = t;
    i != null && e.setMin(i), s != null && e.setMax(s), o != null && e.setStep(o), this.includeTime = t.includeTime ?? this.getDataTypeService()?.getDateIncludesTimeFlag?.(n.cellDataType), this.includeTime != null && e.setIncludeTime(this.includeTime);
  }
  getValidationErrors() {
    const t = this.eEditor.getInputElement().valueAsDate, { params: i } = this, { min: s, max: o, getValidationErrors: n } = i;
    let r = [];
    const a = this.getLocaleTextFunc();
    if (t instanceof Date && !isNaN(t.getTime())) {
      if (s) {
        const l = s instanceof Date ? s : new Date(s);
        if (t < l) {
          const c = l.toLocaleDateString();
          r.push(
            a("minDateValidation", `Date must be after ${c}`, [c])
          );
        }
      }
      if (o) {
        const l = o instanceof Date ? o : new Date(o);
        if (t > l) {
          const c = l.toLocaleDateString();
          r.push(
            a("maxDateValidation", `Date must be before ${c}`, [c])
          );
        }
      }
    }
    return r.length || (r = null), n ? n({ value: t, cellEditorParams: i, internalErrors: r }) : r;
  }
  getValue() {
    const { eEditor: e, params: t } = this, i = e.getDate();
    return !$(i) && !$(t.value) ? t.value : i ?? null;
  }
  getStartValue() {
    const { value: e } = this.params;
    if (e instanceof Date)
      return lt(e, this.includeTime ?? !1);
  }
}, LL = class extends Sr {
  constructor() {
    super(
      new kL(
        () => this.beans.dataTypeSvc,
        () => this.getLocaleTextFunc()
      )
    );
  }
}, OL = {
  tag: "ag-input-date-field",
  ref: "eEditor",
  cls: "ag-cell-editor"
}, VL = class {
  constructor(e, t) {
    this.getDataTypeService = e, this.getLocaleTextFunc = t;
  }
  getTemplate() {
    return OL;
  }
  getAgComponents() {
    return [Sm];
  }
  init(e, t) {
    this.eEditor = e, this.params = t;
    const { min: i, max: s, step: o, colDef: n } = t;
    i != null && e.setMin(i), s != null && e.setMax(s), o != null && e.setStep(o), this.includeTime = t.includeTime ?? this.getDataTypeService()?.getDateIncludesTimeFlag?.(n.cellDataType), this.includeTime != null && e.setIncludeTime(this.includeTime);
  }
  getValidationErrors() {
    const { eEditor: e, params: t } = this, i = e.getInputElement().value, s = this.formatDate(this.parseDate(i ?? void 0)), { min: o, max: n, getValidationErrors: r } = t;
    let a = [];
    if (s) {
      const l = new Date(s), c = this.getLocaleTextFunc();
      if (o) {
        const d = new Date(o);
        if (l < d) {
          const u = d.toLocaleDateString();
          a.push(
            c("minDateValidation", `Date must be after ${u}`, [u])
          );
        }
      }
      if (n) {
        const d = new Date(n);
        if (l > d) {
          const u = d.toLocaleDateString();
          a.push(
            c("maxDateValidation", `Date must be before ${u}`, [u])
          );
        }
      }
    }
    return a.length || (a = null), r ? r({
      value: this.getValue(),
      cellEditorParams: t,
      internalErrors: a
    }) : a;
  }
  getValue() {
    const { params: e, eEditor: t } = this, i = this.formatDate(t.getDate());
    return !$(i) && !$(e.value) ? e.value : e.parseValue(i ?? "");
  }
  getStartValue() {
    return lt(this.parseDate(this.params.value ?? void 0) ?? null, this.includeTime ?? !1);
  }
  parseDate(e) {
    const t = this.getDataTypeService();
    return t ? t.getDateParserFunction(this.params.column)(e) : st(e) ?? void 0;
  }
  formatDate(e) {
    const t = this.getDataTypeService();
    return t ? t.getDateFormatterFunction(this.params.column)(e) : lt(e ?? null, this.includeTime ?? !1) ?? void 0;
  }
}, GL = class extends Sr {
  constructor() {
    super(
      new VL(
        () => this.beans.dataTypeSvc,
        () => this.getLocaleTextFunc()
      )
    );
  }
}, HL = {
  tag: "div",
  cls: "ag-large-text",
  children: [
    {
      tag: "ag-input-text-area",
      ref: "eEditor",
      cls: "ag-large-text-input"
    }
  ]
}, BL = class extends pr {
  constructor() {
    super(HL, [S0]), this.eEditor = q;
  }
  initialiseEditor(e) {
    const { eEditor: t } = this, { cellStartedEdit: i, eventKey: s, maxLength: o, cols: n, rows: r } = e;
    this.focusAfterAttached = i, t.getInputElement().setAttribute("title", ""), t.setMaxLength(o || 200).setCols(n || 60).setRows(r || 10);
    let a;
    i ? (this.focusAfterAttached = !0, s === E.BACKSPACE || s === E.DELETE ? a = "" : s && s.length === 1 ? a = s : (a = this.getStartValue(e), s !== E.F2 && (this.highlightAllOnFocus = !0))) : (this.focusAfterAttached = !1, a = this.getStartValue(e)), a != null && t.setValue(a, !0), this.addGuiEventListener("keydown", this.onKeyDown.bind(this)), this.activateTabIndex();
  }
  getStartValue(e) {
    const { value: t } = e;
    return t?.toString() ?? t;
  }
  onKeyDown(e) {
    const t = e.key;
    (t === E.LEFT || t === E.UP || t === E.RIGHT || t === E.DOWN || e.shiftKey && t === E.ENTER) && e.stopPropagation();
  }
  afterGuiAttached() {
    const { eEditor: e, focusAfterAttached: t, highlightAllOnFocus: i } = this, s = this.getLocaleTextFunc();
    e.setInputAriaLabel(s("ariaInputEditor", "Input Editor")), t && (e.getFocusableElement().focus(), i && e.getInputElement().select());
  }
  getValue() {
    const { eEditor: e, params: t } = this, { value: i } = t, s = e.getValue();
    return !$(s) && !$(i) ? i : t.parseValue(s);
  }
  getValidationElement() {
    return this.eEditor.getInputElement();
  }
  getValidationErrors() {
    const { params: e } = this, { maxLength: t, getValidationErrors: i } = e, s = this.getLocaleTextFunc(), o = this.getValue();
    let n = [];
    return typeof o == "string" && t != null && o.length > t && n.push(
      s("maxLengthValidation", `Must be ${t} characters or fewer.`, [String(t)])
    ), n.length || (n = null), i ? i({
      value: o,
      internalErrors: n,
      cellEditorParams: e
    }) : n;
  }
}, NL = {
  tag: "ag-input-number-field",
  ref: "eEditor",
  cls: "ag-cell-editor"
}, WL = class {
  constructor(e) {
    this.getLocaleTextFunc = e;
  }
  getTemplate() {
    return NL;
  }
  getAgComponents() {
    return [y0];
  }
  init(e, t) {
    this.eEditor = e, this.params = t;
    const { max: i, min: s, precision: o, step: n } = t;
    i != null && e.setMax(i), s != null && e.setMin(s), o != null && e.setPrecision(o), n != null && e.setStep(n);
    const r = e.getInputElement();
    t.preventStepping ? e.addManagedElementListeners(r, { keydown: this.preventStepping }) : t.showStepperButtons && r.classList.add("ag-number-field-input-stepper");
  }
  getValidationErrors() {
    const { params: e } = this, { min: t, max: i, getValidationErrors: s } = e, n = this.eEditor.getInputElement().valueAsNumber, r = this.getLocaleTextFunc();
    let a = [];
    return typeof n == "number" && (t != null && n < t && a.push(
      r("minValueValidation", `Must be greater than or equal to ${t}.`, [String(t)])
    ), i != null && n > i && a.push(
      r("maxValueValidation", `Must be less than or equal to ${i}.`, [String(i)])
    )), a.length || (a = null), s ? s({
      value: n,
      cellEditorParams: e,
      internalErrors: a
    }) : a;
  }
  preventStepping(e) {
    (e.key === E.UP || e.key === E.DOWN) && e.preventDefault();
  }
  getValue() {
    const { eEditor: e, params: t } = this, i = e.getValue();
    if (!$(i) && !$(t.value))
      return t.value;
    let s = t.parseValue(i);
    if (s == null)
      return s;
    if (typeof s == "string") {
      if (s === "")
        return null;
      s = Number(s);
    }
    return isNaN(s) ? null : s;
  }
  getStartValue() {
    return this.params.value;
  }
  setCaret() {
    Ui() && this.eEditor.getInputElement().focus({ preventScroll: !0 });
  }
}, zL = class extends Sr {
  constructor() {
    super(new WL(() => this.getLocaleTextFunc()));
  }
}, _L = {
  tag: "div",
  cls: "ag-cell-edit-wrapper",
  children: [
    {
      tag: "ag-select",
      ref: "eEditor",
      cls: "ag-cell-editor"
    }
  ]
}, UL = class extends pr {
  constructor() {
    super(_L, [D0]), this.eEditor = q, this.startedByEnter = !1;
  }
  wireBeans(e) {
    this.valueSvc = e.valueSvc;
  }
  initialiseEditor(e) {
    this.focusAfterAttached = e.cellStartedEdit;
    const { eEditor: t, valueSvc: i, gos: s } = this, { values: o, value: n, eventKey: r } = e;
    if (Ce(o)) {
      B(58);
      return;
    }
    this.startedByEnter = r != null ? r === E.ENTER : !1;
    let a = !1;
    o.forEach((u) => {
      const h = { value: u }, g = i.formatValue(e.column, null, u), p = g != null;
      h.text = p ? g : u, t.addOption(h), a = a || n === u;
    }), a ? t.setValue(e.value, !0) : e.values.length && t.setValue(e.values[0], !0);
    const { valueListGap: l, valueListMaxWidth: c, valueListMaxHeight: d } = e;
    l != null && t.setPickerGap(l), d != null && t.setPickerMaxHeight(d), c != null && t.setPickerMaxWidth(c), s.get("editType") !== "fullRow" && this.addManagedListeners(this.eEditor, { selectedItem: () => e.stopEditing() });
  }
  afterGuiAttached() {
    this.focusAfterAttached && this.eEditor.getFocusableElement().focus(), this.startedByEnter && setTimeout(() => {
      this.isAlive() && this.eEditor.showPicker();
    });
  }
  focusIn() {
    this.eEditor.getFocusableElement().focus();
  }
  getValue() {
    return this.eEditor.getValue();
  }
  isPopup() {
    return !1;
  }
  getValidationElement() {
    return this.eEditor.getAriaElement();
  }
  getValidationErrors() {
    const { params: e } = this, { values: t, getValidationErrors: i } = e, s = this.getValue();
    let o = [];
    if (t && !t.includes(s)) {
      const n = this.getLocaleTextFunc();
      o.push(n("invalidSelectionValidation", "Invalid selection."));
    } else
      o = null;
    return i ? i({
      value: s,
      internalErrors: o,
      cellEditorParams: e
    }) : o;
  }
}, jL = {
  tag: "ag-input-text-field",
  ref: "eEditor",
  cls: "ag-cell-editor"
}, $L = class {
  constructor(e) {
    this.getLocaleTextFunc = e;
  }
  getTemplate() {
    return jL;
  }
  getAgComponents() {
    return [fr];
  }
  init(e, t) {
    this.eEditor = e, this.params = t;
    const i = t.maxLength;
    i != null && e.setMaxLength(i);
  }
  getValidationErrors() {
    const { params: e } = this, { maxLength: t, getValidationErrors: i } = e, s = this.getValue(), o = this.getLocaleTextFunc();
    let n = [];
    return t != null && typeof s == "string" && s.length > t && n.push(
      o("maxLengthValidation", `Must be ${t} characters or fewer.`, [String(t)])
    ), n.length || (n = null), i ? i({ value: s, cellEditorParams: e, internalErrors: n }) : n;
  }
  getValue() {
    const { eEditor: e, params: t } = this, i = e.getValue();
    return !$(i) && !$(t.value) ? t.value : t.parseValue(i);
  }
  getStartValue() {
    const e = this.params;
    return e.useFormatter || e.column.getColDef().refData ? e.formatValue(e.value) : e.value;
  }
  setCaret() {
    const e = this.eEditor, t = e.getValue(), i = $(t) && t.length || 0;
    i && e.getInputElement().setSelectionRange(i, i);
  }
}, Sh = class extends Sr {
  constructor() {
    super(new $L(() => this.getLocaleTextFunc()));
  }
};
function KL(e) {
  return e.ctrlsSvc.getScrollFeature().getVScrollPosition();
}
function YL(e) {
  return e.ctrlsSvc.getScrollFeature().getHScrollPosition();
}
function SC(e, t, i = "auto") {
  e.frameworkOverrides.wrapIncoming(
    () => e.ctrlsSvc.getScrollFeature().ensureColumnVisible(t, i),
    "ensureVisible"
  );
}
function yC(e, t, i) {
  e.frameworkOverrides.wrapIncoming(
    () => e.ctrlsSvc.getScrollFeature().ensureIndexVisible(t, i),
    "ensureVisible"
  );
}
function qL(e, t, i = null) {
  e.frameworkOverrides.wrapIncoming(
    () => e.ctrlsSvc.getScrollFeature().ensureNodeVisible(t, i),
    "ensureVisible"
  );
}
function XL(e) {
  e.undoRedo?.undo("api");
}
function ZL(e) {
  e.undoRedo?.redo("api");
}
function QL(e) {
  const t = e.editModelSvc?.getEditMap(), i = [];
  return t?.forEach((s, o) => {
    const { rowIndex: n, rowPinned: r } = o;
    s.forEach((a, l) => {
      const { editorValue: c, pendingValue: d, sourceValue: u, state: h } = a, g = li(a);
      let p = c ?? d;
      p === yt && (p = void 0);
      const f = {
        newValue: p,
        oldValue: u,
        state: h,
        column: l,
        colId: l.getColId(),
        colKey: l.getColId(),
        rowIndex: n,
        rowPinned: r
      };
      (h === "editing" || h === "changed" && g) && i.push(f);
    });
  }), i;
}
function JL(e, t = !1) {
  const { editSvc: i } = e;
  i?.isBatchEditing() ? (t ? e.editModelSvc?.getEditPositions().forEach((s) => {
    s.state === "editing" && i.revertSingleCellEdit(s);
  }) : xi(e, !0), fs(e)) : i?.stopEditing(void 0, { cancel: t, source: "api" });
}
function e1(e, t) {
  const i = me(e, t);
  return e.editSvc?.isEditing(i) ?? !1;
}
function t1(e, t) {
  const { key: i, colKey: s, rowIndex: o, rowPinned: n } = t, { editSvc: r, colModel: a } = e, l = a.getCol(s);
  if (!l) {
    B(12, { colKey: s });
    return;
  }
  const d = Zt(e, {
    rowIndex: o,
    rowPinned: n || null
  });
  if (!d) {
    B(290, { rowIndex: o, rowPinned: n });
    return;
  }
  if (!l.isCellEditable(d))
    return;
  n == null && yC(e, o), SC(e, s), r?.startEditing(
    {
      rowNode: d,
      column: l
    },
    {
      event: i ? new KeyboardEvent("keydown", { key: i }) : void 0,
      source: "api"
    }
  );
}
function i1(e) {
  return e.editSvc?.validateEdit() || null;
}
function s1(e) {
  return e.undoRedo?.getCurrentUndoStackSize() ?? 0;
}
function o1(e) {
  return e.undoRedo?.getCurrentRedoStackSize() ?? 0;
}
var n1 = { tag: "div", cls: "ag-popup-editor", attrs: { tabindex: "-1" } }, r1 = class extends Ec {
  constructor(e) {
    super(n1), this.params = e;
  }
  postConstruct() {
    Hi(this.gos, this.getGui(), "popupEditorWrapper", !0), this.addKeyDownListener();
  }
  addKeyDownListener() {
    const e = this.getGui(), t = this.params, i = (s) => {
      rl(this.gos, s, t.node, t.column, !0) || t.onKeyDown(s);
    };
    this.addManagedElementListeners(e, { keydown: i });
  }
}, sr = (e, t = !1) => {
  if (e !== void 0)
    return li(e) || t && e.state === "editing";
};
function bC(e, t, i = !1) {
  return sr(e.editModelSvc?.getEdit(t), i);
}
function RC(e, t) {
  const { editModelSvc: i } = e, { column: s, rowNode: o } = t;
  if (e.gos.get("groupTotalRow") && !o?.footer)
    return !1;
  for (const n of o?.allLeafChildren ?? [])
    if (sr(i?.getEdit({ rowNode: n, column: s })) || sr(i?.getEdit({ rowNode: n.pinnedSibling, column: s })))
      return !0;
}
function xC(e, { rowNode: t, column: i }) {
  if (t = t.pinnedSibling, !!t)
    return sr(
      e.editModelSvc?.getEdit({
        rowNode: t,
        column: i
      })
    );
}
var a1 = class extends T {
  constructor(e, t) {
    super(), this.cellCtrl = e, this.beans = t, this.editSvc = t.editSvc, this.editModelSvc = t.editModelSvc;
  }
  setComp(e) {
    this.cellComp = e, this.applyCellStyles();
  }
  applyCellStyles() {
    const { cellCtrl: e, editSvc: t, beans: i } = this;
    if (t?.isBatchEditing() && t.isEditing()) {
      const o = bC(i, e) || RC(i, e) || xC(i, e);
      this.applyBatchingStyle(o);
    } else
      this.applyBatchingStyle(!1);
    const s = !!this.editModelSvc?.getCellValidationModel().hasCellValidation(this.cellCtrl);
    this.cellComp.toggleCss("ag-cell-editing-error", s);
  }
  applyBatchingStyle(e) {
    this.cellComp.toggleCss("ag-cell-editing", e ?? !1), this.cellComp.toggleCss("ag-cell-batch-edit", (e && this.editSvc?.isBatchEditing()) ?? !1);
  }
}, l1 = class extends T {
  constructor(e, t) {
    super(), this.rowCtrl = e, this.beans = t, this.gos = t.gos, this.editSvc = t.editSvc, this.editModelSvc = t.editModelSvc;
  }
  applyRowStyles() {
    const { rowCtrl: e, editModelSvc: t, beans: i } = this;
    let s = e.rowNode, o = t?.getEditRow(s);
    const n = this.editModelSvc?.getRowValidationModel().hasRowValidation({ rowNode: s });
    if (!o && s.pinnedSibling && (s = s.pinnedSibling, o = t?.getEditRow(s)), o) {
      const r = Array.from(o.keys()).some((a) => {
        const l = { rowNode: s, column: a };
        return bC(i, l, !0) || RC(i, l) || xC(i, l);
      });
      this.applyStyle(n, r);
      return;
    }
    this.applyStyle(n);
  }
  applyStyle(e = !1, t = !1) {
    const i = this.editSvc?.isBatchEditing() ?? !1, s = this.gos.get("editType") === "fullRow";
    this.rowCtrl?.forEachGui(void 0, ({ rowComp: o }) => {
      o.toggleCss("ag-row-editing", s && t), o.toggleCss("ag-row-batch-edit", s && t && i), o.toggleCss("ag-row-inline-editing", t), o.toggleCss("ag-row-not-inline-editing", !t), o.toggleCss("ag-row-editing-invalid", s && t && e);
    });
  }
}, c1 = ({ rowModel: e, pinnedRowModel: t, editModelSvc: i }, s) => {
  const o = /* @__PURE__ */ new Set();
  return e.forEachNode((n) => s.has(n) && o.add(n)), t?.forEachPinnedRow("top", (n) => s.has(n) && o.add(n)), t?.forEachPinnedRow("bottom", (n) => s.has(n) && o.add(n)), s.forEach((n) => {
    o.has(n) || i.removeEdits({ rowNode: n });
  }), o;
}, d1 = ({ editModelSvc: e }, t, i) => {
  t.forEach(
    (s) => e?.getEditRow(s)?.forEach((o, n) => !i.has(n) && e.removeEdits({ rowNode: s, column: n }))
  );
}, u1 = (e) => () => {
  const t = new Set(e.colModel.getCols()), i = e.editModelSvc.getEditMap(!0), s = new Set(i.keys());
  d1(e, c1(e, s), t);
}, h1 = /* @__PURE__ */ new Set(["undo", "redo", "paste", "bulk"]), FC = {
  paste: "api",
  rangeSvc: "api",
  fillHandle: "api",
  cellClear: "api",
  bulk: "api"
}, g1 = new Set(Object.keys(FC)), p1 = /* @__PURE__ */ new Set([
  "paste",
  "rangeSvc",
  "renderer",
  "cellClear",
  "redo",
  "undo"
]), nn = { cancel: !0, source: "api" }, f1 = { cancel: !1, source: "api" }, Qi = { checkSiblings: !0 }, Us = { force: !0, suppressFlash: !0 }, m1 = class extends T {
  constructor() {
    super(...arguments), this.beanName = "editSvc", this.batch = !1, this.stopping = !1, this.committing = !1;
  }
  postConstruct() {
    const { beans: e } = this;
    this.model = e.editModelSvc, this.valueSvc = e.valueSvc, this.rangeSvc = e.rangeSvc, this.addManagedPropertyListener("editType", ({ currentValue: s }) => {
      this.stopEditing(void 0, nn), this.createStrategy(s);
    });
    const t = u1(e), i = () => {
      const s = this.model.getCellValidationModel().getCellValidationMap().size > 0, o = this.model.getRowValidationModel().getRowValidationMap().size > 0;
      return s || o ? this.stopEditing(void 0, nn) : this.isEditing() && (this.isBatchEditing() ? fs(e, this.model.getEditPositions()) : this.stopEditing(void 0, f1)), !1;
    };
    this.addManagedEventListeners({
      columnPinned: t,
      columnVisible: t,
      columnRowGroupChanged: t,
      rowGroupOpened: t,
      pinnedRowsChanged: t,
      displayedRowsChanged: t,
      sortChanged: i,
      filterChanged: i,
      cellFocused: this.onCellFocused.bind(this)
    });
  }
  isBatchEditing() {
    return this.batch;
  }
  setBatchEditing(e) {
    e ? (this.batch = !0, this.stopEditing(void 0, nn)) : (this.stopEditing(void 0, nn), this.batch = !1);
  }
  createStrategy(e) {
    const { beans: t, gos: i, strategy: s } = this, o = e ?? i.get("editType") ?? "singleCell";
    if (s) {
      if (s.beanName === o)
        return s;
      this.destroyStrategy();
    }
    return this.strategy = this.createOptionalManagedBean(
      t.registry.createDynamicBean(o, !0)
    );
  }
  destroyStrategy() {
    this.strategy && (this.strategy.destroy(), this.strategy = this.destroyBean(this.strategy));
  }
  shouldStartEditing(e, t, i, s = "ui") {
    return this.strategy ?? (this.strategy = this.createStrategy()), this.strategy?.shouldStart(e, t, i, s) ?? null;
  }
  shouldStopEditing(e, t, i = "ui") {
    return this.strategy?.shouldStop(e, t, i) ?? null;
  }
  shouldCancelEditing(e, t, i = "ui") {
    return this.strategy?.shouldCancel(e, t, i) ?? null;
  }
  validateEdit() {
    return iP(this.beans);
  }
  isEditing(e, t) {
    return this.model.hasEdits(e, t ?? Qi);
  }
  isRowEditing(e, t) {
    return (e && this.model.hasRowEdits(e, t)) ?? !1;
  }
  /** @returns whether to prevent default on event */
  startEditing(e, t) {
    const { startedEdit: i = !0, event: s = null, source: o = "ui", ignoreEventKey: n = !1, silent: r } = t;
    if (this.strategy ?? (this.strategy = this.createStrategy()), !this.isCellEditable(e, "api"))
      return;
    const a = me(this.beans, e);
    if (a && !a.comp) {
      a.onCompAttachedFuncs.push(() => this.startEditing(e, t));
      return;
    }
    const l = this.shouldStartEditing?.(e, s, i, o);
    if (l === !1 && o !== "api") {
      this.isEditing(e) && this.stopEditing();
      return;
    }
    !this.batch && this.shouldStopEditing(e, void 0, o) && this.stopEditing(void 0, { source: o }), l && this.isBatchEditing() && this.dispatchBatchEvent("batchEditingStarted", /* @__PURE__ */ new Map()), this.strategy.start({
      position: e,
      event: s,
      source: o,
      ignoreEventKey: n,
      startedEdit: i,
      silent: r
    });
  }
  stopEditing(e, t) {
    const { event: i, cancel: s, source: o = "ui", suppressNavigateAfterEdit: n } = t || {}, { beans: r, model: a } = this;
    if (g1.has(o) && this.isBatchEditing())
      return this.bulkRefresh(e), !1;
    const l = this.committing ? FC[o] : o;
    if (!(this.committing || this.isEditing(e) || this.isBatchEditing() && a.hasEdits(e, Qi)) || !this.strategy)
      return !1;
    const d = me(r, e);
    d && (d.onEditorAttachedFuncs = []);
    let u = a.getEditMap(!0), h = !1;
    const g = !s && (!!this.shouldStopEditing(e, i, l) || this.committing && !this.batch), p = s && !!this.shouldCancelEditing(e, i, l);
    if (g || p) {
      xi(r, !0);
      const f = a.getEditMap();
      this.processEdits(f, s, o), this.strategy?.stop(s, i), this.bulkRefresh(void 0, u), u = f, h || (h = g);
    } else if (i instanceof KeyboardEvent && this.batch && this.strategy?.midBatchInputsAllowed(e) && this.isEditing(e, { withOpenEditor: !0 })) {
      const f = i.key, m = f === E.ENTER, C = f === E.ESCAPE, v = f === E.TAB;
      (m || v || C) && (m || v ? xi(r, !0) : C && this.revertSingleCellEdit(d), this.isBatchEditing() ? this.strategy?.cleanupEditors() : fs(r, a.getEditPositions(), { event: i }), i.preventDefault(), this.bulkRefresh(e, u, { suppressFlash: !0 }), u = a.getEditMap());
    } else
      xi(r, !0), u = a.getEditMap();
    return h && e && this.model.removeEdits(e), !n && d && this.navigateAfterEdit(i instanceof KeyboardEvent && i.shiftKey, d.cellPosition), el(r), this.model.hasEdits() || (this.model.getCellValidationModel().clearCellValidationMap(), this.model.getRowValidationModel().clearRowValidationMap()), this.bulkRefresh(), p && this.beans.rowRenderer.refreshRows({ rowNodes: Array.from(u.keys()) }), this.isBatchEditing() && (this.beans.rowRenderer.refreshRows({ suppressFlash: !0, force: !0 }), h && g && this.dispatchBatchEvent("batchEditingStopped", u)), h;
  }
  navigateAfterEdit(e, t) {
    if (this.gos.get("enterNavigatesVerticallyAfterEdit")) {
      const s = e ? E.UP : E.DOWN;
      this.beans.navigation?.navigateToNextCell(null, s, t, !1);
    }
  }
  processEdits(e, t = !1, i) {
    const s = Array.from(e.keys()), { beans: o } = this, n = this.model.getCellValidationModel().getCellValidationMap().size > 0 || this.model.getRowValidationModel().getRowValidationMap().size > 0, r = [];
    for (const a of s) {
      const l = e.get(a);
      for (const c of l.keys()) {
        const d = l.get(c), u = { rowNode: a, column: c }, h = me(o, u), g = li(d), p = h?.comp?.getCellEditor()?.isCancelAfterEnd?.();
        !t && !p && g && !n && (this.setNodeDataValue(a, c, d.pendingValue, void 0, i) || r.push(u)), h?.refreshCell(Us);
      }
    }
    r.forEach((a) => {
      this.model.clearEditValue(a);
    });
  }
  setNodeDataValue(e, t, i, s, o) {
    const { beans: n } = this, r = me(n, { rowNode: e, column: t });
    r && (r.suppressRefreshCell = !0), this.commitNextEdit();
    const a = e.setDataValue(t, i, o === "ui" ? "edit" : o);
    return r && (r.suppressRefreshCell = !1), s && r?.refreshCell(Us), a;
  }
  setEditMap(e, t) {
    this.strategy ?? (this.strategy = this.createStrategy()), this.strategy?.setEditMap(e, t), this.bulkRefresh(), this.beans.rowRenderer.refreshCells(Us);
  }
  dispatchEditValuesChanged({ rowNode: e, column: t }, i = {}) {
    if (!e || !t || !i)
      return;
    const { pendingValue: s, sourceValue: o } = i, { rowIndex: n, rowPinned: r, data: a } = e;
    this.beans.eventSvc.dispatchEvent({
      type: "cellEditValuesChanged",
      node: e,
      rowIndex: n,
      rowPinned: r,
      column: t,
      source: "api",
      data: a,
      newValue: s,
      oldValue: o,
      value: s,
      colDef: t.getColDef()
    });
  }
  bulkRefresh(e = {}, t, i = {}) {
    const { beans: s, gos: o } = this, { editModelSvc: n, rowModel: r } = s;
    Oe(o) && (e.rowNode && e.column ? this.refCell(e, this.model.getEdit(e), i) : t && n?.getEditMap(!1)?.forEach((a, l) => {
      for (const c of a.keys())
        this.refCell({ rowNode: l, column: c }, a.get(c), i);
    }));
  }
  refCell({ rowNode: e, column: t }, i, s = {}) {
    const { beans: o, gos: n } = this, r = /* @__PURE__ */ new Set([e]), a = /* @__PURE__ */ new Set(), l = e.pinnedSibling;
    l && r.add(l);
    const c = e.sibling;
    c && a.add(c);
    let d = e.parent;
    for (; d; )
      d.sibling?.footer && n.get("groupTotalRow") || !d.parent && d.sibling && n.get("grandTotalRow") ? a.add(d.sibling) : a.add(d), d = d.parent;
    r.forEach((u) => this.dispatchEditValuesChanged({ rowNode: u, column: t }, i)), r.forEach((u) => me(o, { rowNode: u, column: t })?.refreshCell(s)), a.forEach((u) => me(o, { rowNode: u, column: t })?.refreshCell(s));
  }
  stopAllEditing(e = !1, t = "ui") {
    this.isEditing() && this.stopEditing(void 0, { cancel: e, source: t });
  }
  isCellEditable(e, t = "ui") {
    const { rowNode: i } = e;
    if (i.group) {
      if (this.gos.get("treeData")) {
        if (!i.data && !this.gos.get("enableGroupEdit"))
          return !1;
      } else if (!this.gos.get("enableGroupEdit"))
        return !1;
    }
    return this.strategy ?? (this.strategy = this.createStrategy()), this.strategy?.isCellEditable(e, t) ?? !1;
  }
  cellEditingInvalidCommitBlocks() {
    return this.gos.get("invalidEditValueMode") === "block";
  }
  checkNavWithValidation(e, t, i = !0) {
    if (this.hasValidationErrors(e)) {
      const s = me(this.beans, e);
      return this.cellEditingInvalidCommitBlocks() ? (t?.preventDefault?.(), i && (!s?.hasBrowserFocus() && s?.focusCell(), s?.comp?.getCellEditor()?.focusIn?.()), "block-stop") : (s && this.revertSingleCellEdit(s), "revert-continue");
    }
    return "continue";
  }
  revertSingleCellEdit(e, t = !1) {
    const i = me(this.beans, e);
    i?.comp?.getCellEditor() && (fs(this.beans, [e], { silent: !0 }), this.model.clearEditValue(e), Es(this.beans, e, { silent: !0 }), Ni(this.beans), i?.refreshCell(Us), i.rowCtrl.rowEditStyleFeature?.applyRowStyles(), t && (i?.focusCell(), i?.comp?.getCellEditor()?.focusIn?.()));
  }
  hasValidationErrors(e) {
    Ni(this.beans);
    const t = me(this.beans, e);
    t && (t.refreshCell(Us), t.rowCtrl.rowEditStyleFeature?.applyRowStyles());
    let i = !1;
    return e?.rowNode ? (i || (i = this.model.getRowValidationModel().hasRowValidation({ rowNode: e.rowNode })), e.column && (i || (i = this.model.getCellValidationModel().hasCellValidation({ rowNode: e.rowNode, column: e.column })))) : (i || (i = this.model.getCellValidationModel().getCellValidationMap().size > 0), i || (i = this.model.getRowValidationModel().getRowValidationMap().size > 0)), i;
  }
  moveToNextCell(e, t, i, s = "ui") {
    let o;
    const n = this.isEditing(), r = n && this.checkNavWithValidation(void 0, i) === "block-stop";
    return e instanceof Cs && n && (o = this.strategy?.moveToNextEditingCell(e, t, i, s, r)), o === null || (o = o || !!this.beans.focusSvc.focusedHeader, o === !1 && !r && this.stopEditing()), o;
  }
  getCellDataValue({ rowNode: e, column: t }, i = !0) {
    if (!e || !t)
      return;
    let s = this.model.getEdit({ rowNode: e, column: t });
    const o = e.pinnedSibling;
    if (o) {
      const r = this.model.getEdit({ rowNode: o, column: t });
      r && (s = r);
    }
    const n = i ? s?.editorValue ?? s?.pendingValue : s?.pendingValue;
    return n === yt || !s ? this.valueSvc.getValue(t, e, !0, "api") : n;
  }
  getRowDataValue(e, t) {
    return this.model.getEditRowDataValue(e, t);
  }
  addStopEditingWhenGridLosesFocus(e) {
    XF(this, this.beans, e);
  }
  createPopupEditorWrapper(e) {
    return new r1(e);
  }
  commitNextEdit() {
    this.committing = !0;
  }
  setDataValue(e, t, i) {
    try {
      if ((!this.isEditing() || this.committing) && !p1.has(i))
        return;
      const { beans: s } = this;
      this.strategy ?? (this.strategy = this.createStrategy());
      const o = this.isBatchEditing() ? "ui" : this.committing ? i ?? "api" : "api";
      if (!i || h1.has(i))
        return mn(s, e, !0, t, i), this.setNodeDataValue(e.rowNode, e.column, t, !0, i);
      const n = this.model.getEdit(e);
      if (n) {
        if (n.pendingValue === t)
          return !1;
        if (n.sourceValue !== t)
          return mn(s, e, !0, t, i), this.stopEditing(e, { source: o, suppressNavigateAfterEdit: !0 }), !0;
        if (n.sourceValue === t)
          return s.editModelSvc?.removeEdits(e), this.dispatchEditValuesChanged(e, {
            ...n,
            pendingValue: t
          }), !0;
      }
      return mn(s, e, !0, t, i), this.stopEditing(e, { source: o, suppressNavigateAfterEdit: !0 }), !0;
    } finally {
      this.committing = !1;
    }
  }
  handleColDefChanged(e) {
    JF(this.beans, e);
  }
  destroy() {
    this.model.clear(), this.destroyStrategy(), super.destroy();
  }
  prepDetailsDuringBatch(e, t) {
    if (!this.batch || !this.model.hasRowEdits(e.rowNode, Qi))
      return;
    const { rowNode: s, column: o } = e, { compDetails: n, valueToDisplay: r } = t;
    if (n) {
      const { params: l } = n;
      return l.data = this.model.getEditRowDataValue(s, Qi), { compDetails: n };
    }
    const a = this.model.getEditRow(e.rowNode, Qi);
    if (r !== void 0 && a?.has(o))
      return { valueToDisplay: this.valueSvc.getValue(o, s) };
  }
  cleanupEditors() {
    this.strategy?.cleanupEditors();
  }
  dispatchCellEvent(e, t, i, s) {
    this.strategy?.dispatchCellEvent(e, t, i, s);
  }
  dispatchBatchEvent(e, t) {
    this.eventSvc.dispatchEvent(this.createBatchEditEvent(e, t));
  }
  createBatchEditEvent(e, t) {
    return Z(this.gos, {
      type: e,
      ...e === "batchEditingStopped" ? {
        changes: this.toEventChangeList(t)
      } : {}
    });
  }
  toEventChangeList(e) {
    return this.model.getEditPositions(e).map((t) => ({
      rowIndex: t.rowNode.rowIndex,
      rowPinned: t.rowNode.rowPinned,
      columnId: t.column.getColId(),
      newValue: t.pendingValue,
      oldValue: t.sourceValue
    }));
  }
  applyBulkEdit({ rowNode: e, column: t }, i) {
    if (!i || i.length === 0)
      return;
    const { beans: s, rangeSvc: o, valueSvc: n } = this;
    xi(s, !0);
    const r = this.model.getEditMap(!0), a = r.get(e)?.get(t)?.pendingValue;
    this.batch || this.eventSvc.dispatchEvent({ type: "bulkEditingStarted" }), i.forEach((c) => {
      if (o?.forEachRowInRange(c, (d) => {
        const u = Zt(s, d);
        if (u === void 0)
          return;
        const h = r.get(u) ?? /* @__PURE__ */ new Map();
        for (const g of c.columns)
          if (g && this.isCellEditable({ rowNode: u, column: g }, "api")) {
            const p = n.getValue(g, u, !0, "api");
            let f = n.parseValue(
              g,
              u ?? null,
              a,
              p
            );
            Number.isNaN(f) && (f = null), h.set(g, {
              editorValue: void 0,
              pendingValue: f,
              sourceValue: p,
              state: "changed"
            });
          }
        h.size > 0 && r.set(u, h);
      }), this.setEditMap(r), this.batch) {
        this.cleanupEditors(), el(s), this.bulkRefresh();
        return;
      }
      this.commitNextEdit(), this.stopEditing(void 0, { source: "bulk" }), this.eventSvc.dispatchEvent({ type: "bulkEditingStopped", changes: this.toEventChangeList(r) });
    }), this.bulkRefresh();
    const l = me(s, { rowNode: e, column: t });
    l && l.focusCell(!0);
  }
  createCellStyleFeature(e, t) {
    return new a1(e, t);
  }
  createRowStyleFeature(e, t) {
    return new l1(e, t);
  }
  setEditingCells(e, t) {
    const { beans: i } = this, { colModel: s, valueSvc: o } = i, n = /* @__PURE__ */ new Map();
    e.forEach(({ colId: r, column: a, colKey: l, rowIndex: c, rowPinned: d, newValue: u, state: h }) => {
      const g = r ? s.getCol(r) : l ? s.getCol(l) : a;
      if (!g)
        return;
      const p = Zt(i, { rowIndex: c, rowPinned: d });
      if (!p)
        return;
      const f = o.getValue(g, p, !0, "api");
      if (!li({ pendingValue: u, sourceValue: f }) && h !== "editing")
        return;
      let m = n.get(p);
      m || (m = /* @__PURE__ */ new Map(), n.set(p, m)), u === void 0 && (u = yt), m.set(g, {
        editorValue: void 0,
        pendingValue: u,
        sourceValue: f,
        state: h ?? "changed"
      });
    }), this.setEditMap(n, t);
  }
  onCellFocused(e) {
    const t = me(this.beans, e);
    if (!t || !this.isEditing(t, Qi))
      return;
    const i = this.model.getEdit(t);
    if (!i || !li(i))
      return;
    const o = this.getLocaleTextFunc()("ariaPendingChange", "Pending Change");
    this.beans.ariaAnnounce?.announceValue(o, "pendingChange");
  }
  allowedFocusTargetOnValidation(e) {
    return me(this.beans, e);
  }
}, PC = class extends T {
  postConstruct() {
    this.model = this.beans.editModelSvc, this.editSvc = this.beans.editSvc, this.addManagedEventListeners({
      cellFocused: this.onCellFocusChanged?.bind(this),
      cellFocusCleared: this.onCellFocusChanged?.bind(this)
    });
  }
  clearEdits(e) {
    this.model.clearEditValue(e);
  }
  onCellFocusChanged(e) {
    let t;
    const i = e.previousParams, { editSvc: s, beans: o } = this, n = e.type === "cellFocused" ? e.sourceEvent : null;
    i && (t = me(o, i));
    const { gos: r, editModelSvc: a } = o, l = e.type === "cellFocusCleared";
    if (s.isEditing(void 0, { withOpenEditor: !0 })) {
      const { column: c, rowIndex: d, rowPinned: u } = e, h = {
        column: c,
        rowNode: Zt(o, { rowIndex: d, rowPinned: u })
      }, g = r.get("invalidEditValueMode") === "block";
      if (g)
        return;
      const p = !g, f = !!a?.getCellValidationModel().hasCellValidation(h), m = p && f;
      (i || l ? s.stopEditing(void 0, {
        cancel: m,
        source: l && p ? "api" : void 0,
        event: n
      }) : !0) || (s.isBatchEditing() ? s.cleanupEditors() : s.stopEditing(void 0, { source: "api" }));
    }
    t?.refreshCell({ suppressFlash: !0, force: !0 });
  }
  isCellEditable({ rowNode: e, column: t }, i = "ui") {
    return t.isColumnFunc(e, t.getColDef().editable);
  }
  stop(e, t) {
    const i = this.model.getEditPositions(), s = { all: [], pass: [], fail: [] };
    if (i.forEach((n) => {
      if (s.all.push(n), (this.model.getCellValidationModel().getCellValidation(n)?.errorMessages?.length ?? 0) > 0) {
        s.fail.push(n);
        return;
      }
      s.pass.push(n);
    }), e)
      return i.forEach((n) => {
        Xn(this.beans, n), this.model.stop(n);
      }), !0;
    const o = this.processValidationResults(s);
    return o.destroy.length > 0 && o.destroy.forEach((n) => {
      Xn(this.beans, n, { event: t }), this.model.stop(n);
    }), o.keep.length > 0 && o.keep.forEach((n) => {
      const r = me(this.beans, n);
      this.editSvc?.cellEditingInvalidCommitBlocks() || r && this.editSvc.revertSingleCellEdit(r);
    }), !0;
  }
  cleanupEditors({ rowNode: e } = {}, t) {
    xi(this.beans, !1);
    const i = this.model.getEditPositions(), s = [];
    e ? i.forEach((o) => {
      !e || o.rowNode === e || s.push(o);
    }) : i.forEach((o) => {
      s.push(o);
    }), fs(this.beans, s), el(this.beans, t);
  }
  setFocusOutOnEditor(e) {
    e.comp?.getCellEditor()?.focusOut?.();
  }
  setFocusInOnEditor(e) {
    const t = e.comp, i = t?.getCellEditor();
    if (i?.focusIn)
      i.focusIn();
    else {
      const s = this.beans.gos.get("editType") === "fullRow";
      e.focusCell(s), e.onEditorAttachedFuncs.push(() => t?.getCellEditor()?.focusIn?.());
    }
  }
  setupEditors(e) {
    const { event: t, ignoreEventKey: i = !1, startedEdit: s, position: o, cells: n = this.model.getEditPositions() } = e, r = t instanceof KeyboardEvent && !i && t.key || void 0;
    QF(this.beans, n, o, r, t, s);
  }
  dispatchCellEvent(e, t, i, s) {
    const o = me(this.beans, e);
    o && this.eventSvc.dispatchEvent({ ...o.createEvent(t ?? null, i), ...s });
  }
  dispatchRowEvent(e, t, i) {
    if (i)
      return;
    const s = fc(this.beans, e);
    s && this.eventSvc.dispatchEvent(s.createRowEvent(t));
  }
  shouldStart({ column: e }, t, i, s = "ui") {
    if (t instanceof KeyboardEvent && (t.key === E.TAB || t.key === E.ENTER || t.key === E.F2 || t.key === E.BACKSPACE && i))
      return !0;
    if (t?.shiftKey && this.beans.rangeSvc?.getCellRanges().length != 0)
      return !1;
    const n = e?.getColDef(), r = this.deriveClickCount(n), a = t?.type;
    return a === "click" && t?.detail === 1 && r === 1 || a === "dblclick" && t?.detail === 2 && r === 2 ? !0 : s === "api" ? i ?? !1 : !1;
  }
  shouldStop(e, t, i = "ui") {
    const s = this.editSvc.isBatchEditing();
    return s && i === "api" ? !0 : s && i === "ui" ? !1 : i === "api" ? !0 : t instanceof KeyboardEvent && !s ? t.key === E.ENTER : null;
  }
  shouldCancel(e, t, i = "ui") {
    const s = this.editSvc.isBatchEditing();
    return !!(t instanceof KeyboardEvent && !s && t.key === E.ESCAPE || s && i === "api" || i === "api");
  }
  setEditMap(e, t) {
    t?.update || this.editSvc.stopEditing(void 0, { cancel: !0, source: "api" });
    const i = [];
    if (e.forEach((s, o) => {
      s.forEach((n, r) => {
        n.state === "editing" && i.push({ ...n, rowNode: o, column: r });
      });
    }), t?.update && (e = new Map([...this.model.getEditMap(), ...e])), this.model?.setEditMap(e), i.length > 0) {
      const s = i.at(-1), o = s.pendingValue === yt ? void 0 : s.pendingValue;
      this.start({ position: s, event: new KeyboardEvent("keydown", { key: o }), source: "api" });
      const n = me(this.beans, s);
      n && this.setFocusInOnEditor(n);
    }
  }
  deriveClickCount(e) {
    const { gos: t } = this.beans;
    return t.get("suppressClickEdit") === !0 ? 0 : t.get("singleClickEdit") === !0 || e?.singleClickEdit ? 1 : 2;
  }
  destroy() {
    this.cleanupEditors(), super.destroy();
  }
}, C1 = class extends PC {
  constructor() {
    super(...arguments), this.beanName = "fullRow", this.startedRows = [];
  }
  isCellEditable(e, t = "ui") {
    const i = super.isCellEditable(e, t);
    return i === !0 || t === "ui" ? i : this.beans.colModel.getCols().some((o) => super.isCellEditable({ rowNode: e.rowNode, column: o }, t));
  }
  shouldStop(e, t, i = "ui") {
    const { rowNode: s } = e || {};
    if (!fc(this.beans, {
      rowNode: this.rowNode
    }))
      return !0;
    const n = super.shouldStop({ rowNode: this.rowNode }, t, i);
    return n !== null ? n : this.rowNode ? s !== this.rowNode : !1;
  }
  midBatchInputsAllowed({ rowNode: e }) {
    return e ? this.model.hasEdits({ rowNode: e }) : !1;
  }
  clearEdits(e) {
    this.model.clearEditValue(e);
  }
  start(e) {
    const { position: t, silent: i, startedEdit: s, event: o, ignoreEventKey: n } = e, { rowNode: r } = t;
    this.rowNode !== r && super.cleanupEditors(t), this.dispatchRowEvent({ rowNode: r }, "rowEditingStarted", i), this.startedRows.push(r);
    const a = this.beans.visibleCols.allCols, l = [];
    a.forEach((c) => {
      if (!c.isCellEditable(r))
        return;
      const d = {
        rowNode: r,
        column: c
      };
      l.push(d), this.model.hasEdits(d) || this.model.start(d);
    }), this.rowNode = r, this.setupEditors({ cells: l, position: t, startedEdit: s, event: o, ignoreEventKey: n });
  }
  processValidationResults(e) {
    return e.fail.length > 0 && this.editSvc.cellEditingInvalidCommitBlocks() ? {
      destroy: [],
      keep: e.all
    } : {
      destroy: e.all,
      keep: []
    };
  }
  stop(e, t) {
    const { rowNode: i } = this;
    if (i && !this.model.hasRowEdits(i))
      return !1;
    const s = [];
    return e || this.model.getEditMap().forEach((o, n) => {
      if (!(!o || o.size === 0)) {
        for (const r of o.values())
          if (li(r)) {
            s.push(n);
            break;
          }
      }
    }), Ni(this.beans), !e && this.editSvc?.checkNavWithValidation({ rowNode: i }) === "block-stop" ? !1 : (super.stop(e, t), s.forEach((o) => this.dispatchRowEvent({ rowNode: o }, "rowValueChanged")), this.cleanupEditors({ rowNode: i }, !0), this.rowNode = void 0, !0);
  }
  onCellFocusChanged(e) {
    const { rowIndex: t } = e, i = e.previousParams;
    if (i?.rowIndex === t || e.sourceEvent instanceof KeyboardEvent)
      return;
    const s = me(this.beans, i);
    this.gos.get("invalidEditValueMode") === "block" && s && (this.model.getCellValidationModel().getCellValidation(s) || this.model.getRowValidationModel().getRowValidation(s)) || super.onCellFocusChanged(e);
  }
  cleanupEditors(e = {}, t) {
    super.cleanupEditors(e, t), this.startedRows.forEach((i) => this.dispatchRowEvent({ rowNode: i }, "rowEditingStopped")), this.startedRows.length = 0;
  }
  // returns null if no navigation should be performed
  moveToNextEditingCell(e, t, i, s = "ui", o = !1) {
    const n = e.cellPosition;
    let r;
    this.model.suspend(!0);
    try {
      r = this.beans.navigation?.findNextCellToFocusOn(n, {
        backwards: t,
        startEditing: !0,
        // Default behaviour for fullRow is skip to the next cell,
        // editable or not. FullRow editing might have some editable
        // and some not editable cells in the row.
        // More complex logic needed to skip to the
        // next FullRow editable cell,
        skipToNextEditableCell: !1
      });
    } finally {
      this.model.suspend(!1);
    }
    if (r === !1)
      return null;
    if (r == null)
      return !1;
    const a = r.cellPosition, l = e.isCellEditable(), c = r.isCellEditable(), d = a && n.rowIndex === a.rowIndex && n.rowPinned === a.rowPinned;
    l && this.setFocusOutOnEditor(e), this.restoreEditors();
    const u = this.gos.get("suppressStartEditOnTab");
    return c && !o ? u ? r.focusCell(!0, i) : (r.comp?.getCellEditor() || Es(this.beans, r, { event: i, cellStartedEdit: !0 }), this.setFocusInOnEditor(r), r.focusCell(!1, i)) : (c && o && this.setFocusInOnEditor(r), r.focusCell(!0, i)), !d && !o && (this.cleanupEditors(r, !0), u ? r.focusCell(!0, i) : this.editSvc.startEditing(r, { startedEdit: !0, event: i, source: s, ignoreEventKey: !0 })), e.rowCtrl?.refreshRow({ suppressFlash: !0, force: !0 }), !0;
  }
  restoreEditors() {
    this.model.getEditMap().forEach(
      (e, t) => e.forEach(({ state: i }, s) => {
        if (i !== "editing")
          return;
        const o = me(this.beans, {
          rowNode: t,
          column: s
        });
        o && !o.comp?.getCellEditor() && Es(this.beans, o, { silent: !0 });
      })
    );
  }
  destroy() {
    super.destroy(), this.rowNode = void 0, this.startedRows.length = 0;
  }
}, v1 = class extends PC {
  constructor() {
    super(...arguments), this.beanName = "singleCell";
  }
  shouldStop(e, t, i = "ui") {
    const s = super.shouldStop(e, t, i);
    if (s !== null)
      return s;
    const { rowNode: o, column: n } = e || {};
    return (!this.rowNode || !this.column) && o && n ? null : this.rowNode !== o || this.column !== n;
  }
  midBatchInputsAllowed(e) {
    return this.model.hasEdits(e);
  }
  start(e) {
    const { position: t, startedEdit: i, event: s, ignoreEventKey: o } = e;
    (this.rowNode !== t.rowNode || this.column !== t.column) && super.cleanupEditors(), this.rowNode = t.rowNode, this.column = t.column, this.model.start(t), this.setupEditors({ cells: [t], position: t, startedEdit: i, event: s, ignoreEventKey: o });
  }
  dispatchRowEvent(e, t, i) {
  }
  processValidationResults(e) {
    return e.fail.length > 0 && this.editSvc.cellEditingInvalidCommitBlocks() ? {
      destroy: [],
      keep: e.all
    } : {
      destroy: e.all,
      keep: []
    };
  }
  stop(e, t) {
    return super.stop(e, t), this.rowNode = void 0, this.column = void 0, !0;
  }
  onCellFocusChanged(e) {
    const { colModel: t, editSvc: i } = this.beans, { rowIndex: s, column: o, rowPinned: n } = e, r = Zt(this.beans, { rowIndex: s, rowPinned: n }), a = Ja(o), l = t.getCol(a), c = e.previousParams;
    if (c) {
      const d = Ja(c.column);
      if (c?.rowIndex === s && d === a && c?.rowPinned === n)
        return;
    }
    i?.isEditing({ rowNode: r, column: l }, { withOpenEditor: !0 }) && e.type === "cellFocused" || super.onCellFocusChanged(e);
  }
  // returns null if no navigation should be performed
  moveToNextEditingCell(e, t, i, s = "ui", o = !1) {
    const n = e.cellPosition;
    let r;
    const a = this.beans.gos.get("editType") === "fullRow";
    a && this.model.suspend(!0), o || (e.eGui.focus(), this.editSvc?.stopEditing(e, { source: this.editSvc?.isBatchEditing() ? "ui" : "api", event: i }));
    try {
      r = this.beans.navigation?.findNextCellToFocusOn(n, {
        backwards: t,
        startEditing: !0
        // Default behaviour for fullRow is skip to the next cell,
        // editable or not. FullRow editing might have some editable
        // and some not editable cells in the row.
        // More complex logic needed to skip to the
        // next FullRow editable cell,
        // skipToNextEditableCell: false,
      });
    } finally {
      a && this.model.suspend(!1);
    }
    if (r === !1)
      return null;
    if (r == null)
      return !1;
    const l = r.cellPosition, c = e.isCellEditable(), d = r.isCellEditable(), u = l && n.rowIndex === l.rowIndex && n.rowPinned === l.rowPinned;
    c && !o && this.setFocusOutOnEditor(e);
    const h = this.gos.get("suppressStartEditOnTab");
    return !u && !o && (super.cleanupEditors(r, !0), h ? r.focusCell(!0, i) : this.editSvc.startEditing(r, { startedEdit: !0, event: i, source: s, ignoreEventKey: !0 })), d && !o ? (r.focusCell(!1, i), h ? r.focusCell(!0, i) : r.comp?.getCellEditor() || (Es(this.beans, r, { event: i, cellStartedEdit: !0, silent: !0 }), this.setFocusInOnEditor(r), this.cleanupEditors(r))) : (d && o && this.setFocusInOnEditor(r), r.focusCell(!0, i)), e.rowCtrl?.refreshRow({ suppressFlash: !0, force: !0 }), !0;
  }
  destroy() {
    super.destroy(), this.rowNode = void 0, this.column = void 0;
  }
}, mi = {
  moduleName: "EditCore",
  version: Y,
  beans: [zF, m1],
  apiFunctions: {
    getEditingCells: QL,
    getCellEditorInstances: ZF,
    startEditingCell: t1,
    stopEditing: JL,
    isEditing: e1,
    validateEdit: i1
  },
  dynamicBeans: {
    singleCell: v1,
    fullRow: C1
  },
  dependsOn: [vr, wC],
  css: [TL]
}, w1 = {
  moduleName: "UndoRedoEdit",
  version: Y,
  beans: [DL],
  apiFunctions: {
    undoCellEditing: XL,
    redoCellEditing: ZL,
    getCurrentUndoSize: s1,
    getCurrentRedoSize: o1
  },
  dependsOn: [mi]
}, S1 = {
  moduleName: "TextEditor",
  version: Y,
  userComponents: { agCellEditor: Sh, agTextCellEditor: Sh },
  dependsOn: [mi]
}, y1 = {
  moduleName: "NumberEditor",
  version: Y,
  userComponents: {
    agNumberCellEditor: {
      classImp: zL
    }
  },
  dependsOn: [mi]
}, b1 = {
  moduleName: "DateEditor",
  version: Y,
  userComponents: {
    agDateCellEditor: LL,
    agDateStringCellEditor: GL
  },
  dependsOn: [mi]
}, R1 = {
  moduleName: "CheckboxEditor",
  version: Y,
  userComponents: {
    agCheckboxCellEditor: AL
  },
  dependsOn: [mi]
}, x1 = {
  moduleName: "SelectEditor",
  version: Y,
  userComponents: { agSelectCellEditor: UL },
  dependsOn: [mi]
}, F1 = {
  moduleName: "LargeTextEditor",
  version: Y,
  userComponents: { agLargeTextCellEditor: BL },
  dependsOn: [mi]
}, P1 = {
  moduleName: "CustomEditor",
  version: Y,
  dependsOn: [mi]
}, E1 = class extends T {
  constructor() {
    super(...arguments), this.beanName = "selectionColSvc";
  }
  postConstruct() {
    this.addManagedPropertyListener("rowSelection", (e) => {
      this.onSelectionOptionsChanged(
        e.currentValue,
        e.previousValue,
        ps(e.source)
      );
    }), this.addManagedPropertyListener("selectionColumnDef", this.updateColumns.bind(this));
  }
  addColumns(e) {
    const t = this.columns;
    t != null && (e.list = t.list.concat(e.list), e.tree = t.tree.concat(e.tree), Ax(e));
  }
  createColumns(e, t) {
    const i = () => {
      jn(this.beans, this.columns?.tree), this.columns = null;
    }, s = e.treeDepth, n = (this.columns?.treeDepth ?? -1) == s, r = this.generateSelectionCols();
    if (Mx(r, this.columns?.list ?? []) && n)
      return;
    i();
    const { colGroupSvc: l } = this.beans, c = l?.findDepth(e.tree) ?? 0, d = l?.balanceTreeForAutoCols(r, c) ?? [];
    this.columns = {
      list: r,
      tree: d,
      treeDepth: c,
      map: {}
    }, t((h) => {
      if (!h)
        return null;
      const g = h.filter((p) => !fi(p));
      return [...r, ...g];
    });
  }
  updateColumns(e) {
    const t = ps(e.source);
    this.columns?.list.forEach((i) => {
      const s = this.createSelectionColDef(e.currentValue);
      i.setColDef(s, null, t), Ft(this.beans, { state: [{ ...s, colId: i.getColId() }] }, t);
    });
  }
  getColumn(e) {
    return this.columns?.list.find((t) => Rf(t, e)) ?? null;
  }
  getColumns() {
    return this.columns?.list ?? null;
  }
  isSelectionColumnEnabled() {
    const { gos: e, beans: t } = this, i = e.get("rowSelection");
    if (typeof i != "object" || !Mi(e))
      return !1;
    const s = (t.autoColSvc?.getColumns()?.length ?? 0) > 0;
    if (i.checkboxLocation === "autoGroupColumn" && s)
      return !1;
    const o = !!gs(i), n = un(i);
    return o || n;
  }
  createSelectionColDef(e) {
    const { gos: t } = this.beans, i = e ?? t.get("selectionColumnDef"), s = t.get("enableRtl"), { rowSpan: o, spanRows: n, ...r } = i ?? {};
    return {
      // overridable properties
      width: 50,
      resizable: !1,
      suppressHeaderMenuButton: !0,
      sortable: !1,
      suppressMovable: !0,
      lockPosition: s ? "right" : "left",
      comparator(a, l, c, d) {
        const u = c.isSelected(), h = d.isSelected();
        return u === h ? 0 : u ? 1 : -1;
      },
      editable: !1,
      suppressFillHandle: !0,
      pinned: null,
      // overrides
      ...r,
      // non-overridable properties
      colId: Sf,
      chartDataType: "excluded"
    };
  }
  generateSelectionCols() {
    if (!this.isSelectionColumnEnabled())
      return [];
    const e = this.createSelectionColDef(), t = e.colId;
    this.gos.validateColDef(e, t, !0);
    const i = new Ki(e, null, t, !1);
    return this.createBean(i), [i];
  }
  onSelectionOptionsChanged(e, t, i) {
    const s = t && typeof t != "string" ? gs(t) : void 0, o = e && typeof e != "string" ? gs(e) : void 0, n = s !== o, r = t && typeof t != "string" ? un(t) : void 0, a = e && typeof e != "string" ? un(e) : void 0, l = r !== a, c = Nn(e), d = Nn(t);
    (n || l || c !== d) && this.beans.colModel.refreshAll(i);
  }
  destroy() {
    jn(this.beans, this.columns?.tree), super.destroy();
  }
  /**
   * Refreshes visibility of the selection column based on which columns are currently visible.
   * Called by the VisibleColsService with the columns that are currently visible in left/center/right
   * containers. This method *MUTATES* those arrays directly.
   *
   * The selection column should be visible if all of the following are true
   * - The selection column is not disabled
   * - The number of visible columns excluding the selection column and row numbers column is greater than 0
   * @param leftCols Visible columns in the left-pinned container
   * @param centerCols Visible columns in the center viewport
   * @param rightCols Visible columns in the right-pinned container
   */
  refreshVisibility(e, t, i) {
    if (!this.columns?.list.length)
      return;
    const s = e.length + t.length + i.length;
    if (s === 0)
      return;
    const o = this.columns.list[0];
    if (!o.isVisible())
      return;
    const n = () => {
      let l;
      switch (o.pinned) {
        case "left":
        case !0:
          l = e;
          break;
        case "right":
          l = i;
          break;
        default:
          l = t;
      }
      l && St(l, o);
    };
    (this.beans.rowNumbersSvc?.getColumn(yf) ? 2 : 1) === s && n();
  }
};
function D1(e, t) {
  if (!t.nodes.every((r) => r.rowPinned && !Ho(r) ? (B(59), !1) : r.id === void 0 ? (B(60), !1) : !0))
    return;
  const { nodes: s, source: o, newValue: n } = t;
  e.selectionSvc?.setNodesSelected({ nodes: s, source: o ?? "api", newValue: n });
}
function T1(e, t, i = "apiSelectAll") {
  e.selectionSvc?.selectAllRowNodes({ source: i, selectAll: t });
}
function M1(e, t, i = "apiSelectAll") {
  e.selectionSvc?.deselectAllRowNodes({ source: i, selectAll: t });
}
function A1(e, t = "apiSelectAllFiltered") {
  e.selectionSvc?.selectAllRowNodes({ source: t, selectAll: "filtered" });
}
function I1(e, t = "apiSelectAllFiltered") {
  e.selectionSvc?.deselectAllRowNodes({ source: t, selectAll: "filtered" });
}
function k1(e, t = "apiSelectAllCurrentPage") {
  e.selectionSvc?.selectAllRowNodes({ source: t, selectAll: "currentPage" });
}
function L1(e, t = "apiSelectAllCurrentPage") {
  e.selectionSvc?.deselectAllRowNodes({ source: t, selectAll: "currentPage" });
}
function O1(e) {
  return e.selectionSvc?.getSelectedNodes() ?? [];
}
function V1(e) {
  return e.selectionSvc?.getSelectedRows() ?? [];
}
var G1 = class extends C0 {
  constructor() {
    super(...arguments), this.beanName = "selectionSvc", this.selectedNodes = /* @__PURE__ */ new Map(), this.detailSelection = /* @__PURE__ */ new Map(), this.masterSelectsDetail = !1;
  }
  postConstruct() {
    super.postConstruct();
    const { gos: e } = this;
    this.mode = Wn(e), this.groupSelectsDescendants = yo(e), this.groupSelectsFiltered = _n(e) === "filteredDescendants", this.masterSelectsDetail = bu(e) === "detail", this.addManagedPropertyListeners(["groupSelectsChildren", "groupSelectsFiltered", "rowSelection"], () => {
      const t = yo(e), i = Wn(e), s = _n(e) === "filteredDescendants";
      this.masterSelectsDetail = bu(e) === "detail", (t !== this.groupSelectsDescendants || s !== this.groupSelectsFiltered || i !== this.mode) && (this.deselectAllRowNodes({ source: "api" }), this.groupSelectsDescendants = t, this.groupSelectsFiltered = s, this.mode = i);
    }), this.addManagedEventListeners({ rowSelected: this.onRowSelected.bind(this) });
  }
  destroy() {
    super.destroy(), this.resetNodes();
  }
  handleSelectionEvent(e, t, i) {
    if (this.isRowSelectionBlocked(t))
      return 0;
    const s = this.inferNodeSelections(t, e.shiftKey, e.metaKey || e.ctrlKey, i);
    return s == null ? 0 : (this.selectionCtx.selectAll = !1, "select" in s ? (s.reset ? this.resetNodes() : this.selectRange(s.deselect, !1, i), this.selectRange(s.select, !0, i)) : this.setNodesSelected({
      nodes: [s.node],
      newValue: s.newValue,
      clearSelection: s.clearSelection,
      keepDescendants: s.keepDescendants,
      event: e,
      source: i
    }));
  }
  setNodesSelected({
    newValue: e,
    clearSelection: t,
    suppressFinishActions: i,
    nodes: s,
    event: o,
    source: n,
    keepDescendants: r = !1
  }) {
    if (!Mi(this.gos) && e)
      return B(132), 0;
    if (s.length === 0)
      return 0;
    if (s.length > 1 && !this.isMultiSelect())
      return B(130), 0;
    let a = 0;
    for (let l = 0; l < s.length; l++) {
      const c = s[l], d = Ji(c), u = this.groupSelectsFiltered && d.group;
      if (d.rowPinned && !Ho(d)) {
        B(59);
        continue;
      }
      if (d.id === void 0) {
        B(60);
        continue;
      }
      u || this.selectRowNode(d, e, o, n) && (this.detailSelection.delete(d.id), a++), this.groupSelectsDescendants && d.childrenAfterGroup?.length && (a += this.selectChildren(d, e, n));
    }
    return i || (s.length === 1 && n === "api" && this.selectionCtx.setRoot(Ji(s[0])), e && (t || !this.isMultiSelect()) && (a += this.clearOtherNodes(Ji(s[0]), r, n)), a > 0 && (this.updateGroupsFromChildrenSelections(n), this.dispatchSelectionChanged(n))), a;
  }
  // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by
  // holding down 'shift'.
  selectRange(e, t, i) {
    let s = 0;
    return e.forEach((o) => {
      const n = Ji(o);
      if (n.group && this.groupSelectsDescendants)
        return;
      this.selectRowNode(n, t, void 0, i) && s++;
    }), s > 0 && (this.updateGroupsFromChildrenSelections(i), this.dispatchSelectionChanged(i)), s;
  }
  selectChildren(e, t, i) {
    const s = this.groupSelectsFiltered ? e.childrenAfterAggFilter : e.childrenAfterGroup;
    return s ? this.setNodesSelected({
      newValue: t,
      clearSelection: !1,
      suppressFinishActions: !0,
      source: i,
      nodes: s
    }) : 0;
  }
  getSelectedNodes() {
    return Array.from(this.selectedNodes.values());
  }
  getSelectedRows() {
    const e = [];
    return this.selectedNodes.forEach((t) => t.data && e.push(t.data)), e;
  }
  getSelectionCount() {
    return this.selectedNodes.size;
  }
  /**
   * This method is used by the CSRM to remove groups which are being disposed of,
   * events do not need fired in this case
   */
  filterFromSelection(e) {
    const t = /* @__PURE__ */ new Map();
    this.selectedNodes.forEach((i, s) => {
      e(i) && t.set(s, i);
    }), this.selectedNodes = t;
  }
  updateGroupsFromChildrenSelections(e, t) {
    if (!this.groupSelectsDescendants)
      return !1;
    const { gos: i, rowModel: s } = this.beans;
    if (!Oe(i))
      return !1;
    const o = s.rootNode;
    if (!o)
      return !1;
    t || (t = new Po(!0, o), t.active = !1);
    let n = !1;
    return t.forEachChangedNodeDepthFirst((r) => {
      if (r !== o) {
        const a = this.calculateSelectedFromChildren(r);
        n = this.selectRowNode(r, a === null ? !1 : a, void 0, e) || n;
      }
    }), n;
  }
  clearOtherNodes(e, t, i) {
    const s = /* @__PURE__ */ new Map();
    let o = 0;
    return this.selectedNodes.forEach((n) => {
      const r = n.id == e.id;
      if ((t ? !B1(e, n) : !0) && !r) {
        const l = this.selectedNodes.get(n.id);
        o += this.setNodesSelected({
          nodes: [l],
          newValue: !1,
          clearSelection: !1,
          suppressFinishActions: !0,
          source: i
        }), this.groupSelectsDescendants && n.parent && s.set(n.parent.id, n.parent);
      }
    }), s.forEach((n) => {
      const r = this.calculateSelectedFromChildren(n);
      this.selectRowNode(n, r === null ? !1 : r, void 0, i);
    }), o;
  }
  onRowSelected(e) {
    const t = e.node;
    this.groupSelectsDescendants && t.group || (t.isSelected() ? this.selectedNodes.set(t.id, t) : this.selectedNodes.delete(t.id));
  }
  syncInRowNode(e, t) {
    this.syncInOldRowNode(e, t), this.syncInNewRowNode(e);
  }
  createDaemonNode(e) {
    if (!e.id)
      return;
    const t = new zi(this.beans);
    return t.id = e.id, t.data = e.data, t.__daemon = !0, t.__selected = e.__selected, t.level = e.level, t;
  }
  // if the id has changed for the node, then this means the rowNode
  // is getting used for a different data item, which breaks
  // our selectedNodes, as the node now is mapped by the old id
  // which is inconsistent. so to keep the old node as selected,
  // we swap in the clone (with the old id and old data). this means
  // the oldNode is effectively a daemon we keep a reference to,
  // so if client calls api.getSelectedNodes(), it gets the daemon
  // in the result. when the client un-selects, the reference to the
  // daemon is removed. the daemon, because it's an oldNode, is not
  // used by the grid for rendering, it's a copy of what the node used
  // to be like before the id was changed.
  syncInOldRowNode(e, t) {
    t && e.id !== t.id && this.selectedNodes.get(t.id) == e && this.selectedNodes.set(t.id, t);
  }
  syncInNewRowNode(e) {
    this.selectedNodes.has(e.id) ? (e.__selected = !0, this.selectedNodes.set(e.id, e)) : e.__selected = !1;
  }
  reset(e) {
    const t = this.getSelectionCount();
    this.resetNodes(), t && this.dispatchSelectionChanged(e);
  }
  resetNodes() {
    this.selectedNodes.forEach((e) => {
      this.selectRowNode(e, !1);
    }), this.selectedNodes.clear();
  }
  // returns a list of all nodes at 'best cost' - a feature to be used
  // with groups / trees. if a group has all it's children selected,
  // then the group appears in the result, but not the children.
  // Designed for use with 'children' as the group selection type,
  // where groups don't actually appear in the selection normally.
  getBestCostNodeSelection() {
    const { gos: e, rowModel: t } = this.beans;
    if (!Oe(e))
      return;
    const i = t.getTopLevelNodes();
    if (i === null)
      return;
    const s = [];
    function o(n) {
      for (let r = 0, a = n.length; r < a; r++) {
        const l = n[r];
        l.isSelected() ? s.push(l) : l.group && l.childrenAfterGroup && o(l.childrenAfterGroup);
      }
    }
    return o(i), s;
  }
  isEmpty() {
    return this.getSelectionCount() === 0;
  }
  deselectAllRowNodes({ source: e, selectAll: t }) {
    const i = Oe(this.gos);
    let s = !1;
    const o = (n) => {
      const r = this.selectRowNode(Ji(n), !1, void 0, e);
      s || (s = r);
    };
    if (t === "currentPage" || t === "filtered") {
      if (!i) {
        he(102);
        return;
      }
      this.getNodesToSelect(t).forEach(o);
    } else
      this.selectedNodes.forEach(o), this.reset(e);
    if (this.selectionCtx.selectAll = !1, i && this.groupSelectsDescendants) {
      const n = this.updateGroupsFromChildrenSelections(e);
      s || (s = n);
    }
    s && this.dispatchSelectionChanged(e);
  }
  getSelectedCounts(e) {
    let t = 0, i = 0;
    return this.getNodesToSelect(e).forEach((s) => {
      this.groupSelectsDescendants && s.group || (s.isSelected() ? t++ : s.selectable && i++);
    }), { selectedCount: t, notSelectedCount: i };
  }
  getSelectAllState(e) {
    const { selectedCount: t, notSelectedCount: i } = this.getSelectedCounts(e);
    return EC(t, i) ?? null;
  }
  hasNodesToSelect(e) {
    return this.getNodesToSelect(e).filter((t) => t.selectable).length > 0;
  }
  /**
   * @param selectAll See `MultiRowSelectionOptions.selectAll`
   * @returns all nodes including unselectable nodes which are the target of this selection attempt
   */
  getNodesToSelect(e) {
    if (!this.canSelectAll())
      return [];
    const t = [], i = (o) => t.push(o);
    if (e === "currentPage")
      return this.forEachNodeOnPage((o) => {
        if (!o.group) {
          i(o);
          return;
        }
        if (!o.expanded && !o.footer) {
          const n = (r) => {
            i(r), r.childrenAfterFilter?.forEach(n);
          };
          n(o);
          return;
        }
        this.groupSelectsDescendants || i(o);
      }), t;
    const s = this.beans.rowModel;
    return e === "filtered" ? (s.forEachNodeAfterFilter(i), t) : (s.forEachNode(i), t);
  }
  forEachNodeOnPage(e) {
    const { pageBounds: t, rowModel: i } = this.beans, s = t.getFirstRow(), o = t.getLastRow();
    for (let n = s; n <= o; n++) {
      const r = i.getRow(n);
      r && e(r);
    }
  }
  selectAllRowNodes(e) {
    const { gos: t, selectionCtx: i } = this;
    if (!Mi(t)) {
      B(132);
      return;
    }
    if (ax(t) && !zn(t)) {
      B(130);
      return;
    }
    if (!this.canSelectAll())
      return;
    const { source: s, selectAll: o } = e;
    let n = !1;
    if (this.getNodesToSelect(o).forEach((r) => {
      const a = this.selectRowNode(Ji(r), !0, void 0, s);
      n || (n = a);
    }), i.selectAll = !0, Oe(t) && this.groupSelectsDescendants) {
      const r = this.updateGroupsFromChildrenSelections(s);
      n || (n = r);
    }
    n && this.dispatchSelectionChanged(s);
  }
  getSelectionState() {
    return this.isEmpty() ? null : Array.from(this.selectedNodes.keys());
  }
  setSelectionState(e, t, i) {
    if (e || (e = []), !Array.isArray(e)) {
      he(103);
      return;
    }
    const s = new Set(e), o = [];
    this.beans.rowModel.forEachNode((n) => {
      s.has(n.id) && o.push(n);
    }), i && this.resetNodes(), this.setNodesSelected({
      newValue: !0,
      nodes: o,
      source: t
    });
  }
  canSelectAll() {
    const { gos: e } = this.beans;
    return !!Oe(e);
  }
  /**
   * Updates the selectable state for a node by invoking isRowSelectable callback.
   * If the node is not selectable, it will be deselected.
   *
   * Callers:
   *  - property isRowSelectable changed
   *  - after grouping / treeData via `updateSelectableAfterGrouping`
   */
  updateSelectable(e) {
    const { gos: t, rowModel: i } = this.beans;
    if (!Mi(t))
      return;
    const s = "selectableChanged", o = e !== void 0, n = Oe(t) && this.groupSelectsDescendants, r = [], a = (l) => {
      if (o && !l.group)
        return;
      if (n && l.group) {
        const d = l.childrenAfterGroup?.some((u) => u.selectable) ?? !1;
        this.setRowSelectable(l, d, !0);
        return;
      }
      !this.updateRowSelectable(l, !0) && l.isSelected() && r.push(l);
    };
    if (n) {
      if (e === void 0) {
        const l = i.rootNode;
        e = l ? new Po(!1, l) : void 0;
      }
      e?.forEachChangedNodeDepthFirst(a, !o, !o);
    } else
      i.forEachNode(a);
    r.length && this.setNodesSelected({
      nodes: r,
      newValue: !1,
      source: s
    }), !o && n && this.updateGroupsFromChildrenSelections?.(s);
  }
  // only called by CSRM
  updateSelectableAfterGrouping(e) {
    this.updateSelectable(e), this.groupSelectsDescendants && this.updateGroupsFromChildrenSelections?.("rowGroupChanged", e) && this.dispatchSelectionChanged("rowGroupChanged");
  }
  refreshMasterNodeState(e, t) {
    if (!this.masterSelectsDetail)
      return;
    const i = e.detailNode?.detailGridInfo?.api;
    if (!i)
      return;
    const s = H1(i);
    if (e.isSelected() !== s && this.selectRowNode(e, s, t, "masterDetail") && this.dispatchSelectionChanged("masterDetail"), !s) {
      const n = this.detailSelection.get(e.id) ?? /* @__PURE__ */ new Set();
      for (const r of i.getSelectedNodes())
        n.add(r.id);
      this.detailSelection.set(e.id, n);
    }
  }
  setDetailSelectionState(e, t, i) {
    if (this.masterSelectsDetail) {
      if (!zn(t)) {
        B(269);
        return;
      }
      switch (e.isSelected()) {
        case !0: {
          i.selectAll();
          break;
        }
        case !1: {
          i.deselectAll();
          break;
        }
        case void 0: {
          const s = this.detailSelection.get(e.id);
          if (s) {
            const o = [];
            for (const n of s) {
              const r = i.getRowNode(n);
              r && o.push(r);
            }
            i.setNodesSelected({ nodes: o, newValue: !0, source: "masterDetail" });
          }
          break;
        }
      }
    }
  }
  dispatchSelectionChanged(e) {
    this.eventSvc.dispatchEvent({
      type: "selectionChanged",
      source: e,
      selectedNodes: this.getSelectedNodes(),
      serverSideState: null
    });
  }
};
function Ji(e) {
  return Ho(e) ? e.pinnedSibling : e.footer ? e.sibling : e;
}
function H1(e) {
  let t = 0, i = 0;
  return e.forEachNode((s) => {
    s.isSelected() ? t++ : s.selectable && i++;
  }), EC(t, i);
}
function EC(e, t) {
  if (e === 0 && t === 0)
    return !1;
  if (!(e > 0 && t > 0))
    return e > 0;
}
function B1(e, t) {
  let i = t.parent;
  for (; i; ) {
    if (i === e)
      return !0;
    i = i.parent;
  }
  return !1;
}
var N1 = {
  moduleName: "SharedRowSelection",
  version: Y,
  beans: [E1],
  apiFunctions: {
    setNodesSelected: D1,
    selectAll: T1,
    deselectAll: M1,
    selectAllFiltered: A1,
    deselectAllFiltered: I1,
    selectAllOnCurrentPage: k1,
    deselectAllOnCurrentPage: L1,
    getSelectedNodes: O1,
    getSelectedRows: V1
  }
}, W1 = {
  moduleName: "RowSelection",
  version: Y,
  rowModels: ["clientSide", "infinite", "viewport"],
  beans: [G1],
  dependsOn: [N1]
};
function z1(e) {
  e.expansionSvc?.expandAll(!0);
}
function _1(e) {
  e.expansionSvc?.expandAll(!1);
}
function U1(e) {
  const t = Nt(e), i = iC(e);
  t ? t.onRowHeightChanged() : i && i.onRowHeightChanged();
}
function j1(e, t, i) {
  const s = iC(e);
  if (s) {
    if (e.rowGroupColsSvc?.columns.length === 0) {
      if (t < 0) {
        he(238);
        return;
      }
      s.setRowCount(t, i);
      return;
    }
    he(28);
    return;
  }
  const o = Cr(e);
  if (o) {
    o.setRowCount(t, i);
    return;
  }
}
function $1(e) {
  return $i(e.gos) ? e.rowModel.getBlockStates() : e.rowNodeBlockLoader?.getBlockState() ?? {};
}
function K1(e) {
  return e.rowModel.isLastRowIndexKnown();
}
var Y1 = {
  moduleName: "CsrmSsrmSharedApi",
  version: Y,
  apiFunctions: {
    expandAll: z1,
    collapseAll: _1,
    onRowHeightChanged: U1
  }
}, q1 = {
  moduleName: "SsrmInfiniteSharedApi",
  version: Y,
  apiFunctions: {
    setRowCount: j1,
    getCacheBlockState: $1,
    isLastRowIndexKnown: K1
  }
}, X1 = class extends T {
  constructor() {
    super(...arguments), this.beanName = "alignedGridsSvc", this.consuming = !1;
  }
  getAlignedGridApis() {
    let e = this.gos.get("alignedGrids") ?? [];
    const t = typeof e == "function";
    return typeof e == "function" && (e = e()), e.map((s) => {
      if (!s) {
        he(18), t || he(20);
        return;
      }
      if (this.isGridApi(s))
        return s;
      const o = s;
      return "current" in o ? o.current?.api : (o.api || he(19), o.api);
    }).filter((s) => !!s && !s.isDestroyed());
  }
  isGridApi(e) {
    return !!e && !!e.dispatchEvent;
  }
  postConstruct() {
    const e = this.fireColumnEvent.bind(this);
    this.addManagedEventListeners({
      columnMoved: e,
      columnVisible: e,
      columnPinned: e,
      columnGroupOpened: e,
      columnResized: e,
      bodyScroll: this.fireScrollEvent.bind(this),
      alignedGridColumn: ({ event: t }) => this.onColumnEvent(t),
      alignedGridScroll: ({ event: t }) => this.onScrollEvent(t)
    });
  }
  // common logic across all the fire methods
  fireEvent(e) {
    this.consuming || this.getAlignedGridApis().forEach((t) => {
      t.isDestroyed() || t.dispatchEvent(e);
    });
  }
  // common logic across all consume methods. very little common logic, however extracting
  // guarantees consistency across the methods.
  onEvent(e) {
    this.consuming = !0, e(), this.consuming = !1;
  }
  fireColumnEvent(e) {
    this.fireEvent({
      type: "alignedGridColumn",
      event: e
    });
  }
  fireScrollEvent(e) {
    e.direction === "horizontal" && this.fireEvent({
      type: "alignedGridScroll",
      event: e
    });
  }
  onScrollEvent(e) {
    this.onEvent(() => {
      this.beans.ctrlsSvc.getScrollFeature().setHorizontalScrollPosition(e.left, !0);
    });
  }
  extractDataFromEvent(e, t) {
    const i = [];
    return e.columns ? e.columns.forEach((s) => {
      i.push(t(s));
    }) : e.column && i.push(t(e.column)), i;
  }
  getMasterColumns(e) {
    return this.extractDataFromEvent(e, (t) => t);
  }
  getColumnIds(e) {
    return this.extractDataFromEvent(e, (t) => t.getColId());
  }
  onColumnEvent(e) {
    this.onEvent(() => {
      switch (e.type) {
        case "columnMoved":
        case "columnVisible":
        case "columnPinned":
        case "columnResized": {
          this.processColumnEvent(e);
          break;
        }
        case "columnGroupOpened": {
          this.processGroupOpenedEvent(e);
          break;
        }
        case "columnPivotChanged":
          B(21);
          break;
      }
    });
  }
  processGroupOpenedEvent(e) {
    const { colGroupSvc: t } = this.beans;
    t && e.columnGroups.forEach((i) => {
      let s = null;
      i && (s = t.getProvidedColGroup(i.getGroupId())), !(i && !s) && t.setColumnGroupOpened(s, i.isExpanded(), "alignedGridChanged");
    });
  }
  processColumnEvent(e) {
    const t = e.column;
    let i = null;
    const s = this.beans, { colResize: o, ctrlsSvc: n, colModel: r } = s;
    if (t && (i = r.getColDefCol(t.getColId())), t && !i)
      return;
    const a = this.getMasterColumns(e);
    switch (e.type) {
      case "columnMoved":
        {
          const u = e.api.getColumnState().map((h) => ({ colId: h.colId }));
          Ft(s, { state: u, applyOrder: !0 }, "alignedGridChanged");
        }
        break;
      case "columnVisible":
        {
          const u = e.api.getColumnState().map((h) => ({ colId: h.colId, hide: h.hide }));
          Ft(s, { state: u }, "alignedGridChanged");
        }
        break;
      case "columnPinned":
        {
          const u = e.api.getColumnState().map((h) => ({ colId: h.colId, pinned: h.pinned }));
          Ft(s, { state: u }, "alignedGridChanged");
        }
        break;
      case "columnResized": {
        const d = e, u = {};
        a.forEach((h) => {
          u[h.getId()] = { key: h.getColId(), newWidth: h.getActualWidth() };
        }), d.flexColumns?.forEach((h) => {
          u[h.getId()] && delete u[h.getId()];
        }), o?.setColumnWidths(
          Object.values(u),
          !1,
          d.finished,
          "alignedGridChanged"
        );
        break;
      }
    }
    const c = n.getGridBodyCtrl().isVerticalScrollShowing();
    this.getAlignedGridApis().forEach((d) => {
      d.setGridOption("alwaysShowVerticalScroll", c);
    });
  }
}, Z1 = {
  moduleName: "AlignedGrids",
  version: Y,
  beans: [X1],
  dependsOn: [Im]
}, Q1 = class extends h0 {
  constructor() {
    super(...arguments), this.beanName = "csrmNodeSvc";
  }
}, ha = class {
  constructor() {
    this.removals = /* @__PURE__ */ new Set(), this.updates = /* @__PURE__ */ new Set(), this.adds = /* @__PURE__ */ new Set();
  }
  /** Marks a row as removed. Order of operations is: remove, update, add */
  remove(e) {
    this.adds.delete(e) || (this.updates.delete(e), this.removals.add(e));
  }
  /** Marks a row as updated. Order of operations is: remove, update, add */
  update(e) {
    this.adds.has(e) || this.updates.add(e);
  }
  /** Marks a row as added. Order of operation is: remove, update, add */
  add(e) {
    this.adds.add(e);
  }
};
function J1(e) {
  if (Ce(e.childrenAfterSort))
    return;
  const t = e.childrenAfterSort;
  for (let i = 0; i < t.length; i++) {
    const s = t[i], o = i === 0, n = i === e.childrenAfterSort.length - 1;
    s.setFirstChild(o), s.lastChild !== n && (s.lastChild = n, s.dispatchRowEvent("lastChildChanged")), s.childIndex !== i && (s.childIndex = i, s.dispatchRowEvent("childIndexChanged"));
  }
}
function DC(e) {
  e.sibling && (e.sibling.childrenAfterSort = e.childrenAfterSort), J1(e);
}
var eO = class extends T {
  constructor() {
    super(...arguments), this.beanName = "sortStage", this.refreshProps = /* @__PURE__ */ new Set(["postSortRows", "groupDisplayType", "accentedSort"]), this.step = "sort";
  }
  execute(e) {
    const t = this.beans, i = t.sortSvc.getSortOptions(), s = $(i) && i.length > 0, o = s && !!e.changedRowNodes && // in time we can remove this check, so that delta sort is always
    // on if transactions are present. it's off for now so that we can
    // selectively turn it on and test it with some select users before
    // rolling out to everyone.
    this.gos.get("deltaSort"), n = i.some(({ column: r }) => Mt(t.gos) ? r.isPrimary() && r.isRowGroupActive() : !!r.getColDef().showRowGroup);
    this.sort(
      t,
      i,
      s,
      o,
      e.changedRowNodes,
      e.changedPath,
      n
    );
  }
  sort(e, t, i, s, o, n, r) {
    const { gos: a, colModel: l, rowGroupColsSvc: c, rowNodeSorter: d, rowRenderer: u, showRowGroupCols: h } = e, g = a.get("groupMaintainOrder"), p = l.getCols().some((w) => w.isRowGroupActive()), f = l.isPivotMode(), m = a.getCallback("postSortRows");
    let C = !1;
    const v = (w) => {
      const y = f && w.leafGroup, S = g && p && !w.leafGroup && !r;
      let x;
      if (S) {
        const M = c?.columns?.[w.level + 1]?.getSort() === null, k = w.childrenAfterAggFilter.slice(0);
        if (w.childrenAfterSort && !M) {
          const P = {};
          w.childrenAfterSort.forEach((F, N) => {
            P[F.id] = N;
          }), k.sort(
            (F, N) => (P[F.id] ?? 0) - (P[N.id] ?? 0)
          );
        }
        x = k;
      } else !i || y ? x = w.childrenAfterAggFilter.slice(0) : s && o ? x = tO(d, w, o, n, t) : x = d.doFullSort(w.childrenAfterAggFilter, t);
      if (C || (C = w.childrenAfterSort?.[0] !== x[0]), w.childrenAfterSort = x, DC(w), m) {
        const D = { nodes: w.childrenAfterSort };
        m(D);
      }
    };
    if (n?.forEachChangedNodeDepthFirst(v), C && this.gos.get("groupHideOpenParents")) {
      const w = h?.getShowRowGroupCols();
      w?.length && u.refreshCells({ columns: w, force: !0 });
    }
  }
};
function tO(e, t, i, s, o) {
  const n = t.childrenAfterAggFilter, r = t.childrenAfterSort;
  if (!r)
    return e.doFullSort(n, o);
  const a = /* @__PURE__ */ new Set(), l = [], { updates: c, adds: d } = i;
  for (let h = 0, g = n.length; h < g; ++h) {
    const p = n[h];
    c.has(p) || d.has(p) || s && !s.canSkip(p) ? l.push({
      currentPos: l.length,
      rowNode: p
    }) : a.add(p.id);
  }
  const u = r.filter((h) => a.has(h.id)).map((h, g) => ({ currentPos: g, rowNode: h }));
  return l.sort((h, g) => e.compareRowNodes(o, h, g)), iO(e, o, l, u);
}
function iO(e, t, i, s) {
  const o = [];
  let n = 0, r = 0;
  const a = i.length, l = s.length;
  for (; n < a && r < l; ) {
    const c = i[n], d = s[r], u = e.compareRowNodes(t, c, d);
    let h;
    u < 0 ? (h = c, ++n) : (h = d, ++r), o.push(h.rowNode);
  }
  for (; n < a; )
    o.push(i[n++].rowNode);
  for (; r < l; )
    o.push(s[r++].rowNode);
  return o;
}
var sO = class extends T {
  constructor() {
    super(...arguments), this.beanName = "rowModel", this.rootNode = null, this.rowsToDisplay = [], this.rowDataUpdatedPending = !1, this.started = !1, this.isRefreshingModel = !1, this.rowNodesCountReady = !1, this.rowCountReady = !1, this.onRowHeightChanged_debounced = We(this, this.onRowHeightChanged.bind(this), 100);
  }
  wireBeans(e) {
    this.colModel = e.colModel, this.valueCache = e.valueCache, this.filterStage = e.filterStage, this.sortStage = e.sortStage, this.flattenStage = e.flattenStage, this.groupStage = e.groupStage, this.aggStage = e.aggStage, this.pivotStage = e.pivotStage, this.filterAggStage = e.filterAggStage;
  }
  postConstruct() {
    this.orderedStages = [
      this.groupStage,
      this.filterStage,
      this.pivotStage,
      this.aggStage,
      this.sortStage,
      this.filterAggStage,
      this.flattenStage
    ].filter((s) => !!s);
    const e = this.refreshModel.bind(this, { step: "group" }), t = this.refreshModel.bind(this, {
      step: "group",
      // after cols change, row grouping (the first stage) could of changed
      afterColumnsChanged: !0,
      keepRenderedRows: !0,
      // we want animations cos sorting or filtering could be applied
      animate: !this.gos.get("suppressAnimationFrame")
    });
    this.addManagedEventListeners({
      newColumnsLoaded: t,
      columnRowGroupChanged: e,
      columnValueChanged: this.onValueChanged.bind(this),
      columnPivotChanged: this.refreshModel.bind(this, { step: "pivot" }),
      filterChanged: this.onFilterChanged.bind(this),
      sortChanged: this.onSortChanged.bind(this),
      columnPivotModeChanged: e,
      gridStylesChanged: this.onGridStylesChanges.bind(this),
      gridReady: this.onGridReady.bind(this)
    }), this.addPropertyListeners(), this.rootNode = new zi(this.beans);
    const i = this.getNewNodeManager();
    this.nodeManager = i, i.activate(this.rootNode);
  }
  getNewNodeManager() {
    const { gos: e, beans: t } = this;
    return pf(e) === "treeNested" && t.csrmChildrenTreeNodeSvc || t.csrmNodeSvc;
  }
  addPropertyListeners() {
    const e = [
      "treeData",
      "treeDataChildrenField",
      ...this.orderedStages.flatMap(({ refreshProps: t }) => [...t])
    ];
    this.addManagedPropertyListeners(e, (t) => {
      const i = t.changeSet?.properties;
      i && this.onPropChange(i);
    }), this.addManagedPropertyListener("rowData", () => this.onPropChange(["rowData"])), this.addManagedPropertyListener("rowHeight", () => this.resetRowHeights());
  }
  start() {
    this.started = !0, this.rowNodesCountReady ? this.refreshModel({ step: "group", rowDataUpdated: !0, newData: !0 }) : this.setInitialData();
  }
  setInitialData() {
    this.gos.get("rowData") && this.onPropChange(["rowData"]);
  }
  ensureRowHeightsValid(e, t, i, s) {
    let o, n = !1;
    do {
      o = !1;
      const r = this.getRowIndexAtPixel(e), a = this.getRowIndexAtPixel(t), l = Math.max(r, i), c = Math.min(a, s);
      for (let d = l; d <= c; d++) {
        const u = this.getRow(d);
        if (u.rowHeightEstimated) {
          const h = ui(this.beans, u);
          u.setRowHeight(h.height), o = !0, n = !0;
        }
      }
      o && this.setRowTopAndRowIndex();
    } while (o);
    return n;
  }
  onPropChange(e) {
    if (!this.rootNode)
      return;
    const t = this.gos, i = new Set(e), s = {
      step: "nothing",
      changedProps: i
    }, o = i.has("rowData"), n = this.nodeManager, r = this.getNewNodeManager(), a = n !== r || o && i.has("treeData") && t.get("treeData") || i.has("treeDataChildrenField") && t.get("treeData");
    let l;
    if ((a || o) && (l = t.get("rowData"), l != null && !Array.isArray(l) && (l = null, B(1))), a && (o || (l = n?.extractRowData() ?? l), n !== r && (n?.deactivate(), this.nodeManager = r), r.activate(this.rootNode)), l)
      if (!a && !this.isEmpty() && l.length > 0 && t.exists("getRowId") && // this property is a backwards compatibility property, for those who want
      // the old behaviour of Row IDs but NOT Immutable Data.
      !t.get("resetRowDataOnUpdate"))
        s.keepRenderedRows = !0, s.animate = !this.gos.get("suppressAnimationFrame"), s.changedRowNodes = new ha(), r.setImmutableRowData(s, l);
      else {
        s.rowDataUpdated = !0, s.newData = !0;
        const { selectionSvc: d, pinnedRowModel: u } = this.beans;
        d?.reset("rowDataChanged"), u?.isManual() && u.reset(), this.rowNodesCountReady = !0, r.setNewRowData(l);
      }
    if (s.rowDataUpdated)
      s.step = "group";
    else if (s.step === "nothing") {
      for (const { refreshProps: c, step: d } of this.orderedStages)
        if (e.some((u) => c.has(u))) {
          s.step = d;
          break;
        }
    }
    s.step !== "nothing" && this.refreshModel(s);
  }
  setRowTopAndRowIndex() {
    const { beans: e, rowsToDisplay: t } = this, i = e.environment.getDefaultRowHeight();
    let s = 0;
    const o = /* @__PURE__ */ new Set(), n = ze(this.gos, "normal");
    for (let r = 0, a = t.length; r < a; ++r) {
      const l = t[r];
      if (l.id != null && o.add(l.id), l.rowHeight == null) {
        const c = ui(e, l, n, i);
        l.setRowHeight(c.height, c.estimated);
      }
      l.setRowTop(s), l.setRowIndex(r), s += l.rowHeight;
    }
    return o;
  }
  clearRowTopAndRowIndex(e, t) {
    const i = e.active, s = (n) => {
      n && n.id != null && !t.has(n.id) && n.clearRowTopAndRowIndex();
    }, o = (n) => {
      if (n !== null && (s(n), s(n.detailNode), s(n.sibling), n.hasChildren() && n.childrenAfterGroup)) {
        const r = n.level == -1;
        i && !r && !n.expanded || n.childrenAfterGroup.forEach(o);
      }
    };
    o(this.rootNode);
  }
  isLastRowIndexKnown() {
    return !0;
  }
  getRowCount() {
    return this.rowsToDisplay ? this.rowsToDisplay.length : 0;
  }
  /**
   * Returns the number of rows with level === 1
   */
  getTopLevelRowCount() {
    const e = this.rootNode;
    if (!e || this.rowsToDisplay.length === 0)
      return 0;
    if (this.rowsToDisplay && this.rowsToDisplay[0] === e)
      return 1;
    const i = e.childrenAfterSort, s = e.sibling && e.sibling.displayed ? 1 : 0;
    return (i ? i.length : 0) + s;
  }
  /**
   * Get the row display index by the top level index
   * top level index is the index of rows with level === 1
   */
  getTopLevelRowDisplayedIndex(e) {
    const { rootNode: t, rowsToDisplay: i } = this;
    if (!t || !i.length || i[0] === t)
      return e;
    const { childrenAfterSort: o } = t, n = (a) => {
      let l = o[a];
      if (this.gos.get("groupHideOpenParents"))
        for (; l.expanded && l.childrenAfterSort && l.childrenAfterSort.length > 0; )
          l = l.childrenAfterSort[0];
      return l.rowIndex;
    }, { footerSvc: r } = this.beans;
    return r ? r.getTopDisplayIndex(i, e, o, n) : n(e);
  }
  /**
   * The opposite of `getTopLevelRowDisplayedIndex`
   */
  getTopLevelIndexFromDisplayedIndex(e) {
    const { rootNode: t, rowsToDisplay: i } = this;
    if (!t || !i.length || i[0] === t)
      return e;
    let o = this.getRow(e);
    for (o.footer && (o = o.sibling); o.parent && o.parent !== t; )
      o = o.parent;
    const n = t.childrenAfterSort?.findIndex((r) => r === o);
    return n === -1 ? e : n ?? e;
  }
  getRowBounds(e) {
    const t = this.rowsToDisplay[e];
    return t ? {
      rowTop: t.rowTop,
      rowHeight: t.rowHeight
    } : null;
  }
  onRowGroupOpened() {
    const e = hs(this.gos);
    this.refreshModel({ step: "map", keepRenderedRows: !0, animate: e });
  }
  onFilterChanged(e) {
    if (e.afterDataChange)
      return;
    const t = hs(this.gos), s = e.columns.length === 0 || e.columns.some((o) => o.isPrimary()) ? "filter" : "filter_aggregates";
    this.refreshModel({ step: s, keepRenderedRows: !0, animate: t });
  }
  onSortChanged() {
    const e = hs(this.gos);
    this.refreshModel({
      step: "sort",
      keepRenderedRows: !0,
      animate: e
    });
  }
  getType() {
    return "clientSide";
  }
  onValueChanged() {
    this.refreshModel({ step: this.colModel.isPivotActive() ? "pivot" : "aggregate" });
  }
  createChangePath(e) {
    const t = new Po(!1, this.rootNode);
    return e || (t.active = !1), t;
  }
  isSuppressModelUpdateAfterUpdateTransaction(e) {
    if (!this.gos.get("suppressModelUpdateAfterUpdateTransaction"))
      return !1;
    const { changedRowNodes: t, newData: i, rowDataUpdated: s } = e;
    return !(!t || i || !s || t.removals.size || t.adds.size);
  }
  refreshModel(e) {
    if (!this.rootNode)
      return;
    const t = this.beans;
    let i = !!e.rowDataUpdated;
    const s = e.changedPath ?? (e.changedPath = this.createChangePath(!e.newData && i));
    if (this.started && i && this.eventSvc.dispatchEvent({ type: "rowDataUpdated" }), this.rowDataUpdatedPending || (this.rowDataUpdatedPending = i), !this.started || this.isRefreshingModel || this.colModel.changeEventsDispatching || this.isSuppressModelUpdateAfterUpdateTransaction(e))
      return;
    switch (this.rowDataUpdatedPending && (this.rowDataUpdatedPending = !1, e.rowDataUpdated = i = !0), this.isRefreshingModel = !0, t.masterDetailSvc?.refreshModel(e), i && e.step !== "group" && t.colFilter?.refreshModel(), e.step) {
      case "group":
        (this.doRowGrouping(e) || i) && t.colFilter?.refreshModel(), !this.rowCountReady && this.rowNodesCountReady && (this.rowCountReady = !0, this.eventSvc.dispatchEventOnce({ type: "rowCountReady" }));
      case "filter":
        this.doFilter(s);
      case "pivot":
        this.doPivot(s);
      case "aggregate":
        this.doAggregate(s);
      case "filter_aggregates":
        this.doFilterAggregates(s);
      case "sort":
        this.doSort(e.changedRowNodes, s);
      case "map":
        this.doRowsToDisplay();
    }
    const o = this.setRowTopAndRowIndex();
    this.clearRowTopAndRowIndex(s, o), this.isRefreshingModel = !1, this.eventSvc.dispatchEvent({
      type: "modelUpdated",
      animate: e.animate,
      keepRenderedRows: e.keepRenderedRows,
      newData: e.newData,
      newPage: !1,
      keepUndoRedoStack: e.keepUndoRedoStack
    });
  }
  isEmpty() {
    return !this.rootNode?.allLeafChildren?.length || !this.colModel?.ready;
  }
  isRowsToRender() {
    return this.rowsToDisplay.length > 0;
  }
  getNodesInRangeForSelection(e, t) {
    let i = !1, s = !1;
    const o = [], n = yo(this.gos);
    return this.forEachNodeAfterFilterAndSort((r) => {
      if (s)
        return;
      if (i && (r === t || r === e) && (s = !0, r.group && n)) {
        o.push(...r.allLeafChildren);
        return;
      }
      if (!i) {
        if (r !== t && r !== e)
          return;
        i = !0;
      }
      if (!r.group || !n) {
        o.push(r);
        return;
      }
    }), o;
  }
  getTopLevelNodes() {
    return this.rootNode?.childrenAfterGroup ?? null;
  }
  getRow(e) {
    return this.rowsToDisplay[e];
  }
  isRowPresent(e) {
    return this.rowsToDisplay.indexOf(e) >= 0;
  }
  getRowIndexAtPixel(e) {
    const t = this.rowsToDisplay;
    if (this.isEmpty() || t.length === 0)
      return -1;
    let i = 0, s = t.length - 1;
    if (e <= 0)
      return 0;
    if (ue(t).rowTop <= e)
      return t.length - 1;
    let n = -1, r = -1;
    for (; ; ) {
      const a = Math.floor((i + s) / 2), l = t[a];
      if (this.isRowInPixel(l, e) || (l.rowTop < e ? i = a + 1 : l.rowTop > e && (s = a - 1), n === i && r === s))
        return a;
      n = i, r = s;
    }
  }
  isRowInPixel(e, t) {
    const i = e.rowTop, s = e.rowTop + e.rowHeight;
    return i <= t && s > t;
  }
  forEachLeafNode(e) {
    this.rootNode?.allLeafChildren?.forEach((t, i) => e(t, i));
  }
  forEachNode(e, t = !1) {
    this.depthFirstSearchRowNodes(e, t);
  }
  forEachDisplayedNode(e) {
    this.rowsToDisplay.forEach(e);
  }
  forEachNodeAfterFilter(e, t = !1) {
    this.depthFirstSearchRowNodes(e, t, (i) => i.childrenAfterAggFilter);
  }
  forEachNodeAfterFilterAndSort(e, t = !1) {
    this.depthFirstSearchRowNodes(e, t, (i) => i.childrenAfterSort);
  }
  forEachPivotNode(e, t = !1, i = !1) {
    const { colModel: s, rowGroupColsSvc: o } = this.beans;
    if (!s.isPivotMode())
      return;
    if (!o?.columns.length) {
      e(this.rootNode, 0);
      return;
    }
    const n = i ? "childrenAfterSort" : "childrenAfterGroup";
    this.depthFirstSearchRowNodes(
      e,
      t,
      (r) => r.leafGroup ? null : r[n]
    );
  }
  /**
   * Iterate through each node and all of its children
   * @param callback the function to execute for each node
   * @param includeFooterNodes whether to also iterate over footer nodes
   * @param nodes the nodes to start iterating over
   * @param getChildren a function to determine the recursion strategy
   * @param startIndex the index to start from
   * @returns the index ended at
   */
  depthFirstSearchRowNodes(e, t = !1, i = (n) => n.childrenAfterGroup, s = this.rootNode, o = 0) {
    let n = o;
    if (!s)
      return n;
    const r = s === this.rootNode;
    r || e(s, n++);
    const { footerSvc: a } = this.beans;
    if (s.hasChildren() && !s.footer) {
      const l = i(s);
      if (l) {
        n = a?.addTotalRows(n, s, e, t, r, "top") ?? n;
        for (const c of l)
          n = this.depthFirstSearchRowNodes(e, t, i, c, n);
        return a?.addTotalRows(n, s, e, t, r, "bottom") ?? n;
      }
    }
    return n;
  }
  // it's possible to recompute the aggregate without doing the other parts
  // + api.refreshClientSideRowModel('aggregate')
  doAggregate(e) {
    const t = this.rootNode;
    t && this.aggStage?.execute({ rowNode: t, changedPath: e });
  }
  doFilterAggregates(e) {
    const t = this.rootNode;
    this.filterAggStage ? this.filterAggStage.execute({ rowNode: t, changedPath: e }) : t.childrenAfterAggFilter = t.childrenAfterFilter;
  }
  doSort(e, t) {
    this.sortStage ? this.sortStage.execute({
      rowNode: this.rootNode,
      changedRowNodes: e,
      changedPath: t
    }) : t.forEachChangedNodeDepthFirst((i) => {
      i.childrenAfterSort = i.childrenAfterAggFilter.slice(0), DC(i);
    });
  }
  doRowGrouping(e) {
    const t = this.rootNode, i = this.groupStage?.execute({
      rowNode: t,
      changedRowNodes: e.changedRowNodes,
      changedPath: e.changedPath,
      rowNodesOrderChanged: !!e.rowNodesOrderChanged,
      afterColumnsChanged: !!e.afterColumnsChanged
    });
    if (i !== void 0)
      return i;
    const s = t.sibling;
    return t.childrenAfterGroup = t.allLeafChildren, s && (s.childrenAfterGroup = t.childrenAfterGroup), t.updateHasChildren(), !1;
  }
  doFilter(e) {
    this.filterStage ? this.filterStage.execute({ rowNode: this.rootNode, changedPath: e }) : e.forEachChangedNodeDepthFirst((t) => {
      t.childrenAfterFilter = t.childrenAfterGroup, sC(t);
    }, !0);
  }
  doPivot(e) {
    this.pivotStage?.execute({ rowNode: this.rootNode, changedPath: e });
  }
  getRowNode(e) {
    const t = this.nodeManager.getRowNode(e);
    return typeof t == "object" ? t : typeof e == "string" && e.indexOf(il) === 0 ? this.groupStage?.getNode(e) : void 0;
  }
  batchUpdateRowData(e, t) {
    if (this.applyAsyncTransactionsTimeout == null) {
      this.rowDataTransactionBatch = [];
      const i = this.gos.get("asyncTransactionWaitMillis");
      this.applyAsyncTransactionsTimeout = window.setTimeout(() => {
        this.isAlive() && this.executeBatchUpdateRowData();
      }, i);
    }
    this.rowDataTransactionBatch.push({ rowDataTransaction: e, callback: t });
  }
  flushAsyncTransactions() {
    this.applyAsyncTransactionsTimeout != null && (clearTimeout(this.applyAsyncTransactionsTimeout), this.executeBatchUpdateRowData());
  }
  executeBatchUpdateRowData() {
    this.valueCache?.onDataChanged();
    const e = [], t = [], i = new ha();
    let s = !1;
    this.rowDataTransactionBatch?.forEach((o) => {
      this.rowNodesCountReady = !0;
      const { rowNodeTransaction: n, rowsInserted: r } = this.nodeManager.updateRowData(
        o.rowDataTransaction,
        i
      );
      r && (s = !0), t.push(n), o.callback && e.push(o.callback.bind(null, n));
    }), this.commitTransactions(s, i), e.length > 0 && window.setTimeout(() => {
      e.forEach((o) => o());
    }, 0), t.length > 0 && this.eventSvc.dispatchEvent({
      type: "asyncTransactionsFlushed",
      results: t
    }), this.rowDataTransactionBatch = null, this.applyAsyncTransactionsTimeout = void 0;
  }
  /**
   * Used to apply transaction changes.
   * Called by gridApi & rowDragFeature
   */
  updateRowData(e) {
    this.valueCache?.onDataChanged(), this.rowNodesCountReady = !0;
    const t = new ha(), { rowNodeTransaction: i, rowsInserted: s } = this.nodeManager.updateRowData(e, t);
    return this.commitTransactions(s, t), i;
  }
  /**
   * Common to:
   * - executeBatchUpdateRowData (batch transactions)
   * - updateRowData (single transaction)
   * - setImmutableRowData (generated transaction)
   *
   * @param rowNodeTrans - the transactions to apply
   * @param orderChanged - whether the order of the rows has changed, either via generated transaction or user provided addIndex
   */
  commitTransactions(e, t) {
    this.refreshModel({
      step: "group",
      rowDataUpdated: !0,
      rowNodesOrderChanged: e,
      keepRenderedRows: !0,
      animate: !this.gos.get("suppressAnimationFrame"),
      changedRowNodes: t,
      changedPath: this.createChangePath(!0)
    });
  }
  doRowsToDisplay() {
    const { flattenStage: e, rootNode: t } = this;
    let i;
    if (e)
      i = e.execute({ rowNode: t });
    else {
      i = t?.childrenAfterSort ?? [];
      for (const s of i)
        s.setUiLevel(0);
    }
    this.rowsToDisplay = i;
  }
  onRowHeightChanged() {
    this.refreshModel({
      step: "map",
      keepRenderedRows: !0,
      keepUndoRedoStack: !0
    });
  }
  resetRowHeights() {
    const e = this.rootNode;
    if (!e)
      return;
    const t = this.resetRowHeightsForAllRowNodes();
    e.setRowHeight(e.rowHeight, !0), e.sibling && e.sibling.setRowHeight(e.sibling.rowHeight, !0), t && this.onRowHeightChanged();
  }
  resetRowHeightsForAllRowNodes() {
    let e = !1;
    return this.forEachNode((t) => {
      t.setRowHeight(t.rowHeight, !0);
      const i = t.detailNode;
      i && i.setRowHeight(i.rowHeight, !0), t.sibling && t.sibling.setRowHeight(t.sibling.rowHeight, !0), e = !0;
    }), e;
  }
  onGridStylesChanges(e) {
    if (e.rowHeightChanged) {
      if (this.beans.rowAutoHeight?.active)
        return;
      this.resetRowHeights();
    }
  }
  onGridReady() {
    this.started || this.setInitialData();
  }
  isRowDataLoaded() {
    return this.rowCountReady;
  }
  destroy() {
    super.destroy(), this.started = !1, this.rootNode = null, this.nodeManager = null, this.rowDataTransactionBatch = null, this.orderedStages = Un, this.rowsToDisplay = Un;
  }
  /**
   * @deprecated v33.1
   */
  onRowHeightChangedDebounced() {
    this.onRowHeightChanged_debounced();
  }
};
function oO(e) {
  e.expansionSvc?.onGroupExpandedOrCollapsed();
}
function nO(e, t) {
  const i = Nt(e);
  i && ((!t || t === "everything") && (t = "group"), i.refreshModel({
    step: t,
    keepRenderedRows: !0,
    animate: !e.gos.get("suppressAnimationFrame")
  }));
}
function rO(e) {
  return Nt(e)?.isEmpty() ?? !0;
}
function aO(e, t) {
  Nt(e)?.forEachLeafNode(t);
}
function lO(e, t) {
  Nt(e)?.forEachNodeAfterFilter(t);
}
function cO(e, t) {
  Nt(e)?.forEachNodeAfterFilterAndSort(t);
}
function dO(e) {
  if (e.rowAutoHeight?.active) {
    B(3);
    return;
  }
  Nt(e)?.resetRowHeights();
}
function uO(e, t) {
  return e.frameworkOverrides.wrapIncoming(
    () => Nt(e)?.updateRowData(t)
  );
}
function hO(e, t, i) {
  e.frameworkOverrides.wrapIncoming(
    () => Nt(e)?.batchUpdateRowData(t, i)
  );
}
function gO(e) {
  e.frameworkOverrides.wrapIncoming(() => Nt(e)?.flushAsyncTransactions());
}
function pO(e) {
  return e.selectionSvc?.getBestCostNodeSelection();
}
var fO = {
  moduleName: "ClientSideRowModel",
  version: Y,
  rowModels: ["clientSide"],
  beans: [Q1, sO, eO],
  dependsOn: [Qm]
}, mO = {
  moduleName: "ClientSideRowModelApi",
  version: Y,
  apiFunctions: {
    onGroupExpandedOrCollapsed: oO,
    refreshClientSideRowModel: nO,
    isRowDataEmpty: rO,
    forEachLeafNode: aO,
    forEachNodeAfterFilter: lO,
    forEachNodeAfterFilterAndSort: cO,
    resetRowHeights: dO,
    applyTransaction: uO,
    applyTransactionAsync: hO,
    flushAsyncTransactions: gO,
    getBestCostNodeSelection: pO
  },
  dependsOn: [Y1]
}, CO = class extends T {
  constructor() {
    super(...arguments), this.beanName = "gridSerializer";
  }
  wireBeans(e) {
    this.visibleCols = e.visibleCols, this.colModel = e.colModel, this.rowModel = e.rowModel, this.pinnedRowModel = e.pinnedRowModel;
  }
  serialize(e, t = {}) {
    const { allColumns: i, columnKeys: s, skipRowGroups: o, exportRowNumbers: n } = t, r = this.getColumnsToExport({
      allColumns: i,
      skipRowGroups: o,
      columnKeys: s,
      exportRowNumbers: n
    });
    return [
      // first pass, put in the header names of the cols
      this.prepareSession(r),
      this.prependContent(t),
      this.exportColumnGroups(t, r),
      this.exportHeaders(t, r),
      this.processPinnedTopRows(t, r),
      this.processRows(t, r),
      this.processPinnedBottomRows(t, r),
      this.appendContent(t)
    ].reduce((a, l) => l(a), e).parse();
  }
  processRow(e, t, i, s) {
    const o = t.shouldRowBeSkipped || (() => !1), r = t.rowPositions != null || !!t.onlySelected, a = this.gos.get("groupHideOpenParents") && !r, l = this.colModel.isPivotMode() ? s.leafGroup : !s.group, c = !!s.footer, d = s.allChildrenCount === 1 && s.childrenAfterGroup?.length === 1 && nx(this.gos, s);
    if (!l && !c && (t.skipRowGroups || d || a) || t.onlySelected && !s.isSelected() || t.skipPinnedTop && s.rowPinned === "top" || t.skipPinnedBottom && s.rowPinned === "bottom" || s.stub || s.level === -1 && !l && !c || o(Z(this.gos, { node: s })))
      return;
    const g = e.onNewBodyRow(s);
    if (i.forEach((p, f) => {
      g.onColumn(p, f, s);
    }), t.getCustomContentBelowRow) {
      const p = t.getCustomContentBelowRow(Z(this.gos, { node: s }));
      p && e.addCustomContent(p);
    }
  }
  appendContent(e) {
    return (t) => {
      const i = e.appendContent;
      return i && t.addCustomContent(i), t;
    };
  }
  prependContent(e) {
    return (t) => {
      const i = e.prependContent;
      return i && t.addCustomContent(i), t;
    };
  }
  prepareSession(e) {
    return (t) => (t.prepare(e), t);
  }
  exportColumnGroups(e, t) {
    return (i) => {
      if (!e.skipColumnGroupHeaders) {
        const s = new If(), { colGroupSvc: o } = this.beans, n = o ? o.createColumnGroups({
          columns: t,
          idCreator: s,
          pinned: null,
          isStandaloneStructure: !0
        }) : t;
        this.recursivelyAddHeaderGroups(
          n,
          i,
          e.processGroupHeaderCallback
        );
      }
      return i;
    };
  }
  exportHeaders(e, t) {
    return (i) => {
      if (!e.skipColumnHeaders) {
        const s = i.onNewHeaderRow();
        t.forEach((o, n) => {
          s.onColumn(o, n, void 0);
        });
      }
      return i;
    };
  }
  processPinnedTopRows(e, t) {
    return (i) => {
      const s = this.processRow.bind(this, i, e, t);
      return e.rowPositions ? e.rowPositions.filter((o) => o.rowPinned === "top").sort((o, n) => o.rowIndex - n.rowIndex).map((o) => this.pinnedRowModel?.getPinnedTopRow(o.rowIndex)).forEach(s) : this.pinnedRowModel?.isManual() || this.pinnedRowModel?.forEachPinnedRow("top", s), i;
    };
  }
  processRows(e, t) {
    return (i) => {
      const s = this.rowModel, o = Oe(this.gos), n = $i(this.gos), r = !o && e.onlySelected, a = this.processRow.bind(this, i, e, t), { exportedRows: l = "filteredAndSorted" } = e;
      if (e.rowPositions)
        return e.rowPositions.filter((c) => c.rowPinned == null).sort((c, d) => c.rowIndex - d.rowIndex).map((c) => s.getRow(c.rowIndex)).forEach(a), i;
      if (this.colModel.isPivotMode())
        return o ? s.forEachPivotNode(a, !0, l === "filteredAndSorted") : n ? s.forEachNodeAfterFilterAndSort(a, !0) : s.forEachNode(a), i;
      if (e.onlySelectedAllPages || r) {
        const c = this.beans.selectionSvc?.getSelectedNodes() ?? [];
        this.replicateSortedOrder(c), c.forEach(a);
      } else
        l === "all" ? s.forEachNode(a) : o || n ? s.forEachNodeAfterFilterAndSort(a, !0) : s.forEachNode(a);
      return i;
    };
  }
  replicateSortedOrder(e) {
    const { sortSvc: t, rowNodeSorter: i } = this.beans;
    if (!t || !i)
      return;
    const s = t.getSortOptions(), o = (n, r) => n.rowIndex != null && r.rowIndex != null ? n.rowIndex - r.rowIndex : n.level === r.level ? n.parent?.id === r.parent?.id ? i.compareRowNodes(
      s,
      {
        rowNode: n,
        currentPos: n.rowIndex ?? -1
      },
      {
        rowNode: r,
        currentPos: r.rowIndex ?? -1
      }
    ) : o(n.parent, r.parent) : n.level > r.level ? o(n.parent, r) : o(n, r.parent);
    e.sort(o);
  }
  processPinnedBottomRows(e, t) {
    return (i) => {
      const s = this.processRow.bind(this, i, e, t);
      return e.rowPositions ? e.rowPositions.filter((o) => o.rowPinned === "bottom").sort((o, n) => o.rowIndex - n.rowIndex).map((o) => this.pinnedRowModel?.getPinnedBottomRow(o.rowIndex)).forEach(s) : this.pinnedRowModel?.isManual() || this.pinnedRowModel?.forEachPinnedRow("bottom", s), i;
    };
  }
  getColumnsToExport(e) {
    const { allColumns: t = !1, skipRowGroups: i = !1, exportRowNumbers: s = !1, columnKeys: o } = e, { colModel: n, gos: r, visibleCols: a } = this, l = n.isPivotMode(), c = (h) => fi(h) ? !1 : !ai(h) || s;
    if (o && o.length)
      return n.getColsForKeys(o).filter(c);
    const d = r.get("treeData");
    let u = [];
    return t && !l ? u = n.getCols() : u = a.allCols, u = u.filter(
      (h) => c(h) && (i && !d ? !hc(h) : !0)
    ), u;
  }
  recursivelyAddHeaderGroups(e, t, i) {
    const s = [];
    e.forEach((o) => {
      const n = o;
      n.getChildren && n.getChildren().forEach((r) => s.push(r));
    }), e.length > 0 && De(e[0]) && this.doAddHeaderHeader(t, e, i), s && s.length > 0 && this.recursivelyAddHeaderGroups(
      s,
      t,
      i
    );
  }
  doAddHeaderHeader(e, t, i) {
    const s = e.onNewHeaderGroupingRow();
    let o = 0;
    t.forEach((n) => {
      const r = n;
      let a;
      i ? a = i(
        Z(this.gos, {
          columnGroup: r
        })
      ) : a = this.beans.colNames.getDisplayNameForColumnGroup(r, "header");
      const l = r.getLeafColumns().reduce((c, d, u, h) => {
        let g = ue(c);
        return d.getColumnGroupShow() === "open" ? (!g || g[1] != null) && (g = [u], c.push(g)) : g && g[1] == null && (g[1] = u - 1), u === h.length - 1 && g && g[1] == null && (g[1] = u), c;
      }, []);
      s.onColumn(
        r,
        a || "",
        o++,
        r.getLeafColumns().length - 1,
        l
      );
    });
  }
}, vO = {
  moduleName: "SharedExport",
  version: Y,
  beans: [CO]
}, yh = `\r
`, wO = class extends sk {
  constructor(e) {
    super(e), this.config = e, this.isFirstLine = !0, this.result = "";
    const { suppressQuotes: t, columnSeparator: i } = e;
    this.suppressQuotes = t, this.columnSeparator = i;
  }
  addCustomContent(e) {
    e && (typeof e == "string" ? (/^\s*\n/.test(e) || this.beginNewLine(), e = e.replace(/\r?\n/g, yh), this.result += e) : e.forEach((t) => {
      this.beginNewLine(), t.forEach((i, s) => {
        s !== 0 && (this.result += this.columnSeparator), this.result += this.putInQuotes(i.data.value || ""), i.mergeAcross && this.appendEmptyCells(i.mergeAcross);
      });
    }));
  }
  onNewHeaderGroupingRow() {
    return this.beginNewLine(), {
      onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
    };
  }
  onNewHeaderGroupingRowColumn(e, t, i, s) {
    i != 0 && (this.result += this.columnSeparator), this.result += this.putInQuotes(t), this.appendEmptyCells(s);
  }
  appendEmptyCells(e) {
    for (let t = 1; t <= e; t++)
      this.result += this.columnSeparator + this.putInQuotes("");
  }
  onNewHeaderRow() {
    return this.beginNewLine(), {
      onColumn: this.onNewHeaderRowColumn.bind(this)
    };
  }
  onNewHeaderRowColumn(e, t) {
    t != 0 && (this.result += this.columnSeparator), this.result += this.putInQuotes(this.extractHeaderValue(e));
  }
  onNewBodyRow() {
    return this.beginNewLine(), {
      onColumn: this.onNewBodyRowColumn.bind(this)
    };
  }
  onNewBodyRowColumn(e, t, i) {
    t != 0 && (this.result += this.columnSeparator);
    const s = this.extractRowCellValue(e, t, t, "csv", i);
    this.result += this.putInQuotes(s.valueFormatted ?? s.value);
  }
  putInQuotes(e) {
    if (this.suppressQuotes)
      return e;
    if (e == null)
      return '""';
    let t;
    return typeof e == "string" ? t = e : typeof e.toString == "function" ? t = e.toString() : (B(53), t = ""), '"' + t.replace(/"/g, '""') + '"';
  }
  parse() {
    return this.result;
  }
  beginNewLine() {
    this.isFirstLine || (this.result += yh), this.isFirstLine = !1;
  }
}, SO = class extends ik {
  constructor() {
    super(...arguments), this.beanName = "csvCreator";
  }
  wireBeans(e) {
    this.colModel = e.colModel, this.colNames = e.colNames, this.rowGroupColsSvc = e.rowGroupColsSvc, this.valueSvc = e.valueSvc;
  }
  getMergedParams(e) {
    const t = this.gos.get("defaultCsvExportParams");
    return Object.assign({}, t, e);
  }
  export(e) {
    if (this.isExportSuppressed()) {
      B(51);
      return;
    }
    const t = this.getMergedParams(e), i = this.getData(t), s = new Blob(["\uFEFF", i], { type: "text/plain" }), o = typeof t.fileName == "function" ? t.fileName(Z(this.gos, {})) : t.fileName;
    ok(this.getFileName(o), s);
  }
  exportDataAsCsv(e) {
    this.export(e);
  }
  getDataAsCsv(e, t = !1) {
    const i = t ? Object.assign({}, e) : this.getMergedParams(e);
    return this.getData(i);
  }
  getDefaultFileExtension() {
    return "csv";
  }
  createSerializingSession(e) {
    const { colModel: t, colNames: i, rowGroupColsSvc: s, valueSvc: o, gos: n } = this, {
      processCellCallback: r,
      processHeaderCallback: a,
      processGroupHeaderCallback: l,
      processRowGroupCallback: c,
      suppressQuotes: d,
      columnSeparator: u
    } = e;
    return new wO({
      colModel: t,
      colNames: i,
      valueSvc: o,
      gos: n,
      processCellCallback: r || void 0,
      processHeaderCallback: a || void 0,
      processGroupHeaderCallback: l || void 0,
      processRowGroupCallback: c || void 0,
      suppressQuotes: d || !1,
      columnSeparator: u || ",",
      rowGroupColsSvc: s
    });
  }
  isExportSuppressed() {
    return this.gos.get("suppressCsvExport");
  }
};
function yO(e, t) {
  return e.csvCreator?.getDataAsCsv(t);
}
function bO(e, t) {
  e.csvCreator?.exportDataAsCsv(t);
}
var RO = {
  moduleName: "CsvExport",
  version: Y,
  beans: [SO],
  apiFunctions: {
    getDataAsCsv: yO,
    exportDataAsCsv: bO
  },
  dependsOn: [vO]
}, xO = class extends T {
  constructor(e, t, i) {
    super(), this.id = e, this.parentCache = t, this.params = i, this.state = "needsLoading", this.version = 0, this.startRow = e * i.blockSize, this.endRow = this.startRow + i.blockSize;
  }
  load() {
    this.state = "loading", this.loadFromDatasource();
  }
  setStateWaitingToLoad() {
    this.version++, this.state = "needsLoading";
  }
  pageLoadFailed(e) {
    this.isRequestMostRecentAndLive(e) && (this.state = "failed"), this.dispatchLocalEvent({ type: "loadComplete" });
  }
  pageLoaded(e, t, i) {
    this.successCommon(e, { rowData: t, rowCount: i });
  }
  isRequestMostRecentAndLive(e) {
    const t = e === this.version, i = this.isAlive();
    return t && i;
  }
  successCommon(e, t) {
    this.dispatchLocalEvent({ type: "loadComplete" }), this.isRequestMostRecentAndLive(e) && (this.state = "loaded", this.processServerResult(t));
  }
  postConstruct() {
    this.rowNodes = [];
    const {
      params: { blockSize: e, rowHeight: t },
      startRow: i,
      beans: s,
      rowNodes: o
    } = this;
    for (let n = 0; n < e; n++) {
      const r = i + n, a = new zi(s);
      a.setRowHeight(t), a.uiLevel = 0, a.setRowIndex(r), a.setRowTop(t * r), o.push(a);
    }
  }
  getBlockStateJson() {
    const { id: e, startRow: t, endRow: i, state: s } = this;
    return {
      id: "" + e,
      state: {
        blockNumber: e,
        startRow: t,
        endRow: i,
        pageStatus: s
      }
    };
  }
  setDataAndId(e, t, i) {
    $(t) ? e.setDataAndId(t, i.toString()) : e.setDataAndId(void 0, void 0);
  }
  loadFromDatasource() {
    const e = this.createLoadParams();
    if (Ce(this.params.datasource.getRows)) {
      B(90);
      return;
    }
    window.setTimeout(() => {
      this.params.datasource.getRows(e);
    }, 0);
  }
  createLoadParams() {
    const {
      startRow: e,
      endRow: t,
      version: i,
      params: { sortModel: s, filterModel: o },
      gos: n
    } = this;
    return {
      startRow: e,
      endRow: t,
      successCallback: this.pageLoaded.bind(this, i),
      failCallback: this.pageLoadFailed.bind(this, i),
      sortModel: s,
      filterModel: o,
      context: Z(n, {}).context
    };
  }
  forEachNode(e, t, i) {
    this.rowNodes.forEach((s, o) => {
      this.startRow + o < i && e(s, t.value++);
    });
  }
  getRow(e, t = !1) {
    t || (this.lastAccessed = this.params.lastAccessedSequence.value++);
    const i = e - this.startRow;
    return this.rowNodes[i];
  }
  processServerResult(e) {
    const { rowNodes: t, beans: i } = this;
    t.forEach((o, n) => {
      const r = e.rowData ? e.rowData[n] : void 0;
      !o.id && o.alreadyRendered && r && (t[n] = new zi(i), t[n].setRowIndex(o.rowIndex), t[n].setRowTop(o.rowTop), t[n].setRowHeight(o.rowHeight), o.clearRowTopAndRowIndex()), this.setDataAndId(t[n], r, this.startRow + n);
    });
    const s = e.rowCount != null && e.rowCount >= 0 ? e.rowCount : void 0;
    this.parentCache.pageLoaded(this, s);
  }
  destroy() {
    this.rowNodes.forEach((e) => {
      e.clearRowTopAndRowIndex();
    }), super.destroy();
  }
}, FO = 2, PO = class extends T {
  constructor(e) {
    super(), this.params = e, this.lastRowIndexKnown = !1, this.blocks = {}, this.blockCount = 0, this.rowCount = e.initialRowCount;
  }
  // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,
  // it will want new pages in the cache as it asks for rows. only when we are inserting /
  // removing rows via the api is dontCreatePage set, where we move rows between the pages.
  getRow(e, t = !1) {
    const i = Math.floor(e / this.params.blockSize);
    let s = this.blocks[i];
    if (!s) {
      if (t)
        return;
      s = this.createBlock(i);
    }
    return s.getRow(e);
  }
  createBlock(e) {
    const t = this.params, i = this.createBean(new xO(e, this, t));
    return this.blocks[i.id] = i, this.blockCount++, this.purgeBlocksIfNeeded(i), t.rowNodeBlockLoader.addBlock(i), i;
  }
  // we have this on infinite row model only, not server side row model,
  // because for server side, it would leave the children in inconsistent
  // state - eg if a node had children, but after the refresh it had data
  // for a different row, then the children would be with the wrong row node.
  refreshCache() {
    if (this.blockCount == 0) {
      this.purgeCache();
      return;
    }
    this.getBlocksInOrder().forEach((t) => t.setStateWaitingToLoad()), this.params.rowNodeBlockLoader.checkBlockToLoad();
  }
  destroy() {
    this.getBlocksInOrder().forEach((e) => this.destroyBlock(e)), super.destroy();
  }
  getRowCount() {
    return this.rowCount;
  }
  isLastRowIndexKnown() {
    return this.lastRowIndexKnown;
  }
  // block calls this, when page loaded
  pageLoaded(e, t) {
    this.isAlive() && (Gi(this.gos, `InfiniteCache - onPageLoaded: page = ${e.id}, lastRow = ${t}`), this.checkRowCount(e, t), this.onCacheUpdated());
  }
  purgeBlocksIfNeeded(e) {
    const t = this.getBlocksInOrder().filter((r) => r != e), i = (r, a) => a.lastAccessed - r.lastAccessed;
    t.sort(i);
    const s = this.params.maxBlocksInCache > 0, o = s ? this.params.maxBlocksInCache - 1 : null, n = FO - 1;
    t.forEach((r, a) => {
      const l = r.state === "needsLoading" && a >= n, c = s ? a >= o : !1;
      if (l || c) {
        if (this.isBlockCurrentlyDisplayed(r) || this.isBlockFocused(r))
          return;
        this.removeBlockFromCache(r);
      }
    });
  }
  isBlockFocused(e) {
    const t = this.beans.focusSvc.getFocusCellToUseAfterRefresh();
    if (!t || t.rowPinned != null)
      return !1;
    const { startRow: i, endRow: s } = e;
    return t.rowIndex >= i && t.rowIndex < s;
  }
  isBlockCurrentlyDisplayed(e) {
    const { startRow: t, endRow: i } = e;
    return this.beans.rowRenderer.isRangeInRenderedViewport(t, i - 1);
  }
  removeBlockFromCache(e) {
    e && this.destroyBlock(e);
  }
  checkRowCount(e, t) {
    if (typeof t == "number" && t >= 0)
      this.rowCount = t, this.lastRowIndexKnown = !0;
    else if (!this.lastRowIndexKnown) {
      const { blockSize: i, overflowSize: s } = this.params, n = (e.id + 1) * i + s;
      this.rowCount < n && (this.rowCount = n);
    }
  }
  setRowCount(e, t) {
    this.rowCount = e, $(t) && (this.lastRowIndexKnown = t), this.lastRowIndexKnown || this.rowCount % this.params.blockSize === 0 && this.rowCount++, this.onCacheUpdated();
  }
  forEachNodeDeep(e) {
    const t = { value: 0 };
    this.getBlocksInOrder().forEach((i) => i.forEachNode(e, t, this.rowCount));
  }
  getBlocksInOrder() {
    const e = (i, s) => i.id - s.id;
    return Object.values(this.blocks).sort(e);
  }
  destroyBlock(e) {
    delete this.blocks[e.id], this.destroyBean(e), this.blockCount--, this.params.rowNodeBlockLoader.removeBlock(e);
  }
  // gets called 1) row count changed 2) cache purged 3) items inserted
  onCacheUpdated() {
    this.isAlive() && (this.destroyAllBlocksPastVirtualRowCount(), this.eventSvc.dispatchEvent({
      type: "storeUpdated"
    }));
  }
  destroyAllBlocksPastVirtualRowCount() {
    const e = [];
    this.getBlocksInOrder().forEach((t) => {
      t.id * this.params.blockSize >= this.rowCount && e.push(t);
    }), e.length > 0 && e.forEach((t) => this.destroyBlock(t));
  }
  purgeCache() {
    this.getBlocksInOrder().forEach((e) => this.removeBlockFromCache(e)), this.lastRowIndexKnown = !1, this.rowCount === 0 && (this.rowCount = this.params.initialRowCount), this.onCacheUpdated();
  }
  getRowNodesInRange(e, t) {
    const i = [];
    let s = -1, o = !1;
    const n = { value: 0 };
    let r = !1;
    return this.getBlocksInOrder().forEach((l) => {
      if (!r) {
        if (o && s + 1 !== l.id) {
          r = !0;
          return;
        }
        s = l.id, l.forEachNode(
          (c) => {
            const d = c === e || c === t;
            (o || d) && i.push(c), d && (o = !o);
          },
          n,
          this.rowCount
        );
      }
    }), r || o ? [] : i;
  }
}, EO = class extends T {
  constructor() {
    super(...arguments), this.beanName = "rowModel";
  }
  getRowBounds(e) {
    return {
      rowHeight: this.rowHeight,
      rowTop: this.rowHeight * e
    };
  }
  // we don't implement as lazy row heights is not supported in this row model
  ensureRowHeightsValid() {
    return !1;
  }
  postConstruct() {
    this.gos.get("rowModelType") === "infinite" && (this.rowHeight = Ai(this.beans), this.addEventListeners(), this.addDestroyFunc(() => this.destroyCache()));
  }
  start() {
    this.setDatasource(this.gos.get("datasource"));
  }
  destroy() {
    this.destroyDatasource(), super.destroy();
  }
  destroyDatasource() {
    this.datasource && (this.destroyBean(this.datasource), this.beans.rowRenderer.datasourceChanged(), this.datasource = null);
  }
  addEventListeners() {
    this.addManagedEventListeners({
      filterChanged: this.reset.bind(this),
      sortChanged: this.reset.bind(this),
      newColumnsLoaded: this.onColumnEverything.bind(this),
      storeUpdated: this.dispatchModelUpdatedEvent.bind(this)
    }), this.addManagedPropertyListener("datasource", () => this.setDatasource(this.gos.get("datasource"))), this.addManagedPropertyListener("cacheBlockSize", () => this.resetCache()), this.addManagedPropertyListener("rowHeight", () => {
      this.rowHeight = Ai(this.beans), this.cacheParams.rowHeight = this.rowHeight, this.updateRowHeights();
    });
  }
  onColumnEverything() {
    let e;
    this.cacheParams ? e = !mo(this.cacheParams.sortModel, this.beans.sortSvc?.getSortModel() ?? []) : e = !0, e && this.reset();
  }
  getType() {
    return "infinite";
  }
  setDatasource(e) {
    this.destroyDatasource(), this.datasource = e, e && this.reset();
  }
  isEmpty() {
    return !this.infiniteCache;
  }
  isRowsToRender() {
    return !!this.infiniteCache;
  }
  getNodesInRangeForSelection(e, t) {
    return this.infiniteCache?.getRowNodesInRange(e, t) ?? [];
  }
  reset() {
    if (!this.datasource)
      return;
    Fs(this.gos) != null || this.beans.selectionSvc?.reset("rowDataChanged"), this.resetCache();
  }
  dispatchModelUpdatedEvent() {
    this.eventSvc.dispatchEvent({
      type: "modelUpdated",
      // not sure if these should all be false - noticed if after implementing,
      // maybe they should be true?
      newPage: !1,
      newPageSize: !1,
      newData: !1,
      keepRenderedRows: !0,
      animate: !1
    });
  }
  resetCache() {
    this.destroyCache();
    const e = this.beans, { filterManager: t, sortSvc: i, rowNodeBlockLoader: s, eventSvc: o, gos: n } = e;
    this.cacheParams = {
      // the user provided datasource
      datasource: this.datasource,
      // sort and filter model
      filterModel: t?.getFilterModel() ?? {},
      sortModel: i?.getSortModel() ?? [],
      rowNodeBlockLoader: s,
      // properties - this way we take a snapshot of them, so if user changes any, they will be
      // used next time we create a new cache, which is generally after a filter or sort change,
      // or a new datasource is set
      initialRowCount: n.get("infiniteInitialRowCount"),
      maxBlocksInCache: n.get("maxBlocksInCache"),
      rowHeight: Ai(e),
      // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past
      // the current page and request first row of next page
      overflowSize: n.get("cacheOverflowSize"),
      // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the
      // server for one page at a time. so the default if not specified is 100.
      blockSize: n.get("cacheBlockSize"),
      // the cache could create this, however it is also used by the pages, so handy to create it
      // here as the settings are also passed to the pages
      lastAccessedSequence: { value: 0 }
    }, this.infiniteCache = this.createBean(new PO(this.cacheParams)), o.dispatchEventOnce({
      type: "rowCountReady"
    }), this.dispatchModelUpdatedEvent();
  }
  updateRowHeights() {
    this.forEachNode((e) => {
      e.setRowHeight(this.rowHeight), e.setRowTop(this.rowHeight * e.rowIndex);
    }), this.dispatchModelUpdatedEvent();
  }
  destroyCache() {
    this.infiniteCache = this.destroyBean(this.infiniteCache);
  }
  getRow(e) {
    const t = this.infiniteCache;
    if (t && !(e >= t.getRowCount()))
      return t.getRow(e);
  }
  getRowNode(e) {
    let t;
    return this.forEachNode((i) => {
      i.id === e && (t = i);
    }), t;
  }
  forEachNode(e) {
    this.infiniteCache?.forEachNodeDeep(e);
  }
  getTopLevelRowCount() {
    return this.getRowCount();
  }
  getTopLevelRowDisplayedIndex(e) {
    return e;
  }
  getRowIndexAtPixel(e) {
    if (this.rowHeight !== 0) {
      const t = Math.floor(e / this.rowHeight), i = this.getRowCount() - 1;
      return t > i ? i : t;
    }
    return 0;
  }
  getRowCount() {
    return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;
  }
  isRowPresent(e) {
    return !!this.getRowNode(e.id);
  }
  refreshCache() {
    this.infiniteCache?.refreshCache();
  }
  purgeCache() {
    this.infiniteCache?.purgeCache();
  }
  // for iRowModel
  isLastRowIndexKnown() {
    return this.infiniteCache?.isLastRowIndexKnown() ?? !1;
  }
  setRowCount(e, t) {
    this.infiniteCache?.setRowCount(e, t);
  }
};
function DO(e) {
  Cr(e)?.refreshCache();
}
function TO(e) {
  Cr(e)?.purgeCache();
}
function MO(e) {
  return Cr(e)?.getRowCount();
}
var AO = class extends T {
  constructor() {
    super(...arguments), this.beanName = "rowNodeBlockLoader", this.activeBlockLoadsCount = 0, this.blocks = [], this.active = !0;
  }
  postConstruct() {
    this.maxConcurrentRequests = rx(this.gos);
    const e = this.gos.get("blockLoadDebounceMillis");
    e && e > 0 && (this.checkBlockToLoadDebounce = We(
      this,
      this.performCheckBlocksToLoad.bind(this),
      e
    ));
  }
  addBlock(e) {
    this.blocks.push(e), e.addEventListener("loadComplete", this.loadComplete.bind(this)), this.checkBlockToLoad();
  }
  removeBlock(e) {
    St(this.blocks, e);
  }
  destroy() {
    super.destroy(), this.active = !1;
  }
  loadComplete() {
    this.activeBlockLoadsCount--, this.checkBlockToLoad();
  }
  checkBlockToLoad() {
    this.checkBlockToLoadDebounce ? this.checkBlockToLoadDebounce() : this.performCheckBlocksToLoad();
  }
  performCheckBlocksToLoad() {
    if (!this.active)
      return;
    if (this.printCacheStatus(), this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
      Gi(this.gos, "RowNodeBlockLoader - checkBlockToLoad: max loads exceeded");
      return;
    }
    const e = this.maxConcurrentRequests != null ? this.maxConcurrentRequests - this.activeBlockLoadsCount : 1, t = this.blocks.filter((i) => i.state === "needsLoading").slice(0, e);
    this.activeBlockLoadsCount += t.length, t.forEach((i) => i.load()), this.printCacheStatus();
  }
  getBlockState() {
    const e = {};
    return this.blocks.forEach((t) => {
      const { id: i, state: s } = t.getBlockStateJson();
      e[i] = s;
    }), e;
  }
  printCacheStatus() {
    Gi(
      this.gos,
      `RowNodeBlockLoader - printCacheStatus: activePageLoadsCount = ${this.activeBlockLoadsCount}, blocks = ${JSON.stringify(this.getBlockState())}`
    );
  }
}, IO = {
  moduleName: "InfiniteRowModelCore",
  version: Y,
  rowModels: ["infinite"],
  beans: [EO, AO]
}, kO = {
  moduleName: "InfiniteRowModel",
  version: Y,
  apiFunctions: {
    refreshInfiniteCache: DO,
    purgeInfiniteCache: TO,
    getInfiniteRowCount: MO
  },
  dependsOn: [IO, q1]
}, LO = "↑", OO = "↓", VO = {
  tag: "span",
  children: [
    { tag: "span", ref: "eDelta", cls: "ag-value-change-delta" },
    { tag: "span", ref: "eValue", cls: "ag-value-change-value" }
  ]
}, GO = class extends pe {
  constructor() {
    super(VO), this.eValue = q, this.eDelta = q, this.refreshCount = 0;
  }
  init(e) {
    this.refresh(e, !0);
  }
  showDelta(e, t) {
    const i = Math.abs(t), s = e.formatValue(i), o = $(s) ? s : i, n = t >= 0, r = this.eDelta;
    n ? r.textContent = LO + o : r.textContent = OO + o, r.classList.toggle("ag-value-change-delta-up", n), r.classList.toggle("ag-value-change-delta-down", !n);
  }
  setTimerToRemoveDelta() {
    this.refreshCount++;
    const e = this.refreshCount;
    this.beans.frameworkOverrides.wrapIncoming(() => {
      window.setTimeout(() => {
        e === this.refreshCount && this.hideDeltaValue();
      }, 2e3);
    });
  }
  hideDeltaValue() {
    this.eValue.classList.remove("ag-value-change-value-highlight"), ct(this.eDelta);
  }
  refresh(e, t = !1) {
    const { value: i, valueFormatted: s } = e, { eValue: o, lastValue: n, beans: r } = this;
    if (i === n || ($(s) ? o.textContent = s : $(i) ? o.textContent = i : ct(o), r.filterManager?.isSuppressFlashingCellsBecauseFiltering()))
      return !1;
    const a = i && typeof i == "object" && "toNumber" in i ? i.toNumber() : i, l = n && typeof n == "object" && "toNumber" in n ? n.toNumber() : n;
    if (a === l)
      return !1;
    if (typeof a == "number" && typeof l == "number") {
      const c = a - l;
      this.showDelta(e, c);
    }
    return n && o.classList.add("ag-value-change-value-highlight"), t || this.setTimerToRemoveDelta(), this.lastValue = i, !0;
  }
}, HO = (
  /*css*/
  ".ag-value-slide-out{opacity:1}:where(.ag-ltr) .ag-value-slide-out{margin-right:5px;transition:opacity 3s,margin-right 3s}:where(.ag-rtl) .ag-value-slide-out{margin-left:5px;transition:opacity 3s,margin-left 3s}:where(.ag-ltr,.ag-rtl) .ag-value-slide-out{transition-timing-function:linear}.ag-value-slide-out-end{opacity:0}:where(.ag-ltr) .ag-value-slide-out-end{margin-right:10px}:where(.ag-rtl) .ag-value-slide-out-end{margin-left:10px}"
), BO = {
  tag: "span",
  children: [{ tag: "span", ref: "eCurrent", cls: "ag-value-slide-current" }]
}, NO = class extends pe {
  constructor() {
    super(BO), this.eCurrent = q, this.refreshCount = 0, this.registerCSS(HO);
  }
  init(e) {
    this.refresh(e, !0);
  }
  addSlideAnimation() {
    this.refreshCount++;
    const e = this.refreshCount;
    this.ePrevious && this.getGui().removeChild(this.ePrevious);
    const { beans: t, eCurrent: i } = this, s = Ae({ tag: "span", cls: "ag-value-slide-previous ag-value-slide-out" });
    this.ePrevious = s, s.textContent = i.textContent, this.getGui().insertBefore(s, i), t.frameworkOverrides.wrapIncoming(() => {
      window.setTimeout(() => {
        e === this.refreshCount && this.ePrevious.classList.add("ag-value-slide-out-end");
      }, 50), window.setTimeout(() => {
        e === this.refreshCount && (this.getGui().removeChild(this.ePrevious), this.ePrevious = null);
      }, 3e3);
    });
  }
  refresh(e, t = !1) {
    let i = e.value;
    if (Ce(i) && (i = ""), i === this.lastValue || this.beans.filterManager?.isSuppressFlashingCellsBecauseFiltering())
      return !1;
    t || this.addSlideAnimation(), this.lastValue = i;
    const s = this.eCurrent;
    return $(e.valueFormatted) ? s.textContent = e.valueFormatted : $(e.value) ? s.textContent = i : ct(s), !0;
  }
}, WO = class extends T {
  constructor() {
    super(...arguments), this.beanName = "cellFlashSvc", this.nextAnimationTime = null, this.nextAnimationCycle = null, this.animations = {
      highlight: /* @__PURE__ */ new Map(),
      "data-changed": /* @__PURE__ */ new Map()
    };
  }
  animateCell(e, t, i = this.beans.gos.get("cellFlashDuration"), s = this.beans.gos.get("cellFadeDuration")) {
    const o = this.animations[t];
    o.delete(e);
    const n = Date.now(), r = n + i, a = n + i + s, l = {
      phase: "flash",
      flashEndTime: r,
      fadeEndTime: a
    };
    o.set(e, l);
    const c = `ag-cell-${t}`, d = `${c}-animation`, {
      comp: u,
      eGui: { style: h }
    } = e;
    u.toggleCss(c, !0), u.toggleCss(d, !1), h.removeProperty("transition"), h.removeProperty("transition-delay"), this.nextAnimationTime && r + 15 < this.nextAnimationTime && (clearTimeout(this.nextAnimationCycle), this.nextAnimationCycle = null, this.nextAnimationTime = null), this.nextAnimationCycle || (this.beans.frameworkOverrides.wrapIncoming(() => {
      this.nextAnimationCycle = setTimeout(this.advanceAnimations.bind(this), i);
    }), this.nextAnimationTime = r);
  }
  advanceAnimations() {
    const e = Date.now();
    let t = null;
    for (const i of Object.keys(this.animations)) {
      const s = this.animations[i], o = `ag-cell-${i}`, n = `${o}-animation`;
      for (const [r, a] of s) {
        if (!r.isAlive() || !r.comp) {
          s.delete(r);
          continue;
        }
        const { phase: l, flashEndTime: c, fadeEndTime: d } = a, u = l === "flash" ? c : d;
        if (!(e + 15 >= u)) {
          t = Math.min(u, t ?? 1 / 0);
          continue;
        }
        const {
          comp: g,
          eGui: { style: p }
        } = r;
        switch (l) {
          case "flash":
            g.toggleCss(o, !1), g.toggleCss(n, !0), p.transition = `background-color ${d - c}ms`, p.transitionDelay = `${c - e}ms`, t = Math.min(d, t ?? 1 / 0), a.phase = "fade";
            break;
          case "fade":
            g.toggleCss(o, !1), g.toggleCss(n, !1), p.removeProperty("transition"), p.removeProperty("transition-delay"), s.delete(r);
            break;
        }
      }
    }
    t == null ? (this.nextAnimationTime = null, this.nextAnimationCycle = null) : t && (this.nextAnimationCycle = setTimeout(this.advanceAnimations.bind(this), t - e), this.nextAnimationTime = t);
  }
  onFlashCells(e, t) {
    if (!e.comp)
      return;
    const i = _F(e.cellPosition);
    t.cells[i] && this.animateCell(e, "highlight");
  }
  flashCell(e, t) {
    this.animateCell(e, "data-changed", t?.flashDuration, t?.fadeDuration);
  }
  destroy() {
    for (const e of Object.keys(this.animations))
      this.animations[e].clear();
  }
};
function zO(e, t = {}) {
  const { cellFlashSvc: i } = e;
  i && e.frameworkOverrides.wrapIncoming(() => {
    e.rowRenderer.getCellCtrls(t.rowNodes, t.columns).forEach((s) => i.flashCell(s, t));
  });
}
var _O = {
  moduleName: "HighlightChanges",
  version: Y,
  beans: [WO],
  userComponents: {
    agAnimateShowChangeCellRenderer: GO,
    agAnimateSlideCellRenderer: NO
  },
  apiFunctions: {
    flashCells: zO
  }
};
function UO(e) {
  return e.stateSvc?.getState() ?? {};
}
function jO(e, t, i) {
  return e.stateSvc?.setState(t, i);
}
function bh(e) {
  switch (e = { ...e }, e.version || (e.version = "32.1.0"), e.version) {
    case "32.1.0":
      e = $O(e);
  }
  return e.version = Y, e;
}
function $O(e) {
  return e.cellSelection = KO(e, "rangeSelection"), e;
}
function KO(e, t) {
  if (e && typeof e == "object")
    return e[t];
}
var YO = class extends T {
  constructor() {
    super(...arguments), this.beanName = "stateSvc", this.updateRowGroupExpansionStateTimer = 0, this.suppressEvents = !0, this.queuedUpdateSources = /* @__PURE__ */ new Set(), this.dispatchStateUpdateEventDebounced = We(this, () => this.dispatchQueuedStateUpdateEvents(), 0), this.onRowGroupOpenedDebounced = We(
      this,
      () => {
        this.updateCachedState("rowGroupExpansion", this.getRowGroupExpansionState());
      },
      0
    ), this.onRowSelectedDebounced = We(
      this,
      () => {
        this.staleStateKeys.delete("rowSelection"), this.updateCachedState("rowSelection", this.getRowSelectionState());
      },
      0
    ), this.staleStateKeys = /* @__PURE__ */ new Set();
  }
  postConstruct() {
    this.isClientSideRowModel = Oe(this.gos);
    const e = bh(this.gos.get("initialState") ?? {}), t = e.partialColumnState;
    delete e.partialColumnState, this.cachedState = e;
    const i = this.suppressEventsAndDispatchInitEvent.bind(this);
    this.beans.ctrlsSvc.whenReady(
      this,
      () => i(() => this.setupStateOnGridReady(e))
    );
    const [s, o, n] = this.addManagedEventListeners({
      newColumnsLoaded: ({ source: r }) => {
        r === "gridInitializing" && (s(), i(
          () => this.setupStateOnColumnsInitialised(e, !!t)
        ));
      },
      rowCountReady: () => {
        o?.(), i(() => this.setupStateOnRowCountReady(e));
      },
      firstDataRendered: () => {
        n?.(), i(() => this.setupStateOnFirstDataRendered(e));
      }
    });
  }
  destroy() {
    super.destroy(), clearTimeout(this.updateRowGroupExpansionStateTimer), this.queuedUpdateSources.clear();
  }
  getState() {
    return this.staleStateKeys.size && this.refreshStaleState(), this.cachedState;
  }
  setState(e, t) {
    const i = bh(e);
    delete i.partialColumnState, this.cachedState = i, this.startSuppressEvents();
    const s = "api", o = t ? new Set(t) : void 0;
    this.setGridReadyState(i, s, o), this.setColumnsInitialisedState(i, s, !1, o), this.setRowCountState(i, s, o), setTimeout(() => {
      this.isAlive() && this.setFirstDataRenderedState(i, s, o), this.stopSuppressEvents(s);
    });
  }
  setGridReadyState(e, t, i) {
    t === "api" && !i?.has("sideBar") && this.beans.sideBar?.comp?.setState(e.sideBar), this.updateCachedState("sideBar", this.getSideBarState());
  }
  setupStateOnGridReady(e) {
    this.setGridReadyState(e, "gridInitializing");
    const t = () => this.updateCachedState("sideBar", this.getSideBarState());
    this.addManagedEventListeners({
      toolPanelVisibleChanged: t,
      sideBarUpdated: t
    });
  }
  updateColumnAndGroupState() {
    this.updateColumnState([
      "aggregation",
      "columnOrder",
      "columnPinning",
      "columnSizing",
      "columnVisibility",
      "pivot",
      "rowGroup",
      "sort"
    ]), this.updateCachedState("columnGroup", this.getColumnGroupState());
  }
  setColumnsInitialisedState(e, t, i, s) {
    this.setColumnState(e, t, i, s), this.setColumnGroupState(e, t, s), this.updateColumnAndGroupState();
  }
  setupStateOnColumnsInitialised(e, t) {
    this.setColumnsInitialisedState(e, "gridInitializing", t);
    const i = (s) => () => this.updateColumnState([s]);
    this.addManagedEventListeners({
      columnValueChanged: i("aggregation"),
      columnMoved: i("columnOrder"),
      columnPinned: i("columnPinning"),
      columnResized: i("columnSizing"),
      columnVisible: i("columnVisibility"),
      columnPivotChanged: i("pivot"),
      columnPivotModeChanged: i("pivot"),
      columnRowGroupChanged: i("rowGroup"),
      sortChanged: i("sort"),
      newColumnsLoaded: this.updateColumnAndGroupState.bind(this),
      columnGroupOpened: () => this.updateCachedState("columnGroup", this.getColumnGroupState())
    });
  }
  setRowCountState(e, t, i) {
    const {
      filter: s,
      rowGroupExpansion: o,
      rowSelection: n,
      pagination: r
    } = e, a = (c, d) => !i?.has(c) && (d || t === "api");
    a("filter", s) && this.setFilterState(s), a("rowGroupExpansion", o) && this.setRowGroupExpansionState(o, t), a("rowSelection", n) && this.setRowSelectionState(n, t), a("pagination", r) && this.setPaginationState(r, t);
    const l = this.updateCachedState.bind(this);
    l("filter", this.getFilterState()), l("rowGroupExpansion", this.getRowGroupExpansionState()), l("rowSelection", this.getRowSelectionState()), l("pagination", this.getPaginationState());
  }
  setupStateOnRowCountReady(e) {
    this.setRowCountState(e, "gridInitializing");
    const t = this.updateCachedState.bind(this), i = () => {
      this.updateRowGroupExpansionStateTimer = 0, t("rowGroupExpansion", this.getRowGroupExpansionState());
    }, s = () => t("filter", this.getFilterState()), { gos: o, colFilter: n } = this.beans;
    this.addManagedEventListeners({
      filterChanged: s,
      rowGroupOpened: () => this.onRowGroupOpenedDebounced(),
      expandOrCollapseAll: i,
      // `groupDefaultExpanded`/`isGroupOpenByDefault` updates expansion state without an expansion event
      columnRowGroupChanged: i,
      rowDataUpdated: () => {
        (o.get("groupDefaultExpanded") !== 0 || o.get("isGroupOpenByDefault")) && (this.updateRowGroupExpansionStateTimer || (this.updateRowGroupExpansionStateTimer = setTimeout(i)));
      },
      selectionChanged: () => {
        this.staleStateKeys.add("rowSelection"), this.onRowSelectedDebounced();
      },
      paginationChanged: (r) => {
        (r.newPage || r.newPageSize) && t("pagination", this.getPaginationState());
      }
    }), n && this.addManagedListeners(n, {
      filterStateChanged: s
    });
  }
  setFirstDataRenderedState(e, t, i) {
    const {
      scroll: s,
      cellSelection: o,
      focusedCell: n,
      columnOrder: r,
      rowPinning: a
    } = e, l = (u, h) => !i?.has(u) && (h || t === "api");
    l("focusedCell", n) && this.setFocusedCellState(n), l("cellSelection", o) && this.setCellSelectionState(o), l("scroll", s) && this.setScrollState(s), l("rowPinning", a) && this.setRowPinningState(a), this.setColumnPivotState(!!r?.orderedColIds, t);
    const c = this.updateCachedState.bind(this);
    c("sideBar", this.getSideBarState()), c("focusedCell", this.getFocusedCellState());
    const d = this.getRangeSelectionState();
    c("rangeSelection", d), c("cellSelection", d), c("scroll", this.getScrollState());
  }
  setupStateOnFirstDataRendered(e) {
    this.setFirstDataRenderedState(e, "gridInitializing");
    const t = this.updateCachedState.bind(this);
    this.addManagedEventListeners({
      cellFocused: () => t("focusedCell", this.getFocusedCellState()),
      cellSelectionChanged: (i) => {
        if (i.finished) {
          const s = this.getRangeSelectionState();
          t("rangeSelection", s), t("cellSelection", s);
        }
      },
      bodyScrollEnd: () => t("scroll", this.getScrollState()),
      pinnedRowsChanged: () => t("rowPinning", this.getRowPinningState())
    });
  }
  getColumnState() {
    const e = this.beans;
    return $I(Kn(e), e.colModel.isPivotMode());
  }
  setColumnState(e, t, i, s) {
    const {
      sort: o,
      rowGroup: n,
      aggregation: r,
      pivot: a,
      columnPinning: l,
      columnVisibility: c,
      columnSizing: d,
      columnOrder: u
    } = e, h = (P, F) => !s?.has(P) && (F || t === "api"), g = {}, p = (P) => {
      let F = g[P];
      return F || (F = { colId: P }, g[P] = F, F);
    }, f = {}, m = h("sort", o);
    m && o?.sortModel.forEach(({ colId: P, sort: F }, N) => {
      const j = p(P);
      j.sort = F, j.sortIndex = N;
    }), (m || !i) && (f.sort = null, f.sortIndex = null);
    const C = h("rowGroup", n);
    C && n?.groupColIds.forEach((P, F) => {
      const N = p(P);
      N.rowGroup = !0, N.rowGroupIndex = F;
    }), (C || !i) && (f.rowGroup = null, f.rowGroupIndex = null);
    const v = h("aggregation", r);
    v && r?.aggregationModel.forEach(({ colId: P, aggFunc: F }) => {
      p(P).aggFunc = F;
    }), (v || !i) && (f.aggFunc = null);
    const w = h("pivot", a);
    w && (a?.pivotColIds.forEach((P, F) => {
      const N = p(P);
      N.pivot = !0, N.pivotIndex = F;
    }), this.gos.updateGridOptions({
      options: { pivotMode: !!a?.pivotMode },
      source: t
    })), (w || !i) && (f.pivot = null, f.pivotIndex = null);
    const y = h("columnPinning", l);
    y && (l?.leftColIds.forEach((P) => {
      p(P).pinned = "left";
    }), l?.rightColIds.forEach((P) => {
      p(P).pinned = "right";
    })), (y || !i) && (f.pinned = null);
    const S = h("columnVisibility", c);
    S && c?.hiddenColIds.forEach((P) => {
      p(P).hide = !0;
    }), (S || !i) && (f.hide = null);
    const x = h("columnSizing", d);
    x && d?.columnSizingModel.forEach(({ colId: P, flex: F, width: N }) => {
      const j = p(P);
      j.flex = F ?? null, j.width = N;
    }), (x || !i) && (f.flex = null);
    const D = u?.orderedColIds, M = !!D?.length && !s?.has("columnOrder"), k = M ? D.map((P) => p(P)) : Object.values(g);
    k.length && (this.columnStates = k, Ft(
      this.beans,
      {
        state: k,
        applyOrder: M,
        defaultState: f
      },
      t
    ));
  }
  setColumnPivotState(e, t) {
    const i = this.columnStates;
    this.columnStates = void 0;
    const s = this.columnGroupStates;
    this.columnGroupStates = void 0;
    const o = this.beans, { pivotResultCols: n, colGroupSvc: r } = o;
    if (n?.isPivotResultColsPresent()) {
      if (i) {
        const a = [];
        for (const l of i)
          n.getPivotResultCol(l.colId) && a.push(l);
        Ft(
          o,
          {
            state: a,
            applyOrder: e
          },
          t
        );
      }
      s && r?.setColumnGroupState(s, t);
    }
  }
  getColumnGroupState() {
    const e = this.beans.colGroupSvc;
    if (!e)
      return;
    const t = e.getColumnGroupState();
    return KI(t);
  }
  setColumnGroupState(e, t, i) {
    const s = this.beans.colGroupSvc;
    if (!s || i?.has("columnGroup") || t !== "api" && !Object.prototype.hasOwnProperty.call(e, "columnGroup"))
      return;
    const o = new Set(e.columnGroup?.openColumnGroupIds), r = s.getColumnGroupState().map(({ groupId: a }) => {
      const l = o.has(a);
      return l && o.delete(a), {
        groupId: a,
        open: l
      };
    });
    o.forEach((a) => {
      r.push({
        groupId: a,
        open: !0
      });
    }), r.length && (this.columnGroupStates = r), s.setColumnGroupState(r, t);
  }
  getFilterState() {
    const e = this.beans.filterManager;
    let t = e?.getFilterModel();
    t && Object.keys(t).length === 0 && (t = void 0);
    const i = e?.getFilterState(), s = e?.getAdvFilterModel() ?? void 0;
    return t || s || i ? { filterModel: t, columnFilterState: i, advancedFilterModel: s } : void 0;
  }
  setFilterState(e) {
    const t = this.beans.filterManager, { filterModel: i, columnFilterState: s, advancedFilterModel: o } = e ?? {
      filterModel: null,
      columnFilterState: null,
      advancedFilterModel: null
    };
    (i !== void 0 || s !== void 0) && t?.setFilterState(i ?? null, s ?? null, "columnFilter"), o !== void 0 && t?.setAdvFilterModel(o ?? null, "advancedFilter");
  }
  getRangeSelectionState() {
    const e = this.beans.rangeSvc?.getCellRanges().map((t) => {
      const { id: i, type: s, startRow: o, endRow: n, columns: r, startColumn: a } = t;
      return {
        id: i,
        type: s,
        startRow: o,
        endRow: n,
        colIds: r.map((l) => l.getColId()),
        startColId: a.getColId()
      };
    });
    return e?.length ? { cellRanges: e } : void 0;
  }
  setCellSelectionState(e) {
    const { gos: t, rangeSvc: i, colModel: s, visibleCols: o } = this.beans;
    if (!hi(t) || !i)
      return;
    const n = [];
    e?.cellRanges.forEach((r) => {
      const a = [];
      if (r.colIds.forEach((c) => {
        const d = s.getCol(c);
        d && a.push(d);
      }), !a.length)
        return;
      let l = s.getCol(r.startColId);
      if (!l) {
        const c = o.allCols, d = new Set(a);
        l = c.find((u) => d.has(u));
      }
      n.push({
        ...r,
        columns: a,
        startColumn: l
      });
    }), i.setCellRanges(n);
  }
  getScrollState() {
    if (!this.isClientSideRowModel)
      return;
    const e = this.beans.ctrlsSvc.getScrollFeature(), { left: t } = e?.getHScrollPosition() ?? { left: 0 }, { top: i } = e?.getVScrollPosition() ?? { top: 0 };
    return i || t ? {
      top: i,
      left: t
    } : void 0;
  }
  setScrollState(e) {
    if (!this.isClientSideRowModel)
      return;
    const { top: t, left: i } = e ?? { top: 0, left: 0 }, { frameworkOverrides: s, rowRenderer: o, animationFrameSvc: n, ctrlsSvc: r } = this.beans;
    s.wrapIncoming(() => {
      r.get("center").setCenterViewportScrollLeft(i), r.getScrollFeature()?.setVerticalScrollPosition(t), o.redraw({ afterScroll: !0 }), n?.flushAllFrames();
    });
  }
  getSideBarState() {
    return this.beans.sideBar?.comp?.getState();
  }
  getFocusedCellState() {
    if (!this.isClientSideRowModel)
      return;
    const e = this.beans.focusSvc.getFocusedCell();
    if (e) {
      const { column: t, rowIndex: i, rowPinned: s } = e;
      return {
        colId: t.getColId(),
        rowIndex: i,
        rowPinned: s
      };
    }
  }
  setFocusedCellState(e) {
    if (!this.isClientSideRowModel)
      return;
    const { focusSvc: t, colModel: i } = this.beans;
    if (!e) {
      t.clearFocusedCell();
      return;
    }
    const { colId: s, rowIndex: o, rowPinned: n } = e;
    t.setFocusedCell({
      column: i.getCol(s),
      rowIndex: o,
      rowPinned: n,
      forceBrowserFocus: !0,
      preventScrollOnBrowserFocus: !0
    });
  }
  getPaginationState() {
    const { pagination: e, gos: t } = this.beans;
    if (!e)
      return;
    const i = e.getCurrentPage(), s = t.get("paginationAutoPageSize") ? void 0 : e.getPageSize();
    if (!(!i && !s))
      return { page: i, pageSize: s };
  }
  setPaginationState(e, t) {
    const { pagination: i, gos: s } = this.beans;
    if (!i)
      return;
    const { pageSize: o, page: n } = e ?? { page: 0, pageSize: s.get("paginationPageSize") }, r = t === "gridInitializing";
    o && !s.get("paginationAutoPageSize") && i.setPageSize(o, r ? "initialState" : "pageSizeSelector"), typeof n == "number" && (r ? i.setPage(n) : i.goToPage(n));
  }
  getRowSelectionState() {
    const e = this.beans.selectionSvc;
    if (!e)
      return;
    const t = e.getSelectionState();
    return !t || !Array.isArray(t) && (t.selectAll === !1 || t.selectAllChildren === !1) && !t?.toggledNodes?.length ? void 0 : t;
  }
  setRowSelectionState(e, t) {
    this.beans.selectionSvc?.setSelectionState(e, t, t === "api");
  }
  getRowGroupExpansionState() {
    const { expansionSvc: e, rowModel: t } = this.beans;
    if (!e)
      return;
    const i = [];
    return t.forEachNode(({ expanded: s, id: o }) => {
      s && o && i.push(o);
    }), i.length ? {
      expandedRowGroupIds: i
    } : void 0;
  }
  getRowPinningState() {
    return this.beans.pinnedRowModel?.getPinnedState();
  }
  setRowPinningState(e) {
    const t = this.beans.pinnedRowModel;
    e ? t?.setPinnedState(e) : t?.reset();
  }
  setRowGroupExpansionState(e, t) {
    const i = this.beans.expansionSvc;
    if (!i)
      return;
    const s = e?.expandedRowGroupIds ?? [];
    let o;
    if (t === "api") {
      const n = this.getRowGroupExpansionState()?.expandedRowGroupIds;
      if (n?.length) {
        const r = new Set(n);
        for (const a of s)
          r.delete(a);
        o = Array.from(r);
      }
    }
    i.expandRows(s, o);
  }
  updateColumnState(e) {
    const t = this.getColumnState();
    let i = !1;
    const s = this.cachedState;
    for (const o of Object.keys(t)) {
      const n = t[o];
      mo(n, s[o]) || (i = !0);
    }
    this.cachedState = {
      ...s,
      ...t
    }, i && this.dispatchStateUpdateEvent(e);
  }
  updateCachedState(e, t) {
    const i = this.cachedState[e];
    this.setCachedStateValue(e, t), mo(t, i) || this.dispatchStateUpdateEvent([e]);
  }
  setCachedStateValue(e, t) {
    this.cachedState = {
      ...this.cachedState,
      [e]: t
    };
  }
  refreshStaleState() {
    const e = this.staleStateKeys;
    e.forEach((t) => {
      switch (t) {
        case "rowSelection":
          this.setCachedStateValue(t, this.getRowSelectionState());
          break;
      }
    }), e.clear();
  }
  dispatchStateUpdateEvent(e) {
    this.suppressEvents || (e.forEach((t) => this.queuedUpdateSources.add(t)), this.dispatchStateUpdateEventDebounced());
  }
  dispatchQueuedStateUpdateEvents() {
    const e = this.queuedUpdateSources, t = Array.from(e);
    e.clear(), this.eventSvc.dispatchEvent({
      type: "stateUpdated",
      sources: t,
      state: this.cachedState
    });
  }
  startSuppressEvents() {
    this.suppressEvents = !0, this.beans.colAnimation?.setSuppressAnimation(!0);
  }
  stopSuppressEvents(e) {
    setTimeout(() => {
      this.suppressEvents = !1, this.queuedUpdateSources.clear(), this.isAlive() && (this.beans.colAnimation?.setSuppressAnimation(!1), this.dispatchStateUpdateEvent([e]));
    });
  }
  suppressEventsAndDispatchInitEvent(e) {
    this.startSuppressEvents(), e(), this.stopSuppressEvents("gridInitializing");
  }
}, qO = {
  moduleName: "GridState",
  version: Y,
  beans: [YO],
  apiFunctions: {
    getState: UO,
    setState: jO
  }
};
function XO(e) {
  return e.rowModel.isLastRowIndexKnown();
}
function ZO(e) {
  return e.pagination?.getPageSize() ?? 100;
}
function QO(e) {
  return e.pagination?.getCurrentPage() ?? 0;
}
function JO(e) {
  return e.pagination?.getTotalPages() ?? 1;
}
function eV(e) {
  return e.pagination ? e.pagination.getMasterRowCount() : e.rowModel.getRowCount();
}
function tV(e) {
  e.pagination?.goToNextPage();
}
function iV(e) {
  e.pagination?.goToPreviousPage();
}
function sV(e) {
  e.pagination?.goToFirstPage();
}
function oV(e) {
  e.pagination?.goToLastPage();
}
function nV(e, t) {
  e.pagination?.goToPage(t);
}
var rV = class extends T {
  constructor() {
    super(...arguments), this.beanName = "paginationAutoPageSizeSvc";
  }
  postConstruct() {
    this.beans.ctrlsSvc.whenReady(this, (e) => {
      this.centerRowsCtrl = e.center;
      const t = this.checkPageSize.bind(this);
      this.addManagedEventListeners({
        bodyHeightChanged: t,
        scrollVisibilityChanged: t
      }), this.addManagedPropertyListener("paginationAutoPageSize", this.onPaginationAutoSizeChanged.bind(this)), this.checkPageSize();
    });
  }
  notActive() {
    return !this.gos.get("paginationAutoPageSize") || this.centerRowsCtrl == null;
  }
  onPaginationAutoSizeChanged() {
    this.notActive() ? this.beans.pagination.unsetAutoCalculatedPageSize() : this.checkPageSize();
  }
  checkPageSize() {
    if (this.notActive())
      return;
    const e = this.centerRowsCtrl.viewportSizeFeature.getBodyHeight();
    if (e > 0) {
      const t = this.beans, i = () => {
        const s = Math.max(Ai(t), 1), o = Math.floor(e / s);
        t.pagination.setPageSize(o, "autoCalculated");
      };
      this.isBodyRendered ? We(this, i, 50)() : (i(), this.isBodyRendered = !0);
    } else
      this.isBodyRendered = !1;
  }
}, js = "paginationPageSizeSelector", aV = { tag: "span", cls: "ag-paging-page-size" }, lV = class extends pe {
  constructor() {
    super(aV), this.hasEmptyOption = !1, this.handlePageSizeItemSelected = () => {
      if (!this.selectPageSizeComp)
        return;
      const e = this.selectPageSizeComp.getValue();
      if (!e)
        return;
      const t = Number(e);
      isNaN(t) || t < 1 || t === this.pagination.getPageSize() || (this.pagination.setPageSize(t, "pageSizeSelector"), this.hasEmptyOption && this.toggleSelectDisplay(!0), this.selectPageSizeComp.getFocusableElement().focus());
    };
  }
  wireBeans(e) {
    this.pagination = e.pagination;
  }
  postConstruct() {
    this.addManagedPropertyListener(js, () => {
      this.onPageSizeSelectorValuesChange();
    }), this.addManagedEventListeners({ paginationChanged: (e) => this.handlePaginationChanged(e) });
  }
  handlePaginationChanged(e) {
    if (!this.selectPageSizeComp || !e?.newPageSize)
      return;
    const t = this.pagination.getPageSize();
    this.getPageSizeSelectorValues().includes(t) ? this.selectPageSizeComp.setValue(t.toString()) : this.hasEmptyOption ? this.selectPageSizeComp.setValue("") : this.toggleSelectDisplay(!0);
  }
  toggleSelectDisplay(e) {
    this.selectPageSizeComp && !e && this.reset(), e && (this.reloadPageSizesSelector(), this.selectPageSizeComp);
  }
  reset() {
    ct(this.getGui()), this.selectPageSizeComp && (this.selectPageSizeComp = this.destroyBean(this.selectPageSizeComp));
  }
  onPageSizeSelectorValuesChange() {
    this.selectPageSizeComp && this.shouldShowPageSizeSelector() && this.reloadPageSizesSelector();
  }
  shouldShowPageSizeSelector() {
    return this.gos.get("pagination") && !this.gos.get("suppressPaginationPanel") && !this.gos.get("paginationAutoPageSize") && this.gos.get(js) !== !1;
  }
  reloadPageSizesSelector() {
    const e = this.getPageSizeSelectorValues(), t = this.pagination.getPageSize(), i = !t || !e.includes(t);
    if (i) {
      const o = this.gos.exists("paginationPageSize"), n = this.gos.get(js) !== !0;
      B(94, { pageSizeSet: o, pageSizesSet: n, pageSizeOptions: e, paginationPageSizeOption: t }), n || B(95, { paginationPageSizeOption: t, paginationPageSizeSelector: js }), e.unshift("");
    }
    const s = String(i ? "" : t);
    this.selectPageSizeComp ? (Yi(this.pageSizeOptions, e) || (this.selectPageSizeComp.clearOptions().addOptions(this.createPageSizeSelectOptions(e)), this.pageSizeOptions = e), this.selectPageSizeComp.setValue(s, !0)) : this.createPageSizeSelectorComp(e, s), this.hasEmptyOption = i;
  }
  createPageSizeSelectOptions(e) {
    return e.map((t) => ({
      value: String(t)
    }));
  }
  createPageSizeSelectorComp(e, t) {
    const i = this.getLocaleTextFunc(), s = i("pageSizeSelectorLabel", "Page Size:"), o = i("ariaPageSizeSelectorLabel", "Page Size");
    this.selectPageSizeComp = this.createManagedBean(new Ac()).addOptions(this.createPageSizeSelectOptions(e)).setValue(t).setAriaLabel(o).setLabel(s).onValueChange(() => this.handlePageSizeItemSelected()), this.appendChild(this.selectPageSizeComp);
  }
  getPageSizeSelectorValues() {
    const e = [20, 50, 100], t = this.gos.get(js);
    return !Array.isArray(t) || !t?.length ? e : [...t].sort((i, s) => i - s);
  }
  destroy() {
    this.toggleSelectDisplay(!1), super.destroy();
  }
}, cV = {
  selector: "AG-PAGE-SIZE-SELECTOR",
  component: lV
}, dV = (
  /*css*/
  ".ag-paging-panel{align-items:center;border-top:var(--ag-footer-row-border);display:flex;gap:calc(var(--ag-spacing)*4);height:var(--ag-pagination-panel-height);justify-content:flex-end;padding:0 var(--ag-cell-horizontal-padding)}:where(.ag-paging-page-size) .ag-wrapper{min-width:50px}.ag-paging-page-summary-panel{align-items:center;display:flex;gap:var(--ag-cell-widget-spacing);.ag-disabled &{pointer-events:none}}.ag-paging-button{cursor:pointer;position:relative;&.ag-disabled{cursor:default;opacity:.5}}.ag-paging-number,.ag-paging-row-summary-panel-number{font-weight:500}"
), uV = class extends M0 {
  constructor() {
    super(), this.btFirst = q, this.btPrevious = q, this.btNext = q, this.btLast = q, this.lbRecordCount = q, this.lbFirstRowOnPage = q, this.lbLastRowOnPage = q, this.lbCurrent = q, this.lbTotal = q, this.pageSizeComp = q, this.previousAndFirstButtonsDisabled = !1, this.nextButtonDisabled = !1, this.lastButtonDisabled = !1, this.areListenersSetup = !1, this.allowFocusInnerElement = !1, this.registerCSS(dV);
  }
  wireBeans(e) {
    this.rowModel = e.rowModel, this.pagination = e.pagination, this.ariaAnnounce = e.ariaAnnounce;
  }
  postConstruct() {
    const e = this.gos.get("enableRtl");
    this.setTemplate(this.getTemplate(), [cV]);
    const { btFirst: t, btPrevious: i, btNext: s, btLast: o } = this;
    this.activateTabIndex([t, i, s, o]), t.insertAdjacentElement("afterbegin", Ct(e ? "last" : "first", this.beans)), i.insertAdjacentElement("afterbegin", Ct(e ? "next" : "previous", this.beans)), s.insertAdjacentElement("afterbegin", Ct(e ? "previous" : "next", this.beans)), o.insertAdjacentElement("afterbegin", Ct(e ? "first" : "last", this.beans)), this.addManagedPropertyListener("pagination", this.onPaginationChanged.bind(this)), this.addManagedPropertyListener("suppressPaginationPanel", this.onPaginationChanged.bind(this)), this.addManagedPropertyListeners(
      ["paginationPageSizeSelector", "paginationAutoPageSize", "suppressPaginationPanel"],
      () => this.onPageSizeRelatedOptionsChange()
    ), this.pageSizeComp.toggleSelectDisplay(this.pageSizeComp.shouldShowPageSizeSelector()), this.initialiseTabGuard({
      // prevent tab guard default logic
      onTabKeyDown: () => {
      },
      focusInnerElement: (n) => this.allowFocusInnerElement ? this.tabGuardFeature.getTabGuardCtrl().focusInnerElement(n) : hP(this.beans, n),
      forceFocusOutWhenTabGuardsAreEmpty: !0
    }), this.onPaginationChanged();
  }
  setAllowFocus(e) {
    this.allowFocusInnerElement = e;
  }
  onPaginationChanged() {
    const t = this.gos.get("pagination") && !this.gos.get("suppressPaginationPanel");
    this.setDisplayed(t), t && (this.setupListeners(), this.enableOrDisableButtons(), this.updateLabels(), this.onPageSizeRelatedOptionsChange());
  }
  onPageSizeRelatedOptionsChange() {
    this.pageSizeComp.toggleSelectDisplay(this.pageSizeComp.shouldShowPageSizeSelector());
  }
  setupListeners() {
    this.areListenersSetup || (this.addManagedEventListeners({ paginationChanged: this.onPaginationChanged.bind(this) }), [
      { el: this.btFirst, fn: this.onBtFirst.bind(this) },
      { el: this.btPrevious, fn: this.onBtPrevious.bind(this) },
      { el: this.btNext, fn: this.onBtNext.bind(this) },
      { el: this.btLast, fn: this.onBtLast.bind(this) }
    ].forEach((e) => {
      const { el: t, fn: i } = e;
      this.addManagedListeners(t, {
        click: i,
        keydown: (s) => {
          (s.key === E.ENTER || s.key === E.SPACE) && (s.preventDefault(), i());
        }
      });
    }), uP(this.beans, this, this.getGui()), this.areListenersSetup = !0);
  }
  onBtFirst() {
    this.previousAndFirstButtonsDisabled || this.pagination.goToFirstPage();
  }
  formatNumber(e) {
    const t = this.gos.getCallback("paginationNumberFormatter");
    return t ? t({ value: e }) : tk(e, this.getLocaleTextFunc.bind(this));
  }
  getTemplate() {
    const e = this.getLocaleTextFunc(), t = `ag-${this.getCompId()}`;
    return {
      tag: "div",
      cls: "ag-paging-panel ag-unselectable",
      attrs: { id: `${t}` },
      children: [
        {
          tag: "ag-page-size-selector",
          ref: "pageSizeComp"
        },
        {
          tag: "span",
          cls: "ag-paging-row-summary-panel",
          children: [
            {
              tag: "span",
              ref: "lbFirstRowOnPage",
              cls: "ag-paging-row-summary-panel-number",
              attrs: { id: `${t}-first-row` }
            },
            { tag: "span", attrs: { id: `${t}-to` }, children: e("to", "to") },
            {
              tag: "span",
              ref: "lbLastRowOnPage",
              cls: "ag-paging-row-summary-panel-number",
              attrs: { id: `${t}-last-row` }
            },
            { tag: "span", attrs: { id: `${t}-of` }, children: e("of", "of") },
            {
              tag: "span",
              ref: "lbRecordCount",
              cls: "ag-paging-row-summary-panel-number",
              attrs: { id: `${t}-row-count` }
            }
          ]
        },
        {
          tag: "span",
          cls: "ag-paging-page-summary-panel",
          role: "presentation",
          children: [
            {
              tag: "div",
              ref: "btFirst",
              cls: "ag-button ag-paging-button",
              role: "button",
              attrs: { "aria-label": e("firstPage", "First Page") }
            },
            {
              tag: "div",
              ref: "btPrevious",
              cls: "ag-button ag-paging-button",
              role: "button",
              attrs: { "aria-label": e("previousPage", "Previous Page") }
            },
            {
              tag: "span",
              cls: "ag-paging-description",
              children: [
                {
                  tag: "span",
                  attrs: {
                    id: `${t}-start-page`
                  },
                  children: e("page", "Page")
                },
                {
                  tag: "span",
                  ref: "lbCurrent",
                  cls: "ag-paging-number",
                  attrs: { id: `${t}-start-page-number` }
                },
                {
                  tag: "span",
                  attrs: {
                    id: `${t}-of-page`
                  },
                  children: e("of", "of")
                },
                {
                  tag: "span",
                  ref: "lbTotal",
                  cls: "ag-paging-number",
                  attrs: { id: `${t}-of-page-number` }
                }
              ]
            },
            {
              tag: "div",
              ref: "btNext",
              cls: "ag-button ag-paging-button",
              role: "button",
              attrs: { "aria-label": e("nextPage", "Next Page") }
            },
            {
              tag: "div",
              ref: "btLast",
              cls: "ag-button ag-paging-button",
              role: "button",
              attrs: { "aria-label": e("lastPage", "Last Page") }
            }
          ]
        }
      ]
    };
  }
  onBtNext() {
    this.nextButtonDisabled || this.pagination.goToNextPage();
  }
  onBtPrevious() {
    this.previousAndFirstButtonsDisabled || this.pagination.goToPreviousPage();
  }
  onBtLast() {
    this.lastButtonDisabled || this.pagination.goToLastPage();
  }
  enableOrDisableButtons() {
    const e = this.pagination.getCurrentPage(), t = this.rowModel.isLastRowIndexKnown(), i = this.pagination.getTotalPages();
    this.previousAndFirstButtonsDisabled = e === 0, this.toggleButtonDisabled(this.btFirst, this.previousAndFirstButtonsDisabled), this.toggleButtonDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);
    const s = this.isZeroPagesToDisplay(), o = e === i - 1;
    this.nextButtonDisabled = o || s, this.lastButtonDisabled = !t || s || e === i - 1, this.toggleButtonDisabled(this.btNext, this.nextButtonDisabled), this.toggleButtonDisabled(this.btLast, this.lastButtonDisabled);
  }
  toggleButtonDisabled(e, t) {
    TR(e, t), e.classList.toggle("ag-disabled", t);
  }
  isZeroPagesToDisplay() {
    const e = this.rowModel.isLastRowIndexKnown(), t = this.pagination.getTotalPages();
    return e && t === 0;
  }
  updateLabels() {
    const e = this.rowModel.isLastRowIndexKnown(), t = this.pagination.getTotalPages(), i = this.pagination.getMasterRowCount(), s = e ? i : null, o = this.pagination.getCurrentPage(), n = this.pagination.getPageSize();
    let r, a;
    this.isZeroPagesToDisplay() ? r = a = 0 : (r = n * o + 1, a = r + n - 1, e && a > s && (a = s));
    const l = r + n - 1, c = !e && i < l, d = this.formatNumber(r);
    this.lbFirstRowOnPage.textContent = d;
    let u;
    const h = this.getLocaleTextFunc();
    c ? u = h("pageLastRowUnknown", "?") : u = this.formatNumber(a), this.lbLastRowOnPage.textContent = u;
    const p = t > 0 ? o + 1 : 0, f = this.formatNumber(p);
    this.lbCurrent.textContent = f;
    let m, C;
    if (e)
      m = this.formatNumber(t), C = this.formatNumber(s);
    else {
      const v = h("more", "more");
      m = v, C = v;
    }
    this.lbTotal.textContent = m, this.lbRecordCount.textContent = C, this.announceAriaStatus(d, u, C, f, m);
  }
  announceAriaStatus(e, t, i, s, o) {
    const n = this.getLocaleTextFunc(), r = n("page", "Page"), a = n("to", "to"), l = n("of", "of"), c = `${e} ${a} ${t} ${l} ${i}`, d = `${r} ${s} ${l} ${o}`;
    c !== this.ariaRowStatus && (this.ariaRowStatus = c, this.ariaAnnounce?.announceValue(c, "paginationRow")), d !== this.ariaPageStatus && (this.ariaPageStatus = d, this.ariaAnnounce?.announceValue(d, "paginationPage"));
  }
}, hV = {
  selector: "AG-PAGINATION",
  component: uV
}, gV = class extends T {
  constructor() {
    super(...arguments), this.beanName = "pagination", this.currentPage = 0, this.topDisplayedRowIndex = 0, this.bottomDisplayedRowIndex = 0, this.masterRowCount = 0;
  }
  postConstruct() {
    const e = this.gos;
    this.active = e.get("pagination"), this.pageSizeFromGridOptions = e.get("paginationPageSize"), this.paginateChildRows = this.isPaginateChildRows(), this.addManagedPropertyListener("pagination", this.onPaginationGridOptionChanged.bind(this)), this.addManagedPropertyListener("paginationPageSize", this.onPageSizeGridOptionChanged.bind(this));
  }
  getPaginationSelector() {
    return hV;
  }
  isPaginateChildRows() {
    const e = this.gos;
    return e.get("groupHideParentOfSingleChild") || // following two properties deprecated v32.3.0
    e.get("groupRemoveSingleChildren") || e.get("groupRemoveLowestSingleChildren") ? !0 : e.get("paginateChildRows");
  }
  onPaginationGridOptionChanged() {
    this.active = this.gos.get("pagination"), this.calculatePages(), this.dispatchPaginationChangedEvent({ keepRenderedRows: !0 });
  }
  onPageSizeGridOptionChanged() {
    this.setPageSize(this.gos.get("paginationPageSize"), "gridOptions");
  }
  goToPage(e) {
    const t = this.currentPage;
    if (!this.active || t === e || typeof t != "number")
      return;
    const { editSvc: i } = this.beans;
    i?.isEditing() && (i.isBatchEditing() ? i.cleanupEditors() : i.stopEditing(void 0, { source: "api" })), this.currentPage = e, this.calculatePages(), this.dispatchPaginationChangedEvent({ newPage: !0 });
  }
  goToPageWithIndex(e) {
    if (!this.active)
      return;
    let t = e;
    this.paginateChildRows || (t = this.beans.rowModel.getTopLevelIndexFromDisplayedIndex?.(e) ?? e), this.goToPage(Math.floor(t / this.pageSize));
  }
  isRowInPage(e) {
    return this.active ? e >= this.topDisplayedRowIndex && e <= this.bottomDisplayedRowIndex : !0;
  }
  getCurrentPage() {
    return this.currentPage;
  }
  goToNextPage() {
    this.goToPage(this.currentPage + 1);
  }
  goToPreviousPage() {
    this.goToPage(this.currentPage - 1);
  }
  goToFirstPage() {
    this.goToPage(0);
  }
  goToLastPage() {
    const e = this.beans.rowModel.getRowCount(), t = Math.floor(e / this.pageSize);
    this.goToPage(t);
  }
  getPageSize() {
    return this.pageSize;
  }
  getTotalPages() {
    return this.totalPages;
  }
  /** This is only for state setting before data has been loaded */
  setPage(e) {
    this.currentPage = e;
  }
  get pageSize() {
    return $(this.pageSizeAutoCalculated) && this.gos.get("paginationAutoPageSize") ? this.pageSizeAutoCalculated : $(this.pageSizeFromPageSizeSelector) ? this.pageSizeFromPageSizeSelector : $(this.pageSizeFromInitialState) ? this.pageSizeFromInitialState : $(this.pageSizeFromGridOptions) ? this.pageSizeFromGridOptions : this.defaultPageSize;
  }
  calculatePages() {
    this.active ? this.paginateChildRows ? this.calculatePagesAllRows() : this.calculatePagesMasterRowsOnly() : this.calculatedPagesNotActive(), this.beans.pageBounds.calculateBounds(this.topDisplayedRowIndex, this.bottomDisplayedRowIndex);
  }
  unsetAutoCalculatedPageSize() {
    if (this.pageSizeAutoCalculated === void 0)
      return;
    const e = this.pageSizeAutoCalculated;
    this.pageSizeAutoCalculated = void 0, this.pageSize !== e && (this.calculatePages(), this.dispatchPaginationChangedEvent({ newPageSize: !0 }));
  }
  setPageSize(e, t) {
    const i = this.pageSize;
    switch (t) {
      case "autoCalculated":
        this.pageSizeAutoCalculated = e;
        break;
      case "pageSizeSelector":
        this.pageSizeFromPageSizeSelector = e, this.currentPage !== 0 && this.goToFirstPage();
        break;
      case "initialState":
        this.pageSizeFromInitialState = e;
        break;
      case "gridOptions":
        this.pageSizeFromGridOptions = e, this.pageSizeFromInitialState = void 0, this.pageSizeFromPageSizeSelector = void 0, this.currentPage !== 0 && this.goToFirstPage();
        break;
    }
    i !== this.pageSize && (this.calculatePages(), this.dispatchPaginationChangedEvent({ newPageSize: !0, keepRenderedRows: !0 }));
  }
  setZeroRows() {
    this.masterRowCount = 0, this.topDisplayedRowIndex = 0, this.bottomDisplayedRowIndex = -1, this.currentPage = 0, this.totalPages = 0;
  }
  adjustCurrentPageIfInvalid() {
    const e = this.totalPages;
    this.currentPage >= e && (this.currentPage = e - 1);
    const t = this.currentPage;
    (!isFinite(t) || isNaN(t) || t < 0) && (this.currentPage = 0);
  }
  calculatePagesMasterRowsOnly() {
    const e = this.beans.rowModel, t = e.getTopLevelRowCount();
    if (this.masterRowCount = t, t <= 0) {
      this.setZeroRows();
      return;
    }
    const i = this.pageSize, s = t - 1;
    this.totalPages = Math.floor(s / i) + 1, this.adjustCurrentPageIfInvalid();
    const o = this.currentPage, n = i * o;
    let r = i * (o + 1) - 1;
    if (r > s && (r = s), this.topDisplayedRowIndex = e.getTopLevelRowDisplayedIndex(n), r === s)
      this.bottomDisplayedRowIndex = e.getRowCount() - 1;
    else {
      const a = e.getTopLevelRowDisplayedIndex(r + 1);
      this.bottomDisplayedRowIndex = a - 1;
    }
  }
  getMasterRowCount() {
    return this.masterRowCount;
  }
  calculatePagesAllRows() {
    const e = this.beans.rowModel.getRowCount();
    if (this.masterRowCount = e, e === 0) {
      this.setZeroRows();
      return;
    }
    const { pageSize: t, currentPage: i } = this, s = e - 1;
    this.totalPages = Math.floor(s / t) + 1, this.adjustCurrentPageIfInvalid(), this.topDisplayedRowIndex = t * i, this.bottomDisplayedRowIndex = t * (i + 1) - 1, this.bottomDisplayedRowIndex > s && (this.bottomDisplayedRowIndex = s);
  }
  calculatedPagesNotActive() {
    this.setPageSize(void 0, "autoCalculated"), this.totalPages = 1, this.currentPage = 0, this.topDisplayedRowIndex = 0, this.bottomDisplayedRowIndex = this.beans.rowModel.getRowCount() - 1;
  }
  dispatchPaginationChangedEvent(e) {
    const { keepRenderedRows: t = !1, newPage: i = !1, newPageSize: s = !1 } = e;
    this.eventSvc.dispatchEvent({
      type: "paginationChanged",
      animate: !1,
      newData: !1,
      newPage: i,
      newPageSize: s,
      keepRenderedRows: t
    });
  }
}, pV = {
  moduleName: "Pagination",
  version: Y,
  beans: [gV, rV],
  icons: {
    // "go to first" button in pagination controls
    first: "first",
    // "go to previous" button in pagination controls
    previous: "previous",
    // "go to next" button in pagination controls
    next: "next",
    // "go to last" button in pagination controls
    last: "last"
  },
  apiFunctions: {
    paginationIsLastPageFound: XO,
    paginationGetPageSize: ZO,
    paginationGetCurrentPage: QO,
    paginationGetTotalPages: JO,
    paginationGetRowCount: eV,
    paginationGoToNextPage: tV,
    paginationGoToPreviousPage: iV,
    paginationGoToFirstPage: sV,
    paginationGoToLastPage: oV,
    paginationGoToPage: nV
  },
  dependsOn: [vr]
};
function fV(e, t = {}) {
  const i = t ? t.rowNodes : void 0;
  e.frameworkOverrides.wrapIncoming(() => e.rowRenderer.redrawRows(i));
}
function TC(e, t, i, s, o) {
  t && (s && t.parent && t.parent.level !== -1 && TC(e, t.parent, i, s, o), t.setExpanded(i, void 0, o));
}
function mV(e, t) {
  return e.rowModel.getRowNode(t);
}
function CV(e, t, i, s) {
  e.rowRenderer.addRenderedRowListener(t, i, s);
}
function vV(e) {
  return e.rowRenderer.getRenderedNodes();
}
function wV(e, t, i) {
  e.rowModel.forEachNode(t, i);
}
function SV(e) {
  return e.rowRenderer.firstRenderedRow;
}
function yV(e) {
  return e.rowRenderer.lastRenderedRow;
}
function bV(e, t) {
  return e.rowModel.getRow(t);
}
function RV(e) {
  return e.rowModel.getRowCount();
}
var xV = {
  moduleName: "RowApi",
  version: Y,
  apiFunctions: {
    redrawRows: fV,
    setRowNodeExpanded: TC,
    getRowNode: mV,
    addRenderedRowListener: CV,
    getRenderedNodes: vV,
    forEachNode: wV,
    getFirstDisplayedRowIndex: SV,
    getLastDisplayedRowIndex: yV,
    getDisplayedRowAtIndex: bV,
    getDisplayedRowCount: RV
  }
}, FV = {
  moduleName: "ScrollApi",
  version: Y,
  apiFunctions: {
    getVerticalPixelRange: KL,
    getHorizontalPixelRange: YL,
    ensureColumnVisible: SC,
    ensureIndexVisible: yC,
    ensureNodeVisible: qL
  }
};
function PV(e, t, i) {
  if (!t)
    return;
  const s = e.ctrlsSvc.getGridBodyCtrl().eGridBody, o = `aria-${t}`;
  i === null ? s.removeAttribute(o) : s.setAttribute(o, i);
}
function EV(e, t = {}) {
  e.frameworkOverrides.wrapIncoming(() => e.rowRenderer.refreshCells(t));
}
function DV(e) {
  e.frameworkOverrides.wrapIncoming(
    () => e.ctrlsSvc.getHeaderRowContainerCtrls().forEach((t) => t.refresh())
  );
}
function TV(e) {
  return e.animationFrameSvc?.isQueueEmpty() ?? !0;
}
function MV(e) {
  e.animationFrameSvc?.flushAllFrames();
}
function AV(e) {
  return {
    rowHeight: Ai(e),
    headerHeight: No(e)
  };
}
function IV(e, t = {}) {
  const i = [];
  if (e.rowRenderer.getCellCtrls(t.rowNodes, t.columns).forEach((n) => {
    const r = n.getCellRenderer();
    r != null && i.push(bo(r));
  }), t.columns?.length)
    return i;
  const s = [], o = gl(t.rowNodes);
  return e.rowRenderer.getAllRowCtrls().forEach((n) => {
    if (o && !pl(n.rowNode, o) || !n.isFullWidth())
      return;
    const r = n.getFullWidthCellRenderers();
    for (let a = 0; a < r.length; a++) {
      const l = r[a];
      l != null && s.push(bo(l));
    }
  }), [...s, ...i];
}
var kV = {
  moduleName: "RenderApi",
  version: Y,
  apiFunctions: {
    setGridAriaProperty: PV,
    refreshCells: EV,
    refreshHeader: DV,
    isAnimationFrameQueueEmpty: TV,
    flushAllAnimationFrames: MV,
    getSizesForCurrentTheme: AV,
    getCellRendererInstances: IV
  }
};
function LV(e, t) {
  typeof t == "number" ? e.colAutosize?.sizeColumnsToFit(t, "api") : e.colAutosize?.sizeColumnsToFitGridBody(t);
}
function MC({ colAutosize: e, visibleCols: t }, i, s) {
  Array.isArray(i) ? e?.autoSizeCols({ colKeys: i, skipHeader: s, source: "api" }) : e?.autoSizeCols({
    colKeys: i.colIds ?? t.allCols,
    skipHeader: i.skipHeader,
    defaultMaxWidth: i.defaultMaxWidth,
    defaultMinWidth: i.defaultMinWidth,
    columnLimits: i.columnLimits,
    source: "api"
  });
}
function OV(e, t) {
  t && typeof t == "object" ? MC(e, t) : e.colAutosize?.autoSizeAllColumns({ source: "api", skipHeader: t });
}
var VV = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colAutosize", this.timesDelayed = 0, this.shouldQueueResizeOperations = !1, this.resizeOperationQueue = [];
  }
  postConstruct() {
    this.addManagedEventListeners({ firstDataRendered: () => this.onFirstDataRendered() });
  }
  autoSizeCols(e) {
    if (this.shouldQueueResizeOperations) {
      this.pushResizeOperation(() => this.autoSizeCols(e));
      return;
    }
    const {
      colKeys: t,
      skipHeader: i,
      skipHeaderGroups: s,
      stopAtGroup: o,
      defaultMaxWidth: n,
      defaultMinWidth: r,
      columnLimits: a = [],
      source: l = "api"
    } = e, { animationFrameSvc: c, renderStatus: d, colModel: u, autoWidthCalc: h, visibleCols: g } = this.beans;
    if (c?.flushAllFrames(), this.timesDelayed < 5 && d && !d.areHeaderCellsRendered()) {
      this.timesDelayed++, setTimeout(() => {
        this.isAlive() && this.autoSizeCols(e);
      });
      return;
    }
    this.timesDelayed = 0;
    const p = [];
    let f = -1;
    const m = Object.fromEntries(
      a.map(({ colId: w, maxWidth: y, minWidth: S }) => [w, { maxWidth: y, minWidth: S }])
    ), C = i ?? this.gos.get("skipHeaderOnAutoSize"), v = s ?? C;
    for (; f !== 0; ) {
      f = 0;
      const w = [];
      t.forEach((y) => {
        if (!y || Tx(y))
          return;
        const S = u.getCol(y);
        if (!S || p.indexOf(S) >= 0)
          return;
        const x = h.getPreferredWidthForColumn(S, C);
        if (x > 0) {
          const D = m[S.colId] ?? {};
          D.minWidth ?? (D.minWidth = r), D.maxWidth ?? (D.maxWidth = n);
          const M = GV(S, x, D);
          S.setActualWidth(M, l), p.push(S), f++;
        }
        w.push(S);
      }), w.length && g.refresh(l);
    }
    v || this.autoSizeColumnGroupsByColumns(t, l, o), Ps(this.eventSvc, p, !0, "autosizeColumns");
  }
  autoSizeColumn(e, t, i) {
    e && this.autoSizeCols({ colKeys: [e], skipHeader: i, skipHeaderGroups: !0, source: t });
  }
  autoSizeColumnGroupsByColumns(e, t, i) {
    const { colModel: s, ctrlsSvc: o } = this.beans, n = /* @__PURE__ */ new Set();
    s.getColsForKeys(e).forEach((c) => {
      let d = c.getParent();
      for (; d && d != i; )
        d.isPadding() || n.add(d), d = d.getParent();
    });
    let a;
    const l = [];
    for (const c of n) {
      for (const d of o.getHeaderRowContainerCtrls())
        if (a = d.getHeaderCtrlForColumn(c), a)
          break;
      a && a.resizeLeafColumnsToFit(t);
    }
    return l;
  }
  autoSizeAllColumns(e) {
    if (this.shouldQueueResizeOperations) {
      this.pushResizeOperation(() => this.autoSizeAllColumns(e));
      return;
    }
    const t = this.beans.visibleCols.allCols;
    this.autoSizeCols({ colKeys: t, ...e });
  }
  addColumnAutosize(e, t) {
    const i = this.gos.get("skipHeaderOnAutoSize"), s = () => {
      this.autoSizeColumn(t, "uiColumnResized", i);
    };
    e.addEventListener("dblclick", s);
    const o = new Si(e);
    return o.addEventListener("doubleTap", s), () => {
      e.removeEventListener("dblclick", s), o.removeEventListener("doubleTap", s), o.destroy();
    };
  }
  addColumnGroupResize(e, t, i) {
    const s = this.gos.get("skipHeaderOnAutoSize"), o = () => {
      const n = [];
      t.getDisplayedLeafColumns().forEach((a) => {
        a.getColDef().suppressAutoSize || n.push(a.getColId());
      }), n.length > 0 && this.autoSizeCols({
        colKeys: n,
        skipHeader: s,
        stopAtGroup: t,
        source: "uiColumnResized"
      }), i();
    };
    return e.addEventListener("dblclick", o), () => e.removeEventListener("dblclick", o);
  }
  // method will call itself if no available width. this covers if the grid
  // isn't visible, but is just about to be visible.
  sizeColumnsToFitGridBody(e, t) {
    if (!this.isAlive())
      return;
    const { ctrlsSvc: i, scrollVisibleSvc: s } = this.beans, o = i.getGridBodyCtrl(), r = o.isVerticalScrollShowing() ? s.getScrollbarWidth() : 0, l = wo(o.eGridBody) - r;
    if (l > 0) {
      this.sizeColumnsToFit(l, "sizeColumnsToFit", !1, e);
      return;
    }
    t === void 0 ? window.setTimeout(() => {
      this.sizeColumnsToFitGridBody(e, 100);
    }, 0) : t === 100 ? window.setTimeout(() => {
      this.sizeColumnsToFitGridBody(e, 500);
    }, 100) : t === 500 ? window.setTimeout(() => {
      this.sizeColumnsToFitGridBody(e, -1);
    }, 500) : B(29);
  }
  // called from api
  sizeColumnsToFit(e, t = "sizeColumnsToFit", i, s) {
    if (this.shouldQueueResizeOperations) {
      this.pushResizeOperation(() => this.sizeColumnsToFit(e, t, i, s));
      return;
    }
    const o = {};
    s && s?.columnLimits?.forEach(({ key: g, ...p }) => {
      o[typeof g == "string" ? g : g.getColId()] = p;
    });
    const n = this.beans.visibleCols.allCols;
    if (e <= 0 || !n.length || e === zt(n) && n.every((p) => {
      if (p.colDef.suppressSizeToFit)
        return !0;
      const f = o?.[p.getId()], m = f?.minWidth ?? s?.defaultMinWidth, C = f?.maxWidth ?? s?.defaultMaxWidth, v = p.getActualWidth();
      return (m == null || v >= m) && (C == null || v <= C);
    }))
      return;
    const a = [], l = [];
    n.forEach((g) => {
      g.getColDef().suppressSizeToFit === !0 ? l.push(g) : a.push(g);
    });
    const c = a.slice(0);
    let d = !1;
    const u = (g) => {
      St(a, g), l.push(g);
    };
    for (a.forEach((g) => {
      g.resetActualWidth(t);
      const p = o?.[g.getId()], f = p?.minWidth ?? s?.defaultMinWidth, m = p?.maxWidth ?? s?.defaultMaxWidth, C = g.getActualWidth();
      typeof f == "number" && C < f ? g.setActualWidth(f, t, !0) : typeof m == "number" && C > m && g.setActualWidth(m, t, !0);
    }); !d; ) {
      d = !0;
      const g = e - zt(l);
      if (g <= 0)
        a.forEach((p) => {
          const f = o?.[p.getId()]?.minWidth ?? s?.defaultMinWidth;
          if (typeof f == "number") {
            p.setActualWidth(f, t, !0);
            return;
          }
          p.setActualWidth(p.minWidth, t);
        });
      else {
        const p = g / zt(a);
        let f = g;
        for (let m = a.length - 1; m >= 0; m--) {
          const C = a[m], v = o?.[C.getId()], w = v?.minWidth ?? s?.defaultMinWidth, y = v?.maxWidth ?? s?.defaultMaxWidth, S = C.getMinWidth(), x = C.getMaxWidth(), D = typeof w == "number" && w > S ? w : S, M = typeof y == "number" && y < x ? y : x;
          let k = Math.round(C.getActualWidth() * p);
          k < D ? (k = D, u(C), d = !1) : k > M ? (k = M, u(C), d = !1) : m === 0 && (k = f), C.setActualWidth(k, t, !0), f -= k;
        }
      }
    }
    c.forEach((g) => {
      g.fireColumnWidthChangedEvent(t);
    });
    const h = this.beans.visibleCols;
    h.setLeftValues(t), h.updateBodyWidths(), !i && Ps(this.eventSvc, c, !0, t);
  }
  applyAutosizeStrategy() {
    const e = this.gos.get("autoSizeStrategy");
    if (!e)
      return;
    const { type: t } = e;
    setTimeout(() => {
      if (t === "fitGridWidth") {
        const { columnLimits: i, defaultMinWidth: s, defaultMaxWidth: o } = e, n = i?.map(({ colId: r, minWidth: a, maxWidth: l }) => ({
          key: r,
          minWidth: a,
          maxWidth: l
        }));
        this.sizeColumnsToFitGridBody({
          defaultMinWidth: s,
          defaultMaxWidth: o,
          columnLimits: n
        });
      } else t === "fitProvidedWidth" && this.sizeColumnsToFit(e.width, "sizeColumnsToFit");
    });
  }
  onFirstDataRendered() {
    const e = this.gos.get("autoSizeStrategy");
    if (e?.type !== "fitCellContents")
      return;
    const { colIds: t, skipHeader: i, defaultMaxWidth: s, defaultMinWidth: o, columnLimits: n } = e;
    setTimeout(() => {
      const r = {
        skipHeader: i,
        source: "autosizeColumns",
        defaultMaxWidth: s,
        defaultMinWidth: o,
        columnLimits: n
      };
      t ? this.autoSizeCols({ colKeys: t, ...r }) : this.autoSizeAllColumns(r);
    });
  }
  processResizeOperations() {
    this.shouldQueueResizeOperations = !1, this.resizeOperationQueue.forEach((e) => e()), this.resizeOperationQueue = [];
  }
  pushResizeOperation(e) {
    this.resizeOperationQueue.push(e);
  }
  destroy() {
    this.resizeOperationQueue.length = 0, super.destroy();
  }
};
function GV(e, t, i = {}) {
  const s = i.minWidth ?? e.getMinWidth();
  t < s && (t = s);
  const o = i.maxWidth ?? e.getMaxWidth();
  return t > o && (t = o), t;
}
var HV = {
  moduleName: "ColumnAutoSize",
  version: Y,
  beans: [VV],
  apiFunctions: {
    sizeColumnsToFit: LV,
    autoSizeColumns: MC,
    autoSizeAllColumns: OV
  },
  dependsOn: [Am]
}, BV = (
  /*css*/
  ".ag-row-pinned-source{background-color:var(--ag-pinned-source-row-background-color);color:var(--ag-pinned-source-row-text-color);font-weight:var(--ag-pinned-source-row-font-weight)}.ag-row-pinned-manual{background-color:var(--ag-pinned-row-background-color);color:var(--ag-pinned-row-text-color);font-weight:var(--ag-pinned-row-font-weight)}"
);
function NV(e) {
  return e.pinnedRowModel?.getPinnedTopRowCount() ?? 0;
}
function WV(e) {
  return e.pinnedRowModel?.getPinnedBottomRowCount() ?? 0;
}
function zV(e, t) {
  return e.pinnedRowModel?.getPinnedTopRow(t);
}
function _V(e, t) {
  return e.pinnedRowModel?.getPinnedBottomRow(t);
}
function UV(e, t, i) {
  return e.pinnedRowModel?.forEachPinnedRow(t, i);
}
var jV = {
  moduleName: "PinnedRow",
  version: Y,
  beans: [d0],
  css: [BV],
  apiFunctions: {
    getPinnedTopRowCount: NV,
    getPinnedBottomRowCount: WV,
    getPinnedTopRow: zV,
    getPinnedBottomRow: _V,
    forEachPinnedRow: UV
  },
  icons: {
    rowPin: "pin",
    rowPinTop: "pinned-top",
    rowPinBottom: "pinned-bottom",
    rowUnpin: "un-pin"
  }
}, $V = class extends Cs {
  constructor(e, t, i) {
    super(e.col, e.firstNode, i, t), this.cellSpan = e, this.SPANNED_CELL_CSS_CLASS = "ag-spanned-cell";
  }
  setComp(e, t, i, s, o, n, r) {
    this.eWrapper = i, super.setComp(e, t, i, s, o, n, r), this.setAriaRowSpan(), this.refreshAriaRowIndex();
  }
  isCellSpanning() {
    return !0;
  }
  getCellSpan() {
    return this.cellSpan;
  }
  /**
   * When cell is spanning, ensure row index is also available on the cell
   */
  refreshAriaRowIndex() {
    this.rowNode.rowIndex != null && Hp(this.eGui, this.rowNode.rowIndex);
  }
  /**
   * When cell is spanning, ensure row index is also available on the cell
   */
  setAriaRowSpan() {
    kR(this.eGui, this.cellSpan.spannedNodes.size);
  }
  // not ideal, for tabbing need to force the focused position
  setFocusedCellPosition(e) {
    this.focusedCellPosition = e;
  }
  getFocusedCellPosition() {
    return this.focusedCellPosition ?? this.cellPosition;
  }
  checkCellFocused() {
    const e = this.beans.focusSvc.getFocusedCell();
    return !!e && this.cellSpan.doesSpanContain(e);
  }
  applyStaticCssClasses() {
    super.applyStaticCssClasses(), this.comp.toggleCss(this.SPANNED_CELL_CSS_CLASS, !0);
  }
  onCellFocused(e) {
    const { beans: t } = this;
    if (hr(t)) {
      this.focusedCellPosition = void 0;
      return;
    }
    const i = this.isCellFocused();
    i || (this.focusedCellPosition = void 0), e && i && (this.focusedCellPosition = {
      rowIndex: e.rowIndex,
      rowPinned: e.rowPinned,
      column: e.column
      // fix
    }), super.onCellFocused(e);
  }
  getRootElement() {
    return this.eWrapper;
  }
}, KV = class extends tr {
  onRowIndexChanged() {
    super.onRowIndexChanged(), this.getAllCellCtrls().forEach((e) => e.refreshAriaRowIndex());
  }
  getInitialRowClasses(e) {
    return ["ag-spanned-row"];
  }
  getNewCellCtrl(e) {
    const t = this.beans.rowSpanSvc?.getCellSpan(e, this.rowNode);
    if (!(!t || t.firstNode !== this.rowNode))
      return new $V(t, this, this.beans);
  }
  isCorrectCtrlForSpan(e) {
    const t = this.beans.rowSpanSvc?.getCellSpan(e.column, this.rowNode);
    return !t || t.firstNode !== this.rowNode ? !1 : e.getCellSpan() === t;
  }
  /**
   * Below overrides are explicitly disabling styling and other unwanted behaviours for spannedRowCtrl
   */
  // row height should be 0 in spanned row - they're only included for purpose of aria
  onRowHeightChanged() {
  }
  // no styling spanned rows
  refreshFirstAndLastRowStyles() {
  }
  // no hover functionality for spanned rows
  addHoverFunctionality() {
  }
  resetHoveredStatus() {
  }
}, YV = class extends T {
  constructor() {
    super(...arguments), this.beanName = "spannedRowRenderer", this.topCtrls = /* @__PURE__ */ new Map(), this.bottomCtrls = /* @__PURE__ */ new Map(), this.centerCtrls = /* @__PURE__ */ new Map();
  }
  postConstruct() {
    this.addManagedEventListeners({
      displayedRowsChanged: this.createAllCtrls.bind(this)
    });
  }
  createAllCtrls() {
    this.createCtrls("top"), this.createCtrls("bottom"), this.createCtrls("center");
  }
  /**
   * When displayed rows or cols change, the spanned cell ctrls need to update
   */
  createCtrls(e) {
    const { rowSpanSvc: t } = this.beans, i = `${e}Ctrls`, s = this[i], o = s.size, n = this.getAllRelevantRowControls(e), r = /* @__PURE__ */ new Map();
    let a = !1;
    for (const c of n)
      c.isAlive() && t?.forEachSpannedColumn(c.rowNode, (d, u) => {
        if (r.has(u.firstNode))
          return;
        const h = s.get(u.firstNode);
        if (h) {
          r.set(u.firstNode, h), s.delete(u.firstNode);
          return;
        }
        a = !0;
        const g = new KV(u.firstNode, this.beans, !1, !1, !1);
        r.set(u.firstNode, g);
      });
    this[i] = r;
    const l = r.size === o;
    if (!(!a && l)) {
      for (const c of s.values())
        c.destroyFirstPass(!0), c.destroySecondPass();
      this.dispatchLocalEvent({
        type: "spannedRowsUpdated",
        ctrlsKey: e
      });
    }
  }
  // cannot use getAllRowCtrls as it returns this services row ctrls.
  getAllRelevantRowControls(e) {
    const { rowRenderer: t } = this.beans;
    switch (e) {
      case "top":
        return t.topRowCtrls;
      case "bottom":
        return t.bottomRowCtrls;
      case "center":
        return t.allRowCtrls;
    }
  }
  getCellByPosition(e) {
    const { rowSpanSvc: t } = this.beans, i = t?.getCellSpanByPosition(e);
    if (!i)
      return;
    const s = `${AC(e.rowPinned)}Ctrls`, o = this[s].get(i.firstNode);
    if (o)
      return o.getAllCellCtrls().find((n) => n.column === e.column);
  }
  getCtrls(e) {
    const t = `${e}Ctrls`;
    return [...this[t].values()];
  }
  destroyRowCtrls(e) {
    const t = `${e}Ctrls`;
    for (const i of this[t].values())
      i.destroyFirstPass(!0), i.destroySecondPass();
    this[t] = /* @__PURE__ */ new Map();
  }
  destroy() {
    super.destroy(), this.destroyRowCtrls("top"), this.destroyRowCtrls("bottom"), this.destroyRowCtrls("center");
  }
}, AC = (e) => e ?? "center", qV = class {
  constructor(e, t) {
    this.col = e, this.firstNode = t, this.cellSpan = !0, this.spannedNodes = /* @__PURE__ */ new Set(), this.addSpannedNode(t);
  }
  /**
   * Reset the span leaving only the head.
   * Head is used as a comparison as this is the row used to render this cell
   * Even if the row data changes, the cell will properly reflect the correct value.
   */
  reset() {
    this.spannedNodes.clear(), this.addSpannedNode(this.firstNode);
  }
  addSpannedNode(e) {
    this.spannedNodes.add(e), this.lastNode = e;
  }
  getLastNode() {
    return this.lastNode;
  }
  getCellHeight() {
    return this.lastNode.rowTop + this.lastNode.rowHeight - this.firstNode.rowTop - 1;
  }
  doesSpanContain(e) {
    return e.column !== this.col || e.rowPinned != this.firstNode.rowPinned ? !1 : this.firstNode.rowIndex <= e.rowIndex && e.rowIndex <= this.lastNode.rowIndex;
  }
  /**
   * Gets the auto height value for last node in the spanned cell.
   * The first node is used to store the auto height for the cell, but the additional height for this cell
   * needs applied to the last row in the span.
   */
  getLastNodeAutoHeight() {
    const e = this.firstNode.__autoHeights?.[this.col.getColId()];
    if (e == null)
      return;
    let t = 0;
    return this.spannedNodes.forEach((i) => {
      i !== this.lastNode && (t += i.rowHeight);
    }), e - t;
  }
}, XV = class extends T {
  constructor(e) {
    super(), this.column = e;
  }
  buildCache(e) {
    const {
      column: t,
      beans: { gos: i, pinnedRowModel: s, rowModel: o, valueSvc: n, pagination: r }
    } = this, { colDef: a } = t, l = this[`${e}ValueNodeMap`], c = /* @__PURE__ */ new Map(), d = i.getCallback("isFullWidthRow"), u = a.equals, h = a.spanRows, g = typeof h == "function";
    let p = null, f = null, m;
    const C = (w, y) => {
      p = w, f = null, m = y;
    }, v = (w) => {
      const y = !w.isExpandable() && !w.group && !w.detail && (d ? !d({ rowNode: w }) : !0);
      if (w.rowIndex == null || !y) {
        C(null, null);
        return;
      }
      if (p == null || w.level !== p.level || // no span across groups
      w.footer || f && w.rowIndex - 1 !== f?.getLastNode().rowIndex) {
        C(w, n.getValue(t, w));
        return;
      }
      const S = n.getValue(t, w);
      if (g) {
        const x = Z(i, {
          valueA: m,
          nodeA: p,
          valueB: S,
          nodeB: w,
          column: t,
          colDef: a
        });
        if (!h(x)) {
          C(w, S);
          return;
        }
      } else if (u ? !u(m, S) : m !== S) {
        C(w, S);
        return;
      }
      if (!f) {
        const x = l?.get(p);
        x?.firstNode === p ? (x.reset(), f = x) : f = new qV(t, p), c.set(p, f);
      }
      f.addSpannedNode(w), c.set(w, f);
    };
    switch (e) {
      case "center":
        o.forEachDisplayedNode?.((w) => {
          (!r || r.isRowInPage(w.rowIndex)) && v(w);
        });
        break;
      case "top":
        s?.forEachPinnedRow("top", v);
        break;
      case "bottom":
        s?.forEachPinnedRow("bottom", v);
        break;
    }
    this[`${e}ValueNodeMap`] = c;
  }
  isCellSpanning(e) {
    return !!this.getCellSpan(e);
  }
  getCellSpan(e) {
    return this[`${AC(e.rowPinned)}ValueNodeMap`].get(e);
  }
}, ZV = class extends T {
  constructor() {
    super(...arguments), this.beanName = "rowSpanSvc", this.spanningColumns = /* @__PURE__ */ new Map(), this.debouncePinnedEvent = We(this, this.dispatchCellsUpdatedEvent.bind(this, !0), 0), this.debounceModelEvent = We(this, this.dispatchCellsUpdatedEvent.bind(this, !1), 0), this.pinnedTimeout = null, this.modelTimeout = null;
  }
  postConstruct() {
    const e = this.onRowDataUpdated.bind(this), t = this.buildPinnedCaches.bind(this);
    this.addManagedEventListeners({
      paginationChanged: this.buildModelCaches.bind(this),
      pinnedRowDataChanged: t,
      pinnedRowsChanged: t,
      rowNodeDataChanged: e,
      cellValueChanged: e
    });
  }
  /**
   * When a new column is created with spanning (or spanning changes for a column)
   * @param column column that is now spanning
   */
  register(e) {
    const { gos: t } = this.beans;
    if (!t.get("enableCellSpan") || this.spanningColumns.has(e))
      return;
    const i = this.createManagedBean(new XV(e));
    this.spanningColumns.set(e, i), i.buildCache("top"), i.buildCache("bottom"), i.buildCache("center"), this.debouncePinnedEvent(), this.debounceModelEvent();
  }
  dispatchCellsUpdatedEvent(e) {
    this.dispatchLocalEvent({ type: "spannedCellsUpdated", pinned: e });
  }
  /**
   * When a new column is destroyed with spanning (or spanning changes for a column)
   * @param column column that is now spanning
   */
  deregister(e) {
    this.spanningColumns.delete(e);
  }
  // called when data changes, as this could be a hot path it's debounced
  // it uses timeouts instead of debounce so that it can be cancelled by `modelUpdated`
  // which is expected to run immediately (to exec before the rowRenderer)
  onRowDataUpdated({ node: e }) {
    const { spannedRowRenderer: t } = this.beans;
    if (e.rowPinned) {
      if (this.pinnedTimeout != null)
        return;
      this.pinnedTimeout = window.setTimeout(() => {
        this.pinnedTimeout = null, this.buildPinnedCaches(), t?.createCtrls("top"), t?.createCtrls("bottom");
      }, 0);
      return;
    }
    this.modelTimeout == null && (this.modelTimeout = window.setTimeout(() => {
      this.modelTimeout = null, this.buildModelCaches(), t?.createCtrls("center");
    }, 0));
  }
  buildModelCaches() {
    this.modelTimeout != null && clearTimeout(this.modelTimeout), this.spanningColumns.forEach((e) => e.buildCache("center")), this.debounceModelEvent();
  }
  buildPinnedCaches() {
    this.pinnedTimeout != null && clearTimeout(this.pinnedTimeout), this.spanningColumns.forEach((e) => {
      e.buildCache("top"), e.buildCache("bottom");
    }), this.debouncePinnedEvent();
  }
  isCellSpanning(e, t) {
    const i = this.spanningColumns.get(e);
    return i ? i.isCellSpanning(t) : !1;
  }
  getCellSpanByPosition(e) {
    const { pinnedRowModel: t, rowModel: i } = this.beans, s = e.column, o = e.rowIndex, n = this.spanningColumns.get(s);
    if (!n)
      return;
    let r;
    switch (e.rowPinned) {
      case "top":
        r = t?.getPinnedTopRow(o);
        break;
      case "bottom":
        r = t?.getPinnedBottomRow(o);
        break;
      default:
        r = i.getRow(o);
    }
    if (r)
      return n.getCellSpan(r);
  }
  getCellStart(e) {
    const t = this.getCellSpanByPosition(e);
    return t ? { ...e, rowIndex: t.firstNode.rowIndex } : e;
  }
  getCellEnd(e) {
    const t = this.getCellSpanByPosition(e);
    return t ? { ...e, rowIndex: t.getLastNode().rowIndex } : e;
  }
  /**
   * Look-up a spanned cell given a col and node as position indicators
   *
   * @param col a column to lookup a span at this position
   * @param rowNode a node that may be spanned at this position
   * @returns the CellSpan object if one exists
   */
  getCellSpan(e, t) {
    const i = this.spanningColumns.get(e);
    if (i)
      return i.getCellSpan(t);
  }
  forEachSpannedColumn(e, t) {
    for (const [i, s] of this.spanningColumns)
      if (s.isCellSpanning(e)) {
        const o = s.getCellSpan(e);
        t(i, o);
      }
  }
  destroy() {
    super.destroy(), this.spanningColumns.clear();
  }
}, QV = {
  moduleName: "CellSpan",
  version: Y,
  beans: [ZV, YV]
}, JV = class extends T {
  constructor(e, t) {
    super(), this.cellCtrl = e, this.staticClasses = [], this.beans = t, this.column = e.column;
  }
  setComp(e) {
    this.cellComp = e, this.applyUserStyles(), this.applyCellClassRules(), this.applyClassesFromColDef();
  }
  applyCellClassRules() {
    const { column: e, cellComp: t } = this, i = e.colDef, s = i.cellClassRules, o = this.getCellClassParams(e, i);
    bc(
      this.beans.expressionSvc,
      // if current was previous, skip
      s === this.cellClassRules ? void 0 : this.cellClassRules,
      s,
      o,
      (n) => t.toggleCss(n, !0),
      (n) => t.toggleCss(n, !1)
    ), this.cellClassRules = s;
  }
  applyUserStyles() {
    const e = this.column, t = e.colDef, i = t.cellStyle;
    if (!i)
      return;
    let s;
    if (typeof i == "function") {
      const o = this.getCellClassParams(e, t);
      s = i(o);
    } else
      s = i;
    s && this.cellComp.setUserStyles(s);
  }
  applyClassesFromColDef() {
    const { column: e, cellComp: t } = this, i = e.colDef, s = this.getCellClassParams(e, i);
    this.staticClasses.forEach((n) => t.toggleCss(n, !1));
    const o = this.beans.cellStyles.getStaticCellClasses(i, s);
    this.staticClasses = o, o.forEach((n) => t.toggleCss(n, !0));
  }
  getCellClassParams(e, t) {
    const { value: i, rowNode: s } = this.cellCtrl;
    return Z(this.beans.gos, {
      value: i,
      data: s.data,
      node: s,
      colDef: t,
      column: e,
      rowIndex: s.rowIndex
    });
  }
}, eG = class extends T {
  constructor() {
    super(...arguments), this.beanName = "cellStyles";
  }
  processAllCellClasses(e, t, i, s) {
    bc(
      this.beans.expressionSvc,
      void 0,
      e.cellClassRules,
      t,
      i,
      s
    ), this.processStaticCellClasses(e, t, i);
  }
  getStaticCellClasses(e, t) {
    const { cellClass: i } = e;
    if (!i)
      return [];
    let s;
    return typeof i == "function" ? s = i(t) : s = i, typeof s == "string" && (s = [s]), s || [];
  }
  createCellCustomStyleFeature(e, t) {
    return new JV(e, t);
  }
  processStaticCellClasses(e, t, i) {
    this.getStaticCellClasses(e, t).forEach((o) => {
      i(o);
    });
  }
}, tG = {
  moduleName: "CellStyle",
  version: Y,
  beans: [eG]
}, iG = {
  moduleName: "RowStyle",
  version: Y,
  beans: [sE]
};
function sG(e, t) {
  return !!e.colHover?.isHovered(t);
}
var oG = class extends T {
  constructor(e, t) {
    super(), this.columns = e, this.element = t, this.destroyManagedListeners = [], this.enableFeature = (i) => {
      const { beans: s, gos: o, element: n, columns: r } = this, a = s.colHover;
      i ?? !!o.get("columnHoverHighlight") ? this.destroyManagedListeners = this.addManagedElementListeners(n, {
        mouseover: a.setMouseOver.bind(a, r),
        mouseout: a.clearMouseOver.bind(a)
      }) : (this.destroyManagedListeners.forEach((c) => c()), this.destroyManagedListeners = []);
    };
  }
  postConstruct() {
    this.addManagedPropertyListener("columnHoverHighlight", ({ currentValue: e }) => {
      this.enableFeature(e);
    }), this.enableFeature();
  }
  destroy() {
    super.destroy(), this.destroyManagedListeners = null;
  }
}, nG = "ag-column-hover", rG = class extends T {
  constructor() {
    super(...arguments), this.beanName = "colHover";
  }
  postConstruct() {
    this.addManagedPropertyListener("columnHoverHighlight", ({ currentValue: e }) => {
      e || this.clearMouseOver();
    });
  }
  setMouseOver(e) {
    this.updateState(e);
  }
  clearMouseOver() {
    this.updateState(null);
  }
  isHovered(e) {
    if (!this.gos.get("columnHoverHighlight"))
      return !1;
    const t = this.selectedColumns;
    return !!t && t.indexOf(e) >= 0;
  }
  addHeaderColumnHoverListener(e, t, i) {
    const s = () => {
      const o = this.isHovered(i);
      t.toggleCss("ag-column-hover", o);
    };
    e.addManagedEventListeners({ columnHoverChanged: s }), s();
  }
  onCellColumnHover(e, t) {
    if (!t)
      return;
    const i = this.isHovered(e);
    t.toggleCss(nG, i);
  }
  addHeaderFilterColumnHoverListener(e, t, i, s) {
    this.createHoverFeature(e, [i], s);
    const o = () => {
      const n = this.isHovered(i);
      t.toggleCss("ag-column-hover", n);
    };
    e.addManagedEventListeners({ columnHoverChanged: o }), o();
  }
  createHoverFeature(e, t, i) {
    e.createManagedBean(new oG(t, i));
  }
  updateState(e) {
    this.selectedColumns = e, this.eventSvc.dispatchEvent({
      type: "columnHoverChanged"
    });
  }
}, aG = {
  moduleName: "ColumnHover",
  version: Y,
  beans: [rG],
  apiFunctions: {
    isColumnHovered: sG
  }
}, lG = class extends T {
  constructor() {
    super(...arguments), this.beanName = "apiEventSvc", this.syncListeners = /* @__PURE__ */ new Map(), this.asyncListeners = /* @__PURE__ */ new Map(), this.syncGlobalListeners = /* @__PURE__ */ new Set(), this.globalListenerPairs = /* @__PURE__ */ new Map();
  }
  postConstruct() {
    this.wrapSvc = this.beans.frameworkOverrides.createGlobalEventListenerWrapper?.();
  }
  addEventListener(e, t) {
    const i = this.wrapSvc?.wrap(e, t) ?? t, s = !Sn.has(e), o = s ? this.asyncListeners : this.syncListeners;
    o.has(e) || o.set(e, /* @__PURE__ */ new Set()), o.get(e).add(i), this.eventSvc.addEventListener(e, i, s);
  }
  removeEventListener(e, t) {
    const i = this.wrapSvc?.unwrap(e, t) ?? t, o = !!this.asyncListeners.get(e)?.delete(i);
    o || this.syncListeners.get(e)?.delete(i), this.eventSvc.removeEventListener(e, i, o);
  }
  addGlobalListener(e) {
    const t = this.wrapSvc?.wrapGlobal(e) ?? e, i = (n, r) => {
      Sn.has(n) && t(n, r);
    }, s = (n, r) => {
      Sn.has(n) || t(n, r);
    };
    this.globalListenerPairs.set(e, { syncListener: i, asyncListener: s });
    const o = this.eventSvc;
    o.addGlobalListener(i, !1), o.addGlobalListener(s, !0);
  }
  removeGlobalListener(e) {
    const { eventSvc: t, wrapSvc: i, globalListenerPairs: s } = this, o = i?.unwrapGlobal(e) ?? e;
    if (s.has(o)) {
      const { syncListener: r, asyncListener: a } = s.get(o);
      t.removeGlobalListener(r, !1), t.removeGlobalListener(a, !0), s.delete(e);
    } else
      this.syncGlobalListeners.delete(o), t.removeGlobalListener(o, !1);
  }
  destroyEventListeners(e, t) {
    e.forEach((i, s) => {
      i.forEach((o) => this.eventSvc.removeEventListener(s, o, t)), i.clear();
    }), e.clear();
  }
  destroyGlobalListeners(e, t) {
    e.forEach((i) => this.eventSvc.removeGlobalListener(i, t)), e.clear();
  }
  destroy() {
    super.destroy(), this.destroyEventListeners(this.syncListeners, !1), this.destroyEventListeners(this.asyncListeners, !0), this.destroyGlobalListeners(this.syncGlobalListeners, !1);
    const { globalListenerPairs: e, eventSvc: t } = this;
    e.forEach(({ syncListener: i, asyncListener: s }) => {
      t.removeGlobalListener(i, !1), t.removeGlobalListener(s, !0);
    }), e.clear();
  }
};
function cG(e, t, i) {
  e.apiEventSvc?.addEventListener(t, i);
}
function dG(e, t, i) {
  e.apiEventSvc?.removeEventListener(t, i);
}
function uG(e, t) {
  e.apiEventSvc?.addGlobalListener(t);
}
function hG(e, t) {
  e.apiEventSvc?.removeGlobalListener(t);
}
var gG = {
  moduleName: "EventApi",
  version: Y,
  apiFunctions: {
    addEventListener: cG,
    addGlobalListener: uG,
    removeEventListener: dG,
    removeGlobalListener: hG
  },
  beans: [lG]
}, pG = {
  moduleName: "Locale",
  version: Y,
  beans: [jI]
}, fG = class extends T {
  constructor() {
    super(...arguments), this.beanName = "rowAutoHeight", this.wasEverActive = !1, this._debouncedCalculateRowHeights = We(this, this.calculateRowHeights.bind(this), 1);
  }
  /**
   * If row height has been active, request a refresh of the row heights.
   */
  requestCheckAutoHeight() {
    this.wasEverActive && this._debouncedCalculateRowHeights();
  }
  calculateRowHeights() {
    const { visibleCols: e, rowModel: t, rowSpanSvc: i, pinnedRowModel: s } = this.beans, o = e.autoHeightCols;
    let n = !1;
    const r = (a) => {
      const l = a.__autoHeights;
      let c = ui(this.beans, a).height;
      for (const d of o) {
        let u = l?.[d.getColId()];
        const h = i?.getCellSpan(d, a);
        if (h) {
          if (h.getLastNode() !== a)
            continue;
          if (u = i?.getCellSpan(d, a)?.getLastNodeAutoHeight(), !u)
            return;
        }
        if (u == null) {
          if (this.colSpanSkipCell(d, a))
            continue;
          return;
        }
        c = Math.max(u, c);
      }
      c !== a.rowHeight && (a.setRowHeight(c), n = !0);
    };
    s?.forEachPinnedRow?.("top", r), s?.forEachPinnedRow?.("bottom", r), t.forEachDisplayedNode?.(r), n && t.onRowHeightChanged?.();
  }
  /**
   * Set the cell height into the row node, and request a refresh of the row heights if there's been a change.
   * @param rowNode the node to set the auto height on
   * @param cellHeight the height to set, undefined if the cell has just been destroyed
   * @param column the column of the cell
   */
  setRowAutoHeight(e, t, i) {
    if (e.__autoHeights ?? (e.__autoHeights = {}), t == null) {
      delete e.__autoHeights[i.getId()];
      return;
    }
    const s = e.__autoHeights[i.getId()];
    e.__autoHeights[i.getId()] = t, s !== t && this.requestCheckAutoHeight();
  }
  /**
   * If using col span, then cells which have been spanned over do not need an auto height value
   * @param col the column of the cell
   * @param node the node of the cell
   * @returns whether the row needs auto height value for that column
   */
  colSpanSkipCell(e, t) {
    const { colModel: i, colViewport: s, visibleCols: o } = this.beans;
    if (!i.colSpanActive)
      return !1;
    let n = [];
    switch (e.getPinned()) {
      case "left":
        n = o.getLeftColsForRow(t);
        break;
      case "right":
        n = o.getRightColsForRow(t);
        break;
      case null:
        n = s.getColsWithinViewport(t);
        break;
    }
    return !n.includes(e);
  }
  /**
   * If required, sets up observers to continuously measure changes in the cell height.
   * @param cellCtrl the cellCtrl of the cell
   * @param eCellWrapper the HTMLElement to track the height of
   * @param compBean the component bean to add the destroy/cleanup function to
   * @returns whether or not auto height has been set up on this cell
   */
  setupCellAutoHeight(e, t, i) {
    if (!e.column.isAutoHeight() || !t)
      return !1;
    this.wasEverActive = !0;
    const s = t.parentElement, { rowNode: o, column: n } = e, r = this.beans, a = (d) => {
      if (this.beans.editSvc?.isEditing(e) || !e.isAlive() || !i.isAlive())
        return;
      const { paddingTop: u, paddingBottom: h, borderBottomWidth: g, borderTopWidth: p } = ji(s), f = u + h + g + p, C = t.offsetHeight + f;
      if (d < 5) {
        const v = He(r), w = !v || !v.contains(t), y = C == 0;
        if (w || y) {
          window.setTimeout(() => a(d + 1), 0);
          return;
        }
      }
      this.setRowAutoHeight(o, C, n);
    }, l = () => a(0);
    l();
    const c = Qt(r, t, l);
    return i.addDestroyFunc(() => {
      c(), this.setRowAutoHeight(o, void 0, n);
    }), !0;
  }
  setAutoHeightActive(e) {
    this.active = e.list.some((t) => t.isVisible() && t.isAutoHeight());
  }
  /**
   * Determines if the row auto height service has cells to grow.
   * @returns true if all of the rendered rows are at least as tall as their rendered cells.
   */
  areRowsMeasured() {
    if (!this.active)
      return !0;
    const e = this.beans.rowRenderer.getAllRowCtrls();
    let t = null;
    for (const { rowNode: i } of e)
      if ((!t || this.beans.colModel.colSpanActive) && (t = this.beans.colViewport.getColsWithinViewport(i).filter((o) => o.isAutoHeight())), t.length !== 0) {
        if (!i.__autoHeights)
          return !1;
        for (const s of t) {
          const o = i.__autoHeights[s.getColId()];
          if (!o || i.rowHeight < o)
            return !1;
        }
      }
    return !0;
  }
}, mG = {
  moduleName: "RowAutoHeight",
  version: Y,
  beans: [fG]
}, CG = {
  moduleName: "AllCommunity",
  version: Y,
  dependsOn: [
    fO,
    RO,
    kO,
    mk,
    S1,
    y1,
    b1,
    R1,
    x1,
    F1,
    P1,
    w1,
    wL,
    SL,
    yL,
    vL,
    RL,
    xL,
    qO,
    Z1,
    pV,
    Im,
    xV,
    FV,
    kV,
    HV,
    dD,
    jV,
    W1,
    EI,
    tG,
    aG,
    iG,
    gG,
    MI,
    _O,
    wC,
    pG,
    mG,
    cD,
    mO,
    QV
  ]
}, qe = W.createContext({}), IC = W.createContext("default"), Wo = (e, t, i, s) => {
  if (!e || e.componentFromFramework || t.isDestroyed())
    return;
  const n = e.newAgStackInstance();
  let r, a, l = !1;
  return n.then((c) => {
    if (l) {
      t.destroyBean(c);
      return;
    }
    r = c, a = r.getGui(), i.appendChild(a), Rh(s, r);
  }), () => {
    l = !0, r && (a?.parentElement?.removeChild(a), t.destroyBean(r), s && Rh(s, void 0));
  };
}, Rh = (e, t) => {
  if (e)
    if (e instanceof Function)
      e(t);
    else {
      const i = e;
      i.current = t;
    }
}, ft = (...e) => e.filter((i) => i != null && i !== "").join(" "), vt = class kC {
  constructor(...t) {
    this.classesMap = {}, t.forEach((i) => {
      this.classesMap[i] = !0;
    });
  }
  setClass(t, i) {
    if (!!this.classesMap[t] == i)
      return this;
    const o = new kC();
    return o.classesMap = { ...this.classesMap }, o.classesMap[t] = i, o;
  }
  toString() {
    return Object.keys(this.classesMap).filter((i) => this.classesMap[i]).join(" ");
  }
}, Gs = (e) => {
  const t = () => typeof Symbol == "function" && Symbol.for, i = () => t() ? Symbol.for("react.memo") : 60115;
  return typeof e == "function" && !(e.prototype && e.prototype.isReactComponent) || typeof e == "object" && e.$$typeof === i();
}, vl = W.version?.split(".")[0], LC = vl === "16" || vl === "17";
function vG() {
  return vl === "19";
}
var yn = !1;
function wG(e) {
  return yn || setTimeout(() => yn = !1, 0), yn = !0, e();
}
var Mo = (e, t) => {
  !LC && e && !yn ? fv.flushSync(t) : t();
}, SG = (e) => {
  LC ? e() : W.startTransition(e);
};
function yG(e, t, i) {
  return W.useSyncExternalStore ? W.useSyncExternalStore(e, t) : i;
}
function or(e, t, i) {
  if (t == null || e == null)
    return t;
  if (e === t || t.length === 0 && e.length === 0)
    return e;
  if (i || e.length === 0 && t.length > 0 || e.length > 0 && t.length === 0)
    return t;
  const s = [], o = [], n = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map();
  for (let a = 0; a < t.length; a++) {
    const l = t[a];
    r.set(l.instanceId, l);
  }
  for (let a = 0; a < e.length; a++) {
    const l = e[a];
    n.set(l.instanceId, l), r.has(l.instanceId) && s.push(l);
  }
  for (let a = 0; a < t.length; a++) {
    const l = t[a], c = l.instanceId;
    n.has(c) || o.push(l);
  }
  return s.length === e.length && o.length === 0 ? e : s.length === 0 && o.length === t.length ? t : s.length === 0 ? o : o.length === 0 ? s : [...s, ...o];
}
var OC = nr((e, t) => {
  const { registry: i, context: s } = ae(qe), o = H(null), n = H(null), r = H(null), a = H(null), l = H(null), c = H(), [d, u] = V(), [h, g] = V(), [p, f] = V(), [m, C] = V(() => new vt()), [v, w] = V(() => new vt("ag-hidden")), [y, S] = V(() => new vt("ag-hidden")), [x, D] = V(() => new vt("ag-invisible"));
  yl(t, () => ({
    // force new instance when grid tries to refresh
    refresh() {
      return !1;
    }
  })), kt(() => Wo(d, s, n.current), [d]);
  const M = ne((G) => {
    if (o.current = G, !G) {
      c.current = s.destroyBean(c.current);
      return;
    }
    const I = {
      setInnerRenderer: (b, L) => {
        u(b), f(L);
      },
      setChildCount: (b) => g(b),
      toggleCss: (b, L) => C((U) => U.setClass(b, L)),
      setContractedDisplayed: (b) => S((L) => L.setClass("ag-hidden", !b)),
      setExpandedDisplayed: (b) => w((L) => L.setClass("ag-hidden", !b)),
      setCheckboxVisible: (b) => D((L) => L.setClass("ag-invisible", !b)),
      setCheckboxSpacing: (b) => D((L) => L.setClass("ag-group-checkbox-spacing", b))
    }, _ = i.createDynamicBean("groupCellRendererCtrl", !0);
    _ && (c.current = s.createBean(_), c.current.init(
      I,
      G,
      r.current,
      a.current,
      l.current,
      OC,
      e
    ));
  }, []), k = X(() => `ag-cell-wrapper ${m.toString()}`, [m]), P = X(() => `ag-group-expanded ${v.toString()}`, [v]), F = X(
    () => `ag-group-contracted ${y.toString()}`,
    [y]
  ), N = X(() => `ag-group-checkbox ${x.toString()}`, [x]), j = d?.componentFromFramework, z = j ? d.componentClass : void 0, A = d == null && p != null, O = Ls(p);
  return /* @__PURE__ */ W.createElement(
    "span",
    {
      className: k,
      ref: M,
      ...e.colDef ? {} : { role: c.current?.getCellAriaRole() }
    },
    /* @__PURE__ */ W.createElement("span", { className: P, ref: a }),
    /* @__PURE__ */ W.createElement("span", { className: F, ref: l }),
    /* @__PURE__ */ W.createElement("span", { className: N, ref: r }),
    /* @__PURE__ */ W.createElement("span", { className: "ag-group-value", ref: n }, A ? O : j ? /* @__PURE__ */ W.createElement(z, { ...d.params }) : null),
    /* @__PURE__ */ W.createElement("span", { className: "ag-group-child-count" }, h)
  );
}), xh = OC, Uc = _i({
  setMethods: () => {
  }
}), bG = (e) => {
  const { initialProps: t, addUpdateCallback: i, CustomComponentClass: s, setMethods: o } = e, [{ key: n, ...r }, a] = V(t);
  return ve(() => {
    i((l) => a(l));
  }, []), /* @__PURE__ */ W.createElement(Uc.Provider, { value: { setMethods: o } }, /* @__PURE__ */ W.createElement(s, { key: n, ...r }));
}, RG = ot(bG), xG = 0;
function Fh() {
  return `agPortalKey_${++xG}`;
}
var VC = class {
  constructor(e, t, i, s) {
    this.portal = null, this.oldPortal = null, this.reactComponent = e, this.portalManager = t, this.componentType = i, this.suppressFallbackMethods = !!s, this.statelessComponent = this.isStateless(this.reactComponent), this.key = Fh(), this.portalKey = Fh(), this.instanceCreated = this.isStatelessComponent() ? re.resolve(!1) : new re((o) => {
      this.resolveInstanceCreated = o;
    });
  }
  getGui() {
    return this.eParentElement;
  }
  /** `getGui()` returns the parent element. This returns the actual root element. */
  getRootElement() {
    return this.eParentElement.firstChild;
  }
  destroy() {
    this.componentInstance && typeof this.componentInstance.destroy == "function" && this.componentInstance.destroy();
    const e = this.portal;
    e && this.portalManager.destroyPortal(e);
  }
  createParentElement(e) {
    const t = this.portalManager.getComponentWrappingElement(), i = document.createElement(t || "div");
    return i.classList.add("ag-react-container"), e.reactContainer = i, i;
  }
  statelessComponentRendered() {
    return this.eParentElement.childElementCount > 0 || this.eParentElement.childNodes.length > 0;
  }
  getFrameworkComponentInstance() {
    return this.componentInstance;
  }
  isStatelessComponent() {
    return this.statelessComponent;
  }
  getReactComponentName() {
    return this.reactComponent.name;
  }
  getMemoType() {
    return this.hasSymbol() ? Symbol.for("react.memo") : 60115;
  }
  hasSymbol() {
    return typeof Symbol == "function" && Symbol.for;
  }
  isStateless(e) {
    return typeof e == "function" && !(e.prototype && e.prototype.isReactComponent) || typeof e == "object" && e.$$typeof === this.getMemoType();
  }
  hasMethod(e) {
    const t = this.getFrameworkComponentInstance();
    return !!t && t[e] != null || this.fallbackMethodAvailable(e);
  }
  callMethod(e, t) {
    const i = this.getFrameworkComponentInstance();
    if (this.isStatelessComponent())
      return this.fallbackMethod(e, t && t[0] ? t[0] : {});
    if (!i) {
      setTimeout(() => this.callMethod(e, t));
      return;
    }
    const s = i[e];
    if (s)
      return s.apply(i, t);
    if (this.fallbackMethodAvailable(e))
      return this.fallbackMethod(e, t && t[0] ? t[0] : {});
  }
  addMethod(e, t) {
    this[e] = t;
  }
  init(e) {
    return this.eParentElement = this.createParentElement(e), this.createOrUpdatePortal(e), new re((t) => this.createReactComponent(t));
  }
  createOrUpdatePortal(e) {
    this.isStatelessComponent() || (this.ref = (t) => {
      this.componentInstance = t, this.resolveInstanceCreated?.(!0), this.resolveInstanceCreated = void 0;
    }, e.ref = this.ref), this.reactElement = this.createElement(this.reactComponent, { ...e, key: this.key }), this.portal = jh(
      this.reactElement,
      this.eParentElement,
      this.portalKey
      // fixed deltaRowModeRefreshCompRenderer
    );
  }
  createElement(e, t) {
    return Vh(e, t);
  }
  createReactComponent(e) {
    this.portalManager.mountReactPortal(this.portal, this, e);
  }
  rendered() {
    return this.isStatelessComponent() && this.statelessComponentRendered() || !!(!this.isStatelessComponent() && this.getFrameworkComponentInstance());
  }
  /*
   * fallback methods - these will be invoked if a corresponding instance method is not present
   * for example if refresh is called and is not available on the component instance, then refreshComponent on this
   * class will be invoked instead
   *
   * Currently only refresh is supported
   */
  refreshComponent(e) {
    this.oldPortal = this.portal, this.createOrUpdatePortal(e), this.portalManager.updateReactPortal(this.oldPortal, this.portal);
  }
  fallbackMethod(e, t) {
    const i = this[`${e}Component`];
    if (!this.suppressFallbackMethods && i)
      return i.bind(this)(t);
  }
  fallbackMethodAvailable(e) {
    return this.suppressFallbackMethods ? !1 : !!this[`${e}Component`];
  }
};
function yr(e, t, i) {
  e.forEach((s) => {
    const o = t[s];
    o && (i[s] = o);
  });
}
var dt = class extends VC {
  constructor() {
    super(...arguments), this.awaitUpdateCallback = new re((e) => {
      this.resolveUpdateCallback = e;
    }), this.wrapperComponent = RG;
  }
  init(e) {
    return this.sourceParams = e, super.init(this.getProps());
  }
  addMethod() {
  }
  getInstance() {
    return this.instanceCreated.then(() => this.componentInstance);
  }
  getFrameworkComponentInstance() {
    return this;
  }
  createElement(e, t) {
    return super.createElement(this.wrapperComponent, {
      initialProps: t,
      CustomComponentClass: e,
      setMethods: (i) => this.setMethods(i),
      addUpdateCallback: (i) => {
        this.updateCallback = () => (i(this.getProps()), new re((s) => {
          setTimeout(() => {
            s();
          });
        })), this.resolveUpdateCallback();
      }
    });
  }
  setMethods(e) {
    this.providedMethods = e, yr(this.getOptionalMethods(), this.providedMethods, this);
  }
  getOptionalMethods() {
    return [];
  }
  getProps() {
    return {
      ...this.sourceParams,
      key: this.key,
      ref: this.ref
    };
  }
  refreshProps() {
    return this.updateCallback ? this.updateCallback() : new re(
      (e) => this.awaitUpdateCallback.then(() => {
        this.updateCallback().then(() => e());
      })
    );
  }
}, FG = class extends dt {
  refresh(e) {
    return this.sourceParams = e, this.refreshProps(), !0;
  }
}, PG = class extends dt {
  constructor() {
    super(...arguments), this.date = null, this.onDateChange = (e) => this.updateDate(e);
  }
  getDate() {
    return this.date;
  }
  setDate(e) {
    this.date = e, this.refreshProps();
  }
  refresh(e) {
    this.sourceParams = e, this.refreshProps();
  }
  getOptionalMethods() {
    return ["afterGuiAttached", "setInputPlaceholder", "setInputAriaLabel", "setDisabled"];
  }
  updateDate(e) {
    this.setDate(e), this.sourceParams.onDateChanged();
  }
  getProps() {
    const e = super.getProps();
    return e.date = this.date, e.onDateChange = this.onDateChange, delete e.onDateChanged, e;
  }
}, EG = class extends dt {
  constructor() {
    super(...arguments), this.label = "", this.icon = null, this.shake = !1;
  }
  setIcon(e, t) {
    this.icon = e, this.shake = t, this.refreshProps();
  }
  setLabel(e) {
    this.label = e, this.refreshProps();
  }
  getProps() {
    const e = super.getProps(), { label: t, icon: i, shake: s } = this;
    return e.label = t, e.icon = i, e.shake = s, e;
  }
}, DG = class extends dt {
  constructor() {
    super(...arguments), this.model = null, this.onModelChange = (e) => this.updateModel(e), this.onUiChange = () => this.sourceParams.filterModifiedCallback(), this.expectingNewMethods = !0, this.hasBeenActive = !1, this.awaitSetMethodsCallback = new re((e) => {
      this.resolveSetMethodsCallback = e;
    });
  }
  isFilterActive() {
    return this.model != null;
  }
  doesFilterPass(e) {
    return this.providedMethods.doesFilterPass(e);
  }
  getModel() {
    return this.model;
  }
  setModel(e) {
    return this.expectingNewMethods = !0, this.model = e, this.hasBeenActive || (this.hasBeenActive = this.isFilterActive()), this.refreshProps();
  }
  refresh(e) {
    return this.sourceParams = e, this.refreshProps(), !0;
  }
  afterGuiAttached(e) {
    const t = this.providedMethods;
    t ? t.afterGuiAttached?.(e) : this.awaitSetMethodsCallback.then(() => this.providedMethods?.afterGuiAttached?.(e));
  }
  getOptionalMethods() {
    return ["afterGuiDetached", "onNewRowsLoaded", "getModelAsString", "onAnyFilterChanged"];
  }
  setMethods(e) {
    this.expectingNewMethods === !1 && this.hasBeenActive && this.providedMethods?.doesFilterPass !== e?.doesFilterPass && setTimeout(() => {
      this.sourceParams.filterChangedCallback();
    }), this.expectingNewMethods = !1, super.setMethods(e), this.resolveSetMethodsCallback(), this.resolveFilterPassCallback?.(), this.resolveFilterPassCallback = void 0;
  }
  updateModel(e) {
    this.resolveFilterPassCallback?.();
    const t = new re((i) => {
      this.resolveFilterPassCallback = i;
    });
    this.setModel(e).then(() => {
      t.then(() => {
        this.sourceParams.filterChangedCallback();
      });
    });
  }
  getProps() {
    const e = super.getProps();
    return e.model = this.model, e.onModelChange = this.onModelChange, e.onUiChange = this.onUiChange, delete e.filterChangedCallback, e;
  }
}, TG = class extends dt {
  constructor() {
    super(...arguments), this.awaitSetMethodsCallback = new re((e) => {
      this.resolveSetMethodsCallback = e;
    });
  }
  refresh(e) {
    return this.sourceParams = e, this.refreshProps(), !0;
  }
  afterGuiAttached(e) {
    const t = this.providedMethods;
    t ? t.afterGuiAttached?.(e) : this.awaitSetMethodsCallback.then(() => this.providedMethods?.afterGuiAttached?.(e));
  }
  getOptionalMethods() {
    return ["afterGuiDetached", "onNewRowsLoaded", "onAnyFilterChanged"];
  }
  setMethods(e) {
    super.setMethods(e), this.resolveSetMethodsCallback();
  }
};
function GC(e, t) {
  e.parentFilterInstance((i) => {
    (i.setModel(t) || re.resolve()).then(() => {
      e.filterParams.filterChangedCallback();
    });
  });
}
var MG = class {
  constructor(e, t) {
    this.floatingFilterParams = e, this.refreshProps = t, this.model = null, this.onModelChange = (i) => this.updateModel(i);
  }
  getProps() {
    return {
      ...this.floatingFilterParams,
      model: this.model,
      onModelChange: this.onModelChange
    };
  }
  onParentModelChanged(e) {
    this.model = e, this.refreshProps();
  }
  refresh(e) {
    this.floatingFilterParams = e, this.refreshProps();
  }
  setMethods(e) {
    yr(this.getOptionalMethods(), e, this);
  }
  getOptionalMethods() {
    return ["afterGuiAttached"];
  }
  updateModel(e) {
    this.model = e, this.refreshProps(), GC(this.floatingFilterParams, e);
  }
}, AG = class extends dt {
  constructor() {
    super(...arguments), this.model = null, this.onModelChange = (e) => this.updateModel(e);
  }
  onParentModelChanged(e) {
    this.model = e, this.refreshProps();
  }
  refresh(e) {
    this.sourceParams = e, this.refreshProps();
  }
  getOptionalMethods() {
    return ["afterGuiAttached"];
  }
  updateModel(e) {
    this.model = e, this.refreshProps(), GC(this.sourceParams, e);
  }
  getProps() {
    const e = super.getProps();
    return e.model = this.model, e.onModelChange = this.onModelChange, e;
  }
}, IG = class extends dt {
  refresh(e) {
    this.sourceParams = e, this.refreshProps();
  }
  getOptionalMethods() {
    return ["afterGuiAttached"];
  }
}, kG = class extends dt {
  refresh(e) {
    return this.sourceParams = e, this.refreshProps(), !0;
  }
}, LG = class extends dt {
  refresh(e) {
    this.sourceParams = e, this.refreshProps();
  }
}, OG = class extends dt {
  constructor() {
    super(...arguments), this.active = !1, this.expanded = !1, this.onActiveChange = (e) => this.updateActive(e);
  }
  setActive(e) {
    this.awaitSetActive(e);
  }
  setExpanded(e) {
    this.expanded = e, this.refreshProps();
  }
  getOptionalMethods() {
    return ["select", "configureDefaults"];
  }
  awaitSetActive(e) {
    return this.active = e, this.refreshProps();
  }
  updateActive(e) {
    const t = this.awaitSetActive(e);
    e && t.then(() => this.sourceParams.onItemActivated());
  }
  getProps() {
    const e = super.getProps();
    return e.active = this.active, e.expanded = this.expanded, e.onActiveChange = this.onActiveChange, delete e.onItemActivated, e;
  }
}, VG = class extends dt {
  refresh(e) {
    this.sourceParams = e, this.refreshProps();
  }
}, GG = class extends dt {
  refresh(e) {
    return this.sourceParams = e, this.refreshProps(), !0;
  }
}, HG = class extends dt {
  constructor() {
    super(...arguments), this.onStateChange = (e) => this.updateState(e);
  }
  refresh(e) {
    return this.sourceParams = e, this.refreshProps(), !0;
  }
  getState() {
    return this.state;
  }
  updateState(e) {
    this.state = e, this.refreshProps(), this.sourceParams.onStateUpdated();
  }
  getProps() {
    const e = super.getProps();
    return e.state = this.state, e.onStateChange = this.onStateChange, e;
  }
};
function jc() {
  B(231);
}
var BG = 1e3, NG = class {
  constructor(e, t, i) {
    this.destroyed = !1, this.portals = [], this.hasPendingPortalUpdate = !1, this.wrappingElement = t || "div", this.refresher = e, this.maxComponentCreationTimeMs = i || BG;
  }
  getPortals() {
    return this.portals;
  }
  destroy() {
    this.destroyed = !0;
  }
  destroyPortal(e) {
    this.portals = this.portals.filter((t) => t !== e), this.batchUpdate();
  }
  getComponentWrappingElement() {
    return this.wrappingElement;
  }
  mountReactPortal(e, t, i) {
    this.portals = [...this.portals, e], this.waitForInstance(t, i), this.batchUpdate();
  }
  updateReactPortal(e, t) {
    this.portals[this.portals.indexOf(e)] = t, this.batchUpdate();
  }
  batchUpdate() {
    this.hasPendingPortalUpdate || (setTimeout(() => {
      this.destroyed || (this.refresher(), this.hasPendingPortalUpdate = !1);
    }), this.hasPendingPortalUpdate = !0);
  }
  waitForInstance(e, t, i = Date.now()) {
    if (this.destroyed) {
      t(null);
      return;
    }
    if (e.rendered())
      t(e);
    else {
      if (Date.now() - i >= this.maxComponentCreationTimeMs && !this.hasPendingPortalUpdate) {
        Mo(!0, () => this.refresher()), e.rendered() && t(e);
        return;
      }
      window.setTimeout(() => {
        this.waitForInstance(e, t, i);
      });
    }
  }
}, WG = ({ ctrl: e }) => {
  const t = e.isAlive(), { context: i } = ae(qe), s = t ? e.column.getColId() : void 0, [o, n] = V(), [r, a] = V(), l = H(), c = H(null), d = H(null), u = H(null), h = H(), g = H();
  t && !g.current && (g.current = new Go(() => c.current));
  const p = ne((v) => {
    if (c.current = v, l.current = v ? i.createBean(new Os()) : i.destroyBean(l.current), !v || !e.isAlive())
      return;
    const w = () => {
      const S = e.getSelectAllGui();
      S && (d.current?.insertAdjacentElement("afterend", S), l.current.addDestroyFunc(() => S.remove()));
    }, y = {
      setWidth: (S) => {
        c.current && (c.current.style.width = S);
      },
      toggleCss: (S, x) => g.current.toggleCss(S, x),
      setUserStyles: (S) => a(S),
      setAriaSort: (S) => {
        c.current && (S ? VR(c.current, S) : GR(c.current));
      },
      setUserCompDetails: (S) => n(S),
      getUserCompInstance: () => h.current || void 0,
      refreshSelectAllGui: w,
      removeSelectAllGui: () => e.getSelectAllGui()?.remove()
    };
    e.setComp(y, v, d.current, u.current, l.current), w();
  }, []);
  kt(
    () => Wo(o, i, u.current, h),
    [o]
  ), ve(() => {
    e.setDragSource(c.current);
  }, [o]);
  const f = X(() => !!(o?.componentFromFramework && Gs(o.componentClass)), [o]), m = o?.componentFromFramework, C = o?.componentClass;
  return /* @__PURE__ */ W.createElement("div", { ref: p, style: r, className: "ag-header-cell", "col-id": s, role: "columnheader" }, /* @__PURE__ */ W.createElement("div", { ref: d, className: "ag-header-cell-resize", role: "presentation" }), /* @__PURE__ */ W.createElement("div", { ref: u, className: "ag-header-cell-comp-wrapper", role: "presentation" }, m ? f ? /* @__PURE__ */ W.createElement(C, { ...o.params }) : /* @__PURE__ */ W.createElement(C, { ...o.params, ref: h }) : null));
}, zG = ot(WG), _G = class {
  constructor(e, t) {
    this.floatingFilterParams = e, this.refreshProps = t;
  }
  getProps() {
    return this.floatingFilterParams;
  }
  refresh(e) {
    this.floatingFilterParams = e, this.refreshProps();
  }
  setMethods(e) {
    yr(this.getOptionalMethods(), e, this);
  }
  getOptionalMethods() {
    return ["afterGuiAttached"];
  }
}, UG = ({ ctrl: e }) => {
  const { context: t, gos: i } = ae(qe), [s, o] = V(), [n, r] = V(
    () => new vt("ag-header-cell", "ag-floating-filter")
  ), [a, l] = V(() => new vt()), [c, d] = V(
    () => new vt("ag-floating-filter-button", "ag-hidden")
  ), [u, h] = V("false"), [g, p] = V(), [, f] = V(1), m = H(), C = H(null), v = H(null), w = H(null), y = H(null), S = H(), x = H(), D = (b) => {
    b != null && S.current && S.current(b);
  }, M = ne((b) => {
    if (C.current = b, m.current = b ? t.createBean(new Os()) : t.destroyBean(m.current), !b || !e.isAlive())
      return;
    x.current = new re((U) => {
      S.current = U;
    });
    const L = {
      toggleCss: (U, K) => r((Q) => Q.setClass(U, K)),
      setUserStyles: (U) => o(U),
      addOrRemoveBodyCssClass: (U, K) => l((Q) => Q.setClass(U, K)),
      setButtonWrapperDisplayed: (U) => {
        d((K) => K.setClass("ag-hidden", !U)), h(U ? "false" : "true");
      },
      setWidth: (U) => {
        C.current && (C.current.style.width = U);
      },
      setCompDetails: (U) => p(U),
      getFloatingFilterComp: () => x.current ? x.current : null,
      setMenuIcon: (U) => y.current?.appendChild(U)
    };
    e.setComp(L, b, y.current, v.current, m.current);
  }, []);
  kt(
    () => Wo(g, t, v.current, D),
    [g]
  );
  const k = X(() => n.toString(), [n]), P = X(() => a.toString(), [a]), F = X(() => c.toString(), [c]), N = X(() => !!(g && g.componentFromFramework && Gs(g.componentClass)), [g]), j = X(() => i.get("reactiveCustomComponents"), []), z = X(() => i.get("enableFilterHandlers"), []), [A, O] = V();
  ve(() => {
    if (g?.componentFromFramework)
      if (j) {
        const b = z ? _G : MG, L = new b(g.params, () => f((U) => U + 1));
        D(L), O(L);
      } else
        jc();
  }, [g]);
  const G = A?.getProps(), I = g?.componentFromFramework, _ = g?.componentClass;
  return /* @__PURE__ */ W.createElement("div", { ref: M, style: s, className: k, role: "gridcell" }, /* @__PURE__ */ W.createElement("div", { ref: v, className: P, role: "presentation" }, I ? j ? G && /* @__PURE__ */ W.createElement(
    Uc.Provider,
    {
      value: {
        setMethods: (b) => A.setMethods(b)
      }
    },
    /* @__PURE__ */ W.createElement(_, { ...G })
  ) : /* @__PURE__ */ W.createElement(_, { ...g.params, ref: N ? () => {
  } : D }) : null), /* @__PURE__ */ W.createElement(
    "div",
    {
      ref: w,
      "aria-hidden": u,
      className: F,
      role: "presentation"
    },
    /* @__PURE__ */ W.createElement(
      "button",
      {
        ref: y,
        type: "button",
        className: "ag-button ag-floating-filter-button-button",
        tabIndex: -1
      }
    )
  ));
}, jG = ot(UG), $G = ({ ctrl: e }) => {
  const { context: t } = ae(qe), [i, s] = V(), [o, n] = V(() => new vt()), [r, a] = V(() => new vt()), [l, c] = V("false"), [d, u] = V(), [h, g] = V(), p = X(() => e.column.getUniqueId(), []), f = H(), m = H(null), C = H(null), v = H(null), w = H(), y = ne((P) => {
    if (m.current = P, f.current = P ? t.createBean(new Os()) : t.destroyBean(f.current), !P || !e.isAlive())
      return;
    const F = {
      setWidth: (N) => {
        m.current && (m.current.style.width = N);
      },
      toggleCss: (N, j) => n((z) => z.setClass(N, j)),
      setUserStyles: (N) => s(N),
      setHeaderWrapperHidden: (N) => {
        const j = v.current;
        j && (N ? j.style.setProperty("display", "none") : j.style.removeProperty("display"));
      },
      setHeaderWrapperMaxHeight: (N) => {
        const j = v.current;
        j && (N != null ? j.style.setProperty("max-height", `${N}px`) : j.style.removeProperty("max-height"), j.classList.toggle("ag-header-cell-comp-wrapper-limited-height", N != null));
      },
      setUserCompDetails: (N) => g(N),
      setResizableDisplayed: (N) => {
        a((j) => j.setClass("ag-hidden", !N)), c(N ? "false" : "true");
      },
      setAriaExpanded: (N) => u(N),
      getUserCompInstance: () => w.current || void 0
    };
    e.setComp(F, P, C.current, v.current, f.current);
  }, []);
  kt(() => Wo(h, t, v.current), [h]), ve(() => {
    m.current && e.setDragSource(m.current);
  }, [h]);
  const S = X(() => !!(h?.componentFromFramework && Gs(h.componentClass)), [h]), x = X(() => "ag-header-group-cell " + o.toString(), [o]), D = X(
    () => "ag-header-cell-resize " + r.toString(),
    [r]
  ), M = h?.componentFromFramework, k = h?.componentClass;
  return /* @__PURE__ */ W.createElement(
    "div",
    {
      ref: y,
      style: i,
      className: x,
      "col-id": p,
      role: "columnheader",
      "aria-expanded": d
    },
    /* @__PURE__ */ W.createElement("div", { ref: v, className: "ag-header-cell-comp-wrapper", role: "presentation" }, M ? S ? /* @__PURE__ */ W.createElement(k, { ...h.params }) : /* @__PURE__ */ W.createElement(k, { ...h.params, ref: w }) : null),
    /* @__PURE__ */ W.createElement("div", { ref: C, "aria-hidden": l, className: D })
  );
}, KG = ot($G), YG = ({ ctrl: e }) => {
  const { context: t } = ae(qe), { topOffset: i, rowHeight: s } = X(() => e.getTopAndHeight(), []), [o, n] = V(() => e.getAriaRowIndex()), r = e.headerRowClass, [a, l] = V(() => s + "px"), [c, d] = V(() => i + "px"), u = H(null), [h, g] = V(() => e.getUpdatedHeaderCtrls()), p = H(), f = H(null), m = ne((w) => {
    if (f.current = w, p.current = w ? t.createBean(new Os()) : t.destroyBean(p.current), !w)
      return;
    const y = {
      setHeight: (S) => l(S),
      setTop: (S) => d(S),
      setHeaderCtrls: (S, x, D) => {
        const M = u.current, k = or(M, S, x);
        k !== M && (u.current = k, Mo(D, () => g(k)));
      },
      setWidth: (S) => {
        f.current && (f.current.style.width = S);
      },
      setRowIndex: (S) => {
        n(S);
      }
    };
    e.setComp(y, p.current, !1);
  }, []), C = X(
    () => ({
      height: a,
      top: c
    }),
    [a, c]
  ), v = ne((w) => {
    switch (e.type) {
      case "group":
        return /* @__PURE__ */ W.createElement(KG, { ctrl: w, key: w.instanceId });
      case "filter":
        return /* @__PURE__ */ W.createElement(jG, { ctrl: w, key: w.instanceId });
      default:
        return /* @__PURE__ */ W.createElement(zG, { ctrl: w, key: w.instanceId });
    }
  }, []);
  return /* @__PURE__ */ W.createElement("div", { ref: m, className: r, role: "row", style: C, "aria-rowindex": o }, h.map(v));
}, qG = ot(YG), XG = ({ pinned: e }) => {
  const [t, i] = V(!0), [s, o] = V([]), { context: n } = ae(qe), r = H(null), a = H(null), l = H(), c = e === "left", d = e === "right", u = !c && !d, h = ne((f) => {
    if (r.current = f, l.current = f ? n.createBean(new WE(e)) : n.destroyBean(l.current), !f)
      return;
    const m = {
      setDisplayed: i,
      setCtrls: (C) => o(C),
      // centre only
      setCenterWidth: (C) => {
        a.current && (a.current.style.width = C);
      },
      setViewportScrollLeft: (C) => {
        r.current && (r.current.scrollLeft = C);
      },
      // pinned only
      setPinnedContainerWidth: (C) => {
        r.current && (r.current.style.width = C, r.current.style.minWidth = C, r.current.style.maxWidth = C);
      }
    };
    l.current.setComp(m, r.current);
  }, []), g = t ? "" : "ag-hidden", p = () => s.map((f) => /* @__PURE__ */ W.createElement(qG, { ctrl: f, key: f.instanceId }));
  return c ? /* @__PURE__ */ W.createElement("div", { ref: h, className: "ag-pinned-left-header " + g, "aria-hidden": !t, role: "rowgroup" }, p()) : d ? /* @__PURE__ */ W.createElement("div", { ref: h, className: "ag-pinned-right-header " + g, "aria-hidden": !t, role: "rowgroup" }, p()) : u ? /* @__PURE__ */ W.createElement("div", { ref: h, className: "ag-header-viewport " + g, role: "presentation", tabIndex: -1 }, /* @__PURE__ */ W.createElement("div", { ref: a, className: "ag-header-container", role: "rowgroup" }, p())) : null;
}, ga = ot(XG), ZG = () => {
  const [e, t] = V(() => new vt()), [i, s] = V(), { context: o } = ae(qe), n = H(null), r = H(), a = ne((d) => {
    if (n.current = d, r.current = d ? o.createBean(new GE()) : o.destroyBean(r.current), !d)
      return;
    const u = {
      toggleCss: (h, g) => t((p) => p.setClass(h, g)),
      setHeightAndMinHeight: (h) => s(h)
    };
    r.current.setComp(u, d, d);
  }, []), l = X(() => "ag-header " + e.toString(), [e]), c = X(
    () => ({
      height: i,
      minHeight: i
    }),
    [i]
  );
  return /* @__PURE__ */ W.createElement("div", { ref: a, className: l, style: c, role: "presentation" }, /* @__PURE__ */ W.createElement(ga, { pinned: "left" }), /* @__PURE__ */ W.createElement(ga, { pinned: null }), /* @__PURE__ */ W.createElement(ga, { pinned: "right" }));
}, QG = ot(ZG), JG = (e, t) => {
  ve(() => {
    const i = t.current;
    if (i) {
      const s = i.parentElement;
      if (s) {
        const o = document.createComment(e);
        return s.insertBefore(o, i), () => {
          s.removeChild(o);
        };
      }
    }
  }, [e]);
}, yi = JG, eH = class {
  constructor(e, t) {
    this.cellEditorParams = e, this.refreshProps = t, this.instanceCreated = new re((i) => {
      this.resolveInstanceCreated = i;
    }), this.onValueChange = (i) => this.updateValue(i), this.value = e.value;
  }
  getProps() {
    return {
      ...this.cellEditorParams,
      initialValue: this.cellEditorParams.value,
      value: this.value,
      onValueChange: this.onValueChange
    };
  }
  getValue() {
    return this.value;
  }
  refresh(e) {
    this.cellEditorParams = e, this.refreshProps();
  }
  setMethods(e) {
    yr(this.getOptionalMethods(), e, this);
  }
  getInstance() {
    return this.instanceCreated.then(() => this.componentInstance);
  }
  setRef(e) {
    this.componentInstance = e, this.resolveInstanceCreated?.(), this.resolveInstanceCreated = void 0;
  }
  getOptionalMethods() {
    return [
      "isCancelBeforeStart",
      "isCancelAfterEnd",
      "focusIn",
      "focusOut",
      "afterGuiAttached",
      "getValidationErrors",
      "getValidationElement"
    ];
  }
  updateValue(e) {
    this.value = e, this.refreshProps();
  }
}, tH = (e) => {
  const t = H(e), i = H(), s = H(!1), o = H(!1), [, n] = V(0);
  s.current && (o.current = !0), ve(() => (s.current || (i.current = t.current(), s.current = !0), n((r) => r + 1), () => {
    o.current && i.current?.();
  }), []);
}, iH = (e) => {
  const [t, i] = V(), s = ae(qe), { context: o, popupSvc: n, gos: r, editSvc: a } = s, { editDetails: l, cellCtrl: c, eParentCell: d } = e;
  return tH(() => {
    const { compDetails: u } = l, h = r.get("stopEditingWhenCellsLoseFocus"), g = o.createBean(a.createPopupEditorWrapper(u.params)), p = g.getGui();
    if (e.jsChildComp) {
      const S = e.jsChildComp.getGui();
      S && p.appendChild(S);
    }
    const { column: f, rowNode: m } = c, C = {
      column: f,
      rowNode: m,
      type: "popupCellEditor",
      eventSource: d,
      ePopup: p,
      position: l.popupPosition,
      keepWithinBounds: !0
    }, v = n?.positionPopupByComponent.bind(n, C), w = n?.addPopup({
      modal: h,
      eChild: p,
      closeOnEsc: !0,
      closedCallback: () => {
        c.onPopupEditorClosed();
      },
      anchorToElement: d,
      positionCallback: v,
      ariaOwns: d
    }), y = w ? w.hideFunc : void 0;
    return i(g), e.jsChildComp?.afterGuiAttached?.(), () => {
      y?.(), o.destroyBean(g);
    };
  }), kt(() => () => {
    c.isCellFocused() && t?.getGui().contains(Fe(s)) && d.focus({ preventScroll: !0 });
  }, [t]), t && e.wrappedContent ? jh(e.wrappedContent, t.getGui()) : null;
}, Ph = ot(iH), sH = (e, t, i) => {
  const { compProxy: s } = e;
  i(s);
  const o = s.getProps(), n = Gs(t);
  return /* @__PURE__ */ W.createElement(
    Uc.Provider,
    {
      value: {
        setMethods: (r) => s.setMethods(r)
      }
    },
    n ? /* @__PURE__ */ W.createElement(t, { ...o }) : /* @__PURE__ */ W.createElement(t, { ...o, ref: (r) => s.setRef(r) })
  );
}, Eh = (e, t, i) => e.compProxy ? sH(e, t, i) : /* @__PURE__ */ W.createElement(t, { ...e.compDetails.params, ref: i }), oH = (e, t, i, s, o) => {
  const n = e.compDetails, r = n.componentClass, a = n.componentFromFramework && !e.popup, l = n.componentFromFramework && e.popup, c = !n.componentFromFramework && e.popup;
  return a ? Eh(e, r, t) : l ? /* @__PURE__ */ W.createElement(
    Ph,
    {
      editDetails: e,
      cellCtrl: s,
      eParentCell: i,
      wrappedContent: Eh(e, r, t)
    }
  ) : c && o ? /* @__PURE__ */ W.createElement(Ph, { editDetails: e, cellCtrl: s, eParentCell: i, jsChildComp: o }) : null;
}, nH = (e, t, i, s, o, n) => {
  const { context: r } = ae(qe), a = ne(() => {
    const l = o.current;
    if (!l)
      return;
    const c = l.getGui();
    c && c.parentElement && c.parentElement.removeChild(c), r.destroyBean(l), o.current = void 0;
  }, []);
  ve(() => {
    const l = e != null, c = e?.compDetails && !e.compDetails.componentFromFramework, d = t && i == null;
    if (!(l && c && !d)) {
      a();
      return;
    }
    const h = e.compDetails;
    if (o.current) {
      const p = o.current, m = p.refresh != null && e.force == !1 ? p.refresh(h.params) : !1;
      if (m === !0 || m === void 0)
        return;
      a();
    }
    h.newAgStackInstance().then((p) => {
      if (!p)
        return;
      const f = p.getGui();
      if (!f)
        return;
      (t ? i : n.current).appendChild(f), o.current = p;
    });
  }, [e, t, s]), ve(() => a, []);
}, HC = nH, rH = ({
  cellCtrl: e,
  parent: t
}) => {
  const i = H(), s = X(() => {
    const { loadingComp: o } = e.getDeferLoadingCellRenderer();
    return o ? {
      value: void 0,
      compDetails: o,
      force: !1
    } : void 0;
  }, [e]);
  if (HC(s, !1, void 0, 1, i, t), s?.compDetails?.componentFromFramework) {
    const o = s.compDetails.componentClass;
    return /* @__PURE__ */ W.createElement(o, { ...s.compDetails.params });
  }
  return /* @__PURE__ */ W.createElement(W.Fragment, null);
}, aH = ({
  cellCtrl: e,
  printLayout: t,
  editingCell: i
}) => {
  const s = ae(qe), { context: o } = s, {
    column: { colIdSanitised: n },
    instanceId: r
  } = e, a = H(), [l, c] = V(
    () => e.isCellRenderer() ? void 0 : { compDetails: void 0, value: e.getValueToDisplay(), force: !1 }
  ), [d, u] = V(), [h, g] = V(1), [p, f] = V(), [m, C] = V(!1), [v, w] = V(!1), [y, S] = V(!1), [x, D] = V(), M = X(() => e.isForceWrapper(), [e]), k = X(() => e.getCellAriaRole(), [e]), P = H(null), F = H(null), N = H(null), j = H(), z = H(), A = H(), O = H([]), G = H(), [I, _] = V(0), b = ne((ee) => {
    G.current = ee, _((de) => de + 1);
  }, []), L = l != null && (m || y || v) && (d == null || !!d.popup), U = M || L, K = ne(
    (ee) => {
      if (z.current = ee, ee) {
        const de = ee.isCancelBeforeStart && ee.isCancelBeforeStart();
        setTimeout(() => {
          de ? (e.stopEditing(!0), e.focusCell(!0)) : (e.cellEditorAttached(), e.enableEditorTooltipFeature(ee));
        });
      }
    },
    [e]
  ), Q = H();
  Q.current || (Q.current = new Go(() => P.current)), HC(l, U, G.current, I, j, P);
  const ie = H();
  kt(() => {
    const ee = ie.current, de = l;
    if (ie.current = l, ee == null || ee.compDetails == null || de == null || de.compDetails == null)
      return;
    const fe = ee.compDetails, Ue = de.compDetails;
    if (fe.componentClass != Ue.componentClass || N.current?.refresh == null)
      return;
    N.current.refresh(Ue.params) != !0 && g((we) => we + 1);
  }, [l]), kt(() => {
    if (!(d && !d.compDetails.componentFromFramework))
      return;
    const de = d.compDetails, fe = d.popup === !0, Ue = de.newAgStackInstance();
    return Ue.then((oe) => {
      if (!oe)
        return;
      const we = oe.getGui();
      K(oe), fe || ((M ? A : P).current?.appendChild(we), oe.afterGuiAttached && oe.afterGuiAttached()), D(oe);
    }), () => {
      Ue.then((oe) => {
        const we = oe.getGui();
        e.disableEditorTooltipFeature(), o.destroyBean(oe), K(void 0), D(void 0), we?.parentElement?.removeChild(we);
      });
    };
  }, [d]);
  const Pe = ne(
    (ee) => {
      if (A.current = ee, !ee) {
        O.current.forEach((fe) => fe()), O.current = [];
        return;
      }
      const de = (fe) => {
        if (fe) {
          const Ue = fe.getGui();
          ee.insertAdjacentElement("afterbegin", Ue), O.current.push(() => {
            o.destroyBean(fe), Xt(Ue);
          });
        }
        return fe;
      };
      if (m) {
        const fe = e.createSelectionCheckbox();
        de(fe);
      }
      y && de(e.createDndSource()), v && de(e.createRowDragComp());
    },
    [e, o, y, v, m]
  ), Ie = ne(() => {
    const ee = !e.isCellSpanning() || F.current, de = P.current;
    if (a.current = de ? o.createBean(new Os()) : o.destroyBean(a.current), !de || !ee || !e)
      return;
    const fe = {
      toggleCss: (oe, we) => Q.current.toggleCss(oe, we),
      setUserStyles: (oe) => f(oe),
      getFocusableElement: () => P.current,
      setIncludeSelection: (oe) => C(oe),
      setIncludeRowDrag: (oe) => w(oe),
      setIncludeDndSource: (oe) => S(oe),
      getCellEditor: () => z.current || null,
      getCellRenderer: () => N.current ?? j.current,
      getParentOfValue: () => G.current ?? A.current ?? P.current,
      setRenderDetails: (oe, we, Be) => {
        const je = () => {
          c(($e) => $e?.compDetails !== oe || $e?.value !== we || $e?.force !== Be ? {
            value: we,
            compDetails: oe,
            force: Be
          } : $e);
        };
        if (oe?.params?.deferRender && !e.rowNode.group) {
          const { loadingComp: $e, onReady: Wt } = e.getDeferLoadingCellRenderer();
          if ($e) {
            c({
              value: void 0,
              compDetails: $e,
              force: !1
            }), Wt.then(() => SG(je));
            return;
          }
        }
        je();
      },
      setEditDetails: (oe, we, Be, je) => {
        if (oe) {
          let $e;
          oe.componentFromFramework && (je ? $e = new eH(
            oe.params,
            () => g((Wt) => Wt + 1)
          ) : jc()), u({
            compDetails: oe,
            popup: we,
            popupPosition: Be,
            compProxy: $e
          }), we || c(void 0);
        } else
          e.hasBrowserFocus() && fe.getFocusableElement().focus({ preventScroll: !0 }), u((Wt) => {
            Wt?.compProxy && (z.current = void 0);
          });
      },
      refreshEditStyles: (oe, we) => {
        if (!P.current)
          return;
        const { current: Be } = Q;
        Be.toggleCss("ag-cell-value", !U), Be.toggleCss("ag-cell-inline-editing", !!oe && !we), Be.toggleCss("ag-cell-popup-editing", !!oe && !!we), Be.toggleCss("ag-cell-not-inline-editing", !oe || !!we);
      }
    }, Ue = A.current || void 0;
    e.setComp(
      fe,
      de,
      F.current ?? void 0,
      Ue,
      t,
      i,
      a.current
    );
  }, []), le = ne((ee) => {
    P.current = ee, Ie();
  }, []), se = ne((ee) => {
    F.current = ee, Ie();
  }, []), ge = X(() => !!(l?.compDetails?.componentFromFramework && Gs(l.compDetails.componentClass)), [l]);
  kt(() => {
    if (!P.current)
      return;
    const { current: ee } = Q;
    ee.toggleCss("ag-cell-value", !U), ee.toggleCss("ag-cell-inline-editing", !!d && !d.popup), ee.toggleCss("ag-cell-popup-editing", !!d && !!d.popup), ee.toggleCss("ag-cell-not-inline-editing", !d || !!d.popup);
  });
  const ce = () => {
    const { compDetails: ee, value: de } = l;
    if (!ee)
      return de?.toString?.() ?? de;
    if (ee.componentFromFramework) {
      const fe = ee.componentClass;
      return /* @__PURE__ */ W.createElement(KC, { fallback: /* @__PURE__ */ W.createElement(rH, { cellCtrl: e, parent: P }) }, ge ? /* @__PURE__ */ W.createElement(fe, { ...ee.params, key: h }) : /* @__PURE__ */ W.createElement(fe, { ...ee.params, key: h, ref: N }));
    }
  }, ke = () => {
    const ee = () => l == null ? null : U ? /* @__PURE__ */ W.createElement("span", { role: "presentation", id: `cell-${r}`, className: "ag-cell-value", ref: b }, ce()) : ce(), de = (fe) => oH(fe, K, P.current, e, x);
    return d != null ? d.popup ? /* @__PURE__ */ W.createElement(W.Fragment, null, ee(), de(d)) : de(d) : ee();
  }, _e = () => /* @__PURE__ */ W.createElement("div", { ref: le, style: p, role: k, "col-id": n }, U ? /* @__PURE__ */ W.createElement("div", { className: "ag-cell-wrapper", role: "presentation", ref: Pe }, ke()) : ke());
  return e.isCellSpanning() ? /* @__PURE__ */ W.createElement("div", { ref: se, className: "ag-spanned-cell-wrapper", role: "presentation" }, _e()) : _e();
}, lH = ot(aH), cH = ({ rowCtrl: e, containerType: t }) => {
  const { context: i, gos: s, editSvc: o } = ae(qe), n = ae(IC) === "default", r = H(), a = H(e.getDomOrder()), l = e.isFullWidth(), c = e.rowNode.displayed, [d, u] = V(
    () => c ? e.rowNode.getRowIndexString() : null
  ), [h, g] = V(() => e.rowId), [p, f] = V(() => e.businessKey), [m, C] = V(() => e.rowStyles), v = H(null), [w, y] = V(() => null), [S, x] = V(), [D, M] = V(
    () => c ? e.getInitialRowTop(t) : void 0
  ), [k, P] = V(
    () => c ? e.getInitialTransform(t) : void 0
  ), F = H(null), N = H(), j = H(!1), [z, A] = V(0);
  ve(() => {
    if (j.current || !S || z > 10)
      return;
    const se = F.current?.firstChild;
    se ? (e.setupDetailRowAutoHeight(se), j.current = !0) : A((ge) => ge + 1);
  }, [S, z]);
  const O = H();
  O.current || (O.current = new Go(() => F.current));
  const G = H(() => {
  }), I = ne((se) => (G.current = se, () => {
    G.current = () => {
    };
  }), []), _ = yG(
    I,
    () => v.current,
    []
  ), b = n ? _ : w, L = ne((se) => {
    if (F.current = se, r.current = se ? i.createBean(new Os()) : i.destroyBean(r.current), !se) {
      e.unsetComp(t);
      return;
    }
    if (!e.isAlive())
      return;
    const ge = {
      // the rowTop is managed by state, instead of direct style manipulation by rowCtrl (like all the other styles)
      // as we need to have an initial value when it's placed into he DOM for the first time, for animation to work.
      setTop: M,
      setTransform: P,
      // i found using React for managing classes at the row level was to slow, as modifying classes caused a lot of
      // React code to execute, so avoiding React for managing CSS Classes made the grid go much faster.
      toggleCss: (ce, ke) => O.current.toggleCss(ce, ke),
      setDomOrder: (ce) => a.current = ce,
      setRowIndex: u,
      setRowId: g,
      setRowBusinessKey: f,
      setUserStyles: C,
      // if we don't maintain the order, then cols will be ripped out and into the dom
      // when cols reordered, which would stop the CSS transitions from working
      setCellCtrls: (ce, ke) => {
        const _e = v.current, ee = or(_e, ce, a.current);
        ee !== _e && (v.current = ee, n ? G.current() : Mo(ke, () => y(ee)));
      },
      showFullWidth: (ce) => x(ce),
      getFullWidthCellRenderer: () => N.current,
      refreshFullWidth: (ce) => Pe.current ? (x((ke) => ({
        ...ke,
        params: ce()
      })), !0) : !N.current || !N.current.refresh ? !1 : N.current.refresh(ce())
    };
    e.setComp(ge, se, t, r.current);
  }, []);
  kt(
    () => Wo(S, i, F.current, N),
    [S]
  );
  const U = X(() => {
    const se = { top: D, transform: k };
    return Object.assign(se, m), se;
  }, [D, k, m]), K = l && S?.componentFromFramework, Q = !l && b != null, ie = X(() => !!(S?.componentFromFramework && Gs(S.componentClass)), [S]), Pe = H(!1);
  ve(() => {
    Pe.current = ie && !!S && !!s.get("reactiveCustomComponents");
  }, [ie, S]);
  const Ie = () => b?.map((se) => /* @__PURE__ */ W.createElement(
    lH,
    {
      cellCtrl: se,
      editingCell: o?.isEditing(se, { withOpenEditor: !0 }) ?? !1,
      printLayout: e.printLayout,
      key: se.instanceId
    }
  )), le = () => {
    const se = S.componentClass;
    return ie ? /* @__PURE__ */ W.createElement(se, { ...S.params }) : /* @__PURE__ */ W.createElement(se, { ...S.params, ref: N });
  };
  return /* @__PURE__ */ W.createElement(
    "div",
    {
      ref: L,
      role: "row",
      style: U,
      "row-index": d,
      "row-id": h,
      "row-business-key": p
    },
    Q ? Ie() : K ? le() : null
  );
}, Dh = ot(cH), dH = ({ name: e }) => {
  const { context: t, gos: i } = ae(qe), s = X(() => Bo(e), [e]), o = H(null), n = H(null), r = H(null), a = H([]), l = H([]), [c, d] = V(() => []), u = !!i.get("enableCellSpan") && !!s.getSpannedRowCtrls, h = H([]), g = H([]), [p, f] = V(() => []), m = H(!1), C = H(), v = X(() => ft("ag-viewport", cm(e)), [e]), w = X(() => ft(wn(e)), [e]), y = X(() => ft("ag-spanning-container", fE(e)), [e]), S = s.type === "center" || u, x = S ? o : n;
  yi(" AG Row Container " + e + " ", x);
  const D = ne(() => {
    const A = !S || o.current != null, O = n.current != null, G = !u || r.current != null;
    return A && O && G;
  }, []), M = ne(() => o.current == null && n.current == null && r.current == null, []), k = ne(() => {
    if (M() && (C.current = t.destroyBean(C.current)), D()) {
      const A = (I) => {
        const _ = or(
          l.current,
          a.current,
          m.current
        );
        _ !== l.current && (l.current = _, Mo(I, () => d(_)));
      }, O = (I) => {
        const _ = or(
          g.current,
          h.current,
          m.current
        );
        _ !== g.current && (g.current = _, Mo(I, () => f(_)));
      }, G = {
        setHorizontalScroll: (I) => {
          o.current && (o.current.scrollLeft = I);
        },
        setViewportHeight: (I) => {
          o.current && (o.current.style.height = I);
        },
        setRowCtrls: ({ rowCtrls: I, useFlushSync: _ }) => {
          const b = !!_ && a.current.length > 0 && I.length > 0;
          a.current = I, A(b);
        },
        setSpannedRowCtrls: (I, _) => {
          const b = !!_ && h.current.length > 0 && I.length > 0;
          h.current = I, O(b);
        },
        setDomOrder: (I) => {
          m.current != I && (m.current = I, A(!1));
        },
        setContainerWidth: (I) => {
          n.current && (n.current.style.width = I);
        },
        setOffsetTop: (I) => {
          n.current && (n.current.style.transform = `translateY(${I})`);
        }
      };
      C.current = t.createBean(new FE(e)), C.current.setComp(
        G,
        n.current,
        r.current ?? void 0,
        o.current
      );
    }
  }, [D, M]), P = ne(
    (A) => {
      n.current = A, k();
    },
    [k]
  ), F = ne(
    (A) => {
      r.current = A, k();
    },
    [k]
  ), N = ne(
    (A) => {
      o.current = A, k();
    },
    [k]
  ), j = () => /* @__PURE__ */ W.createElement("div", { className: w, ref: P, role: "rowgroup" }, c.map((A) => /* @__PURE__ */ W.createElement(Dh, { rowCtrl: A, containerType: s.type, key: A.instanceId })));
  if (!S)
    return j();
  const z = () => /* @__PURE__ */ W.createElement("div", { className: y, ref: F, role: "rowgroup" }, p.map((A) => /* @__PURE__ */ W.createElement(Dh, { rowCtrl: A, containerType: s.type, key: A.instanceId })));
  return /* @__PURE__ */ W.createElement("div", { className: v, ref: N, role: "presentation" }, j(), u ? z() : null);
}, uH = ot(dH), hH = () => {
  const e = ae(qe), { context: t, overlays: i } = e, [s, o] = V(""), [n, r] = V(0), [a, l] = V(0), [c, d] = V("0px"), [u, h] = V("0px"), [g, p] = V("100%"), [f, m] = V("0px"), [C, v] = V("0px"), [w, y] = V("100%"), [S, x] = V(!0), [D, M] = V(!0), [k, P] = V(null), [F, N] = V(""), [j, z] = V(null), [A, O] = V("ag-layout-normal"), G = H();
  G.current || (G.current = new Go(() => I.current));
  const I = H(null), _ = H(null), b = H(null), L = H(null), U = H(null), K = H(null), Q = H(null), ie = H([]), Pe = H([]);
  yi(" AG Grid Body ", I), yi(" AG Pinned Top ", _), yi(" AG Sticky Top ", b), yi(" AG Middle ", K), yi(" AG Pinned Bottom ", Q);
  const Ie = ne((je) => {
    if (I.current = je, !je) {
      ie.current = t.destroyBeans(ie.current), Pe.current.forEach((ye) => ye()), Pe.current = [];
      return;
    }
    if (!t)
      return;
    const $e = (ye, nt) => {
      ye.appendChild(nt), Pe.current.push(() => ye.removeChild(nt));
    }, Wt = (ye) => {
      const nt = t.createBean(new ye());
      return ie.current.push(nt), nt;
    }, Hs = (ye, nt, UC) => {
      $e(ye, document.createComment(UC)), $e(ye, Wt(nt).getGui());
    };
    Hs(je, AE, " AG Fake Horizontal Scroll ");
    const $c = i?.getOverlayWrapperCompClass();
    $c && Hs(je, $c, " AG Overlay Wrapper "), U.current && Hs(U.current, kE, " AG Fake Vertical Scroll ");
    const _C = {
      setRowAnimationCssOnBodyViewport: o,
      setColumnCount: (ye) => {
        I.current && LR(I.current, ye);
      },
      setRowCount: (ye) => {
        I.current && IR(I.current, ye);
      },
      setTopHeight: r,
      setBottomHeight: l,
      setStickyTopHeight: d,
      setStickyTopTop: h,
      setStickyTopWidth: p,
      setTopInvisible: x,
      setBottomInvisible: M,
      setColumnMovingCss: (ye, nt) => G.current.toggleCss(ye, nt),
      updateLayoutClasses: O,
      setAlwaysVerticalScrollClass: P,
      setPinnedTopBottomOverflowY: N,
      setCellSelectableCss: (ye, nt) => z(nt ? ye : null),
      setBodyViewportWidth: (ye) => {
        K.current && (K.current.style.width = ye);
      },
      registerBodyViewportResizeListener: (ye) => {
        if (K.current) {
          const nt = Qt(e, K.current, ye);
          Pe.current.push(() => nt());
        }
      },
      setStickyBottomHeight: m,
      setStickyBottomBottom: v,
      setStickyBottomWidth: y,
      setGridRootRole: (ye) => je.setAttribute("role", ye)
    }, Kc = t.createBean(new TE());
    ie.current.push(Kc), Kc.setComp(
      _C,
      je,
      K.current,
      _.current,
      Q.current,
      b.current,
      L.current
    );
  }, []), le = X(() => ft("ag-root", "ag-unselectable", A), [A]), se = X(
    () => ft(
      "ag-body-viewport",
      s,
      A,
      k,
      j
    ),
    [s, A, k, j]
  ), ge = X(() => ft("ag-body", A), [A]), ce = X(
    () => ft("ag-floating-top", S ? "ag-invisible" : null, j),
    [j, S]
  ), ke = X(() => ft("ag-sticky-top", j), [j]), _e = X(
    () => ft("ag-sticky-bottom", f === "0px" ? "ag-invisible" : null, j),
    [j, f]
  ), ee = X(
    () => ft("ag-floating-bottom", D ? "ag-invisible" : null, j),
    [j, D]
  ), de = X(
    () => ({
      height: n,
      minHeight: n,
      overflowY: F
    }),
    [n, F]
  ), fe = X(
    () => ({
      height: c,
      top: u,
      width: g
    }),
    [c, u, g]
  ), Ue = X(
    () => ({
      height: f,
      bottom: C,
      width: w
    }),
    [f, C, w]
  ), oe = X(
    () => ({
      height: a,
      minHeight: a,
      overflowY: F
    }),
    [a, F]
  ), we = (je) => /* @__PURE__ */ W.createElement(uH, { name: je, key: `${je}-container` }), Be = ({
    section: je,
    children: $e,
    className: Wt,
    style: Hs
  }) => /* @__PURE__ */ W.createElement("div", { ref: je, className: Wt, role: "presentation", style: Hs }, $e.map(we));
  return /* @__PURE__ */ W.createElement("div", { ref: Ie, className: le }, /* @__PURE__ */ W.createElement(QG, null), Be({
    section: _,
    className: ce,
    style: de,
    children: ["topLeft", "topCenter", "topRight", "topFullWidth"]
  }), /* @__PURE__ */ W.createElement("div", { className: ge, ref: U, role: "presentation" }, Be({
    section: K,
    className: se,
    children: ["left", "center", "right", "fullWidth"]
  })), Be({
    section: b,
    className: ke,
    style: fe,
    children: ["stickyTopLeft", "stickyTopCenter", "stickyTopRight", "stickyTopFullWidth"]
  }), Be({
    section: L,
    className: _e,
    style: Ue,
    children: ["stickyBottomLeft", "stickyBottomCenter", "stickyBottomRight", "stickyBottomFullWidth"]
  }), Be({
    section: Q,
    className: ee,
    style: oe,
    children: ["bottomLeft", "bottomCenter", "bottomRight", "bottomFullWidth"]
  }));
}, gH = ot(hH), pH = (e, t) => {
  const { children: i, eFocusableElement: s, onTabKeyDown: o, gridCtrl: n, forceFocusOutWhenTabGuardsAreEmpty: r, isEmpty: a } = e, { context: l } = ae(qe), c = H(null), d = H(null), u = H(), h = (C) => {
    const v = C == null ? void 0 : parseInt(C, 10).toString();
    [c, d].forEach((w) => {
      v === void 0 ? w.current?.removeAttribute("tabindex") : w.current?.setAttribute("tabindex", v);
    });
  };
  yl(t, () => ({
    forceFocusOutOfContainer(C) {
      u.current?.forceFocusOutOfContainer(C);
    }
  }));
  const g = ne(() => {
    const C = c.current, v = d.current;
    if (!C && !v) {
      u.current = l.destroyBean(u.current);
      return;
    }
    if (C && v) {
      const w = {
        setTabIndex: h
      };
      u.current = l.createBean(
        new ym({
          comp: w,
          eTopGuard: C,
          eBottomGuard: v,
          eFocusableElement: s,
          onTabKeyDown: o,
          forceFocusOutWhenTabGuardsAreEmpty: r,
          focusInnerElement: (y) => n.focusInnerElement(y),
          isEmpty: a
        })
      );
    }
  }, []), p = ne(
    (C) => {
      c.current = C, g();
    },
    [g]
  ), f = ne(
    (C) => {
      d.current = C, g();
    },
    [g]
  ), m = (C) => {
    const v = C === "top" ? vs.TAB_GUARD_TOP : vs.TAB_GUARD_BOTTOM;
    return /* @__PURE__ */ W.createElement(
      "div",
      {
        className: `${vs.TAB_GUARD} ${v}`,
        role: "presentation",
        ref: C === "top" ? p : f
      }
    );
  };
  return /* @__PURE__ */ W.createElement(W.Fragment, null, m("top"), i, m("bottom"));
}, fH = nr(pH), mH = ot(fH), CH = ({ context: e }) => {
  const [t, i] = V(""), [s, o] = V(""), [n, r] = V(null), [a, l] = V(null), [c, d] = V(!1), [u, h] = V(), g = H(), p = H(null), f = H(), [m, C] = V(null), v = H(() => {
  }), w = H(), y = H([]), S = ne(() => {
  }, []), x = X(() => e.isDestroyed() ? null : e.getBeans(), [e]);
  yi(" AG Grid ", p);
  const D = ne((j) => {
    if (p.current = j, g.current = j ? e.createBean(new V0()) : e.destroyBean(g.current), !j || e.isDestroyed())
      return;
    const z = g.current;
    v.current = z.focusInnerElement.bind(z);
    const A = {
      destroyGridUi: () => {
      },
      // do nothing, as framework users destroy grid by removing the comp
      setRtlClass: i,
      forceFocusOutOfContainer: (O) => {
        if (!O && w.current?.isDisplayed()) {
          w.current.forceFocusOutOfContainer(O);
          return;
        }
        f.current?.forceFocusOutOfContainer(O);
      },
      updateLayoutClasses: o,
      getFocusableContainers: () => {
        const O = [], G = p.current?.querySelector(".ag-root");
        return G && O.push({ getGui: () => G }), y.current.forEach((I) => {
          I.isDisplayed() && O.push(I);
        }), O;
      },
      setCursor: r,
      setUserSelect: l
    };
    z.setComp(A, j, j), d(!0);
  }, []);
  ve(() => {
    const j = g.current, z = p.current;
    if (!u || !x || !j || !m || !z || e.isDestroyed())
      return;
    const A = [], {
      watermarkSelector: O,
      paginationSelector: G,
      sideBarSelector: I,
      statusBarSelector: _,
      gridHeaderDropZonesSelector: b
    } = j.getOptionalSelectors(), L = [];
    if (b) {
      const K = e.createBean(new b.component()), Q = K.getGui();
      z.insertAdjacentElement("afterbegin", Q), L.push(Q), A.push(K);
    }
    if (I) {
      const K = e.createBean(new I.component()), Q = K.getGui(), ie = m.querySelector(".ag-tab-guard-bottom");
      ie && (ie.insertAdjacentElement("beforebegin", Q), L.push(Q)), A.push(K), y.current.push(K);
    }
    const U = (K) => {
      const Q = e.createBean(new K()), ie = Q.getGui();
      return z.insertAdjacentElement("beforeend", ie), L.push(ie), A.push(Q), Q;
    };
    if (_ && U(_.component), G) {
      const K = U(G.component);
      w.current = K, y.current.push(K);
    }
    return O && U(O.component), () => {
      e.destroyBeans(A), L.forEach((K) => {
        K.parentElement?.removeChild(K);
      });
    };
  }, [u, m, x]);
  const M = X(
    () => ft("ag-root-wrapper", t, s),
    [t, s]
  ), k = X(
    () => ft("ag-root-wrapper-body", "ag-focus-managed", s),
    [s]
  ), P = X(
    () => ({
      userSelect: a ?? "",
      WebkitUserSelect: a ?? "",
      cursor: n ?? ""
    }),
    [a, n]
  ), F = ne((j) => {
    f.current = j, h(j !== null);
  }, []), N = ne(() => !g.current?.isFocusable(), []);
  return /* @__PURE__ */ W.createElement("div", { ref: D, className: M, style: P, role: "presentation" }, /* @__PURE__ */ W.createElement("div", { className: k, ref: C, role: "presentation" }, c && m && x && /* @__PURE__ */ W.createElement(qe.Provider, { value: x }, /* @__PURE__ */ W.createElement(
    mH,
    {
      ref: F,
      eFocusableElement: m,
      onTabKeyDown: S,
      gridCtrl: g.current,
      forceFocusOutWhenTabGuardsAreEmpty: !0,
      isEmpty: N
    },
    // we wait for initialised before rending the children, so GridComp has created and registered with it's
    // GridCtrl before we create the child GridBodyComp. Otherwise the GridBodyComp would initialise first,
    // before we have set the the Layout CSS classes, causing the GridBodyComp to render rows to a grid that
    // doesn't have it's height specified, which would result if all the rows getting rendered (and if many rows,
    // hangs the UI)
    /* @__PURE__ */ W.createElement(gH, null)
  ))));
}, vH = ot(CH), wH = class extends T {
  wireBeans(e) {
    this.ctrlsSvc = e.ctrlsSvc;
  }
  areHeaderCellsRendered() {
    return this.ctrlsSvc.getHeaderRowContainerCtrls().every((e) => e.getAllCtrls().every((t) => t.areCellsRendered()));
  }
}, BC = {
  setGridApi: void 0,
  maxComponentCreationTimeMs: void 0,
  children: void 0
}, SH = {
  gridOptions: void 0,
  modules: void 0,
  containerStyle: void 0,
  className: void 0,
  passGridApi: void 0,
  componentWrappingElement: void 0,
  ...BC
}, NC = new Set(Object.keys(SH)), yH = new Set(Object.keys(BC)), WC = (e) => {
  const t = H(), i = H(null), s = H(null), o = H([]), n = H([]), r = H(e), a = H(), l = H(), c = H(!1), [d, u] = V(void 0), [, h] = V(0), g = ne((C) => {
    if (i.current = C, !C) {
      o.current.forEach((F) => F()), o.current.length = 0;
      return;
    }
    const v = e.modules || [];
    s.current || (s.current = new NG(
      () => h((F) => F + 1),
      e.componentWrappingElement,
      e.maxComponentCreationTimeMs
    ), o.current.push(() => {
      s.current?.destroy(), s.current = null;
    }));
    const w = px(
      e.gridOptions,
      e,
      Object.keys(e).filter((F) => !NC.has(F))
    ), y = () => {
      if (c.current) {
        const F = () => a.current?.shouldQueueUpdates() ? void 0 : n.current.shift();
        let N = F();
        for (; N; )
          N(), N = F();
      }
    }, S = new FH(y);
    a.current = S;
    const x = new wH(), D = {
      providedBeanInstances: {
        frameworkCompWrapper: new RH(s.current, w),
        renderStatus: x
      },
      modules: v,
      frameworkOverrides: S,
      setThemeOnGridDiv: !0
    }, M = (F) => {
      u(F), F.createBean(x), o.current.push(() => {
        F.destroy();
      }), F.getBean("ctrlsSvc").whenReady(
        {
          addDestroyFunc: (N) => {
            o.current.push(N);
          }
        },
        () => {
          if (F.isDestroyed())
            return;
          const N = t.current;
          N && e.passGridApi?.(N);
        }
      );
    }, k = (F) => {
      F.getBean("ctrlsSvc").whenReady(
        {
          addDestroyFunc: (N) => {
            o.current.push(N);
          }
        },
        () => {
          n.current.forEach((N) => N()), n.current.length = 0, c.current = !0;
        }
      );
    }, P = new UI();
    w.gridId ?? (w.gridId = l.current), t.current = P.create(
      C,
      w,
      M,
      k,
      D
    ), o.current.push(() => {
      t.current = void 0;
    }), t.current && (l.current = t.current.getGridId());
  }, []), p = X(() => ({
    height: "100%",
    ...e.containerStyle || {}
  }), [e.containerStyle]), f = ne((C) => {
    c.current && !a.current?.shouldQueueUpdates() ? C() : n.current.push(C);
  }, []);
  ve(() => {
    const C = bH(r.current, e);
    r.current = e, f(() => {
      t.current && fx(C, t.current);
    });
  }, [e]);
  const m = !W.useSyncExternalStore || hn(e, "renderingMode") === "legacy" ? "legacy" : "default";
  return /* @__PURE__ */ W.createElement("div", { style: p, className: e.className, ref: g }, /* @__PURE__ */ W.createElement(IC.Provider, { value: m }, d && !d.isDestroyed() ? /* @__PURE__ */ W.createElement(vH, { context: d }) : null, s.current?.getPortals() ?? null));
};
function bH(e, t) {
  const i = {};
  return Object.keys(t).forEach((s) => {
    if (NC.has(s)) {
      yH.has(s) && B(274, { prop: s });
      return;
    }
    const o = t[s];
    e[s] !== o && (i[s] = o);
  }), i;
}
var RH = class extends YI {
  constructor(e, t) {
    super(), this.parent = e, this.gridOptions = t;
  }
  createWrapper(e, t) {
    const i = this.gridOptions;
    if (hn(i, "reactiveCustomComponents")) {
      const r = ((a) => {
        switch (a) {
          case "filter":
            return hn(i, "enableFilterHandlers") ? TG : DG;
          case "floatingFilterComponent":
            return hn(i, "enableFilterHandlers") ? IG : AG;
          case "dateComponent":
            return PG;
          case "dragAndDropImageComponent":
            return EG;
          case "loadingOverlayComponent":
            return LG;
          case "noRowsOverlayComponent":
            return VG;
          case "statusPanel":
            return GG;
          case "toolPanel":
            return HG;
          case "menuItem":
            return OG;
          case "cellRenderer":
            return FG;
          case "innerHeaderComponent":
            return kG;
        }
      })(t.name);
      if (r)
        return new r(e, this.parent, t);
    } else
      switch (t.name) {
        case "filter":
        case "floatingFilterComponent":
        case "dateComponent":
        case "dragAndDropImageComponent":
        case "loadingOverlayComponent":
        case "noRowsOverlayComponent":
        case "statusPanel":
        case "toolPanel":
        case "menuItem":
        case "cellRenderer":
          jc();
          break;
      }
    const o = !t.cellRenderer && t.name !== "toolPanel";
    return new VC(e, this.parent, t, o);
  }
}, xH = nr((e, t) => {
  const i = ae(qe), { registry: s, context: o, gos: n, rowModel: r } = i, [a, l] = V(() => new vt()), [c, d] = V(() => new vt()), [u, h] = V(), [g, p] = V(), f = H(), m = H(null), C = H(), v = X(
    () => OF(e.api.getGridId(), u?.rowModelType ?? "clientSide"),
    [e]
  ), w = X(() => a.toString() + " ag-details-row", [a]), y = X(() => c.toString() + " ag-details-grid", [c]);
  t && yl(t, () => ({
    refresh() {
      return f.current?.refresh() ?? !1;
    }
  })), e.template && B(230);
  const S = ne((D) => {
    if (m.current = D, !D) {
      f.current = o.destroyBean(f.current), C.current?.();
      return;
    }
    const M = {
      toggleCss: (P, F) => l((N) => N.setClass(P, F)),
      toggleDetailGridCss: (P, F) => d((N) => N.setClass(P, F)),
      setDetailGrid: (P) => h(P),
      setRowData: (P) => p(P),
      getGui: () => m.current
    }, k = s.createDynamicBean("detailCellRendererCtrl", !0);
    if (k && (o.createBean(k), k.init(M, e), f.current = k, n.get("detailRowAutoHeight"))) {
      const P = () => {
        if (m.current == null)
          return;
        const F = m.current.clientHeight;
        F != null && F > 0 && setTimeout(() => {
          e.node.setRowHeight(F), (Oe(n) || $i(n)) && r.onRowHeightChanged();
        }, 0);
      };
      C.current = Qt(i, D, P), P();
    }
  }, []), x = ne((D) => {
    f.current?.registerDetailWithMaster(D);
  }, []);
  return /* @__PURE__ */ W.createElement("div", { className: w, ref: S }, u && /* @__PURE__ */ W.createElement(
    WC,
    {
      className: y,
      ...u,
      modules: v,
      rowData: g,
      passGridApi: x
    }
  ));
}), FH = class extends bm {
  constructor(e) {
    super("react"), this.processQueuedUpdates = e, this.queueUpdates = !1, this.renderingEngine = "react", this.frameworkComponents = {
      agGroupCellRenderer: xh,
      agGroupRowRenderer: xh,
      agDetailCellRenderer: xH
    }, this.wrapIncoming = (t, i) => i === "ensureVisible" ? wG(t) : t();
  }
  frameworkComponent(e) {
    return this.frameworkComponents[e];
  }
  isFrameworkComponent(e) {
    if (!e)
      return !1;
    const t = e.prototype;
    return !(t && "getGui" in t);
  }
  getLockOnRefresh() {
    this.queueUpdates = !0;
  }
  releaseLockOnRefresh() {
    this.queueUpdates = !1, this.processQueuedUpdates();
  }
  shouldQueueUpdates() {
    return this.queueUpdates;
  }
  runWhenReadyAsync() {
    return vG();
  }
}, PH = class extends Gh {
  constructor() {
    super(...arguments), this.apiListeners = [], this.setGridApi = (e) => {
      this.api = e, this.apiListeners.forEach((t) => t(e));
    };
  }
  registerApiListener(e) {
    this.apiListeners.push(e);
  }
  componentWillUnmount() {
    this.apiListeners.length = 0;
  }
  render() {
    return /* @__PURE__ */ W.createElement(WC, { ...this.props, passGridApi: this.setGridApi });
  }
};
function EH(e) {
  return Ve({ attr: { viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, child: [{ tag: "path", attr: { d: "M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" }, child: [] }, { tag: "path", attr: { d: "M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" }, child: [] }] })(e);
}
function DH(e) {
  return Ve({ attr: { viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, child: [{ tag: "polygon", attr: { points: "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" }, child: [] }] })(e);
}
function TH(e) {
  return Ve({ attr: { viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, child: [{ tag: "circle", attr: { cx: "11", cy: "11", r: "8" }, child: [] }, { tag: "line", attr: { x1: "21", y1: "21", x2: "16.65", y2: "16.65" }, child: [] }] })(e);
}
function MH(e) {
  return Ve({ attr: { viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, child: [{ tag: "polyline", attr: { points: "3 6 5 6 21 6" }, child: [] }, { tag: "path", attr: { d: "M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" }, child: [] }, { tag: "line", attr: { x1: "10", y1: "11", x2: "10", y2: "17" }, child: [] }, { tag: "line", attr: { x1: "14", y1: "11", x2: "14", y2: "17" }, child: [] }] })(e);
}
const AH = Lc.withPart(IM), IH = Lc.withPart(MM), pa = (e) => e ? AH : IH, kH = (e) => {
  const [t, i] = V(
    pa(e === "dark")
  );
  return ve(() => {
    if (e) {
      i(pa(e === "dark"));
      return;
    }
    const s = new MutationObserver(() => {
      const o = document.documentElement.classList.contains("dark");
      i(pa(o));
    });
    return s.observe(document.documentElement, {
      attributes: !0,
      attributeFilter: ["class"]
    }), () => s.disconnect();
  }, [e]), t;
};
HF.registerModules([CG]);
function uB({
  columns: e,
  data: t,
  pageSize: i = 5,
  emptyMessage: s = "Nenhum dado encontrado",
  onEdit: o,
  onDelete: n
}) {
  const r = kH("dark"), [a, l] = V(null), c = H(null), d = H(null), u = () => {
    const p = c.current?.api.getSelectedNodes();
    l(p?.[0]?.data ?? null);
  }, h = (p) => {
    const f = e.reduce((m, C) => m + (C.col ?? 1), 0);
    return p.children && p.children.length > 0 ? {
      headerName: p.headerName,
      children: p.children.map(h),
      flex: p.col ?? 1
    } : {
      field: p.field,
      headerName: p.headerName,
      flex: (p.col ?? 1) / f * 12,
      // 12 colunas
      cellRenderer: p.render ? (m) => p.render(m.data) : void 0,
      valueGetter: p.valueGetter,
      colId: p.colId,
      sortable: p.sortable,
      cellClass: p.align === "center" ? "ag-cell-center" : p.align === "right" ? "ag-cell-right" : "ag-cell-left"
    };
  }, g = X(() => e.map(h), [e]);
  return ve(() => {
    const p = (f) => {
      d.current && !d.current.contains(f.target) && (l(null), c.current?.api.deselectAll());
    };
    return document.addEventListener("mousedown", p), () => document.removeEventListener("mousedown", p);
  }, []), /* @__PURE__ */ R.jsxs("div", { ref: d, className: "relative w-full", children: [
    /* @__PURE__ */ R.jsx(
      PH,
      {
        ref: c,
        rowData: t,
        defaultColDef: { resizable: !1 },
        columnDefs: g,
        theme: r,
        animateRows: !0,
        rowSelection: "single",
        domLayout: "autoHeight",
        onSelectionChanged: u,
        pagination: !0,
        paginationPageSize: i,
        paginationAutoPageSize: !0,
        overlayNoRowsTemplate: `<span class="text-white">${s || "Nenhum dado encontrado"}</span>`,
        localeText: {
          // Paginação
          page: "Página",
          of: "de",
          to: "até",
          next: "Próxima",
          previous: "Anterior",
          first: "Primeira",
          last: "Última"
        }
      }
    ),
    /* @__PURE__ */ R.jsxs("div", { className: "absolute -top-2 right-2 -translate-y-1/2 flex gap-2 z-10", children: [
      o && /* @__PURE__ */ R.jsx(Rs, { iconStart: /* @__PURE__ */ R.jsx(EH, { size: 18 }), color: "primary", disabled: !a, onClick: () => a && o?.(a) }),
      n && /* @__PURE__ */ R.jsx(Rs, { iconStart: /* @__PURE__ */ R.jsx(MH, { size: 18 }), color: "danger", disabled: !a, onClick: () => a && n?.(a) })
    ] })
  ] });
}
const hB = ({
  tooltip: e,
  icon: t = Ep,
  onClick: i,
  recording: s,
  loading: o = !1,
  showCancel: n = !1,
  onCancel: r,
  cancelIcon: a = Dp,
  disabled: l = !1,
  className: c,
  color: d = "primary"
}) => {
  const [u, h] = V(!0), [g, p] = V(!0), { main: f, contrast: m } = Me(d);
  return ve(() => {
    const C = setTimeout(() => {
      h(!1), setTimeout(() => {
        p(!1);
      }, 800);
    }, 3e3);
    return () => clearTimeout(C);
  }, []), /* @__PURE__ */ R.jsx("div", { style: { position: "relative" }, children: /* @__PURE__ */ R.jsx(ho, { mode: "wait", children: /* @__PURE__ */ R.jsxs(
    Te.div,
    {
      className: `fixed bottom-24 right-2 z-[1000] flex-center ${c} `,
      animate: u ? { width: 250, height: 55 } : { width: 55, height: 55 },
      transition: { duration: 0.8, ease: "easeInOut" },
      children: [
        /* @__PURE__ */ R.jsxs(Uh, { vertical: "bottom", horizontal: "end", slot: "fixed", children: [
          /* @__PURE__ */ R.jsx(
            ma,
            {
              onClick: i,
              disabled: l || o,
              style: { "--box-shadow": !u && "none", "--background": f, "--color": m },
              children: o ? /* @__PURE__ */ R.jsx(Ao, { name: "crescent", className: "text-[var(--ion-color-text-fixed)]" }) : W.createElement(t, { className: "text-[26px]" })
            }
          ),
          n && r && /* @__PURE__ */ R.jsx(
            Te.div,
            {
              className: "absolute bottom-[70px] right-[12px] pointer-events-none",
              animate: s ? { opacity: 1, y: 0, pointerEvents: "auto" } : { opacity: 0, y: 10, pointerEvents: "none" },
              transition: { duration: 0.3 },
              children: /* @__PURE__ */ R.jsx(
                ma,
                {
                  color: "danger",
                  className: "w-[35px] h-[35px]",
                  onClick: r,
                  children: W.createElement(a, { className: "text-[22px]" })
                }
              )
            }
          )
        ] }),
        e && g && /* @__PURE__ */ R.jsx(
          Te.div,
          {
            className: "absolute right-[10px] bottom-2 !pr-13 h-[58px] overflow-hidden rounded-full flex items-center justify-center",
            style: { backgroundColor: f, color: m },
            initial: { width: 0, opacity: 0, filter: "blur(4px)" },
            animate: u ? { width: "auto", opacity: 1, filter: "blur(0px)" } : { width: 0, opacity: 0, filter: "blur(4px)" },
            transition: { duration: 0.5, ease: "easeOut" },
            children: /* @__PURE__ */ R.jsx(
              Te.div,
              {
                className: "!pl-4 !pr-4 whitespace-nowrap",
                initial: { opacity: 0 },
                animate: { opacity: 1 },
                transition: { delay: 0.1, duration: 0.3, ease: "easeOut" },
                children: e
              }
            )
          }
        )
      ]
    }
  ) }) });
};
function gB({
  data: e,
  columns: t = [],
  placeholder: i = "Filtrar...",
  onChange: s,
  initialQuery: o,
  className: n = "",
  inputClassName: r = "",
  selectClassName: a = "",
  style: l
}) {
  const [c, d] = V(o ?? ""), [u, h] = V();
  return ve(() => {
    if (!c) {
      s(e);
      return;
    }
    const g = c.toLowerCase(), p = e.filter((f) => u ? String(f[u] ?? "").toLowerCase().includes(g) : Object.values(f).some(
      (m) => String(m).toLowerCase().includes(g)
    ));
    s(p);
  }, [c, u, e, s]), /* @__PURE__ */ R.jsxs(
    "div",
    {
      className: `flex items-center gap-3 bg-gray-100 rounded-lg shadow-sm !p-2 ${n}`,
      style: l,
      children: [
        /* @__PURE__ */ R.jsx(TH, { className: "text-gray-500" }),
        /* @__PURE__ */ R.jsx(
          zh,
          {
            value: c,
            placeholder: i,
            onIonInput: (g) => d(g.detail.value),
            clearInput: !0,
            className: `flex-1 ${r}`
          }
        ),
        t.length > 0 && /* @__PURE__ */ R.jsxs("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ R.jsx(DH, { className: "text-gray-500", size: 20 }),
          /* @__PURE__ */ R.jsxs(
            _h,
            {
              value: u,
              placeholder: "Coluna",
              onIonChange: (g) => h(g.detail.value),
              interface: "popover",
              className: a,
              children: [
                /* @__PURE__ */ R.jsx(fa, { value: void 0, children: "Todas" }),
                t.map((g) => /* @__PURE__ */ R.jsx(fa, { value: g.value, children: g.label }, g.value))
              ]
            }
          )
        ] })
      ]
    }
  );
}
const LH = ({
  steps: e,
  initialStep: t = 0,
  color: i = "primary"
}) => {
  const [s, o] = V(t), { main: n, contrast: r } = Me(i);
  return /* @__PURE__ */ R.jsxs("div", { className: "flex flex-col gap-4", children: [
    /* @__PURE__ */ R.jsx("div", { className: "flex items-center justify-between w-full relative", children: e.map((a, l) => {
      const c = l === s, d = l < s;
      return /* @__PURE__ */ R.jsxs("div", { className: "flex flex-col items-center relative flex-1", children: [
        l < e.length - 1 && /* @__PURE__ */ R.jsx(
          Te.div,
          {
            className: "absolute top-1/2 left-1/2 h-1",
            style: {
              width: "100%",
              height: "2px",
              zIndex: 0,
              originX: 0,
              backgroundColor: n,
              marginTop: "-9px"
            },
            initial: { scaleX: 0 },
            animate: { scaleX: d ? 1 : 0 },
            transition: { duration: 0.5, ease: "easeInOut" }
          }
        ),
        /* @__PURE__ */ R.jsx(
          Te.div,
          {
            className: "w-10 h-10 rounded-full border-2 flex items-center justify-center z-10 cursor-pointer",
            style: {
              backgroundColor: c || d ? n : "#ffffff",
              color: c || d ? r : "#6b7280",
              borderColor: c || d ? n : "#d1d5db"
            },
            onClick: () => o(l),
            whileHover: { scale: 1.1 },
            whileTap: { scale: 0.95 },
            children: a.icon ?? l + 1
          }
        ),
        /* @__PURE__ */ R.jsx("span", { className: "text-sm mt-2 text-center", children: a.title })
      ] }, l);
    }) }),
    /* @__PURE__ */ R.jsx(Hh, { children: /* @__PURE__ */ R.jsx(Bh, { children: e[s].content }) }),
    /* @__PURE__ */ R.jsxs("div", { className: "flex justify-between w-full", children: [
      /* @__PURE__ */ R.jsx(
        Rs,
        {
          disabled: s === 0,
          onClick: () => o(s - 1),
          iconStart: /* @__PURE__ */ R.jsx(gR, {}),
          label: "Voltar",
          color: i
        }
      ),
      /* @__PURE__ */ R.jsx(
        Rs,
        {
          disabled: s === e.length - 1,
          onClick: () => o(s + 1),
          iconEnd: /* @__PURE__ */ R.jsx(pR, {}),
          label: "Próximo",
          color: i
        }
      )
    ] })
  ] });
}, OH = ({
  steps: e,
  initialStep: t = 0,
  color: i = "primary"
}) => {
  const [s, o] = V(t), { main: n, contrast: r } = Me(i);
  return /* @__PURE__ */ R.jsx("div", { className: "flex flex-col gap-4", children: e.map((a, l) => {
    const c = l === s, d = l < s;
    return /* @__PURE__ */ R.jsxs("div", { className: "relative flex items-start gap-4", children: [
      /* @__PURE__ */ R.jsx("div", { className: "flex flex-col items-center relative", children: /* @__PURE__ */ R.jsx(
        Te.div,
        {
          className: "w-10 h-10 rounded-full border-2 flex items-center justify-center cursor-pointer z-10",
          onClick: () => o(l),
          style: {
            backgroundColor: c || d ? n : "#ffffff",
            color: c || d ? r : "#6b7280",
            borderColor: c || d ? n : "#d1d5db"
          },
          whileHover: { scale: 1.1 },
          whileTap: { scale: 0.95 },
          children: a.icon ?? l + 1
        }
      ) }),
      l !== e.length - 1 && /* @__PURE__ */ R.jsx(
        Te.div,
        {
          style: {
            width: 2,
            backgroundColor: c || d ? n : "#d1d5db",
            position: "absolute",
            height: "100%",
            left: 18,
            top: 16
          }
        }
      ),
      /* @__PURE__ */ R.jsxs(
        "div",
        {
          className: "flex-1",
          children: [
            /* @__PURE__ */ R.jsx("div", { className: "font-semibold text-base", children: a.title }),
            /* @__PURE__ */ R.jsxs(
              Te.div,
              {
                initial: { height: 0, opacity: 0 },
                animate: { height: c ? "auto" : 0, opacity: c ? 1 : 0 },
                transition: { duration: 0.4, ease: "easeInOut" },
                className: "overflow-hidden mt-1",
                children: [
                  /* @__PURE__ */ R.jsx("div", { className: "mb-2", children: a.content }),
                  /* @__PURE__ */ R.jsxs("div", { className: "flex w-full !mt-2", children: [
                    /* @__PURE__ */ R.jsx(
                      Rs,
                      {
                        disabled: l === e.length - 1,
                        onClick: () => o(l + 1),
                        label: "Próximo",
                        color: i,
                        className: "!text-[12px] !mr-2"
                      }
                    ),
                    /* @__PURE__ */ R.jsx(
                      Rs,
                      {
                        disabled: l === 0,
                        onClick: () => o(l - 1),
                        label: "Voltar",
                        color: i,
                        variant: "clear",
                        className: "!text-[12px]"
                      }
                    )
                  ] })
                ]
              }
            )
          ]
        }
      )
    ] }, l);
  }) });
}, pB = ({
  steps: e,
  variant: t = "tabs",
  initialStep: i = 0,
  orientation: s = "horizontal",
  color: o = "primary"
}) => {
  const [n, r] = V(i);
  return t === "tabs" ? /* @__PURE__ */ R.jsxs("div", { children: [
    /* @__PURE__ */ R.jsx(
      cv,
      {
        value: n.toString(),
        onIonChange: (a) => {
          const l = a.detail.value;
          l != null && r(parseInt(l.toString(), 10));
        },
        children: e.map((a, l) => /* @__PURE__ */ R.jsx(dv, { value: l.toString(), children: /* @__PURE__ */ R.jsx(En, { children: a.title }) }, l))
      }
    ),
    /* @__PURE__ */ R.jsx("div", { className: "p-4", children: e[n].content })
  ] }) : t === "accordion" ? /* @__PURE__ */ R.jsx(
    uv,
    {
      value: n.toString(),
      onIonChange: (a) => {
        r(parseInt(a.detail.value ?? "-1", 10));
      },
      children: e.map((a, l) => /* @__PURE__ */ R.jsxs(
        hv,
        {
          value: l.toString(),
          children: [
            /* @__PURE__ */ R.jsx(Ca, { slot: "header", children: /* @__PURE__ */ R.jsx(En, { children: a.title }) }),
            /* @__PURE__ */ R.jsx("div", { slot: "content", className: "p-4", children: a.content })
          ]
        },
        l
      ))
    }
  ) : t === "stepper" ? s === "horizontal" ? /* @__PURE__ */ R.jsx(LH, { steps: e, initialStep: i, color: o }) : /* @__PURE__ */ R.jsx(OH, { steps: e, initialStep: i, color: o }) : null;
};
var bn = { exports: {} }, VH = bn.exports, Th;
function zC() {
  return Th || (Th = 1, (function(e, t) {
    (function(i, s) {
      e.exports = s();
    })(VH, (function() {
      var i = 1e3, s = 6e4, o = 36e5, n = "millisecond", r = "second", a = "minute", l = "hour", c = "day", d = "week", u = "month", h = "quarter", g = "year", p = "date", f = "Invalid Date", m = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, C = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, v = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(z) {
        var A = ["th", "st", "nd", "rd"], O = z % 100;
        return "[" + z + (A[(O - 20) % 10] || A[O] || A[0]) + "]";
      } }, w = function(z, A, O) {
        var G = String(z);
        return !G || G.length >= A ? z : "" + Array(A + 1 - G.length).join(O) + z;
      }, y = { s: w, z: function(z) {
        var A = -z.utcOffset(), O = Math.abs(A), G = Math.floor(O / 60), I = O % 60;
        return (A <= 0 ? "+" : "-") + w(G, 2, "0") + ":" + w(I, 2, "0");
      }, m: function z(A, O) {
        if (A.date() < O.date()) return -z(O, A);
        var G = 12 * (O.year() - A.year()) + (O.month() - A.month()), I = A.clone().add(G, u), _ = O - I < 0, b = A.clone().add(G + (_ ? -1 : 1), u);
        return +(-(G + (O - I) / (_ ? I - b : b - I)) || 0);
      }, a: function(z) {
        return z < 0 ? Math.ceil(z) || 0 : Math.floor(z);
      }, p: function(z) {
        return { M: u, y: g, w: d, d: c, D: p, h: l, m: a, s: r, ms: n, Q: h }[z] || String(z || "").toLowerCase().replace(/s$/, "");
      }, u: function(z) {
        return z === void 0;
      } }, S = "en", x = {};
      x[S] = v;
      var D = "$isDayjsObject", M = function(z) {
        return z instanceof N || !(!z || !z[D]);
      }, k = function z(A, O, G) {
        var I;
        if (!A) return S;
        if (typeof A == "string") {
          var _ = A.toLowerCase();
          x[_] && (I = _), O && (x[_] = O, I = _);
          var b = A.split("-");
          if (!I && b.length > 1) return z(b[0]);
        } else {
          var L = A.name;
          x[L] = A, I = L;
        }
        return !G && I && (S = I), I || !G && S;
      }, P = function(z, A) {
        if (M(z)) return z.clone();
        var O = typeof A == "object" ? A : {};
        return O.date = z, O.args = arguments, new N(O);
      }, F = y;
      F.l = k, F.i = M, F.w = function(z, A) {
        return P(z, { locale: A.$L, utc: A.$u, x: A.$x, $offset: A.$offset });
      };
      var N = (function() {
        function z(O) {
          this.$L = k(O.locale, null, !0), this.parse(O), this.$x = this.$x || O.x || {}, this[D] = !0;
        }
        var A = z.prototype;
        return A.parse = function(O) {
          this.$d = (function(G) {
            var I = G.date, _ = G.utc;
            if (I === null) return /* @__PURE__ */ new Date(NaN);
            if (F.u(I)) return /* @__PURE__ */ new Date();
            if (I instanceof Date) return new Date(I);
            if (typeof I == "string" && !/Z$/i.test(I)) {
              var b = I.match(m);
              if (b) {
                var L = b[2] - 1 || 0, U = (b[7] || "0").substring(0, 3);
                return _ ? new Date(Date.UTC(b[1], L, b[3] || 1, b[4] || 0, b[5] || 0, b[6] || 0, U)) : new Date(b[1], L, b[3] || 1, b[4] || 0, b[5] || 0, b[6] || 0, U);
              }
            }
            return new Date(I);
          })(O), this.init();
        }, A.init = function() {
          var O = this.$d;
          this.$y = O.getFullYear(), this.$M = O.getMonth(), this.$D = O.getDate(), this.$W = O.getDay(), this.$H = O.getHours(), this.$m = O.getMinutes(), this.$s = O.getSeconds(), this.$ms = O.getMilliseconds();
        }, A.$utils = function() {
          return F;
        }, A.isValid = function() {
          return this.$d.toString() !== f;
        }, A.isSame = function(O, G) {
          var I = P(O);
          return this.startOf(G) <= I && I <= this.endOf(G);
        }, A.isAfter = function(O, G) {
          return P(O) < this.startOf(G);
        }, A.isBefore = function(O, G) {
          return this.endOf(G) < P(O);
        }, A.$g = function(O, G, I) {
          return F.u(O) ? this[G] : this.set(I, O);
        }, A.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, A.valueOf = function() {
          return this.$d.getTime();
        }, A.startOf = function(O, G) {
          var I = this, _ = !!F.u(G) || G, b = F.p(O), L = function(se, ge) {
            var ce = F.w(I.$u ? Date.UTC(I.$y, ge, se) : new Date(I.$y, ge, se), I);
            return _ ? ce : ce.endOf(c);
          }, U = function(se, ge) {
            return F.w(I.toDate()[se].apply(I.toDate("s"), (_ ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(ge)), I);
          }, K = this.$W, Q = this.$M, ie = this.$D, Pe = "set" + (this.$u ? "UTC" : "");
          switch (b) {
            case g:
              return _ ? L(1, 0) : L(31, 11);
            case u:
              return _ ? L(1, Q) : L(0, Q + 1);
            case d:
              var Ie = this.$locale().weekStart || 0, le = (K < Ie ? K + 7 : K) - Ie;
              return L(_ ? ie - le : ie + (6 - le), Q);
            case c:
            case p:
              return U(Pe + "Hours", 0);
            case l:
              return U(Pe + "Minutes", 1);
            case a:
              return U(Pe + "Seconds", 2);
            case r:
              return U(Pe + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, A.endOf = function(O) {
          return this.startOf(O, !1);
        }, A.$set = function(O, G) {
          var I, _ = F.p(O), b = "set" + (this.$u ? "UTC" : ""), L = (I = {}, I[c] = b + "Date", I[p] = b + "Date", I[u] = b + "Month", I[g] = b + "FullYear", I[l] = b + "Hours", I[a] = b + "Minutes", I[r] = b + "Seconds", I[n] = b + "Milliseconds", I)[_], U = _ === c ? this.$D + (G - this.$W) : G;
          if (_ === u || _ === g) {
            var K = this.clone().set(p, 1);
            K.$d[L](U), K.init(), this.$d = K.set(p, Math.min(this.$D, K.daysInMonth())).$d;
          } else L && this.$d[L](U);
          return this.init(), this;
        }, A.set = function(O, G) {
          return this.clone().$set(O, G);
        }, A.get = function(O) {
          return this[F.p(O)]();
        }, A.add = function(O, G) {
          var I, _ = this;
          O = Number(O);
          var b = F.p(G), L = function(Q) {
            var ie = P(_);
            return F.w(ie.date(ie.date() + Math.round(Q * O)), _);
          };
          if (b === u) return this.set(u, this.$M + O);
          if (b === g) return this.set(g, this.$y + O);
          if (b === c) return L(1);
          if (b === d) return L(7);
          var U = (I = {}, I[a] = s, I[l] = o, I[r] = i, I)[b] || 1, K = this.$d.getTime() + O * U;
          return F.w(K, this);
        }, A.subtract = function(O, G) {
          return this.add(-1 * O, G);
        }, A.format = function(O) {
          var G = this, I = this.$locale();
          if (!this.isValid()) return I.invalidDate || f;
          var _ = O || "YYYY-MM-DDTHH:mm:ssZ", b = F.z(this), L = this.$H, U = this.$m, K = this.$M, Q = I.weekdays, ie = I.months, Pe = I.meridiem, Ie = function(ge, ce, ke, _e) {
            return ge && (ge[ce] || ge(G, _)) || ke[ce].slice(0, _e);
          }, le = function(ge) {
            return F.s(L % 12 || 12, ge, "0");
          }, se = Pe || function(ge, ce, ke) {
            var _e = ge < 12 ? "AM" : "PM";
            return ke ? _e.toLowerCase() : _e;
          };
          return _.replace(C, (function(ge, ce) {
            return ce || (function(ke) {
              switch (ke) {
                case "YY":
                  return String(G.$y).slice(-2);
                case "YYYY":
                  return F.s(G.$y, 4, "0");
                case "M":
                  return K + 1;
                case "MM":
                  return F.s(K + 1, 2, "0");
                case "MMM":
                  return Ie(I.monthsShort, K, ie, 3);
                case "MMMM":
                  return Ie(ie, K);
                case "D":
                  return G.$D;
                case "DD":
                  return F.s(G.$D, 2, "0");
                case "d":
                  return String(G.$W);
                case "dd":
                  return Ie(I.weekdaysMin, G.$W, Q, 2);
                case "ddd":
                  return Ie(I.weekdaysShort, G.$W, Q, 3);
                case "dddd":
                  return Q[G.$W];
                case "H":
                  return String(L);
                case "HH":
                  return F.s(L, 2, "0");
                case "h":
                  return le(1);
                case "hh":
                  return le(2);
                case "a":
                  return se(L, U, !0);
                case "A":
                  return se(L, U, !1);
                case "m":
                  return String(U);
                case "mm":
                  return F.s(U, 2, "0");
                case "s":
                  return String(G.$s);
                case "ss":
                  return F.s(G.$s, 2, "0");
                case "SSS":
                  return F.s(G.$ms, 3, "0");
                case "Z":
                  return b;
              }
              return null;
            })(ge) || b.replace(":", "");
          }));
        }, A.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, A.diff = function(O, G, I) {
          var _, b = this, L = F.p(G), U = P(O), K = (U.utcOffset() - this.utcOffset()) * s, Q = this - U, ie = function() {
            return F.m(b, U);
          };
          switch (L) {
            case g:
              _ = ie() / 12;
              break;
            case u:
              _ = ie();
              break;
            case h:
              _ = ie() / 3;
              break;
            case d:
              _ = (Q - K) / 6048e5;
              break;
            case c:
              _ = (Q - K) / 864e5;
              break;
            case l:
              _ = Q / o;
              break;
            case a:
              _ = Q / s;
              break;
            case r:
              _ = Q / i;
              break;
            default:
              _ = Q;
          }
          return I ? _ : F.a(_);
        }, A.daysInMonth = function() {
          return this.endOf(u).$D;
        }, A.$locale = function() {
          return x[this.$L];
        }, A.locale = function(O, G) {
          if (!O) return this.$L;
          var I = this.clone(), _ = k(O, G, !0);
          return _ && (I.$L = _), I;
        }, A.clone = function() {
          return F.w(this.$d, this);
        }, A.toDate = function() {
          return new Date(this.valueOf());
        }, A.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, A.toISOString = function() {
          return this.$d.toISOString();
        }, A.toString = function() {
          return this.$d.toUTCString();
        }, z;
      })(), j = N.prototype;
      return P.prototype = j, [["$ms", n], ["$s", r], ["$m", a], ["$H", l], ["$W", c], ["$M", u], ["$y", g], ["$D", p]].forEach((function(z) {
        j[z[1]] = function(A) {
          return this.$g(A, z[0], z[1]);
        };
      })), P.extend = function(z, A) {
        return z.$i || (z(A, N, P), z.$i = !0), P;
      }, P.locale = k, P.isDayjs = M, P.unix = function(z) {
        return P(1e3 * z);
      }, P.en = x[S], P.Ls = x, P.p = {}, P;
    }));
  })(bn)), bn.exports;
}
var GH = zC();
const et = /* @__PURE__ */ bl(GH);
var Rn = { exports: {} }, HH = Rn.exports, Mh;
function BH() {
  return Mh || (Mh = 1, (function(e, t) {
    (function(i, s) {
      e.exports = s(zC());
    })(HH, (function(i) {
      function s(r) {
        return r && typeof r == "object" && "default" in r ? r : { default: r };
      }
      var o = s(i), n = { name: "pt-br", weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"), weekdaysShort: "dom_seg_ter_qua_qui_sex_sáb".split("_"), weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"), months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), ordinal: function(r) {
        return r + "º";
      }, formats: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY [às] HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm" }, relativeTime: { future: "em %s", past: "há %s", s: "poucos segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" } };
      return o.default.locale(n, null, !0), n;
    }));
  })(Rn)), Rn.exports;
}
BH();
function NH(e) {
  return Ve({ attr: { viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, child: [{ tag: "path", attr: { d: "M8 2v4" }, child: [] }, { tag: "path", attr: { d: "M16 2v4" }, child: [] }, { tag: "rect", attr: { width: "18", height: "18", x: "3", y: "4", rx: "2" }, child: [] }, { tag: "path", attr: { d: "M3 10h18" }, child: [] }] })(e);
}
var xn = { exports: {} }, WH = xn.exports, Ah;
function zH() {
  return Ah || (Ah = 1, (function(e, t) {
    (function(i, s) {
      e.exports = s();
    })(WH, (function() {
      var i = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" };
      return function(s, o, n) {
        var r = o.prototype, a = r.format;
        n.en.formats = i, r.format = function(l) {
          l === void 0 && (l = "YYYY-MM-DDTHH:mm:ssZ");
          var c = this.$locale().formats, d = (function(u, h) {
            return u.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, (function(g, p, f) {
              var m = f && f.toUpperCase();
              return p || h[f] || i[f] || h[m].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, (function(C, v, w) {
                return v || w.slice(1);
              }));
            }));
          })(l, c === void 0 ? {} : c);
          return a.call(this, d);
        };
      };
    }));
  })(xn)), xn.exports;
}
var _H = zH();
const UH = /* @__PURE__ */ bl(_H);
var Fn = { exports: {} }, jH = Fn.exports, Ih;
function $H() {
  return Ih || (Ih = 1, (function(e, t) {
    (function(i, s) {
      e.exports = s();
    })(jH, (function() {
      var i = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, s = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|Q|YYYY|YY?|ww?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, o = /\d/, n = /\d\d/, r = /\d\d?/, a = /\d*[^-_:/,()\s\d]+/, l = {}, c = function(m) {
        return (m = +m) + (m > 68 ? 1900 : 2e3);
      }, d = function(m) {
        return function(C) {
          this[m] = +C;
        };
      }, u = [/[+-]\d\d:?(\d\d)?|Z/, function(m) {
        (this.zone || (this.zone = {})).offset = (function(C) {
          if (!C || C === "Z") return 0;
          var v = C.match(/([+-]|\d\d)/g), w = 60 * v[1] + (+v[2] || 0);
          return w === 0 ? 0 : v[0] === "+" ? -w : w;
        })(m);
      }], h = function(m) {
        var C = l[m];
        return C && (C.indexOf ? C : C.s.concat(C.f));
      }, g = function(m, C) {
        var v, w = l.meridiem;
        if (w) {
          for (var y = 1; y <= 24; y += 1) if (m.indexOf(w(y, 0, C)) > -1) {
            v = y > 12;
            break;
          }
        } else v = m === (C ? "pm" : "PM");
        return v;
      }, p = { A: [a, function(m) {
        this.afternoon = g(m, !1);
      }], a: [a, function(m) {
        this.afternoon = g(m, !0);
      }], Q: [o, function(m) {
        this.month = 3 * (m - 1) + 1;
      }], S: [o, function(m) {
        this.milliseconds = 100 * +m;
      }], SS: [n, function(m) {
        this.milliseconds = 10 * +m;
      }], SSS: [/\d{3}/, function(m) {
        this.milliseconds = +m;
      }], s: [r, d("seconds")], ss: [r, d("seconds")], m: [r, d("minutes")], mm: [r, d("minutes")], H: [r, d("hours")], h: [r, d("hours")], HH: [r, d("hours")], hh: [r, d("hours")], D: [r, d("day")], DD: [n, d("day")], Do: [a, function(m) {
        var C = l.ordinal, v = m.match(/\d+/);
        if (this.day = v[0], C) for (var w = 1; w <= 31; w += 1) C(w).replace(/\[|\]/g, "") === m && (this.day = w);
      }], w: [r, d("week")], ww: [n, d("week")], M: [r, d("month")], MM: [n, d("month")], MMM: [a, function(m) {
        var C = h("months"), v = (h("monthsShort") || C.map((function(w) {
          return w.slice(0, 3);
        }))).indexOf(m) + 1;
        if (v < 1) throw new Error();
        this.month = v % 12 || v;
      }], MMMM: [a, function(m) {
        var C = h("months").indexOf(m) + 1;
        if (C < 1) throw new Error();
        this.month = C % 12 || C;
      }], Y: [/[+-]?\d+/, d("year")], YY: [n, function(m) {
        this.year = c(m);
      }], YYYY: [/\d{4}/, d("year")], Z: u, ZZ: u };
      function f(m) {
        var C, v;
        C = m, v = l && l.formats;
        for (var w = (m = C.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, (function(P, F, N) {
          var j = N && N.toUpperCase();
          return F || v[N] || i[N] || v[j].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, (function(z, A, O) {
            return A || O.slice(1);
          }));
        }))).match(s), y = w.length, S = 0; S < y; S += 1) {
          var x = w[S], D = p[x], M = D && D[0], k = D && D[1];
          w[S] = k ? { regex: M, parser: k } : x.replace(/^\[|\]$/g, "");
        }
        return function(P) {
          for (var F = {}, N = 0, j = 0; N < y; N += 1) {
            var z = w[N];
            if (typeof z == "string") j += z.length;
            else {
              var A = z.regex, O = z.parser, G = P.slice(j), I = A.exec(G)[0];
              O.call(F, I), P = P.replace(I, "");
            }
          }
          return (function(_) {
            var b = _.afternoon;
            if (b !== void 0) {
              var L = _.hours;
              b ? L < 12 && (_.hours += 12) : L === 12 && (_.hours = 0), delete _.afternoon;
            }
          })(F), F;
        };
      }
      return function(m, C, v) {
        v.p.customParseFormat = !0, m && m.parseTwoDigitYear && (c = m.parseTwoDigitYear);
        var w = C.prototype, y = w.parse;
        w.parse = function(S) {
          var x = S.date, D = S.utc, M = S.args;
          this.$u = D;
          var k = M[1];
          if (typeof k == "string") {
            var P = M[2] === !0, F = M[3] === !0, N = P || F, j = M[2];
            F && (j = M[2]), l = this.$locale(), !P && j && (l = v.Ls[j]), this.$d = (function(G, I, _, b) {
              try {
                if (["x", "X"].indexOf(I) > -1) return new Date((I === "X" ? 1e3 : 1) * G);
                var L = f(I)(G), U = L.year, K = L.month, Q = L.day, ie = L.hours, Pe = L.minutes, Ie = L.seconds, le = L.milliseconds, se = L.zone, ge = L.week, ce = /* @__PURE__ */ new Date(), ke = Q || (U || K ? 1 : ce.getDate()), _e = U || ce.getFullYear(), ee = 0;
                U && !K || (ee = K > 0 ? K - 1 : ce.getMonth());
                var de, fe = ie || 0, Ue = Pe || 0, oe = Ie || 0, we = le || 0;
                return se ? new Date(Date.UTC(_e, ee, ke, fe, Ue, oe, we + 60 * se.offset * 1e3)) : _ ? new Date(Date.UTC(_e, ee, ke, fe, Ue, oe, we)) : (de = new Date(_e, ee, ke, fe, Ue, oe, we), ge && (de = b(de).week(ge).toDate()), de);
              } catch {
                return /* @__PURE__ */ new Date("");
              }
            })(x, k, D, v), this.init(), j && j !== !0 && (this.$L = this.locale(j).$L), N && x != this.format(k) && (this.$d = /* @__PURE__ */ new Date("")), l = {};
          } else if (k instanceof Array) for (var z = k.length, A = 1; A <= z; A += 1) {
            M[1] = k[A - 1];
            var O = v.apply(this, M);
            if (O.isValid()) {
              this.$d = O.$d, this.$L = O.$L, this.init();
              break;
            }
            A === z && (this.$d = /* @__PURE__ */ new Date(""));
          }
          else y.call(this, S);
        };
      };
    }));
  })(Fn)), Fn.exports;
}
var KH = $H();
const YH = /* @__PURE__ */ bl(KH);
et.locale("pt-br");
et.extend(YH);
et.extend(UH);
const kh = (e) => e ? "toDate" in e ? e.toDate() : e : null, fB = ({
  value: e,
  onChange: t,
  label: i,
  format: s = "date",
  disabled: o,
  errorText: n,
  placeholder: r = "Selecionar data",
  minDate: a,
  maxDate: l,
  classNameInput: c,
  classNameContainer: d,
  withCalendar: u = !1,
  rounded: h = !0,
  color: g = "neutral",
  pickerMode: p = "modal"
}) => {
  const { main: f, contrast: m } = Me(g), [C, v] = V(!1), [w, y] = V(
    e ? et(kh(e)).format("YYYY-MM-DDTHH:mm") : ""
  );
  ve(() => {
    y(e ? et(kh(e)).format("YYYY-MM-DDTHH:mm") : "");
  }, [e]);
  const S = () => {
    if (!w) return "";
    const P = et(w);
    switch (s) {
      case "month-year":
        return P.format("MMM/YYYY");
      case "MMMM/YYYY":
        return P.format("MMMM/YYYY");
      case "datetime":
        return P.format("DD/MM/YYYY HH:mm");
      case "day":
        return P.format("DD");
      default:
        return P.format("DD/MM/YYYY");
    }
  }, x = () => {
    w && (t(et(w).toDate()), v(!1));
  }, D = (P, F) => typeof F == "number" ? et().add(F, "years").format("YYYY-MM-DD") : F ?? P.format("YYYY-MM-DD"), M = () => {
    o || (y(w || et().format("YYYY-MM-DDTHH:mm")), v(!0));
  }, k = h ? "99999px" : "6px";
  return /* @__PURE__ */ R.jsxs("div", { className: "relative", children: [
    /* @__PURE__ */ R.jsxs(
      "div",
      {
        onClick: () => {
          y(w || et().format("YYYY-MM-DDTHH:mm")), v(!0);
        },
        className: `relative flex flex-col ${d}`,
        children: [
          i && /* @__PURE__ */ R.jsx("label", { className: "text-xs font-medium !pl-6", children: i }),
          /* @__PURE__ */ R.jsxs("div", { className: "relative flex items-center w-full", onClick: M, children: [
            /* @__PURE__ */ R.jsx(
              "input",
              {
                type: "text",
                readOnly: !0,
                value: w ? S() : "",
                placeholder: r,
                disabled: o,
                style: { borderRadius: k, borderColor: f, color: m },
                className: `w-full !pr-4 !pl-8 !py-4 border outline-none placeholder-[var(--ion-color-medium)] ${c}`
              }
            ),
            u && /* @__PURE__ */ R.jsx(
              NH,
              {
                className: "absolute right-8 text-[24px] text-gray-500 hover:text-blue-600 transition-colors cursor-pointer"
              }
            )
          ] }),
          n && /* @__PURE__ */ R.jsxs(ao, { className: "text-[12px] !pl-6 text-[var(--ion-color-danger)]", children: [
            " ",
            n,
            " "
          ] })
        ]
      }
    ),
    p === "modal" && /* @__PURE__ */ R.jsx(
      Wh,
      {
        isOpen: C,
        onDidDismiss: () => v(!1),
        className: "custom-calendar-modal",
        children: /* @__PURE__ */ R.jsxs("div", { className: "!p-4 bg-white !rounded-lg shadow-lg", children: [
          /* @__PURE__ */ R.jsx(
            Yc,
            {
              locale: "pt-BR",
              value: w,
              min: D(et().subtract(10, "years").startOf("year"), a),
              max: D(et().add(50, "years").endOf("year"), l),
              presentation: s === "month-year" || s === "MMMM/YYYY" ? "month-year" : s === "datetime" ? "date-time" : "date",
              onIonChange: (P) => y(P.detail.value),
              showDefaultButtons: !1
            }
          ),
          /* @__PURE__ */ R.jsxs("div", { className: "flex justify-end mt-4 gap-2", children: [
            /* @__PURE__ */ R.jsx(Pn, { color: "medium", onClick: () => v(!1), children: "Cancelar" }),
            /* @__PURE__ */ R.jsx(Pn, { onClick: x, children: "Confirmar" })
          ] })
        ] })
      }
    ),
    p === "dropdown" && C && /* @__PURE__ */ R.jsx("div", { className: "absolute z-50 mt-2 bg-white !rounded-lg shadow-lg !p-3", children: /* @__PURE__ */ R.jsx(
      Yc,
      {
        locale: "pt-BR",
        value: w,
        min: D(et().subtract(10, "years").startOf("year"), a),
        max: D(et().add(50, "years").endOf("year"), l),
        presentation: s === "month-year" || s === "MMMM/YYYY" ? "month-year" : s === "datetime" ? "date-time" : "date",
        onIonChange: (P) => {
          y(P.detail.value), x();
        },
        showDefaultButtons: !1
      }
    ) })
  ] });
}, mB = ({
  messages: e,
  title: t,
  icon: i,
  buttonLabel: s,
  onButtonClick: o,
  color: n = "primary",
  colorBg: r = "#ecececbe"
}) => {
  const { main: a } = Me(n), l = X(() => {
    const c = e || ["Nenhum dado encontrado"], d = Math.floor(Math.random() * c.length);
    return c[d];
  }, [e]);
  return /* @__PURE__ */ R.jsx(
    "div",
    {
      style: {
        height: "100%",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        padding: "2rem",
        boxSizing: "border-box"
      },
      children: /* @__PURE__ */ R.jsxs(
        Te.div,
        {
          initial: { opacity: 0, y: 50, scale: 0.95 },
          animate: { opacity: 1, y: 0, scale: 1 },
          transition: { duration: 0.6, ease: "easeOut" },
          style: {
            textAlign: "center",
            fontSize: "1.2rem",
            fontStyle: "italic",
            color: "#555555",
            maxWidth: "400px",
            lineHeight: 1.4,
            userSelect: "none",
            boxShadow: "0 4px 15px rgba(0,0,0,0.1)",
            padding: "1rem 1.5rem",
            borderRadius: "12px",
            backgroundColor: r,
            alignItems: "center",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center"
          },
          children: [
            i ?? /* @__PURE__ */ R.jsx(hR, { size: 32, style: { marginBottom: 8 } }),
            t && /* @__PURE__ */ R.jsx("div", { style: { fontWeight: 600, marginBottom: 4 }, children: t }),
            /* @__PURE__ */ R.jsx("div", { children: l }),
            s && o && /* @__PURE__ */ R.jsx(
              "button",
              {
                onClick: o,
                style: {
                  marginTop: 12,
                  padding: "6px 12px",
                  borderRadius: 6,
                  border: "none",
                  backgroundColor: a,
                  color: "#fff",
                  cursor: "pointer"
                },
                children: s
              }
            )
          ]
        }
      )
    }
  );
};
function CB({
  items: e,
  getLabel: t,
  getValue: i,
  onSelect: s,
  placeholder: o = "Pesquisar...",
  color: n = "neutral",
  rounded: r = !0,
  fullWidth: a = !0,
  loading: l = !1,
  variant: c = "search",
  label: d
}) {
  const [u, h] = V(""), [g, p] = V(!1), f = H(null), { main: m, contrast: C } = Me(n), v = X(() => e.filter(
    (x) => t(x).toLowerCase().includes(u.toLowerCase())
  ), [e, u, t]), w = r ? "12px" : "6px", y = r ? "99999px" : "6px", S = () => {
    let x = f.current?.querySelector("input")?.clientHeight ?? 0;
    return c === "select" ? x += 20 : x += 10, /* @__PURE__ */ R.jsx(
      "div",
      {
        className: "absolute z-50 overflow-hidden max-h-64 overflow-y-auto shadow-lg",
        style: {
          width: a ? "100%" : "auto",
          border: `1px solid ${m}`,
          borderRadius: w,
          backgroundColor: "var(--ion-color-light)",
          top: x,
          // 16px de gap entre input e dropdown (ja contando com o padding interno dos inputs)
          left: 0
        },
        children: l ? /* @__PURE__ */ R.jsx("div", { className: "flex justify-center items-center p-4", children: /* @__PURE__ */ R.jsx(Ao, { name: "crescent", style: { color: m } }) }) : /* @__PURE__ */ R.jsxs(pv, { className: "!p-0", children: [
          v.map((D) => /* @__PURE__ */ R.jsx(
            Ca,
            {
              button: !0,
              onMouseDown: () => {
                s(D), h(t(D)), p(!1);
              },
              style: { color: C },
              className: "hover:bg-gray-100 transition-colors",
              children: /* @__PURE__ */ R.jsx(En, { children: t(D) })
            },
            i(D)
          )),
          v.length === 0 && /* @__PURE__ */ R.jsx(Ca, { children: /* @__PURE__ */ R.jsx(En, { className: "text-gray-500", children: "Nenhum resultado encontrado" }) })
        ] })
      }
    );
  };
  return c === "select" ? /* @__PURE__ */ R.jsxs(
    "div",
    {
      ref: f,
      className: `relative ${a ? "w-full" : "w-auto"} flex flex-col`,
      style: { minHeight: 72 },
      children: [
        d && /* @__PURE__ */ R.jsx("label", { className: "text-xs font-medium !pl-6", children: d }),
        /* @__PURE__ */ R.jsx(
          "input",
          {
            value: u,
            onChange: (x) => h(x.target.value),
            placeholder: o,
            onFocus: () => p(!0),
            onBlur: () => setTimeout(() => p(!1), 150),
            className: "w-full !pr-4 !pl-8 !py-4 border outline-none placeholder-[var(--ion-color-medium)]",
            style: {
              borderColor: m,
              borderRadius: y,
              color: C
            }
          }
        ),
        g && S()
      ]
    }
  ) : /* @__PURE__ */ R.jsxs(
    "div",
    {
      ref: f,
      className: `relative ${a ? "w-full" : "w-auto"}`,
      children: [
        /* @__PURE__ */ R.jsx(
          gv,
          {
            value: u,
            onIonInput: (x) => h(x.detail.value),
            placeholder: o,
            onIonFocus: () => p(!0),
            onIonBlur: () => setTimeout(() => p(!1), 150),
            onIonClear: () => {
              h(""), s(void 0);
            },
            style: {
              "--background": "var(--ion-color-light)",
              "--border-color": m,
              "--border-radius": y,
              color: C
            }
          }
        ),
        g && S()
      ]
    }
  );
}
const vB = ({
  icon: e = Ep,
  onClick: t,
  loading: i = !1,
  disabled: s = !1,
  color: o = "primary",
  className: n
}) => {
  const { main: r, contrast: a } = Me(o);
  return /* @__PURE__ */ R.jsx("div", { className: "relative w-full left-1/2 ", children: /* @__PURE__ */ R.jsx(
    Te.div,
    {
      initial: { y: 100, opacity: 0 },
      animate: { y: 0, opacity: 1 },
      transition: { type: "spring", stiffness: 120, damping: 15 },
      className: `fixed bottom-[40px]  z-50 ${n}`,
      children: /* @__PURE__ */ R.jsx(Uh, { vertical: "bottom", horizontal: "center", slot: "fixed", children: /* @__PURE__ */ R.jsx(
        ma,
        {
          onClick: t,
          disabled: s || i,
          style: { "--box-shadow": "none", "--background": r, "--color": a },
          children: i ? /* @__PURE__ */ R.jsx(Ao, { name: "crescent", color: a.includes("light") ? "light" : "dark" }) : W.createElement(e, { className: "text-[28px]" })
        }
      ) })
    }
  ) });
};
export {
  CB as CBAutocomplete,
  Rs as CBButton,
  JH as CBCard,
  rB as CBCheckbox,
  fB as CBDataPicker,
  uB as CBDataTable,
  mB as CBEmptyState,
  hB as CBFabButton,
  vB as CBFabButtonCenter,
  gB as CBFilterBar,
  iB as CBInput,
  oB as CBLoading,
  tB as CBModal,
  pB as CBMultiView,
  sB as CBSelect,
  lB as CBSelector,
  LH as CBStepperHorizontal,
  OH as CBStepperVertical,
  aB as CBTextArea,
  eB as CBToast,
  nB as CBTooltip,
  CR as CB_COLOR_CONTRAST_MAP,
  Tp as CB_COLOR_MAP,
  kH as useAGGridTheme,
  Me as useCBColor
};
